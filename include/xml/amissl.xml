<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE library SYSTEM "library.dtd">
<library name="amissl" basename="AmiSSLBase" openname="amissl.library">
	<include>exec/types.h</include>
	<include>dos/dos.h</include>
	<include>amissl/amissl.h</include>
	<interface name="main" version="1.0" struct="AmiSSLIFace" prefix="_AmiSSL_" asmprefix="IAmiSSL" global="IAmiSSL" m68ksupport="yes">
		<method name="Obtain" result="ULONG"/>
		<method name="Release" result="ULONG"/>
		<method name="Expunge" result="void" status="unimplemented"/>
		<method name="Clone" result="struct Interface *" status="unimplemented"/>
		<method name="InternalInitAmiSSL" result="void" status="private">
			<arg name="amisslinit" type="void *" m68kreg="a0"/>
		</method>
		<method name="InitAmiSSLA" result="long">
			<arg name="tagList" type="struct TagItem *" m68kreg="a0"/>
		</method>
		<method name="InitAmiSSL" result="long">
			<vararg name="tagList" type="Tag"/>
		</method>
		<method name="CleanupAmiSSLA" result="long">
			<arg name="tagList" type="struct TagItem *" m68kreg="a0"/>
		</method>
		<method name="CleanupAmiSSL" result="long">
			<vararg name="tagList" type="Tag"/>
		</method>
		<method name="IsCipherAvailable" result="long">
			<arg name="cipher" type="long" m68kreg="d0"/>
		</method>
		<method name="Reserved1" result="void" status="unimplemented"/>
		<method name="Reserved2" result="void" status="unimplemented"/>
		<method name="Reserved3" result="void" status="unimplemented"/>
		<method name="Reserved4" result="void" status="unimplemented"/>
		<method name="Reserved5" result="void" status="unimplemented"/>
		<method name="Reserved6" result="void" status="unimplemented"/>
		<method name="Reserved7" result="void" status="unimplemented"/>
		<method name="Reserved8" result="void" status="unimplemented"/>
		<method name="ASN1_TYPE_new" result="ASN1_TYPE *">
		</method>
		<method name="ASN1_TYPE_free" result="void">
			<arg name="a" type="ASN1_TYPE *" m68kreg="a0"/>
		</method>
		<method name="d2i_ASN1_TYPE" result="ASN1_TYPE *">
			<arg name="a" type="ASN1_TYPE **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_ASN1_TYPE" result="int">
			<arg name="a" type="ASN1_TYPE *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="ASN1_ANY_it" result="const ASN1_ITEM *">
		</method>
		<method name="ASN1_TYPE_get" result="int">
			<arg name="a" type="ASN1_TYPE *" m68kreg="a0"/>
		</method>
		<method name="ASN1_TYPE_set" result="void">
			<arg name="a" type="ASN1_TYPE *" m68kreg="a0"/>
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="value" type="void *" m68kreg="a1"/>
		</method>
		<method name="ASN1_OBJECT_new" result="ASN1_OBJECT *">
		</method>
		<method name="ASN1_OBJECT_free" result="void">
			<arg name="a" type="ASN1_OBJECT *" m68kreg="a0"/>
		</method>
		<method name="i2d_ASN1_OBJECT" result="int">
			<arg name="a" type="ASN1_OBJECT *" m68kreg="a0"/>
			<arg name="pp" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="c2i_ASN1_OBJECT" result="ASN1_OBJECT *">
			<arg name="a" type="ASN1_OBJECT **" m68kreg="a0"/>
			<arg name="pp" type="const unsigned char **" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
		</method>
		<method name="d2i_ASN1_OBJECT" result="ASN1_OBJECT *">
			<arg name="a" type="ASN1_OBJECT **" m68kreg="a0"/>
			<arg name="pp" type="const unsigned char **" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
		</method>
		<method name="ASN1_OBJECT_it" result="const ASN1_ITEM *">
		</method>
		<method name="ASN1_STRING_new" result="ASN1_STRING *">
		</method>
		<method name="ASN1_STRING_free" result="void">
			<arg name="a" type="ASN1_STRING *" m68kreg="a0"/>
		</method>
		<method name="ASN1_STRING_dup" result="ASN1_STRING *">
			<arg name="a" type="ASN1_STRING *" m68kreg="a0"/>
		</method>
		<method name="ASN1_STRING_type_new" result="ASN1_STRING *">
			<arg name="type" type="int" m68kreg="d0"/>
		</method>
		<method name="ASN1_STRING_cmp" result="int">
			<arg name="a" type="ASN1_STRING *" m68kreg="a0"/>
			<arg name="b" type="ASN1_STRING *" m68kreg="a1"/>
		</method>
		<method name="ASN1_STRING_set" result="int">
			<arg name="str" type="ASN1_STRING *" m68kreg="a0"/>
			<arg name="data" type="const void *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d0"/>
		</method>
		<method name="ASN1_STRING_length" result="int">
			<arg name="x" type="ASN1_STRING *" m68kreg="a0"/>
		</method>
		<method name="ASN1_STRING_length_set" result="void">
			<arg name="x" type="ASN1_STRING *" m68kreg="a0"/>
			<arg name="n" type="int" m68kreg="d0"/>
		</method>
		<method name="ASN1_STRING_type" result="int">
			<arg name="x" type="ASN1_STRING *" m68kreg="a0"/>
		</method>
		<method name="ASN1_STRING_data" result="unsigned char *">
			<arg name="x" type="ASN1_STRING *" m68kreg="a0"/>
		</method>
		<method name="ASN1_BIT_STRING_new" result="ASN1_BIT_STRING *">
		</method>
		<method name="ASN1_BIT_STRING_free" result="void">
			<arg name="a" type="ASN1_BIT_STRING *" m68kreg="a0"/>
		</method>
		<method name="d2i_ASN1_BIT_STRING" result="ASN1_BIT_STRING *">
			<arg name="a" type="ASN1_BIT_STRING **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_ASN1_BIT_STRING" result="int">
			<arg name="a" type="ASN1_BIT_STRING *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="ASN1_BIT_STRING_it" result="const ASN1_ITEM *">
		</method>
		<method name="i2c_ASN1_BIT_STRING" result="int">
			<arg name="a" type="ASN1_BIT_STRING *" m68kreg="a0"/>
			<arg name="pp" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="c2i_ASN1_BIT_STRING" result="ASN1_BIT_STRING *">
			<arg name="a" type="ASN1_BIT_STRING **" m68kreg="a0"/>
			<arg name="pp" type="const unsigned char **" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
		</method>
		<method name="ASN1_BIT_STRING_set" result="int">
			<arg name="a" type="ASN1_BIT_STRING *" m68kreg="a0"/>
			<arg name="d" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="int" m68kreg="d0"/>
		</method>
		<method name="ASN1_BIT_STRING_set_bit" result="int">
			<arg name="a" type="ASN1_BIT_STRING *" m68kreg="a0"/>
			<arg name="n" type="int" m68kreg="d0"/>
			<arg name="value" type="int" m68kreg="d1"/>
		</method>
		<method name="ASN1_BIT_STRING_get_bit" result="int">
			<arg name="a" type="ASN1_BIT_STRING *" m68kreg="a0"/>
			<arg name="n" type="int" m68kreg="d0"/>
		</method>
		<method name="ASN1_BIT_STRING_name_print" result="int">
			<arg name="out" type="BIO *" m68kreg="a0"/>
			<arg name="bs" type="ASN1_BIT_STRING *" m68kreg="a1"/>
			<arg name="tbl" type="BIT_STRING_BITNAME *" m68kreg="a2"/>
			<arg name="indent" type="int" m68kreg="d0"/>
		</method>
		<method name="ASN1_BIT_STRING_num_asc" result="int">
			<arg name="name" type="char *" m68kreg="a0"/>
			<arg name="tbl" type="BIT_STRING_BITNAME *" m68kreg="a1"/>
		</method>
		<method name="ASN1_BIT_STRING_set_asc" result="int">
			<arg name="bs" type="ASN1_BIT_STRING *" m68kreg="a0"/>
			<arg name="name" type="char *" m68kreg="a1"/>
			<arg name="value" type="int" m68kreg="d0"/>
			<arg name="tbl" type="BIT_STRING_BITNAME *" m68kreg="a2"/>
		</method>
		<method name="i2d_ASN1_BOOLEAN" result="int">
			<arg name="a" type="int" m68kreg="d0"/>
			<arg name="pp" type="unsigned char **" m68kreg="a0"/>
		</method>
		<method name="d2i_ASN1_BOOLEAN" result="int">
			<arg name="a" type="int *" m68kreg="a0"/>
			<arg name="pp" type="const unsigned char **" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
		</method>
		<method name="ASN1_INTEGER_new" result="ASN1_INTEGER *">
		</method>
		<method name="ASN1_INTEGER_free" result="void">
			<arg name="a" type="ASN1_INTEGER *" m68kreg="a0"/>
		</method>
		<method name="d2i_ASN1_INTEGER" result="ASN1_INTEGER *">
			<arg name="a" type="ASN1_INTEGER **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_ASN1_INTEGER" result="int">
			<arg name="a" type="ASN1_INTEGER *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="ASN1_INTEGER_it" result="const ASN1_ITEM *">
		</method>
		<method name="i2c_ASN1_INTEGER" result="int">
			<arg name="a" type="ASN1_INTEGER *" m68kreg="a0"/>
			<arg name="pp" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="c2i_ASN1_INTEGER" result="ASN1_INTEGER *">
			<arg name="a" type="ASN1_INTEGER **" m68kreg="a0"/>
			<arg name="pp" type="const unsigned char **" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
		</method>
		<method name="d2i_ASN1_UINTEGER" result="ASN1_INTEGER *">
			<arg name="a" type="ASN1_INTEGER **" m68kreg="a0"/>
			<arg name="pp" type="const unsigned char **" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
		</method>
		<method name="ASN1_INTEGER_dup" result="ASN1_INTEGER *">
			<arg name="x" type="ASN1_INTEGER *" m68kreg="a0"/>
		</method>
		<method name="ASN1_INTEGER_cmp" result="int">
			<arg name="x" type="ASN1_INTEGER *" m68kreg="a0"/>
			<arg name="y" type="ASN1_INTEGER *" m68kreg="a1"/>
		</method>
		<method name="ASN1_ENUMERATED_new" result="ASN1_ENUMERATED *">
		</method>
		<method name="ASN1_ENUMERATED_free" result="void">
			<arg name="a" type="ASN1_ENUMERATED *" m68kreg="a0"/>
		</method>
		<method name="d2i_ASN1_ENUMERATED" result="ASN1_ENUMERATED *">
			<arg name="a" type="ASN1_ENUMERATED **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_ASN1_ENUMERATED" result="int">
			<arg name="a" type="ASN1_ENUMERATED *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="ASN1_ENUMERATED_it" result="const ASN1_ITEM *">
		</method>
		<method name="ASN1_UTCTIME_check" result="int">
			<arg name="a" type="ASN1_UTCTIME *" m68kreg="a0"/>
		</method>
		<method name="ASN1_UTCTIME_set" result="ASN1_UTCTIME *">
			<arg name="s" type="ASN1_UTCTIME *" m68kreg="a0"/>
			<arg name="t" type="time_t" m68kreg="d0"/>
		</method>
		<method name="ASN1_UTCTIME_set_string" result="int">
			<arg name="s" type="ASN1_UTCTIME *" m68kreg="a0"/>
			<arg name="str" type="char *" m68kreg="a1"/>
		</method>
		<method name="ASN1_UTCTIME_cmp_time_t" result="int">
			<arg name="s" type="const ASN1_UTCTIME *" m68kreg="a0"/>
			<arg name="t" type="time_t" m68kreg="d0"/>
		</method>
		<method name="ASN1_GENERALIZEDTIME_check" result="int">
			<arg name="a" type="ASN1_GENERALIZEDTIME *" m68kreg="a0"/>
		</method>
		<method name="ASN1_GENERALIZEDTIME_set" result="ASN1_GENERALIZEDTIME *">
			<arg name="s" type="ASN1_GENERALIZEDTIME *" m68kreg="a0"/>
			<arg name="t" type="time_t" m68kreg="d0"/>
		</method>
		<method name="ASN1_GENERALIZEDTIME_set_string" result="int">
			<arg name="s" type="ASN1_GENERALIZEDTIME *" m68kreg="a0"/>
			<arg name="str" type="char *" m68kreg="a1"/>
		</method>
		<method name="ASN1_OCTET_STRING_new" result="ASN1_OCTET_STRING *">
		</method>
		<method name="ASN1_OCTET_STRING_free" result="void">
			<arg name="a" type="ASN1_OCTET_STRING *" m68kreg="a0"/>
		</method>
		<method name="d2i_ASN1_OCTET_STRING" result="ASN1_OCTET_STRING *">
			<arg name="a" type="ASN1_OCTET_STRING **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_ASN1_OCTET_STRING" result="int">
			<arg name="a" type="ASN1_OCTET_STRING *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="ASN1_OCTET_STRING_it" result="const ASN1_ITEM *">
		</method>
		<method name="ASN1_OCTET_STRING_dup" result="ASN1_OCTET_STRING *">
			<arg name="a" type="ASN1_OCTET_STRING *" m68kreg="a0"/>
		</method>
		<method name="ASN1_OCTET_STRING_cmp" result="int">
			<arg name="a" type="ASN1_OCTET_STRING *" m68kreg="a0"/>
			<arg name="b" type="ASN1_OCTET_STRING *" m68kreg="a1"/>
		</method>
		<method name="ASN1_OCTET_STRING_set" result="int">
			<arg name="str" type="ASN1_OCTET_STRING *" m68kreg="a0"/>
			<arg name="data" type="unsigned char *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d0"/>
		</method>
		<method name="ASN1_VISIBLESTRING_new" result="ASN1_VISIBLESTRING *">
		</method>
		<method name="ASN1_VISIBLESTRING_free" result="void">
			<arg name="a" type="ASN1_VISIBLESTRING *" m68kreg="a0"/>
		</method>
		<method name="d2i_ASN1_VISIBLESTRING" result="ASN1_VISIBLESTRING *">
			<arg name="a" type="ASN1_VISIBLESTRING **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_ASN1_VISIBLESTRING" result="int">
			<arg name="a" type="ASN1_VISIBLESTRING *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="ASN1_VISIBLESTRING_it" result="const ASN1_ITEM *">
		</method>
		<method name="ASN1_UNIVERSALSTRING_new" result="ASN1_UNIVERSALSTRING *">
		</method>
		<method name="ASN1_UNIVERSALSTRING_free" result="void">
			<arg name="a" type="ASN1_UNIVERSALSTRING *" m68kreg="a0"/>
		</method>
		<method name="d2i_ASN1_UNIVERSALSTRING" result="ASN1_UNIVERSALSTRING *">
			<arg name="a" type="ASN1_UNIVERSALSTRING **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_ASN1_UNIVERSALSTRING" result="int">
			<arg name="a" type="ASN1_UNIVERSALSTRING *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="ASN1_UNIVERSALSTRING_it" result="const ASN1_ITEM *">
		</method>
		<method name="ASN1_UTF8STRING_new" result="ASN1_UTF8STRING *">
		</method>
		<method name="ASN1_UTF8STRING_free" result="void">
			<arg name="a" type="ASN1_UTF8STRING *" m68kreg="a0"/>
		</method>
		<method name="d2i_ASN1_UTF8STRING" result="ASN1_UTF8STRING *">
			<arg name="a" type="ASN1_UTF8STRING **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_ASN1_UTF8STRING" result="int">
			<arg name="a" type="ASN1_UTF8STRING *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="ASN1_UTF8STRING_it" result="const ASN1_ITEM *">
		</method>
		<method name="ASN1_NULL_new" result="ASN1_NULL *">
		</method>
		<method name="ASN1_NULL_free" result="void">
			<arg name="a" type="ASN1_NULL *" m68kreg="a0"/>
		</method>
		<method name="d2i_ASN1_NULL" result="ASN1_NULL *">
			<arg name="a" type="ASN1_NULL **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_ASN1_NULL" result="int">
			<arg name="a" type="ASN1_NULL *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="ASN1_NULL_it" result="const ASN1_ITEM *">
		</method>
		<method name="ASN1_BMPSTRING_new" result="ASN1_BMPSTRING *">
		</method>
		<method name="ASN1_BMPSTRING_free" result="void">
			<arg name="a" type="ASN1_BMPSTRING *" m68kreg="a0"/>
		</method>
		<method name="d2i_ASN1_BMPSTRING" result="ASN1_BMPSTRING *">
			<arg name="a" type="ASN1_BMPSTRING **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_ASN1_BMPSTRING" result="int">
			<arg name="a" type="ASN1_BMPSTRING *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="ASN1_BMPSTRING_it" result="const ASN1_ITEM *">
		</method>
		<method name="UTF8_getc" result="int">
			<arg name="str" type="const unsigned char *" m68kreg="a0"/>
			<arg name="len" type="int" m68kreg="d0"/>
			<arg name="val" type="unsigned long *" m68kreg="a1"/>
		</method>
		<method name="UTF8_putc" result="int">
			<arg name="str" type="unsigned char *" m68kreg="a0"/>
			<arg name="len" type="int" m68kreg="d0"/>
			<arg name="value" type="unsigned long" m68kreg="d1"/>
		</method>
		<method name="ASN1_PRINTABLE_new" result="ASN1_STRING *">
		</method>
		<method name="ASN1_PRINTABLE_free" result="void">
			<arg name="a" type="ASN1_STRING *" m68kreg="a0"/>
		</method>
		<method name="d2i_ASN1_PRINTABLE" result="ASN1_STRING *">
			<arg name="a" type="ASN1_STRING **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_ASN1_PRINTABLE" result="int">
			<arg name="a" type="ASN1_STRING *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="ASN1_PRINTABLE_it" result="const ASN1_ITEM *">
		</method>
		<method name="DIRECTORYSTRING_new" result="ASN1_STRING *">
		</method>
		<method name="DIRECTORYSTRING_free" result="void">
			<arg name="a" type="ASN1_STRING *" m68kreg="a0"/>
		</method>
		<method name="d2i_DIRECTORYSTRING" result="ASN1_STRING *">
			<arg name="a" type="ASN1_STRING **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_DIRECTORYSTRING" result="int">
			<arg name="a" type="ASN1_STRING *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="DIRECTORYSTRING_it" result="const ASN1_ITEM *">
		</method>
		<method name="DISPLAYTEXT_new" result="ASN1_STRING *">
		</method>
		<method name="DISPLAYTEXT_free" result="void">
			<arg name="a" type="ASN1_STRING *" m68kreg="a0"/>
		</method>
		<method name="d2i_DISPLAYTEXT" result="ASN1_STRING *">
			<arg name="a" type="ASN1_STRING **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_DISPLAYTEXT" result="int">
			<arg name="a" type="ASN1_STRING *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="DISPLAYTEXT_it" result="const ASN1_ITEM *">
		</method>
		<method name="ASN1_PRINTABLESTRING_new" result="ASN1_PRINTABLESTRING *">
		</method>
		<method name="ASN1_PRINTABLESTRING_free" result="void">
			<arg name="a" type="ASN1_PRINTABLESTRING *" m68kreg="a0"/>
		</method>
		<method name="d2i_ASN1_PRINTABLESTRING" result="ASN1_PRINTABLESTRING *">
			<arg name="a" type="ASN1_PRINTABLESTRING **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_ASN1_PRINTABLESTRING" result="int">
			<arg name="a" type="ASN1_PRINTABLESTRING *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="ASN1_PRINTABLESTRING_it" result="const ASN1_ITEM *">
		</method>
		<method name="ASN1_T61STRING_new" result="ASN1_T61STRING *">
		</method>
		<method name="ASN1_T61STRING_free" result="void">
			<arg name="a" type="ASN1_T61STRING *" m68kreg="a0"/>
		</method>
		<method name="d2i_ASN1_T61STRING" result="ASN1_T61STRING *">
			<arg name="a" type="ASN1_T61STRING **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_ASN1_T61STRING" result="int">
			<arg name="a" type="ASN1_T61STRING *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="ASN1_T61STRING_it" result="const ASN1_ITEM *">
		</method>
		<method name="ASN1_IA5STRING_new" result="ASN1_IA5STRING *">
		</method>
		<method name="ASN1_IA5STRING_free" result="void">
			<arg name="a" type="ASN1_IA5STRING *" m68kreg="a0"/>
		</method>
		<method name="d2i_ASN1_IA5STRING" result="ASN1_IA5STRING *">
			<arg name="a" type="ASN1_IA5STRING **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_ASN1_IA5STRING" result="int">
			<arg name="a" type="ASN1_IA5STRING *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="ASN1_IA5STRING_it" result="const ASN1_ITEM *">
		</method>
		<method name="ASN1_GENERALSTRING_new" result="ASN1_GENERALSTRING *">
		</method>
		<method name="ASN1_GENERALSTRING_free" result="void">
			<arg name="a" type="ASN1_GENERALSTRING *" m68kreg="a0"/>
		</method>
		<method name="d2i_ASN1_GENERALSTRING" result="ASN1_GENERALSTRING *">
			<arg name="a" type="ASN1_GENERALSTRING **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_ASN1_GENERALSTRING" result="int">
			<arg name="a" type="ASN1_GENERALSTRING *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **"  m68kreg="a1"/>
		</method>
		<method name="ASN1_GENERALSTRING_it" result="const ASN1_ITEM *">
		</method>
		<method name="ASN1_UTCTIME_new" result="ASN1_UTCTIME *">
		</method>
		<method name="ASN1_UTCTIME_free" result="void">
			<arg name="a" type="ASN1_UTCTIME *" m68kreg="a0"/>
		</method>
		<method name="d2i_ASN1_UTCTIME" result="ASN1_UTCTIME *">
			<arg name="a" type="ASN1_UTCTIME **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_ASN1_UTCTIME" result="int">
			<arg name="a" type="ASN1_UTCTIME *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="ASN1_UTCTIME_it" result="const ASN1_ITEM *">
		</method>
		<method name="ASN1_GENERALIZEDTIME_new" result="ASN1_GENERALIZEDTIME *">
		</method>
		<method name="ASN1_GENERALIZEDTIME_free" result="void">
			<arg name="a" type="ASN1_GENERALIZEDTIME *" m68kreg="a0"/>
		</method>
		<method name="d2i_ASN1_GENERALIZEDTIME" result="ASN1_GENERALIZEDTIME *">
			<arg name="a" type="ASN1_GENERALIZEDTIME **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_ASN1_GENERALIZEDTIME" result="int">
			<arg name="a" type="ASN1_GENERALIZEDTIME *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="ASN1_GENERALIZEDTIME_it" result="const ASN1_ITEM *">
		</method>
		<method name="ASN1_TIME_new" result="ASN1_TIME *">
		</method>
		<method name="ASN1_TIME_free" result="void">
			<arg name="a" type="ASN1_TIME *" m68kreg="a0"/>
		</method>
		<method name="d2i_ASN1_TIME" result="ASN1_TIME *">
			<arg name="a" type="ASN1_TIME **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_ASN1_TIME" result="int">
			<arg name="a" type="ASN1_TIME *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="ASN1_TIME_it" result="const ASN1_ITEM *">
		</method>
		<method name="ASN1_TIME_set" result="ASN1_TIME *">
			<arg name="s" type="ASN1_TIME *" m68kreg="a0"/>
			<arg name="t" type="time_t" m68kreg="d0"/>
		</method>
		<method name="ASN1_TIME_check" result="int">
			<arg name="t" type="ASN1_TIME *" m68kreg="a0"/>
		</method>
		<method name="ASN1_TIME_to_generalizedtime" result="ASN1_GENERALIZEDTIME *">
			<arg name="t" type="ASN1_TIME *" m68kreg="a0"/>
			<arg name="out" type="ASN1_GENERALIZEDTIME **" m68kreg="a1"/>
		</method>
		<method name="i2d_ASN1_SET" result="int">
			<arg name="a" type="STACK *" m68kreg="a0"/>
			<arg name="pp" type="unsigned char **" m68kreg="a1"/>
			<arg name="func" type="int (*)()" m68kreg="a2"/>
			<arg name="ex_tag" type="int" m68kreg="d0"/>
			<arg name="ex_class" type="int" m68kreg="d1"/>
			<arg name="is_set" type="int" m68kreg="d2"/>
		</method>
		<method name="d2i_ASN1_SET" result="STACK *">
			<arg name="a" type="STACK **" m68kreg="a0"/>
			<arg name="pp" type="const unsigned char **" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="d2i" type="d2i_of_void *" m68kreg="a2"/>
			<arg name="free_func" type="void (*)(void *)" m68kreg="a3"/>
			<arg name="ex_tag" type="int" m68kreg="d1"/>
			<arg name="ex_class" type="int" m68kreg="d2"/>
		</method>
		<method name="i2a_ASN1_INTEGER" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="a" type="ASN1_INTEGER *" m68kreg="a1"/>
		</method>
		<method name="a2i_ASN1_INTEGER" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="bs" type="ASN1_INTEGER *" m68kreg="a1"/>
			<arg name="buf" type="char *" m68kreg="a2"/>
			<arg name="size" type="int" m68kreg="d0"/>
		</method>
		<method name="i2a_ASN1_ENUMERATED" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="a" type="ASN1_ENUMERATED *" m68kreg="a1"/>
		</method>
		<method name="a2i_ASN1_ENUMERATED" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="bs" type="ASN1_ENUMERATED *" m68kreg="a1"/>
			<arg name="buf" type="char *" m68kreg="a2"/>
			<arg name="size" type="int" m68kreg="d0"/>
		</method>
		<method name="i2a_ASN1_OBJECT" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="a" type="ASN1_OBJECT *" m68kreg="a1"/>
		</method>
		<method name="a2i_ASN1_STRING" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="bs" type="ASN1_STRING *" m68kreg="a1"/>
			<arg name="buf" type="char *" m68kreg="a2"/>
			<arg name="size" type="int" m68kreg="d0"/>
		</method>
		<method name="i2a_ASN1_STRING" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="a" type="ASN1_STRING *" m68kreg="a1"/>
			<arg name="type" type="int" m68kreg="d0"/>
		</method>
		<method name="i2t_ASN1_OBJECT" result="int">
			<arg name="buf" type="char *" m68kreg="a0"/>
			<arg name="buf_len" type="int" m68kreg="d0"/>
			<arg name="a" type="ASN1_OBJECT *" m68kreg="a1"/>
		</method>
		<method name="a2d_ASN1_OBJECT" result="int">
			<arg name="out" type="unsigned char *" m68kreg="a0"/>
			<arg name="olen" type="int" m68kreg="d0"/>
			<arg name="buf" type="const char *" m68kreg="a1"/>
			<arg name="num" type="int" m68kreg="d1"/>
		</method>
		<method name="ASN1_OBJECT_create" result="ASN1_OBJECT *">
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="data" type="unsigned char *" m68kreg="a0"/>
			<arg name="len" type="int" m68kreg="d1"/>
			<arg name="sn" type="const char *" m68kreg="a1"/>
			<arg name="ln" type="const char *" m68kreg="a2"/>
		</method>
		<method name="ASN1_INTEGER_set" result="int">
			<arg name="a" type="ASN1_INTEGER *" m68kreg="a0"/>
			<arg name="v" type="long" m68kreg="d0"/>
		</method>
		<method name="ASN1_INTEGER_get" result="long">
			<arg name="a" type="ASN1_INTEGER *" m68kreg="a0"/>
		</method>
		<method name="BN_to_ASN1_INTEGER" result="ASN1_INTEGER *">
			<arg name="bn" type="BIGNUM *" m68kreg="a0"/>
			<arg name="ai" type="ASN1_INTEGER *" m68kreg="a1"/>
		</method>
		<method name="ASN1_INTEGER_to_BN" result="BIGNUM *">
			<arg name="ai" type="ASN1_INTEGER *" m68kreg="a0"/>
			<arg name="bn" type="BIGNUM *" m68kreg="a1"/>
		</method>
		<method name="ASN1_ENUMERATED_set" result="int">
			<arg name="a" type="ASN1_ENUMERATED *" m68kreg="a0"/>
			<arg name="v" type="long" m68kreg="d0"/>
		</method>
		<method name="ASN1_ENUMERATED_get" result="long">
			<arg name="a" type="ASN1_ENUMERATED *" m68kreg="a0"/>
		</method>
		<method name="BN_to_ASN1_ENUMERATED" result="ASN1_ENUMERATED *">
			<arg name="bn" type="BIGNUM *" m68kreg="a0"/>
			<arg name="ai" type="ASN1_ENUMERATED *" m68kreg="a1"/>
		</method>
		<method name="ASN1_ENUMERATED_to_BN" result="BIGNUM *">
			<arg name="ai" type="ASN1_ENUMERATED *" m68kreg="a0"/>
			<arg name="bn" type="BIGNUM *" m68kreg="a1"/>
		</method>
		<method name="ASN1_PRINTABLE_type" result="int">
			<arg name="s" type="const unsigned char *" m68kreg="a0"/>
			<arg name="max" type="int" m68kreg="d0"/>
		</method>
		<method name="i2d_ASN1_bytes" result="int">
			<arg name="a" type="ASN1_STRING *" m68kreg="a0"/>
			<arg name="pp" type="unsigned char **" m68kreg="a1"/>
			<arg name="tag" type="int" m68kreg="d0"/>
			<arg name="xclass" type="int" m68kreg="d1"/>
		</method>
		<method name="d2i_ASN1_bytes" result="ASN1_STRING *">
			<arg name="a" type="ASN1_STRING **" m68kreg="a0"/>
			<arg name="pp" type="const unsigned char **" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="Ptag" type="int" m68kreg="d1"/>
			<arg name="Pclass" type="int" m68kreg="d2"/>
		</method>
		<method name="ASN1_tag2bit" result="unsigned long">
			<arg name="tag" type="int" m68kreg="d0"/>
		</method>
		<method name="d2i_ASN1_type_bytes" result="ASN1_STRING *">
			<arg name="a" type="ASN1_STRING **" m68kreg="a0"/>
			<arg name="pp" type="const unsigned char **" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="type" type="int" m68kreg="d1"/>
		</method>
		<method name="asn1_Finish" result="int">
			<arg name="c" type="ASN1_CTX *" m68kreg="a0"/>
		</method>
		<method name="ASN1_get_object" result="int">
			<arg name="pp" type="const unsigned char **" m68kreg="a0"/>
			<arg name="plength" type="long *" m68kreg="a1"/>
			<arg name="ptag" type="int *" m68kreg="a2"/>
			<arg name="pclass" type="int *" m68kreg="a3"/>
			<arg name="omax" type="long" m68kreg="d0"/>
		</method>
		<method name="ASN1_check_infinite_end" result="int">
			<arg name="p" type="unsigned char **" m68kreg="a0"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="ASN1_put_object" result="void">
			<arg name="pp" type="unsigned char **" m68kreg="a0"/>
			<arg name="constructed" type="int" m68kreg="d0"/>
			<arg name="length" type="int" m68kreg="d1"/>
			<arg name="tag" type="int" m68kreg="d2"/>
			<arg name="xclass" type="int" m68kreg="d3"/>
		</method>
		<method name="ASN1_object_size" result="int">
			<arg name="constructed" type="int" m68kreg="d0"/>
			<arg name="length" type="int" m68kreg="d1"/>
			<arg name="tag" type="int" m68kreg="d2"/>
		</method>
		<method name="ASN1_dup" result="void *">
			<arg name="i2d" type="i2d_of_void *" m68kreg="a0"/>
			<arg name="d2i" type="d2i_of_void *" m68kreg="a1"/>
			<arg name="x" type="char *" m68kreg="a2"/>
		</method>
		<method name="ASN1_item_dup" result="void *">
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a0"/>
			<arg name="x" type="void *" m68kreg="a1"/>
		</method>
		<method name="ASN1_STRING_to_UTF8" result="int">
			<arg name="out" type="unsigned char **" m68kreg="a0"/>
			<arg name="in" type="ASN1_STRING *" m68kreg="a1"/>
		</method>
		<method name="ASN1_d2i_bio" result="void *">
			<arg name="xnew" type="void * (*)(void)" m68kreg="a0"/>
			<arg name="d2i" type="d2i_of_void *" m68kreg="a1"/>
			<arg name="in" type="BIO *" m68kreg="a2"/>
			<arg name="x" type="void **" m68kreg="a3"/>
		</method>
		<method name="ASN1_item_d2i_bio" result="void *">
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a0"/>
			<arg name="in" type="BIO *" m68kreg="a1"/>
			<arg name="x" type="void *" m68kreg="a2"/>
		</method>
		<method name="ASN1_i2d_bio" result="int">
			<arg name="i2d" type="i2d_of_void *" m68kreg="a0"/>
			<arg name="out" type="BIO *" m68kreg="a1"/>
			<arg name="x" type="unsigned char *" m68kreg="a2"/>
		</method>
		<method name="ASN1_item_i2d_bio" result="int">
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a0"/>
			<arg name="out" type="BIO *" m68kreg="a1"/>
			<arg name="x" type="void *" m68kreg="a2"/>
		</method>
		<method name="ASN1_UTCTIME_print" result="int">
			<arg name="fp" type="BIO *" m68kreg="a0"/>
			<arg name="a" type="ASN1_UTCTIME *" m68kreg="a1"/>
		</method>
		<method name="ASN1_GENERALIZEDTIME_print" result="int">
			<arg name="fp" type="BIO *" m68kreg="a0"/>
			<arg name="a" type="ASN1_GENERALIZEDTIME *" m68kreg="a1"/>
		</method>
		<method name="ASN1_TIME_print" result="int">
			<arg name="fp" type="BIO *" m68kreg="a0"/>
			<arg name="a" type="ASN1_TIME *" m68kreg="a1"/>
		</method>
		<method name="ASN1_STRING_print" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="v" type="ASN1_STRING *" m68kreg="a1"/>
		</method>
		<method name="ASN1_STRING_print_ex" result="int">
			<arg name="out" type="BIO *" m68kreg="a0"/>
			<arg name="str" type="ASN1_STRING *" m68kreg="a1"/>
			<arg name="flags" type="unsigned long" m68kreg="d0"/>
		</method>
		<method name="ASN1_parse" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="pp" type="unsigned char *" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
			<arg name="indent" type="int" m68kreg="d1"/>
		</method>
		<method name="ASN1_parse_dump" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="pp" type="unsigned char *" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
			<arg name="indent" type="int" m68kreg="d1"/>
			<arg name="dump" type="int" m68kreg="d2"/>
		</method>
		<method name="ASN1_tag2str" result="const char *">
			<arg name="tag" type="int" m68kreg="d0"/>
		</method>
		<method name="i2d_ASN1_HEADER" result="int">
			<arg name="a" type="ASN1_HEADER *" m68kreg="a0"/>
			<arg name="pp" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="d2i_ASN1_HEADER" result="ASN1_HEADER *">
			<arg name="a" type="ASN1_HEADER **" m68kreg="a0"/>
			<arg name="pp" type="const unsigned char **" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
		</method>
		<method name="ASN1_HEADER_new" result="ASN1_HEADER *">
		</method>
		<method name="ASN1_HEADER_free" result="void">
			<arg name="a" type="ASN1_HEADER *" m68kreg="a0"/>
		</method>
		<method name="ASN1_UNIVERSALSTRING_to_string" result="int">
			<arg name="s" type="ASN1_UNIVERSALSTRING *" m68kreg="a0"/>
		</method>
		<method name="X509_asn1_meth" result="ASN1_METHOD *">
		</method>
		<method name="RSAPrivateKey_asn1_meth" result="ASN1_METHOD *">
		</method>
		<method name="ASN1_IA5STRING_asn1_meth" result="ASN1_METHOD *">
		</method>
		<method name="ASN1_BIT_STRING_asn1_meth" result="ASN1_METHOD *">
		</method>
		<method name="ASN1_TYPE_set_octetstring" result="int">
			<arg name="a" type="ASN1_TYPE *" m68kreg="a0"/>
			<arg name="data" type="unsigned char *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d0"/>
		</method>
		<method name="ASN1_TYPE_get_octetstring" result="int">
			<arg name="a" type="ASN1_TYPE *" m68kreg="a0"/>
			<arg name="data" type="unsigned char *" m68kreg="a1"/>
			<arg name="max_len" type="int" m68kreg="d0"/>
		</method>
		<method name="ASN1_TYPE_set_int_octetstring" result="int">
			<arg name="a" type="ASN1_TYPE *" m68kreg="a0"/>
			<arg name="num" type="long" m68kreg="d0"/>
			<arg name="data" type="unsigned char *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d1"/>
		</method>
		<method name="ASN1_TYPE_get_int_octetstring" result="int">
			<arg name="a" type="ASN1_TYPE *" m68kreg="a0"/>
			<arg name="num" type="long *" m68kreg="a1"/>
			<arg name="data" type="unsigned char *" m68kreg="a2"/>
			<arg name="max_len" type="int" m68kreg="d0"/>
		</method>
		<method name="ASN1_seq_unpack" result="STACK *">
			<arg name="buf" type="const unsigned char *" m68kreg="a0"/>
			<arg name="len" type="int" m68kreg="d0"/>
			<arg name="d2i" type="d2i_of_void *" m68kreg="a1"/>
			<arg name="free_func" type="void (*)(void *)" m68kreg="a2"/>
		</method>
		<method name="ASN1_seq_pack" result="unsigned char *">
			<arg name="safes" type="STACK *" m68kreg="a0"/>
			<arg name="i2d" type="int (*)()" m68kreg="a1"/>
			<arg name="buf" type="unsigned char **" m68kreg="a2"/>
			<arg name="len" type="int *" m68kreg="a3"/>
		</method>
		<method name="ASN1_unpack_string" result="void *">
			<arg name="oct" type="ASN1_STRING *" m68kreg="a0"/>
			<arg name="d2i" type="d2i_of_void *" m68kreg="a1"/>
		</method>
		<method name="ASN1_item_unpack" result="void *">
			<arg name="oct" type="ASN1_STRING *" m68kreg="a0"/>
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
		</method>
		<method name="ASN1_pack_string" result="ASN1_STRING *">
			<arg name="obj" type="void *" m68kreg="a0"/>
			<arg name="i2d" type="int (*)()" m68kreg="a1"/>
			<arg name="oct" type="ASN1_OCTET_STRING **" m68kreg="a2"/>
		</method>
		<method name="ASN1_item_pack" result="ASN1_STRING *">
			<arg name="obj" type="void *" m68kreg="a0"/>
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
			<arg name="oct" type="ASN1_OCTET_STRING **" m68kreg="a2"/>
		</method>
		<method name="ASN1_STRING_set_default_mask" result="void">
			<arg name="mask" type="unsigned long" m68kreg="d0"/>
		</method>
		<method name="ASN1_STRING_set_default_mask_asc" result="int">
			<arg name="p" type="char *" m68kreg="a0"/>
		</method>
		<method name="ASN1_STRING_get_default_mask" result="unsigned long">
		</method>
		<method name="ASN1_mbstring_copy" result="int">
			<arg name="out" type="ASN1_STRING **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d0"/>
			<arg name="inform" type="int" m68kreg="d1"/>
			<arg name="mask" type="unsigned long" m68kreg="d2"/>
		</method>
		<method name="ASN1_mbstring_ncopy" result="int">
			<arg name="out" type="ASN1_STRING **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d0"/>
			<arg name="inform" type="int" m68kreg="d1"/>
			<arg name="mask" type="unsigned long" m68kreg="d2"/>
			<arg name="minsize" type="long" m68kreg="d3"/>
			<arg name="maxsize" type="long" m68kreg="d4"/>
		</method>
		<method name="ASN1_STRING_set_by_NID" result="ASN1_STRING *">
			<arg name="out" type="ASN1_STRING **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char *" m68kreg="a1"/>
			<arg name="inlen" type="int" m68kreg="d0"/>
			<arg name="inform" type="int" m68kreg="d1"/>
			<arg name="nid" type="int" m68kreg="d2"/>
		</method>
		<method name="ASN1_STRING_TABLE_get" result="ASN1_STRING_TABLE *">
			<arg name="nid" type="int" m68kreg="d0"/>
		</method>
		<method name="ASN1_STRING_TABLE_add" result="int">
			<arg name="a" type="int" m68kreg="d0"/>
			<arg name="b" type="long" m68kreg="d1"/>
			<arg name="c" type="long" m68kreg="d2"/>
			<arg name="d" type="unsigned long" m68kreg="d3"/>
			<arg name="e" type="unsigned long" m68kreg="d4"/>
		</method>
		<method name="ASN1_STRING_TABLE_cleanup" result="void">
		</method>
		<method name="ASN1_item_new" result="ASN1_VALUE *">
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a0"/>
		</method>
		<method name="ASN1_item_free" result="void">
			<arg name="val" type="ASN1_VALUE *" m68kreg="a0"/>
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
		</method>
		<method name="ASN1_item_d2i" result="ASN1_VALUE *">
			<arg name="val" type="ASN1_VALUE **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a2"/>
		</method>
		<method name="ASN1_item_i2d" result="int">
			<arg name="val" type="ASN1_VALUE *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a2"/>
		</method>
		<method name="ASN1_add_oid_module" result="void">
		</method>
		<method name="ERR_load_ASN1_strings" result="void">
		</method>
		<method name="asn1_GetSequence" result="int">
			<arg name="c" type="ASN1_const_CTX *" m68kreg="a0"/>
			<arg name="length" type="long *" m68kreg="a1"/>
		</method>
		<method name="asn1_add_error" result="void">
			<arg name="address" type="unsigned char *" m68kreg="a0"/>
			<arg name="offset" type="int" m68kreg="d0"/>
		</method>
		<method name="ASN1_BOOLEAN_it" result="const ASN1_ITEM *">
		</method>
		<method name="ASN1_TBOOLEAN_it" result="const ASN1_ITEM *">
		</method>
		<method name="ASN1_FBOOLEAN_it" result="const ASN1_ITEM *">
		</method>
		<method name="ASN1_SEQUENCE_it" result="const ASN1_ITEM *">
		</method>
		<method name="CBIGNUM_it" result="const ASN1_ITEM *">
		</method>
		<method name="BIGNUM_it" result="const ASN1_ITEM *">
		</method>
		<method name="LONG_it" result="const ASN1_ITEM *">
		</method>
		<method name="ZLONG_it" result="const ASN1_ITEM *">
		</method>
		<method name="ASN1_item_ex_new" result="int">
			<arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
		</method>
		<method name="ASN1_item_ex_free" result="void">
			<arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
		</method>
		<method name="ASN1_template_new" result="int">
			<arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
			<arg name="tt" type="const ASN1_TEMPLATE *" m68kreg="a1"/>
		</method>
		<method name="ASN1_primitive_new" result="int">
			<arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
		</method>
		<method name="ASN1_template_free" result="void">
			<arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
			<arg name="tt" type="const ASN1_TEMPLATE *" m68kreg="a1"/>
		</method>
		<method name="ASN1_template_d2i" result="int">
			<arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
			<arg name="tt" type="const ASN1_TEMPLATE *" m68kreg="a2"/>
		</method>
		<method name="ASN1_item_ex_d2i" result="int">
			<arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a2"/>
			<arg name="tag" type="int" m68kreg="d1"/>
			<arg name="aclass" type="int" m68kreg="d2"/>
			<arg name="opt" type="char" m68kreg="d3"/>
			<arg name="ctx" type="ASN1_TLC *" m68kreg="a3"/>
		</method>
		<method name="ASN1_item_ex_i2d" result="int">
			<arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a2"/>
			<arg name="tag" type="int" m68kreg="d0"/>
			<arg name="aclass" type="int" m68kreg="d1"/>
		</method>
		<method name="ASN1_template_i2d" result="int">
			<arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
			<arg name="tt" type="const ASN1_TEMPLATE *" m68kreg="a2"/>
		</method>
		<method name="ASN1_primitive_free" result="void">
			<arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
		</method>
		<method name="asn1_ex_i2c" result="int">
			<arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
			<arg name="cont" type="unsigned char *" m68kreg="a1"/>
			<arg name="putype" type="int *" m68kreg="a2"/>
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a3"/>
		</method>
		<method name="asn1_ex_c2i" result="int">
			<arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
			<arg name="cont" type="unsigned char *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d0"/>
			<arg name="utype" type="int" m68kreg="d1"/>
			<arg name="free_cont" type="char *" m68kreg="a2"/>
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a3"/>
		</method>
		<method name="asn1_get_choice_selector" result="int">
			<arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
		</method>
		<method name="asn1_set_choice_selector" result="int">
			<arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
			<arg name="value" type="int" m68kreg="d0"/>
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
		</method>
		<method name="asn1_get_field_ptr" result="ASN1_VALUE **">
			<arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
			<arg name="tt" type="const ASN1_TEMPLATE *" m68kreg="a1"/>
		</method>
		<method name="asn1_do_adb" result="const ASN1_TEMPLATE *">
			<arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
			<arg name="tt" type="const ASN1_TEMPLATE *" m68kreg="a1"/>
			<arg name="nullerr" type="int" m68kreg="d0"/>
		</method>
		<method name="asn1_do_lock" result="int">
			<arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
			<arg name="op" type="int" m68kreg="d0"/>
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
		</method>
		<method name="asn1_enc_init" result="void">
			<arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
		</method>
		<method name="asn1_enc_free" result="void">
			<arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
		</method>
		<method name="asn1_enc_restore" result="int">
			<arg name="len" type="int *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
			<arg name="pval" type="ASN1_VALUE **" m68kreg="a2"/>
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a3"/>
		</method>
		<method name="asn1_enc_save" result="int">
			<arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
			<arg name="in" type="unsigned char *" m68kreg="a1"/>
			<arg name="inlen" type="int" m68kreg="d0"/>
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a2"/>
		</method>
		<method name="BIO_ctrl_pending" result="size_t">
			<arg name="b" type="BIO *" m68kreg="a0"/>
		</method>
		<method name="BIO_ctrl_wpending" result="size_t">
			<arg name="b" type="BIO *" m68kreg="a0"/>
		</method>
		<method name="BIO_ctrl_get_write_guarantee" result="size_t">
			<arg name="b" type="BIO *" m68kreg="a0"/>
		</method>
		<method name="BIO_ctrl_get_read_request" result="size_t">
			<arg name="b" type="BIO *" m68kreg="a0"/>
		</method>
		<method name="BIO_ctrl_reset_read_request" result="int">
			<arg name="b" type="BIO *" m68kreg="a0"/>
		</method>
		<method name="BIO_set_ex_data" result="int">
			<arg name="bio" type="BIO *" m68kreg="a0"/>
			<arg name="idx" type="int" m68kreg="d0"/>
			<arg name="data" type="void *" m68kreg="a1"/>
		</method>
		<method name="BIO_get_ex_data" result="void *">
			<arg name="bio" type="BIO *" m68kreg="a0"/>
			<arg name="idx" type="int" m68kreg="d0"/>
		</method>
		<method name="BIO_get_ex_new_index" result="int">
			<arg name="argl" type="long" m68kreg="d0"/>
			<arg name="argp" type="void *" m68kreg="a0"/>
			<arg name="new_func" type="CRYPTO_EX_new *" m68kreg="a1"/>
			<arg name="dup_func" type="CRYPTO_EX_dup *" m68kreg="a2"/>
			<arg name="free_func" type="CRYPTO_EX_free *" m68kreg="a3"/>
		</method>
		<method name="BIO_number_read" result="unsigned long">
			<arg name="bio" type="BIO *" m68kreg="a0"/>
		</method>
		<method name="BIO_number_written" result="unsigned long">
			<arg name="bio" type="BIO *" m68kreg="a0"/>
		</method>
		<method name="BIO_s_file" result="BIO_METHOD *">
		</method>
		<method name="BIO_new_file" result="BIO *">
			<arg name="filename" type="const char *" m68kreg="a0"/>
			<arg name="mode" type="const char *" m68kreg="a1"/>
		</method>
		<method name="BIO_new_fp_amiga" result="BIO *">
			<arg name="stream" type="BPTR" m68kreg="d0"/>
			<arg name="close_flag" type="int" m68kreg="d1"/>
		</method>
		<method name="BIO_new" result="BIO *">
			<arg name="type" type="BIO_METHOD *" m68kreg="a0"/>
		</method>
		<method name="BIO_set" result="int">
			<arg name="a" type="BIO *" m68kreg="a0"/>
			<arg name="type" type="BIO_METHOD *" m68kreg="a1"/>
		</method>
		<method name="BIO_free" result="int">
			<arg name="a" type="BIO *" m68kreg="a0"/>
		</method>
		<method name="BIO_vfree" result="void">
			<arg name="a" type="BIO *" m68kreg="a0"/>
		</method>
		<method name="BIO_read" result="int">
			<arg name="b" type="BIO *" m68kreg="a0"/>
			<arg name="data" type="void *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d0"/>
		</method>
		<method name="BIO_gets" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="buf" type="char *" m68kreg="a1"/>
			<arg name="size" type="int" m68kreg="d0"/>
		</method>
		<method name="BIO_write" result="int">
			<arg name="b" type="BIO *" m68kreg="a0"/>
			<arg name="data" type="const void *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d0"/>
		</method>
		<method name="BIO_puts" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="buf" type="const char *" m68kreg="a1"/>
		</method>
		<method name="BIO_indent" result="int">
			<arg name="b" type="BIO *" m68kreg="a0"/>
			<arg name="indent" type="int" m68kreg="d0"/>
			<arg name="max" type="int" m68kreg="d1"/>
		</method>
		<method name="BIO_ctrl" result="long">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="cmd" type="int" m68kreg="d0"/>
			<arg name="larg" type="long" m68kreg="d1"/>
			<arg name="parg" type="void *" m68kreg="a1"/>
		</method>
		<method name="BIO_callback_ctrl" result="long">
			<arg name="b" type="BIO *" m68kreg="a0"/>
			<arg name="cmd" type="int" m68kreg="d0"/>
			<arg name="fp" type="void (*)(struct bio_st *, int, const char *, int, long, long)" m68kreg="a1"/>
		</method>
		<method name="BIO_ptr_ctrl" result="char *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="cmd" type="int" m68kreg="d0"/>
			<arg name="larg" type="long" m68kreg="d1"/>
		</method>
		<method name="BIO_int_ctrl" result="long">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="cmd" type="int" m68kreg="d0"/>
			<arg name="larg" type="long" m68kreg="d1"/>
			<arg name="iarg" type="int" m68kreg="d2"/>
		</method>
		<method name="BIO_push" result="BIO *">
			<arg name="b" type="BIO *" m68kreg="a0"/>
			<arg name="append" type="BIO *" m68kreg="a1"/>
		</method>
		<method name="BIO_pop" result="BIO *">
			<arg name="b" type="BIO *" m68kreg="a0"/>
		</method>
		<method name="BIO_free_all" result="void">
			<arg name="a" type="BIO *" m68kreg="a0"/>
		</method>
		<method name="BIO_find_type" result="BIO *">
			<arg name="b" type="BIO *" m68kreg="a0"/>
			<arg name="bio_type" type="int" m68kreg="d0"/>
		</method>
		<method name="BIO_next" result="BIO *">
			<arg name="b" type="BIO *" m68kreg="a0"/>
		</method>
		<method name="BIO_get_retry_BIO" result="BIO *">
			<arg name="bio" type="BIO *" m68kreg="a0"/>
			<arg name="reason" type="int *" m68kreg="a1"/>
		</method>
		<method name="BIO_get_retry_reason" result="int">
			<arg name="bio" type="BIO *" m68kreg="a0"/>
		</method>
		<method name="BIO_dup_chain" result="BIO *">
			<arg name="in" type="BIO *" m68kreg="a0"/>
		</method>
		<method name="BIO_nread0" result="int">
			<arg name="bio" type="BIO *" m68kreg="a0"/>
			<arg name="buf" type="char **" m68kreg="a1"/>
		</method>
		<method name="BIO_nread" result="int">
			<arg name="bio" type="BIO *" m68kreg="a0"/>
			<arg name="buf" type="char **" m68kreg="a1"/>
			<arg name="num" type="int" m68kreg="d0"/>
		</method>
		<method name="BIO_nwrite0" result="int">
			<arg name="bio" type="BIO *" m68kreg="a0"/>
			<arg name="buf" type="char **" m68kreg="a1"/>
		</method>
		<method name="BIO_nwrite" result="int">
			<arg name="bio" type="BIO *" m68kreg="a0"/>
			<arg name="buf" type="char **" m68kreg="a1"/>
			<arg name="num" type="int" m68kreg="d0"/>
		</method>
		<method name="BIO_debug_callback" result="long">
			<arg name="bio" type="BIO *" m68kreg="a0"/>
			<arg name="cmd" type="int" m68kreg="d0"/>
			<arg name="argp" type="const char *" m68kreg="a1"/>
			<arg name="argi" type="int" m68kreg="d1"/>
			<arg name="argl" type="long" m68kreg="d2"/>
			<arg name="ret" type="long" m68kreg="d3"/>
		</method>
		<method name="BIO_s_mem" result="BIO_METHOD *">
		</method>
		<method name="BIO_new_mem_buf" result="BIO *">
			<arg name="buf" type="void *" m68kreg="a0"/>
			<arg name="len" type="int" m68kreg="d0"/>
		</method>
		<method name="BIO_s_socket" result="BIO_METHOD *">
		</method>
		<method name="BIO_s_connect" result="BIO_METHOD *">
		</method>
		<method name="BIO_s_accept" result="BIO_METHOD *">
		</method>
		<method name="BIO_s_fd" result="BIO_METHOD *">
		</method>
		<method name="BIO_s_log" result="BIO_METHOD *">
		</method>
		<method name="BIO_s_bio" result="BIO_METHOD *">
		</method>
		<method name="BIO_s_null" result="BIO_METHOD *">
		</method>
		<method name="BIO_f_null" result="BIO_METHOD *">
		</method>
		<method name="BIO_f_buffer" result="BIO_METHOD *">
		</method>
		<method name="BIO_f_nbio_test" result="BIO_METHOD *">
		</method>
		<method name="BIO_sock_should_retry" result="int">
			<arg name="i" type="int" m68kreg="d0"/>
		</method>
		<method name="BIO_sock_non_fatal_error" result="int">
			<arg name="error" type="int" m68kreg="d0"/>
		</method>
		<method name="BIO_fd_should_retry" result="int">
			<arg name="i" type="int" m68kreg="d0"/>
		</method>
		<method name="BIO_fd_non_fatal_error" result="int">
			<arg name="error" type="int" m68kreg="d0"/>
		</method>
		<method name="BIO_dump" result="int">
			<arg name="b" type="BIO *" m68kreg="a0"/>
			<arg name="bytes" type="const char *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d0"/>
		</method>
		<method name="BIO_dump_indent" result="int">
			<arg name="b" type="BIO *" m68kreg="a0"/>
			<arg name="bytes" type="const char *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d0"/>
			<arg name="indent" type="int" m68kreg="d1"/>
		</method>
		<method name="BIO_gethostbyname" result="struct hostent *">
			<arg name="name" type="const char *" m68kreg="a0"/>
		</method>
		<method name="BIO_sock_error" result="int">
			<arg name="sock" type="int" m68kreg="d0"/>
		</method>
		<method name="BIO_socket_ioctl" result="int">
			<arg name="fd" type="int" m68kreg="d0"/>
			<arg name="type" type="long" m68kreg="d1"/>
			<arg name="arg" type="void *" m68kreg="a0"/>
		</method>
		<method name="BIO_socket_nbio" result="int">
			<arg name="fd" type="int" m68kreg="d0"/>
			<arg name="mode" type="int" m68kreg="d1"/>
		</method>
		<method name="BIO_get_port" result="int">
			<arg name="str" type="const char *" m68kreg="a0"/>
			<arg name="port_ptr" type="unsigned short *" m68kreg="a1"/>
		</method>
		<method name="BIO_get_host_ip" result="int">
			<arg name="str" type="const char *" m68kreg="a0"/>
			<arg name="ip" type="unsigned char *" m68kreg="a1"/>
		</method>
		<method name="BIO_get_accept_socket" result="int">
			<arg name="host_port" type="char *" m68kreg="a0"/>
			<arg name="mode" type="int" m68kreg="d0"/>
		</method>
		<method name="BIO_accept" result="int">
			<arg name="sock" type="int" m68kreg="d0"/>
			<arg name="ip_port" type="char **" m68kreg="a0"/>
		</method>
		<method name="BIO_sock_init" result="int">
		</method>
		<method name="BIO_sock_cleanup" result="void">
		</method>
		<method name="BIO_set_tcp_ndelay" result="int">
			<arg name="sock" type="int" m68kreg="d0"/>
			<arg name="turn_on" type="int" m68kreg="d1"/>
		</method>
		<method name="BIO_new_socket" result="BIO *">
			<arg name="sock" type="int" m68kreg="d0"/>
			<arg name="close_flag" type="int" m68kreg="d1"/>
		</method>
		<method name="BIO_new_fd" result="BIO *">
			<arg name="fd" type="int" m68kreg="d0"/>
			<arg name="close_flag" type="int" m68kreg="d1"/>
		</method>
		<method name="BIO_new_connect" result="BIO *">
			<arg name="host_port" type="char *" m68kreg="a0"/>
		</method>
		<method name="BIO_new_accept" result="BIO *">
			<arg name="host_port" type="char *" m68kreg="a0"/>
		</method>
		<method name="BIO_new_bio_pair" result="int">
			<arg name="bio1" type="BIO **" m68kreg="a0"/>
			<arg name="writebuf1" type="size_t" m68kreg="d0"/>
			<arg name="bio2" type="BIO **" m68kreg="a1"/>
			<arg name="writebuf2" type="size_t" m68kreg="d1"/>
		</method>
		<method name="BIO_copy_next_retry" result="void">
			<arg name="b" type="BIO *" m68kreg="a0"/>
		</method>
		<method name="BIO_vprintf" result="int">
			<arg name="bio" type="BIO *" m68kreg="a0"/>
			<arg name="format" type="const char *" m68kreg="a1"/>
			<arg name="args" type="long *" m68kreg="a2"/>
		</method>
		<method name="BIO_printf" result="int">
			<arg name="bio" type="BIO *" m68kreg="a0"/>
			<arg name="format" type="const char *" m68kreg="a1"/>
			<vararg name="dummy" type="long"/>
		</method>
		<method name="BIO_vsnprintf" result="int">
			<arg name="buf" type="char *" m68kreg="a0"/>
			<arg name="n" type="size_t" m68kreg="d0"/>
			<arg name="format" type="const char *" m68kreg="a1"/>
			<arg name="args" type="long *" m68kreg="a2"/>
		</method>
		<method name="BIO_snprintf" result="int">
			<arg name="buf" type="char *" m68kreg="a0"/>
			<arg name="n" type="size_t" m68kreg="d0"/>
			<arg name="format" type="const char *" m68kreg="a1"/>
			<vararg name="dummy" type="long"/>
		</method>
		<method name="ERR_load_BIO_strings" result="void">
		</method>
		<method name="BN_value_one" result="const BIGNUM *">
		</method>
		<method name="BN_options" result="char *">
		</method>
		<method name="BN_CTX_new" result="BN_CTX *">
		</method>
		<method name="BN_CTX_init" result="void">
			<arg name="c" type="BN_CTX *" m68kreg="a0"/>
		</method>
		<method name="BN_CTX_free" result="void">
			<arg name="c" type="BN_CTX *" m68kreg="a0"/>
		</method>
		<method name="BN_CTX_start" result="void">
			<arg name="ctx" type="BN_CTX *" m68kreg="a0"/>
		</method>
		<method name="BN_CTX_get" result="BIGNUM *">
			<arg name="ctx" type="BN_CTX *" m68kreg="a0"/>
		</method>
		<method name="BN_CTX_end" result="void">
			<arg name="ctx" type="BN_CTX *" m68kreg="a0"/>
		</method>
		<method name="BN_rand" result="int">
			<arg name="rnd" type="BIGNUM *" m68kreg="a0"/>
			<arg name="bits" type="int" m68kreg="d0"/>
			<arg name="top" type="int" m68kreg="d1"/>
			<arg name="bottom" type="int" m68kreg="d2"/>
		</method>
		<method name="BN_pseudo_rand" result="int">
			<arg name="rnd" type="BIGNUM *" m68kreg="a0"/>
			<arg name="bits" type="int" m68kreg="d0"/>
			<arg name="top" type="int" m68kreg="d1"/>
			<arg name="bottom" type="int" m68kreg="d2"/>
		</method>
		<method name="BN_rand_range" result="int">
			<arg name="rnd" type="BIGNUM *" m68kreg="a0"/>
			<arg name="range" type="BIGNUM *" m68kreg="a1"/>
		</method>
		<method name="BN_pseudo_rand_range" result="int">
			<arg name="rnd" type="BIGNUM *" m68kreg="a0"/>
			<arg name="range" type="BIGNUM *" m68kreg="a1"/>
		</method>
		<method name="BN_num_bits" result="int">
			<arg name="a" type="const BIGNUM *" m68kreg="a0"/>
		</method>
		<method name="BN_num_bits_word" result="int">
			<arg name="a" type="BN_ULONG" m68kreg="d0"/>
		</method>
		<method name="BN_new" result="BIGNUM *">
		</method>
		<method name="BN_init" result="void">
			<arg name="a" type="BIGNUM *" m68kreg="a0"/>
		</method>
		<method name="BN_clear_free" result="void">
			<arg name="a" type="BIGNUM *" m68kreg="a0"/>
		</method>
		<method name="BN_copy" result="BIGNUM *">
			<arg name="a" type="BIGNUM *" m68kreg="a0"/>
			<arg name="b" type="const BIGNUM *" m68kreg="a1"/>
		</method>
		<method name="BN_swap" result="void">
			<arg name="a" type="BIGNUM *" m68kreg="a0"/>
			<arg name="b" type="BIGNUM *" m68kreg="a1"/>
		</method>
		<method name="BN_bin2bn" result="BIGNUM *">
			<arg name="s" type="const unsigned char *" m68kreg="a0"/>
			<arg name="len" type="int" m68kreg="d0"/>
			<arg name="ret" type="BIGNUM *" m68kreg="a1"/>
		</method>
		<method name="BN_bn2bin" result="int">
			<arg name="a" type="const BIGNUM *" m68kreg="a0"/>
			<arg name="to" type="unsigned char *" m68kreg="a1"/>
		</method>
		<method name="BN_mpi2bn" result="BIGNUM *">
			<arg name="s" type="const unsigned char *" m68kreg="a0"/>
			<arg name="len" type="int" m68kreg="d0"/>
			<arg name="ret" type="BIGNUM *" m68kreg="a1"/>
		</method>
		<method name="BN_bn2mpi" result="int">
			<arg name="a" type="const BIGNUM *" m68kreg="a0"/>
			<arg name="to" type="unsigned char *" m68kreg="a1"/>
		</method>
		<method name="BN_sub" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="b" type="const BIGNUM *" m68kreg="a2"/>
		</method>
		<method name="BN_usub" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="b" type="const BIGNUM *" m68kreg="a2"/>
		</method>
		<method name="BN_uadd" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="b" type="const BIGNUM *" m68kreg="a2"/>
		</method>
		<method name="BN_add" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="b" type="const BIGNUM *" m68kreg="a2"/>
		</method>
		<method name="BN_mul" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="b" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
		</method>
		<method name="BN_sqr" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a2"/>
		</method>
		<method name="BN_div" result="int">
			<arg name="dv" type="BIGNUM *" m68kreg="a0"/>
			<arg name="rem" type="BIGNUM *" m68kreg="a1"/>
			<arg name="m" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="d" type="const BIGNUM *" m68kreg="a3"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a4"/>
		</method>
		<method name="BN_nnmod" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="m" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="d" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
		</method>
		<method name="BN_mod_add" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="b" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="m" type="const BIGNUM *" m68kreg="a3"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a4"/>
		</method>
		<method name="BN_mod_add_quick" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="b" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="m" type="const BIGNUM *" m68kreg="a3"/>
		</method>
		<method name="BN_mod_sub" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="b" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="m" type="const BIGNUM *" m68kreg="a3"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a4"/>
		</method>
		<method name="BN_mod_sub_quick" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="b" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="m" type="const BIGNUM *" m68kreg="a3"/>
		</method>
		<method name="BN_mod_mul" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="b" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="m" type="const BIGNUM *" m68kreg="a3"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a4"/>
		</method>
		<method name="BN_mod_sqr" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="m" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
		</method>
		<method name="BN_mod_lshift1" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="m" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
		</method>
		<method name="BN_mod_lshift1_quick" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="m" type="const BIGNUM *" m68kreg="a2"/>
		</method>
		<method name="BN_mod_lshift" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="n" type="int" m68kreg="d0"/>
			<arg name="m" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
		</method>
		<method name="BN_mod_lshift_quick" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="n" type="int" m68kreg="d0"/>
			<arg name="m" type="const BIGNUM *" m68kreg="a2"/>
		</method>
		<method name="BN_mod_word" result="BN_ULONG">
			<arg name="a" type="const BIGNUM *" m68kreg="a0"/>
			<arg name="w" type="BN_ULONG" m68kreg="d0"/>
		</method>
		<method name="BN_div_word" result="BN_ULONG">
			<arg name="a" type="BIGNUM *" m68kreg="a0"/>
			<arg name="w" type="BN_ULONG" m68kreg="d0"/>
		</method>
		<method name="BN_mul_word" result="int">
			<arg name="a" type="BIGNUM *" m68kreg="a0"/>
			<arg name="w" type="BN_ULONG" m68kreg="d0"/>
		</method>
		<method name="BN_add_word" result="int">
			<arg name="a" type="BIGNUM *" m68kreg="a0"/>
			<arg name="w" type="BN_ULONG" m68kreg="d0"/>
		</method>
		<method name="BN_sub_word" result="int">
			<arg name="a" type="BIGNUM *" m68kreg="a0"/>
			<arg name="w" type="BN_ULONG" m68kreg="d0"/>
		</method>
		<method name="BN_set_word" result="int">
			<arg name="a" type="BIGNUM *" m68kreg="a0"/>
			<arg name="w" type="BN_ULONG" m68kreg="d0"/>
		</method>
		<method name="BN_get_word" result="BN_ULONG">
			<arg name="a" type="const BIGNUM *" m68kreg="a0"/>
		</method>
		<method name="BN_cmp" result="int">
			<arg name="a" type="const BIGNUM *" m68kreg="a0"/>
			<arg name="b" type="const BIGNUM *" m68kreg="a1"/>
		</method>
		<method name="BN_free" result="void">
			<arg name="a" type="BIGNUM *" m68kreg="a0"/>
		</method>
		<method name="BN_is_bit_set" result="int">
			<arg name="a" type="const BIGNUM *" m68kreg="a0"/>
			<arg name="n" type="int" m68kreg="d0"/>
		</method>
		<method name="BN_lshift" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="n" type="int" m68kreg="d0"/>
		</method>
		<method name="BN_lshift1" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
		</method>
		<method name="BN_exp" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="p" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
		</method>
		<method name="BN_mod_exp" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="p" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="m" type="const BIGNUM *" m68kreg="a3"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a4"/>
		</method>
		<method name="BN_mod_exp_mont" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="p" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="m" type="const BIGNUM *" m68kreg="a3"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a4"/>
			<arg name="m_ctx" type="BN_MONT_CTX *" m68kreg="a5"/>
		</method>
		<method name="BN_mod_exp_mont_word" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="BN_ULONG" m68kreg="d0"/>
			<arg name="p" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="m" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
			<arg name="m_ctx" type="BN_MONT_CTX *" m68kreg="a4"/>
		</method>
		<method name="BN_mod_exp2_mont" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a1" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="p1" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="a2" type="const BIGNUM *" m68kreg="a3"/>
			<arg name="p2" type="const BIGNUM *" m68kreg="a4"/>
			<arg name="m" type="const BIGNUM *" m68kreg="a5"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a6"/>
			<arg name="m_ctx" type="BN_MONT_CTX *" m68kreg="a7"/>
		</method>
		<method name="BN_mod_exp_simple" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="p" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="m" type="const BIGNUM *" m68kreg="a3"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a4"/>
		</method>
		<method name="BN_mask_bits" result="int">
			<arg name="a" type="BIGNUM *" m68kreg="a0"/>
			<arg name="n" type="int" m68kreg="d0"/>
		</method>
		<method name="BN_print" result="int">
			<arg name="fp" type="BIO *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
		</method>
		<method name="BN_reciprocal" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="m" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d0"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a2"/>
		</method>
		<method name="BN_rshift" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="n" type="int" m68kreg="d0"/>
		</method>
		<method name="BN_rshift1" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
		</method>
		<method name="BN_clear" result="void">
			<arg name="a" type="BIGNUM *" m68kreg="a0"/>
		</method>
		<method name="BN_dup" result="BIGNUM *">
			<arg name="a" type="const BIGNUM *" m68kreg="a0"/>
		</method>
		<method name="BN_ucmp" result="int">
			<arg name="a" type="const BIGNUM *" m68kreg="a0"/>
			<arg name="b" type="const BIGNUM *" m68kreg="a1"/>
		</method>
		<method name="BN_set_bit" result="int">
			<arg name="a" type="BIGNUM *" m68kreg="a0"/>
			<arg name="n" type="int" m68kreg="d0"/>
		</method>
		<method name="BN_clear_bit" result="int">
			<arg name="a" type="BIGNUM *" m68kreg="a0"/>
			<arg name="n" type="int" m68kreg="d0"/>
		</method>
		<method name="BN_bn2hex" result="char *">
			<arg name="a" type="const BIGNUM *" m68kreg="a0"/>
		</method>
		<method name="BN_bn2dec" result="char *">
			<arg name="a" type="const BIGNUM *" m68kreg="a0"/>
		</method>
		<method name="BN_hex2bn" result="int">
			<arg name="a" type="BIGNUM **" m68kreg="a0"/>
			<arg name="str" type="const char *" m68kreg="a1"/>
		</method>
		<method name="BN_dec2bn" result="int">
			<arg name="a" type="BIGNUM **" m68kreg="a0"/>
			<arg name="str" type="const char *" m68kreg="a1"/>
		</method>
		<method name="BN_gcd" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="b" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
		</method>
		<method name="BN_kronecker" result="int">
			<arg name="a" type="const BIGNUM *" m68kreg="a0"/>
			<arg name="b" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a2"/>
		</method>
		<method name="BN_mod_inverse" result="BIGNUM *">
			<arg name="ret" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="n" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
		</method>
		<method name="BN_mod_sqrt" result="BIGNUM *">
			<arg name="ret" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="n" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
		</method>
		<method name="BN_generate_prime" result="BIGNUM *">
			<arg name="ret" type="BIGNUM *" m68kreg="a0"/>
			<arg name="bits" type="int" m68kreg="d0"/>
			<arg name="safe" type="int" m68kreg="d1"/>
			<arg name="add" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="rem" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="callback" type="void (*)(int, int, void *)" m68kreg="a3"/>
			<arg name="cb_arg" type="void *" m68kreg="a4"/>
		</method>
		<method name="BN_is_prime" result="int">
			<arg name="p" type="const BIGNUM *" m68kreg="a0"/>
			<arg name="nchecks" type="int" m68kreg="d0"/>
			<arg name="callback" type="void (*)(int, int, void *)" m68kreg="a1"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a2"/>
			<arg name="cb_arg" type="void *" m68kreg="a3"/>
		</method>
		<method name="BN_is_prime_fasttest" result="int">
			<arg name="p" type="const BIGNUM *" m68kreg="a0"/>
			<arg name="nchecks" type="int" m68kreg="d0"/>
			<arg name="callback" type="void (*)(int, int, void *)" m68kreg="a1"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a2"/>
			<arg name="cb_arg" type="void *" m68kreg="a3"/>
			<arg name="do_trial_division" type="int" m68kreg="d1"/>
		</method>
		<method name="BN_MONT_CTX_new" result="BN_MONT_CTX *">
		</method>
		<method name="BN_MONT_CTX_init" result="void">
			<arg name="ctx" type="BN_MONT_CTX *" m68kreg="a0"/>
		</method>
		<method name="BN_mod_mul_montgomery" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="b" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="mont" type="BN_MONT_CTX *" m68kreg="a3"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a4"/>
		</method>
		<method name="BN_from_montgomery" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="mont" type="BN_MONT_CTX *" m68kreg="a2"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
		</method>
		<method name="BN_MONT_CTX_free" result="void">
			<arg name="mont" type="BN_MONT_CTX *" m68kreg="a0"/>
		</method>
		<method name="BN_MONT_CTX_set" result="int">
			<arg name="mont" type="BN_MONT_CTX *" m68kreg="a0"/>
			<arg name="mod" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a2"/>
		</method>
		<method name="BN_MONT_CTX_copy" result="BN_MONT_CTX *">
			<arg name="to" type="BN_MONT_CTX *" m68kreg="a0"/>
			<arg name="from" type="BN_MONT_CTX *" m68kreg="a1"/>
		</method>
		<method name="BN_BLINDING_new" result="BN_BLINDING *">
			<arg name="A" type="BIGNUM *" m68kreg="a0"/>
			<arg name="Ai" type="BIGNUM *" m68kreg="a1"/>
			<arg name="mod" type="BIGNUM *" m68kreg="a2"/>
		</method>
		<method name="BN_BLINDING_free" result="void">
			<arg name="b" type="BN_BLINDING *" m68kreg="a0"/>
		</method>
		<method name="BN_BLINDING_update" result="int">
			<arg name="b" type="BN_BLINDING *" m68kreg="a0"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a1"/>
		</method>
		<method name="BN_BLINDING_convert" result="int">
			<arg name="n" type="BIGNUM *" m68kreg="a0"/>
			<arg name="r" type="BN_BLINDING *" m68kreg="a1"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a2"/>
		</method>
		<method name="BN_BLINDING_invert" result="int">
			<arg name="n" type="BIGNUM *" m68kreg="a0"/>
			<arg name="b" type="BN_BLINDING *" m68kreg="a1"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a2"/>
		</method>
		<method name="BN_set_params" result="void">
			<arg name="mul" type="int" m68kreg="d0"/>
			<arg name="high" type="int" m68kreg="d1"/>
			<arg name="low" type="int" m68kreg="d2"/>
			<arg name="mont" type="int" m68kreg="d3"/>
		</method>
		<method name="BN_get_params" result="int">
			<arg name="which" type="int" m68kreg="d0"/>
		</method>
		<method name="BN_RECP_CTX_init" result="void">
			<arg name="recp" type="BN_RECP_CTX *" m68kreg="a0"/>
		</method>
		<method name="BN_RECP_CTX_new" result="BN_RECP_CTX *">
		</method>
		<method name="BN_RECP_CTX_free" result="void">
			<arg name="recp" type="BN_RECP_CTX *" m68kreg="a0"/>
		</method>
		<method name="BN_RECP_CTX_set" result="int">
			<arg name="recp" type="BN_RECP_CTX *" m68kreg="a0"/>
			<arg name="rdiv" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a2"/>
		</method>
		<method name="BN_mod_mul_reciprocal" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="x" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="y" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="recp" type="BN_RECP_CTX *" m68kreg="a3"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a4"/>
		</method>
		<method name="BN_mod_exp_recp" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="p" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="m" type="const BIGNUM *" m68kreg="a3"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a4"/>
		</method>
		<method name="BN_div_recp" result="int">
			<arg name="dv" type="BIGNUM *" m68kreg="a0"/>
			<arg name="rem" type="BIGNUM *" m68kreg="a1"/>
			<arg name="m" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="recp" type="BN_RECP_CTX *" m68kreg="a3"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a4"/>
		</method>
		<method name="bn_expand2" result="BIGNUM *">
			<arg name="a" type="BIGNUM *" m68kreg="a0"/>
			<arg name="words" type="int" m68kreg="d0"/>
		</method>
		<method name="bn_dup_expand" result="BIGNUM *">
			<arg name="a" type="const BIGNUM *" m68kreg="a0"/>
			<arg name="words" type="int" m68kreg="d0"/>
		</method>
		<method name="bn_mul_add_words" result="BN_ULONG">
			<arg name="rp" type="BN_ULONG *" m68kreg="a0"/>
			<arg name="ap" type="const BN_ULONG *" m68kreg="a1"/>
			<arg name="num" type="int" m68kreg="d0"/>
			<arg name="w" type="BN_ULONG" m68kreg="d1"/>
		</method>
		<method name="bn_mul_words" result="BN_ULONG">
			<arg name="rp" type="BN_ULONG *" m68kreg="a0"/>
			<arg name="ap" type="const BN_ULONG *" m68kreg="a1"/>
			<arg name="num" type="int" m68kreg="d0"/>
			<arg name="w" type="BN_ULONG" m68kreg="d1"/>
		</method>
		<method name="bn_sqr_words" result="void">
			<arg name="rp" type="BN_ULONG *" m68kreg="a0"/>
			<arg name="ap" type="const BN_ULONG *" m68kreg="a1"/>
			<arg name="num" type="int" m68kreg="d0"/>
		</method>
		<method name="bn_div_words" result="BN_ULONG">
			<arg name="h" type="BN_ULONG" m68kreg="d0"/>
			<arg name="l" type="BN_ULONG" m68kreg="d1"/>
			<arg name="d" type="BN_ULONG" m68kreg="d2"/>
		</method>
		<method name="bn_add_words" result="BN_ULONG">
			<arg name="rp" type="BN_ULONG *" m68kreg="a0"/>
			<arg name="ap" type="const BN_ULONG *" m68kreg="a1"/>
			<arg name="bp" type="const BN_ULONG *" m68kreg="a2"/>
			<arg name="num" type="int" m68kreg="d0"/>
		</method>
		<method name="bn_sub_words" result="BN_ULONG">
			<arg name="rp" type="BN_ULONG *" m68kreg="a0"/>
			<arg name="ap" type="const BN_ULONG *" m68kreg="a1"/>
			<arg name="bp" type="const BN_ULONG *" m68kreg="a2"/>
			<arg name="num" type="int" m68kreg="d0"/>
		</method>
		<method name="BN_bntest_rand" result="int">
			<arg name="rnd" type="BIGNUM *" m68kreg="a0"/>
			<arg name="bits" type="int" m68kreg="d0"/>
			<arg name="top" type="int" m68kreg="d1"/>
			<arg name="bottom" type="int" m68kreg="d2"/>
		</method>
		<method name="ERR_load_BN_strings" result="void">
		</method>
		<method name="BUF_MEM_new" result="BUF_MEM *">
		</method>
		<method name="BUF_MEM_free" result="void">
			<arg name="a" type="BUF_MEM *" m68kreg="a0"/>
		</method>
		<method name="BUF_MEM_grow" result="int">
			<arg name="str" type="BUF_MEM *" m68kreg="a0"/>
			<arg name="len" type="int" m68kreg="d0"/>
		</method>
		<method name="BUF_MEM_grow_clean" result="int">
			<arg name="str" type="BUF_MEM *" m68kreg="a0"/>
			<arg name="len" type="int" m68kreg="d0"/>
		</method>
		<method name="BUF_strdup" result="char *">
			<arg name="str" type="const char *" m68kreg="a0"/>
		</method>
		<method name="BUF_strlcpy" result="size_t">
			<arg name="dst" type="char *" m68kreg="a0"/>
			<arg name="src" type="const char *" m68kreg="a1"/>
			<arg name="siz" type="size_t" m68kreg="d0"/>
		</method>
		<method name="BUF_strlcat" result="size_t">
			<arg name="dst" type="char *" m68kreg="a0"/>
			<arg name="src" type="const char *" m68kreg="a1"/>
			<arg name="siz" type="size_t" m68kreg="d0"/>
		</method>
		<method name="ERR_load_BUF_strings" result="void">
		</method>
		<method name="COMP_CTX_new" result="COMP_CTX *">
			<arg name="meth" type="COMP_METHOD *" m68kreg="a0"/>
		</method>
		<method name="COMP_CTX_free" result="void">
			<arg name="ctx" type="COMP_CTX *" m68kreg="a0"/>
		</method>
		<method name="COMP_compress_block" result="int">
			<arg name="ctx" type="COMP_CTX *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="olen" type="int" m68kreg="d0"/>
			<arg name="in" type="unsigned char *" m68kreg="a2"/>
			<arg name="ilen" type="int" m68kreg="d1"/>
		</method>
		<method name="COMP_expand_block" result="int">
			<arg name="ctx" type="COMP_CTX *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="olen" type="int" m68kreg="d0"/>
			<arg name="in" type="unsigned char *" m68kreg="a2"/>
			<arg name="ilen" type="int" m68kreg="d1"/>
		</method>
		<method name="COMP_rle" result="COMP_METHOD *">
		</method>
		<method name="COMP_zlib" result="COMP_METHOD *">
		</method>
		<method name="ERR_load_COMP_strings" result="void">
		</method>
		<method name="CONF_set_default_method" result="int">
			<arg name="meth" type="CONF_METHOD *" m68kreg="a0"/>
		</method>
		<method name="CONF_set_nconf" result="void">
			<arg name="conf" type="CONF *" m68kreg="a0"/>
			<arg name="hash" type="LHASH *" m68kreg="a1"/>
		</method>
		<method name="CONF_load" result="LHASH *">
			<arg name="conf" type="LHASH *" m68kreg="a0"/>
			<arg name="file" type="const char *" m68kreg="a1"/>
			<arg name="eline" type="long *" m68kreg="a2"/>
		</method>
		<method name="CONF_load_bio" result="LHASH *">
			<arg name="conf" type="LHASH *" m68kreg="a0"/>
			<arg name="bp" type="BIO *" m68kreg="a1"/>
			<arg name="eline" type="long *" m68kreg="a2"/>
		</method>
		<method name="CONF_get_section" result="STACK_OF(CONF_VALUE) *">
			<arg name="conf" type="LHASH *" m68kreg="a0"/>
			<arg name="section" type="const char *" m68kreg="a1"/>
		</method>
		<method name="CONF_get_string" result="char *">
			<arg name="conf" type="LHASH *" m68kreg="a0"/>
			<arg name="group" type="const char *" m68kreg="a1"/>
			<arg name="name" type="const char *" m68kreg="a2"/>
		</method>
		<method name="CONF_get_number" result="long">
			<arg name="conf" type="LHASH *" m68kreg="a0"/>
			<arg name="group" type="const char *" m68kreg="a1"/>
			<arg name="name" type="const char *" m68kreg="a2"/>
		</method>
		<method name="CONF_free" result="void">
			<arg name="conf" type="LHASH *" m68kreg="a0"/>
		</method>
		<method name="CONF_dump_bio" result="int">
			<arg name="conf" type="LHASH *" m68kreg="a0"/>
			<arg name="out" type="BIO *" m68kreg="a1"/>
		</method>
		<method name="OPENSSL_config" result="void">
			<arg name="config_name" type="const char *" m68kreg="a0"/>
		</method>
		<method name="OPENSSL_no_config" result="void">
		</method>
		<method name="NCONF_new" result="CONF *">
			<arg name="meth" type="CONF_METHOD *" m68kreg="a0"/>
		</method>
		<method name="NCONF_default" result="CONF_METHOD *">
		</method>
		<method name="NCONF_WIN32" result="CONF_METHOD *">
		</method>
		<method name="NCONF_free" result="void">
			<arg name="conf" type="CONF *" m68kreg="a0"/>
		</method>
		<method name="NCONF_free_data" result="void">
			<arg name="conf" type="CONF *" m68kreg="a0"/>
		</method>
		<method name="NCONF_load" result="int">
			<arg name="conf" type="CONF *" m68kreg="a0"/>
			<arg name="file" type="const char *" m68kreg="a1"/>
			<arg name="eline" type="long *" m68kreg="a2"/>
		</method>
		<method name="NCONF_load_bio" result="int">
			<arg name="conf" type="CONF *" m68kreg="a0"/>
			<arg name="bp" type="BIO *" m68kreg="a1"/>
			<arg name="eline" type="long *" m68kreg="a2"/>
		</method>
		<method name="NCONF_get_section" result="STACK_OF(CONF_VALUE) *">
			<arg name="conf" type="const CONF *" m68kreg="a0"/>
			<arg name="section" type="const char *" m68kreg="a1"/>
		</method>
		<method name="NCONF_get_string" result="char *">
			<arg name="conf" type="const CONF *" m68kreg="a0"/>
			<arg name="group" type="const char *" m68kreg="a1"/>
			<arg name="name" type="const char *" m68kreg="a2"/>
		</method>
		<method name="NCONF_get_number_e" result="int">
			<arg name="conf" type="const CONF *" m68kreg="a0"/>
			<arg name="group" type="const char *" m68kreg="a1"/>
			<arg name="name" type="const char *" m68kreg="a2"/>
			<arg name="result" type="long *" m68kreg="a3"/>
		</method>
		<method name="NCONF_dump_bio" result="int">
			<arg name="conf" type="const CONF *" m68kreg="a0"/>
			<arg name="out" type="BIO *" m68kreg="a1"/>
		</method>
		<method name="CONF_modules_load" result="int">
			<arg name="cnf" type="const CONF *" m68kreg="a0"/>
			<arg name="appname" type="const char *" m68kreg="a1"/>
			<arg name="flags" type="unsigned long" m68kreg="d0"/>
		</method>
		<method name="CONF_modules_load_file" result="int">
			<arg name="filename" type="const char *" m68kreg="a0"/>
			<arg name="appname" type="const char *" m68kreg="a1"/>
			<arg name="flags" type="unsigned long" m68kreg="d0"/>
		</method>
		<method name="CONF_modules_unload" result="void">
			<arg name="all" type="int" m68kreg="d0"/>
		</method>
		<method name="CONF_modules_finish" result="void">
		</method>
		<method name="CONF_modules_free" result="void">
		</method>
		<method name="CONF_module_add" result="int">
			<arg name="name" type="const char *" m68kreg="a0"/>
			<arg name="ifunc" type="conf_init_func *" m68kreg="a1"/>
			<arg name="ffunc" type="conf_finish_func *" m68kreg="a2"/>
		</method>
		<method name="CONF_imodule_get_name" result="const char *">
			<arg name="md" type="const CONF_IMODULE *" m68kreg="a0"/>
		</method>
		<method name="CONF_imodule_get_value" result="const char *">
			<arg name="md" type="const CONF_IMODULE *" m68kreg="a0"/>
		</method>
		<method name="CONF_imodule_get_usr_data" result="void *">
			<arg name="md" type="const CONF_IMODULE *" m68kreg="a0"/>
		</method>
		<method name="CONF_imodule_set_usr_data" result="void">
			<arg name="md" type="CONF_IMODULE *" m68kreg="a0"/>
			<arg name="usr_data" type="void *" m68kreg="a1"/>
		</method>
		<method name="CONF_imodule_get_module" result="CONF_MODULE *">
			<arg name="md" type="const CONF_IMODULE *" m68kreg="a0"/>
		</method>
		<method name="CONF_imodule_get_flags" result="unsigned long">
			<arg name="md" type="const CONF_IMODULE *" m68kreg="a0"/>
		</method>
		<method name="CONF_imodule_set_flags" result="void">
			<arg name="md" type="CONF_IMODULE *" m68kreg="a0"/>
			<arg name="flags" type="unsigned long" m68kreg="d0"/>
		</method>
		<method name="CONF_module_get_usr_data" result="void *">
			<arg name="pmod" type="CONF_MODULE *" m68kreg="a0"/>
		</method>
		<method name="CONF_module_set_usr_data" result="void">
			<arg name="pmod" type="CONF_MODULE *" m68kreg="a0"/>
			<arg name="usr_data" type="void *" m68kreg="a1"/>
		</method>
		<method name="CONF_get1_default_config_file" result="char *">
		</method>
		<method name="CONF_parse_list" result="int">
			<arg name="list" type="const char *" m68kreg="a0"/>
			<arg name="sep" type="int" m68kreg="d0"/>
			<arg name="nospc" type="int" m68kreg="d1"/>
			<arg name="list_cb" type="int (*)(const char *elem, int len, void *usr)" m68kreg="a1"/>
			<arg name="arg" type="void *" m68kreg="a2"/>
		</method>
		<method name="OPENSSL_load_builtin_modules" result="void">
		</method>
		<method name="ERR_load_CONF_strings" result="void">
		</method>
		<method name="_CONF_new_section" result="CONF_VALUE *">
			<arg name="conf" type="CONF *" m68kreg="a0"/>
			<arg name="section" type="const char *" m68kreg="a1"/>
		</method>
		<method name="_CONF_get_section" result="CONF_VALUE *">
			<arg name="conf" type="const CONF *" m68kreg="a0"/>
			<arg name="section" type="const char *" m68kreg="a1"/>
		</method>
		<method name="_CONF_get_section_values" result="STACK_OF(CONF_VALUE) *">
			<arg name="conf" type="const CONF *" m68kreg="a0"/>
			<arg name="section" type="const char *" m68kreg="a1"/>
		</method>
		<method name="_CONF_add_string" result="int">
			<arg name="conf" type="CONF *" m68kreg="a0"/>
			<arg name="section" type="CONF_VALUE *" m68kreg="a1"/>
			<arg name="value" type="CONF_VALUE *" m68kreg="a2"/>
		</method>
		<method name="_CONF_get_string" result="char *">
			<arg name="conf" type="const CONF *" m68kreg="a0"/>
			<arg name="section" type="const char *" m68kreg="a1"/>
			<arg name="name" type="const char *" m68kreg="a2"/>
		</method>
		<method name="_CONF_new_data" result="int">
			<arg name="conf" type="CONF *" m68kreg="a0"/>
		</method>
		<method name="_CONF_free_data" result="void">
			<arg name="conf" type="CONF *" m68kreg="a0"/>
		</method>
		<method name="CRYPTO_mem_ctrl" result="int">
			<arg name="mode" type="int" m68kreg="d0"/>
		</method>
		<method name="CRYPTO_is_mem_check_on" result="int">
		</method>
		<method name="SSLeay_version" result="const char *">
			<arg name="type" type="int" m68kreg="d0"/>
		</method>
		<method name="SSLeay" result="unsigned long">
		</method>
		<method name="OPENSSL_issetugid" result="int">
		</method>
		<method name="CRYPTO_get_ex_data_implementation" result="const CRYPTO_EX_DATA_IMPL *">
		</method>
		<method name="CRYPTO_set_ex_data_implementation" result="int">
			<arg name="i" type="const CRYPTO_EX_DATA_IMPL *" m68kreg="a0"/>
		</method>
		<method name="CRYPTO_ex_data_new_class" result="int">
		</method>
		<method name="CRYPTO_get_ex_new_index" result="int">
			<arg name="class_index" type="int" m68kreg="d0"/>
			<arg name="argl" type="long" m68kreg="d1"/>
			<arg name="argp" type="void *" m68kreg="a0"/>
			<arg name="new_func" type="CRYPTO_EX_new *" m68kreg="a1"/>
			<arg name="dup_func" type="CRYPTO_EX_dup *" m68kreg="a2"/>
			<arg name="free_func" type="CRYPTO_EX_free *" m68kreg="a3"/>
		</method>
		<method name="CRYPTO_new_ex_data" result="int">
			<arg name="class_index" type="int" m68kreg="d0"/>
			<arg name="obj" type="void *" m68kreg="a0"/>
			<arg name="ad" type="CRYPTO_EX_DATA *" m68kreg="a1"/>
		</method>
		<method name="CRYPTO_dup_ex_data" result="int">
			<arg name="class_index" type="int" m68kreg="d0"/>
			<arg name="to" type="CRYPTO_EX_DATA *" m68kreg="a0"/>
			<arg name="from" type="CRYPTO_EX_DATA *" m68kreg="a1"/>
		</method>
		<method name="CRYPTO_free_ex_data" result="void">
			<arg name="class_index" type="int" m68kreg="d0"/>
			<arg name="obj" type="void *" m68kreg="a0"/>
			<arg name="ad" type="CRYPTO_EX_DATA *" m68kreg="a1"/>
		</method>
		<method name="CRYPTO_set_ex_data" result="int">
			<arg name="ad" type="CRYPTO_EX_DATA *" m68kreg="a0"/>
			<arg name="idx" type="int" m68kreg="d0"/>
			<arg name="val" type="void *" m68kreg="a1"/>
		</method>
		<method name="CRYPTO_get_ex_data" result="void *">
			<arg name="ad" type="const CRYPTO_EX_DATA *" m68kreg="a0"/>
			<arg name="idx" type="int" m68kreg="d0"/>
		</method>
		<method name="CRYPTO_cleanup_all_ex_data" result="void">
		</method>
		<method name="CRYPTO_get_new_lockid" result="int">
			<arg name="name" type="char *" m68kreg="a0"/>
		</method>
		<method name="CRYPTO_num_locks" result="int">
		</method>
		<method name="CRYPTO_lock" result="void">
			<arg name="mode" type="int" m68kreg="d0"/>
			<arg name="type" type="int" m68kreg="d1"/>
			<arg name="file" type="const char *" m68kreg="a0"/>
			<arg name="line" type="int" m68kreg="d2"/>
		</method>
		<method name="CRYPTO_set_locking_callback" result="void">
			<arg name="func" type="void (*)(int mode, int type, const char *file, int line)" m68kreg="a0"/>
		</method>
		<method name="CRYPTO_get_locking_callback" result="void (*)(int mode, int type, const char *file, int line)">
		</method>
		<method name="CRYPTO_set_add_lock_callback" result="void">
			<arg name="func" type="int (*)(int *num, int mount, int type, const char *file, int line)" m68kreg="a0"/>
		</method>
		<method name="CRYPTO_get_add_lock_callback" result="int (*)(int *num, int mount, int type, const char *file, int line)">
		</method>
		<method name="CRYPTO_set_id_callback" result="void">
			<arg name="func" type="unsigned long (*)(void)" m68kreg="a0"/>
		</method>
		<method name="CRYPTO_get_id_callback" result="unsigned long (*)(void)">
		</method>
		<method name="CRYPTO_thread_id" result="unsigned long">
		</method>
		<method name="CRYPTO_get_lock_name" result="const char *">
			<arg name="type" type="int" m68kreg="d0"/>
		</method>
		<method name="CRYPTO_add_lock" result="int">
			<arg name="pointer" type="int *" m68kreg="a0"/>
			<arg name="amount" type="int" m68kreg="d0"/>
			<arg name="type" type="int" m68kreg="d1"/>
			<arg name="file" type="const char *" m68kreg="a1"/>
			<arg name="line" type="int" m68kreg="d2"/>
		</method>
		<method name="CRYPTO_get_new_dynlockid" result="int">
		</method>
		<method name="CRYPTO_destroy_dynlockid" result="void">
			<arg name="i" type="int" m68kreg="d0"/>
		</method>
		<method name="CRYPTO_get_dynlock_value" result="struct CRYPTO_dynlock_value *">
			<arg name="i" type="int" m68kreg="d0"/>
		</method>
		<method name="CRYPTO_set_dynlock_create_callback" result="void">
			<arg name="dyn_create_function" type="struct CRYPTO_dynlock_value * (*)(const char *file, int line)" m68kreg="a0"/>
		</method>
		<method name="CRYPTO_set_dynlock_lock_callback" result="void">
			<arg name="dyn_lock_function" type="void (*)(int mode, struct CRYPTO_dynlock_value *l, const char *file, int line)" m68kreg="a0"/>
		</method>
		<method name="CRYPTO_set_dynlock_destroy_callback" result="void">
			<arg name="dyn_destroy_function" type="void (*)(struct CRYPTO_dynlock_value *l, const char *file, int line)" m68kreg="a0"/>
		</method>
		<method name="CRYPTO_get_dynlock_create_callback" result="struct CRYPTO_dynlock_value * (*)(const char *file, int line)">
		</method>
		<method name="CRYPTO_get_dynlock_lock_callback" result="void (*)(int mode, struct CRYPTO_dynlock_value *l, const char *file, int line)">
		</method>
		<method name="CRYPTO_get_dynlock_destroy_callback" result="void (*)(struct CRYPTO_dynlock_value *l, const char *file, int line)">
		</method>
		<method name="CRYPTO_set_mem_functions" result="int">
			<arg name="m" type="void * (*)(size_t)" m68kreg="a0"/>
			<arg name="r" type="void * (*)(void *, size_t)" m68kreg="a1"/>
			<arg name="f" type="void (*)(void *)" m68kreg="a2"/>
		</method>
		<method name="CRYPTO_set_locked_mem_functions" result="int">
			<arg name="m" type="void * (*)(size_t)" m68kreg="a0"/>
			<arg name="free_func" type="void (*)(void *)" m68kreg="a1"/>
		</method>
		<method name="CRYPTO_set_mem_ex_functions" result="int">
			<arg name="m" type="void * (*)(size_t, const char *, int)" m68kreg="a0"/>
			<arg name="r" type="void * (*)(void *, size_t, const char *, int)" m68kreg="a1"/>
			<arg name="f" type="void (*)(void *)" m68kreg="a2"/>
		</method>
		<method name="CRYPTO_set_locked_mem_ex_functions" result="int">
			<arg name="m" type="void * (*)(size_t, const char *, int)" m68kreg="a0"/>
			<arg name="free_func" type="void (*)(void *)" m68kreg="a1"/>
		</method>
		<method name="CRYPTO_set_mem_debug_functions" result="int">
			<arg name="m" type="void (*)(void *, int, const char *, int, int)" m68kreg="a0"/>
			<arg name="r" type="void (*)(void *, void *, int, const char *, int, int)" m68kreg="a1"/>
			<arg name="f" type="void (*)(void *, int)" m68kreg="a2"/>
			<arg name="so" type="void (*)(long)" m68kreg="a3"/>
			<arg name="go" type="long (*)(void)" m68kreg="a4"/>
		</method>
		<method name="CRYPTO_get_mem_functions" result="void">
			<arg name="m" type="void * (**)(size_t)" m68kreg="a0"/>
			<arg name="r" type="void * (**)(void *, size_t)" m68kreg="a1"/>
			<arg name="f" type="void (**)(void *)" m68kreg="a2"/>
		</method>
		<method name="CRYPTO_get_locked_mem_functions" result="void">
			<arg name="m" type="void * (**)(size_t)" m68kreg="a0"/>
			<arg name="f" type="void (**)(void *)" m68kreg="a1"/>
		</method>
		<method name="CRYPTO_get_mem_ex_functions" result="void">
			<arg name="m" type="void * (**)(size_t, const char *, int)" m68kreg="a0"/>
			<arg name="r" type="void * (**)(void *, size_t, const char *, int)" m68kreg="a1"/>
			<arg name="f" type="void (**)(void *)" m68kreg="a2"/>
		</method>
		<method name="CRYPTO_get_locked_mem_ex_functions" result="void">
			<arg name="m" type="void * (**)(size_t, const char *, int)" m68kreg="a0"/>
			<arg name="f" type="void (**)(void *)" m68kreg="a1"/>
		</method>
		<method name="CRYPTO_get_mem_debug_functions" result="void">
			<arg name="m" type="void (**)(void *, int, const char *, int, int)" m68kreg="a0"/>
			<arg name="r" type="void (**)(void *, void *, int, const char *, int, int)" m68kreg="a1"/>
			<arg name="f" type="void (**)(void *, int)" m68kreg="a2"/>
			<arg name="so" type="void (**)(long)" m68kreg="a3"/>
			<arg name="go" type="long (**)(void)" m68kreg="a4"/>
		</method>
		<method name="CRYPTO_malloc_locked" result="void *">
			<arg name="num" type="int" m68kreg="d0"/>
			<arg name="file" type="const char *" m68kreg="a0"/>
			<arg name="line" type="int" m68kreg="d1"/>
		</method>
		<method name="CRYPTO_free_locked" result="void">
			<arg name="a" type="void *" m68kreg="a0"/>
		</method>
		<method name="CRYPTO_malloc" result="void *">
			<arg name="num" type="int" m68kreg="d0"/>
			<arg name="file" type="const char *" m68kreg="a0"/>
			<arg name="line" type="int" m68kreg="d1"/>
		</method>
		<method name="CRYPTO_free" result="void">
			<arg name="a" type="void *" m68kreg="a0"/>
		</method>
		<method name="CRYPTO_realloc" result="void *">
			<arg name="addr" type="void *" m68kreg="a0"/>
			<arg name="num" type="int" m68kreg="d0"/>
			<arg name="file" type="const char *" m68kreg="a1"/>
			<arg name="line" type="int" m68kreg="d1"/>
		</method>
		<method name="CRYPTO_realloc_clean" result="void *">
			<arg name="addr" type="void *" m68kreg="a0"/>
			<arg name="old_num" type="int" m68kreg="d0"/>
			<arg name="num" type="int" m68kreg="d1"/>
			<arg name="file" type="const char *" m68kreg="a1"/>
			<arg name="line" type="int" m68kreg="d2"/>
		</method>
		<method name="CRYPTO_remalloc" result="void *">
			<arg name="addr" type="void *" m68kreg="a0"/>
			<arg name="num" type="int" m68kreg="d0"/>
			<arg name="file" type="const char *" m68kreg="a1"/>
			<arg name="line" type="int" m68kreg="d1"/>
		</method>
		<method name="OPENSSL_cleanse" result="void">
			<arg name="ptr" type="void *" m68kreg="a0"/>
			<arg name="len" type="size_t" m68kreg="d0"/>
		</method>
		<method name="CRYPTO_set_mem_debug_options" result="void">
			<arg name="bits" type="long" m68kreg="d0"/>
		</method>
		<method name="CRYPTO_get_mem_debug_options" result="long">
		</method>
		<method name="CRYPTO_push_info_" result="int">
			<arg name="info" type="const char *" m68kreg="a0"/>
			<arg name="file" type="const char *" m68kreg="a1"/>
			<arg name="line" type="int" m68kreg="d0"/>
		</method>
		<method name="CRYPTO_pop_info" result="int">
		</method>
		<method name="CRYPTO_remove_all_info" result="int">
		</method>
		<method name="CRYPTO_dbg_malloc" result="void">
			<arg name="addr" type="void *" m68kreg="a0"/>
			<arg name="num" type="int" m68kreg="d0"/>
			<arg name="file" type="const char *" m68kreg="a1"/>
			<arg name="line" type="int" m68kreg="d1"/>
			<arg name="before_p" type="int" m68kreg="d2"/>
		</method>
		<method name="CRYPTO_dbg_realloc" result="void">
			<arg name="addr1" type="void *" m68kreg="a0"/>
			<arg name="addr2" type="void *" m68kreg="a1"/>
			<arg name="num" type="int" m68kreg="d0"/>
			<arg name="file" type="const char *" m68kreg="a2"/>
			<arg name="line" type="int" m68kreg="d1"/>
			<arg name="before_p" type="int" m68kreg="d2"/>
		</method>
		<method name="CRYPTO_dbg_free" result="void">
			<arg name="addr" type="void *" m68kreg="a0"/>
			<arg name="before_p" type="int" m68kreg="d0"/>
		</method>
		<method name="CRYPTO_dbg_set_options" result="void">
			<arg name="bits" type="long" m68kreg="d0"/>
		</method>
		<method name="CRYPTO_dbg_get_options" result="long">
		</method>
		<method name="CRYPTO_mem_leaks" result="void">
			<arg name="bio" type="struct bio_st *" m68kreg="a0"/>
		</method>
		<method name="CRYPTO_mem_leaks_cb" result="void">
			<arg name="cb" type="CRYPTO_MEM_LEAK_CB *" m68kreg="a0"/>
		</method>
		<method name="OpenSSLDie" result="void">
			<arg name="file" type="const char *" m68kreg="a0"/>
			<arg name="line" type="int" m68kreg="d0"/>
			<arg name="assertion" type="const char *" m68kreg="a1"/>
		</method>
		<method name="ERR_load_CRYPTO_strings" result="void">
		</method>
		<method name="DSO_new" result="DSO *">
		</method>
		<method name="DSO_new_method" result="DSO *">
			<arg name="method" type="DSO_METHOD *" m68kreg="a0"/>
		</method>
		<method name="DSO_free" result="int">
			<arg name="dso" type="DSO *" m68kreg="a0"/>
		</method>
		<method name="DSO_flags" result="int">
			<arg name="dso" type="DSO *" m68kreg="a0"/>
		</method>
		<method name="DSO_up_ref" result="int">
			<arg name="dso" type="DSO *" m68kreg="a0"/>
		</method>
		<method name="DSO_ctrl" result="long">
			<arg name="dso" type="DSO *" m68kreg="a0"/>
			<arg name="cmd" type="int" m68kreg="d0"/>
			<arg name="larg" type="long" m68kreg="d1"/>
			<arg name="parg" type="void *" m68kreg="a1"/>
		</method>
		<method name="DSO_set_name_converter" result="int">
			<arg name="dso" type="DSO *" m68kreg="a0"/>
			<arg name="cb" type="DSO_NAME_CONVERTER_FUNC" m68kreg="d0"/>
			<arg name="oldcb" type="DSO_NAME_CONVERTER_FUNC *" m68kreg="a1"/>
		</method>
		<method name="DSO_get_filename" result="const char *">
			<arg name="dso" type="DSO *" m68kreg="a0"/>
		</method>
		<method name="DSO_set_filename" result="int">
			<arg name="dso" type="DSO *" m68kreg="a0"/>
			<arg name="filename" type="const char *" m68kreg="a1"/>
		</method>
		<method name="DSO_convert_filename" result="char *">
			<arg name="dso" type="DSO *" m68kreg="a0"/>
			<arg name="filename" type="const char *" m68kreg="a1"/>
		</method>
		<method name="DSO_get_loaded_filename" result="const char *">
			<arg name="dso" type="DSO *" m68kreg="a0"/>
		</method>
		<method name="DSO_set_default_method" result="void">
			<arg name="meth" type="DSO_METHOD *" m68kreg="a0"/>
		</method>
		<method name="DSO_get_default_method" result="DSO_METHOD *">
		</method>
		<method name="DSO_get_method" result="DSO_METHOD *">
			<arg name="dso" type="DSO *" m68kreg="a0"/>
		</method>
		<method name="DSO_set_method" result="DSO_METHOD *">
			<arg name="dso" type="DSO *" m68kreg="a0"/>
			<arg name="meth" type="DSO_METHOD *" m68kreg="a1"/>
		</method>
		<method name="DSO_load" result="DSO *">
			<arg name="dso" type="DSO *" m68kreg="a0"/>
			<arg name="filename" type="const char *" m68kreg="a1"/>
			<arg name="meth" type="DSO_METHOD *" m68kreg="a2"/>
			<arg name="flags" type="int" m68kreg="d0"/>
		</method>
		<method name="DSO_bind_var" result="void *">
			<arg name="dso" type="DSO *" m68kreg="a0"/>
			<arg name="symname" type="const char *" m68kreg="a1"/>
		</method>
		<method name="DSO_bind_func" result="DSO_FUNC_TYPE">
			<arg name="dso" type="DSO *" m68kreg="a0"/>
			<arg name="symname" type="const char *" m68kreg="a1"/>
		</method>
		<method name="DSO_METHOD_openssl" result="DSO_METHOD *">
		</method>
		<method name="DSO_METHOD_null" result="DSO_METHOD *">
		</method>
		<method name="DSO_METHOD_dlfcn" result="DSO_METHOD *">
		</method>
		<method name="DSO_METHOD_dl" result="DSO_METHOD *">
		</method>
		<method name="DSO_METHOD_win32" result="DSO_METHOD *">
		</method>
		<method name="DSO_METHOD_vms" result="DSO_METHOD *">
		</method>
		<method name="ERR_load_DSO_strings" result="void">
		</method>
		<method name="EC_GFp_simple_method" result="const EC_METHOD *">
		</method>
		<method name="EC_GFp_mont_method" result="const EC_METHOD *">
		</method>
		<method name="EC_GROUP_new" result="EC_GROUP *">
			<arg name="a" type="const EC_METHOD *" m68kreg="a0"/>
		</method>
		<method name="EC_GROUP_free" result="void">
			<arg name="a" type="EC_GROUP *" m68kreg="a0"/>
		</method>
		<method name="EC_GROUP_clear_free" result="void">
			<arg name="a" type="EC_GROUP *" m68kreg="a0"/>
		</method>
		<method name="EC_GROUP_copy" result="int">
			<arg name="a" type="EC_GROUP *" m68kreg="a0"/>
			<arg name="b" type="const EC_GROUP *" m68kreg="a1"/>
		</method>
		<method name="EC_GROUP_method_of" result="const EC_METHOD *">
			<arg name="a" type="const EC_GROUP *" m68kreg="a0"/>
		</method>
		<method name="EC_GROUP_set_curve_GFp" result="int">
			<arg name="a1" type="EC_GROUP *" m68kreg="a0"/>
			<arg name="p" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="b" type="const BIGNUM *" m68kreg="a3"/>
			<arg name="a2" type="BN_CTX *" m68kreg="a4"/>
		</method>
		<method name="EC_GROUP_get_curve_GFp" result="int">
			<arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
			<arg name="p" type="BIGNUM *" m68kreg="a1"/>
			<arg name="a" type="BIGNUM *" m68kreg="a2"/>
			<arg name="b" type="BIGNUM *" m68kreg="a3"/>
			<arg name="a2" type="BN_CTX *" m68kreg="a4"/>
		</method>
		<method name="EC_GROUP_new_curve_GFp" result="EC_GROUP *">
			<arg name="p" type="const BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="b" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="a1" type="BN_CTX *" m68kreg="a3"/>
		</method>
		<method name="EC_GROUP_set_generator" result="int">
			<arg name="a1" type="EC_GROUP *" m68kreg="a0"/>
			<arg name="generator" type="const EC_POINT *" m68kreg="a1"/>
			<arg name="order" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="cofactor" type="const BIGNUM *" m68kreg="a3"/>
		</method>
		<method name="EC_GROUP_get0_generator" result="const EC_POINT *">
			<arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
		</method>
		<method name="EC_GROUP_get_order" result="int">
			<arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
			<arg name="order" type="BIGNUM *" m68kreg="a1"/>
			<arg name="a2" type="BN_CTX *" m68kreg="a2"/>
		</method>
		<method name="EC_GROUP_get_cofactor" result="int">
			<arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
			<arg name="cofactor" type="BIGNUM *" m68kreg="a1"/>
			<arg name="a2" type="BN_CTX *" m68kreg="a2"/>
		</method>
		<method name="EC_POINT_new" result="EC_POINT *">
			<arg name="a" type="const EC_GROUP *" m68kreg="a0"/>
		</method>
		<method name="EC_POINT_free" result="void">
			<arg name="a" type="EC_POINT *" m68kreg="a0"/>
		</method>
		<method name="EC_POINT_clear_free" result="void">
			<arg name="a" type="EC_POINT *" m68kreg="a0"/>
		</method>
		<method name="EC_POINT_copy" result="int">
			<arg name="a" type="EC_POINT *" m68kreg="a0"/>
			<arg name="b" type="const EC_POINT *" m68kreg="a1"/>
		</method>
		<method name="EC_POINT_method_of" result="const EC_METHOD *">
			<arg name="a" type="const EC_POINT *" m68kreg="a0"/>
		</method>
		<method name="EC_POINT_set_to_infinity" result="int">
			<arg name="a" type="const EC_GROUP *" m68kreg="a0"/>
			<arg name="b" type="EC_POINT *" m68kreg="a1"/>
		</method>
		<method name="EC_POINT_set_Jprojective_coordinates_GFp" result="int">
			<arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
			<arg name="a2" type="EC_POINT *" m68kreg="a1"/>
			<arg name="x" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="y" type="const BIGNUM *" m68kreg="a3"/>
			<arg name="z" type="const BIGNUM *" m68kreg="a4"/>
			<arg name="a3" type="BN_CTX *" m68kreg="a5"/>
		</method>
		<method name="EC_POINT_get_Jprojective_coordinates_GFp" result="int">
			<arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
			<arg name="a2" type="const EC_POINT *" m68kreg="a1"/>
			<arg name="x" type="BIGNUM *" m68kreg="a2"/>
			<arg name="y" type="BIGNUM *" m68kreg="a3"/>
			<arg name="z" type="BIGNUM *" m68kreg="a4"/>
			<arg name="a3" type="BN_CTX *" m68kreg="a5"/>
		</method>
		<method name="EC_POINT_set_affine_coordinates_GFp" result="int">
			<arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
			<arg name="a2" type="EC_POINT *" m68kreg="a1"/>
			<arg name="x" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="y" type="const BIGNUM *" m68kreg="a3"/>
			<arg name="a3" type="BN_CTX *" m68kreg="a4"/>
		</method>
		<method name="EC_POINT_get_affine_coordinates_GFp" result="int">
			<arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
			<arg name="a2" type="const EC_POINT *" m68kreg="a1"/>
			<arg name="x" type="BIGNUM *" m68kreg="a2"/>
			<arg name="y" type="BIGNUM *" m68kreg="a3"/>
			<arg name="a3" type="BN_CTX *" m68kreg="a4"/>
		</method>
		<method name="EC_POINT_set_compressed_coordinates_GFp" result="int">
			<arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
			<arg name="a2" type="EC_POINT *" m68kreg="a1"/>
			<arg name="x" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="y_bit" type="int" m68kreg="d0"/>
			<arg name="a3" type="BN_CTX *" m68kreg="a3"/>
		</method>
		<method name="EC_POINT_point2oct" result="size_t">
			<arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
			<arg name="a2" type="const EC_POINT *" m68kreg="a1"/>
			<arg name="form" type="point_conversion_form_t" m68kreg="d0"/>
			<arg name="buf" type="unsigned char *" m68kreg="a2"/>
			<arg name="len" type="size_t" m68kreg="d1"/>
			<arg name="a3" type="BN_CTX *" m68kreg="a3"/>
		</method>
		<method name="EC_POINT_oct2point" result="int">
			<arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
			<arg name="a2" type="EC_POINT *" m68kreg="a1"/>
			<arg name="buf" type="const unsigned char *" m68kreg="a2"/>
			<arg name="len" type="size_t" m68kreg="d0"/>
			<arg name="a3" type="BN_CTX *" m68kreg="a3"/>
		</method>
		<method name="EC_POINT_add" result="int">
			<arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
			<arg name="r" type="EC_POINT *" m68kreg="a1"/>
			<arg name="a" type="const EC_POINT *" m68kreg="a2"/>
			<arg name="b" type="const EC_POINT *" m68kreg="a3"/>
			<arg name="a2" type="BN_CTX *" m68kreg="a4"/>
		</method>
		<method name="EC_POINT_dbl" result="int">
			<arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
			<arg name="r" type="EC_POINT *" m68kreg="a1"/>
			<arg name="a" type="const EC_POINT *" m68kreg="a2"/>
			<arg name="a2" type="BN_CTX *" m68kreg="a3"/>
		</method>
		<method name="EC_POINT_invert" result="int">
			<arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
			<arg name="a2" type="EC_POINT *" m68kreg="a1"/>
			<arg name="a3" type="BN_CTX *" m68kreg="a2"/>
		</method>
		<method name="EC_POINT_is_at_infinity" result="int">
			<arg name="a" type="const EC_GROUP *" m68kreg="a0"/>
			<arg name="b" type="const EC_POINT *" m68kreg="a1"/>
		</method>
		<method name="EC_POINT_is_on_curve" result="int">
			<arg name="a" type="const EC_GROUP *" m68kreg="a0"/>
			<arg name="b" type="const EC_POINT *" m68kreg="a1"/>
			<arg name="c" type="BN_CTX *" m68kreg="a2"/>
		</method>
		<method name="EC_POINT_cmp" result="int">
			<arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
			<arg name="a" type="const EC_POINT *" m68kreg="a1"/>
			<arg name="b" type="const EC_POINT *" m68kreg="a2"/>
			<arg name="a2" type="BN_CTX *" m68kreg="a3"/>
		</method>
		<method name="EC_POINT_make_affine" result="int">
			<arg name="a" type="const EC_GROUP *" m68kreg="a0"/>
			<arg name="b" type="EC_POINT *" m68kreg="a1"/>
			<arg name="c" type="BN_CTX *" m68kreg="a2"/>
		</method>
		<method name="EC_POINTs_make_affine" result="int">
			<arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
			<arg name="num" type="size_t" m68kreg="d0"/>
			<arg name="a2" type="EC_POINT **" m68kreg="a1"/>
			<arg name="a3" type="BN_CTX *" m68kreg="a2"/>
		</method>
		<method name="EC_POINTs_mul" result="int">
			<arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
			<arg name="r" type="EC_POINT *" m68kreg="a1"/>
			<arg name="a2" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="num" type="size_t" m68kreg="d0"/>
			<arg name="a3" type="const EC_POINT **" m68kreg="a3"/>
			<arg name="a4" type="const BIGNUM **" m68kreg="a4"/>
			<arg name="a5" type="BN_CTX *" m68kreg="a5"/>
		</method>
		<method name="EC_POINT_mul" result="int">
			<arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
			<arg name="r" type="EC_POINT *" m68kreg="a1"/>
			<arg name="a2" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="a3" type="const EC_POINT *" m68kreg="a3"/>
			<arg name="a4" type="const BIGNUM *" m68kreg="a4"/>
			<arg name="a5" type="BN_CTX *" m68kreg="a5"/>
		</method>
		<method name="EC_GROUP_precompute_mult" result="int">
			<arg name="a" type="EC_GROUP *" m68kreg="a0"/>
			<arg name="b" type="BN_CTX *" m68kreg="a1"/>
		</method>
		<method name="ERR_load_EC_strings" result="void">
		</method>
		<method name="ERR_put_error" result="void">
			<arg name="lib" type="int" m68kreg="d0"/>
			<arg name="func" type="int" m68kreg="d1"/>
			<arg name="reason" type="int" m68kreg="d2"/>
			<arg name="file" type="const char *" m68kreg="a0"/>
			<arg name="line" type="int" m68kreg="d3"/>
		</method>
		<method name="ERR_set_error_data" result="void">
			<arg name="data" type="char *" m68kreg="a0"/>
			<arg name="flags" type="int" m68kreg="d0"/>
		</method>
		<method name="ERR_get_error" result="unsigned long">
		</method>
		<method name="ERR_get_error_line" result="unsigned long">
			<arg name="file" type="const char **" m68kreg="a0"/>
			<arg name="line" type="int *" m68kreg="a1"/>
		</method>
		<method name="ERR_get_error_line_data" result="unsigned long">
			<arg name="file" type="const char **" m68kreg="a0"/>
			<arg name="line" type="int *" m68kreg="a1"/>
			<arg name="data" type="const char **" m68kreg="a2"/>
			<arg name="flags" type="int *" m68kreg="a3"/>
		</method>
		<method name="ERR_peek_error" result="unsigned long">
		</method>
		<method name="ERR_peek_error_line" result="unsigned long">
			<arg name="file" type="const char **" m68kreg="a0"/>
			<arg name="line" type="int *" m68kreg="a1"/>
		</method>
		<method name="ERR_peek_error_line_data" result="unsigned long">
			<arg name="file" type="const char **" m68kreg="a0"/>
			<arg name="line" type="int *" m68kreg="a1"/>
			<arg name="data" type="const char **" m68kreg="a2"/>
			<arg name="flags" type="int *" m68kreg="a3"/>
		</method>
		<method name="ERR_peek_last_error" result="unsigned long">
		</method>
		<method name="ERR_peek_last_error_line" result="unsigned long">
			<arg name="file" type="const char **" m68kreg="a0"/>
			<arg name="line" type="int *" m68kreg="a1"/>
		</method>
		<method name="ERR_peek_last_error_line_data" result="unsigned long">
			<arg name="file" type="const char **" m68kreg="a0"/>
			<arg name="line" type="int *" m68kreg="a1"/>
			<arg name="data" type="const char **" m68kreg="a2"/>
			<arg name="flags" type="int *" m68kreg="a3"/>
		</method>
		<method name="ERR_clear_error" result="void">
		</method>
		<method name="ERR_error_string" result="char *">
			<arg name="e" type="unsigned long" m68kreg="d0"/>
			<arg name="buf" type="char *" m68kreg="a0"/>
		</method>
		<method name="ERR_error_string_n" result="void">
			<arg name="e" type="unsigned long" m68kreg="d0"/>
			<arg name="buf" type="char *" m68kreg="a0"/>
			<arg name="len" type="size_t" m68kreg="d1"/>
		</method>
		<method name="ERR_lib_error_string" result="const char *">
			<arg name="e" type="unsigned long" m68kreg="d0"/>
		</method>
		<method name="ERR_func_error_string" result="const char *">
			<arg name="e" type="unsigned long" m68kreg="d0"/>
		</method>
		<method name="ERR_reason_error_string" result="const char *">
			<arg name="e" type="unsigned long" m68kreg="d0"/>
		</method>
		<method name="ERR_print_errors_cb" result="void">
			<arg name="cb" type="int (*)(const char *str, size_t len, void *u)" m68kreg="a0"/>
			<arg name="u" type="void *" m68kreg="a1"/>
		</method>
		<method name="ERR_print_errors" result="void">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
		</method>
		<method name="ERR_add_error_dataA" result="void">
			<arg name="num" type="int" m68kreg="d0"/>
			<arg name="args" type="long *" m68kreg="a0"/>
		</method>
		<method name="ERR_add_error_data" result="void">
			<arg name="num" type="int" m68kreg="d0"/>
			<vararg name="dummy" type="long"/>
		</method>
		<method name="ERR_load_strings" result="void">
			<arg name="lib" type="int" m68kreg="d0"/>
			<arg name="str" type="ERR_STRING_DATA *" m68kreg="a0"/>
		</method>
		<method name="ERR_unload_strings" result="void">
			<arg name="lib" type="int" m68kreg="d0"/>
			<arg name="str" type="ERR_STRING_DATA *" m68kreg="a0"/>
		</method>
		<method name="ERR_load_ERR_strings" result="void">
		</method>
		<method name="ERR_load_crypto_strings" result="void">
		</method>
		<method name="ERR_free_strings" result="void">
		</method>
		<method name="ERR_remove_state" result="void">
			<arg name="pid" type="unsigned long" m68kreg="d0"/>
		</method>
		<method name="ERR_get_state" result="ERR_STATE *">
		</method>
		<method name="ERR_get_string_table" result="LHASH *">
		</method>
		<method name="ERR_get_err_state_table" result="LHASH *">
		</method>
		<method name="ERR_release_err_state_table" result="void">
			<arg name="hash" type="LHASH **" m68kreg="a0"/>
		</method>
		<method name="ERR_get_next_error_library" result="int">
		</method>
		<method name="ERR_get_implementation" result="const ERR_FNS *">
		</method>
		<method name="ERR_set_implementation" result="int">
			<arg name="fns" type="const ERR_FNS *" m68kreg="a0"/>
		</method>
		<method name="EVP_MD_CTX_init" result="void">
			<arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
		</method>
		<method name="EVP_MD_CTX_cleanup" result="int">
			<arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
		</method>
		<method name="EVP_MD_CTX_create" result="EVP_MD_CTX *">
		</method>
		<method name="EVP_MD_CTX_destroy" result="void">
			<arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
		</method>
		<method name="EVP_MD_CTX_copy_ex" result="int">
			<arg name="out" type="EVP_MD_CTX *" m68kreg="a0"/>
			<arg name="in" type="const EVP_MD_CTX *" m68kreg="a1"/>
		</method>
		<method name="EVP_DigestInit_ex" result="int">
			<arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
			<arg name="type" type="const EVP_MD *" m68kreg="a1"/>
			<arg name="impl" type="ENGINE *" m68kreg="a2"/>
		</method>
		<method name="EVP_DigestUpdate" result="int">
			<arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
			<arg name="d" type="const void *" m68kreg="a1"/>
			<arg name="cnt" type="unsigned int" m68kreg="d0"/>
		</method>
		<method name="EVP_DigestFinal_ex" result="int">
			<arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
			<arg name="md" type="unsigned char *" m68kreg="a1"/>
			<arg name="s" type="unsigned int *" m68kreg="a2"/>
		</method>
		<method name="EVP_Digest" result="int">
			<arg name="data" type="void *" m68kreg="a0"/>
			<arg name="count" type="unsigned int" m68kreg="d0"/>
			<arg name="md" type="unsigned char *" m68kreg="a1"/>
			<arg name="size" type="unsigned int *" m68kreg="a2"/>
			<arg name="type" type="const EVP_MD *" m68kreg="a3"/>
			<arg name="impl" type="ENGINE *" m68kreg="a4"/>
		</method>
		<method name="EVP_MD_CTX_copy" result="int">
			<arg name="out" type="EVP_MD_CTX *" m68kreg="a0"/>
			<arg name="in" type="const EVP_MD_CTX *" m68kreg="a1"/>
		</method>
		<method name="EVP_DigestInit" result="int">
			<arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
			<arg name="type" type="const EVP_MD *" m68kreg="a1"/>
		</method>
		<method name="EVP_DigestFinal" result="int">
			<arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
			<arg name="md" type="unsigned char *" m68kreg="a1"/>
			<arg name="s" type="unsigned int *" m68kreg="a2"/>
		</method>
		<method name="EVP_read_pw_string" result="int">
			<arg name="buf" type="char *" m68kreg="a0"/>
			<arg name="length" type="int" m68kreg="d0"/>
			<arg name="prompt" type="const char *" m68kreg="a1"/>
			<arg name="verify" type="int" m68kreg="d1"/>
		</method>
		<method name="EVP_set_pw_prompt" result="void">
			<arg name="prompt" type="char *" m68kreg="a0"/>
		</method>
		<method name="EVP_get_pw_prompt" result="char *">
		</method>
		<method name="EVP_BytesToKey" result="int">
			<arg name="type" type="const EVP_CIPHER *" m68kreg="a0"/>
			<arg name="md" type="const EVP_MD *" m68kreg="a1"/>
			<arg name="salt" type="const unsigned char *" m68kreg="a2"/>
			<arg name="data" type="const unsigned char *" m68kreg="a3"/>
			<arg name="datal" type="int" m68kreg="d0"/>
			<arg name="count" type="int" m68kreg="d1"/>
			<arg name="key" type="unsigned char *" m68kreg="a4"/>
			<arg name="iv" type="unsigned char *" m68kreg="a5"/>
		</method>
		<method name="EVP_EncryptInit" result="int">
			<arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="cipher" type="const EVP_CIPHER *" m68kreg="a1"/>
			<arg name="key" type="const unsigned char *" m68kreg="a2"/>
			<arg name="iv" type="const unsigned char *" m68kreg="a3"/>
		</method>
		<method name="EVP_EncryptInit_ex" result="int">
			<arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="cipher" type="const EVP_CIPHER *" m68kreg="a1"/>
			<arg name="impl" type="ENGINE *" m68kreg="a2"/>
			<arg name="key" type="const unsigned char *" m68kreg="a3"/>
			<arg name="iv" type="const unsigned char *" m68kreg="a4"/>
		</method>
		<method name="EVP_EncryptUpdate" result="int">
			<arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="outl" type="int *" m68kreg="a2"/>
			<arg name="in" type="const unsigned char *" m68kreg="a3"/>
			<arg name="inl" type="int" m68kreg="d0"/>
		</method>
		<method name="EVP_EncryptFinal_ex" result="int">
			<arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="outl" type="int *" m68kreg="a2"/>
		</method>
		<method name="EVP_EncryptFinal" result="int">
			<arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="outl" type="int *" m68kreg="a2"/>
		</method>
		<method name="EVP_DecryptInit" result="int">
			<arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="cipher" type="const EVP_CIPHER *" m68kreg="a1"/>
			<arg name="key" type="const unsigned char *" m68kreg="a2"/>
			<arg name="iv" type="const unsigned char *" m68kreg="a3"/>
		</method>
		<method name="EVP_DecryptInit_ex" result="int">
			<arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="cipher" type="const EVP_CIPHER *" m68kreg="a1"/>
			<arg name="impl" type="ENGINE *" m68kreg="a2"/>
			<arg name="key" type="const unsigned char *" m68kreg="a3"/>
			<arg name="iv" type="const unsigned char *" m68kreg="a4"/>
		</method>
		<method name="EVP_DecryptUpdate" result="int">
			<arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="outl" type="int *" m68kreg="a2"/>
			<arg name="in" type="const unsigned char *" m68kreg="a3"/>
			<arg name="inl" type="int" m68kreg="d0"/>
		</method>
		<method name="EVP_DecryptFinal" result="int">
			<arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="outm" type="unsigned char *" m68kreg="a1"/>
			<arg name="outl" type="int *" m68kreg="a2"/>
		</method>
		<method name="EVP_DecryptFinal_ex" result="int">
			<arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="outm" type="unsigned char *" m68kreg="a1"/>
			<arg name="outl" type="int *" m68kreg="a2"/>
		</method>
		<method name="EVP_CipherInit" result="int">
			<arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="cipher" type="const EVP_CIPHER *" m68kreg="a1"/>
			<arg name="key" type="const unsigned char *" m68kreg="a2"/>
			<arg name="iv" type="const unsigned char *" m68kreg="a3"/>
			<arg name="enc" type="int" m68kreg="d0"/>
		</method>
		<method name="EVP_CipherInit_ex" result="int">
			<arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="cipher" type="const EVP_CIPHER *" m68kreg="a1"/>
			<arg name="impl" type="ENGINE *" m68kreg="a2"/>
			<arg name="key" type="const unsigned char *" m68kreg="a3"/>
			<arg name="iv" type="const unsigned char *" m68kreg="a4"/>
			<arg name="enc" type="int" m68kreg="d0"/>
		</method>
		<method name="EVP_CipherUpdate" result="int">
			<arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="outl" type="int *" m68kreg="a2"/>
			<arg name="in" type="const unsigned char *" m68kreg="a3"/>
			<arg name="inl" type="int" m68kreg="d0"/>
		</method>
		<method name="EVP_CipherFinal" result="int">
			<arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="outm" type="unsigned char *" m68kreg="a1"/>
			<arg name="outl" type="int *" m68kreg="a2"/>
		</method>
		<method name="EVP_CipherFinal_ex" result="int">
			<arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="outm" type="unsigned char *" m68kreg="a1"/>
			<arg name="outl" type="int *" m68kreg="a2"/>
		</method>
		<method name="EVP_SignFinal" result="int">
			<arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
			<arg name="md" type="unsigned char *" m68kreg="a1"/>
			<arg name="s" type="unsigned int *" m68kreg="a2"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a3"/>
		</method>
		<method name="EVP_VerifyFinal" result="int">
			<arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
			<arg name="sigbuf" type="unsigned char *" m68kreg="a1"/>
			<arg name="siglen" type="unsigned int" m68kreg="d0"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a2"/>
		</method>
		<method name="EVP_OpenInit" result="int">
			<arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="type" type="const EVP_CIPHER *" m68kreg="a1"/>
			<arg name="ek" type="unsigned char *" m68kreg="a2"/>
			<arg name="ekl" type="int" m68kreg="d0"/>
			<arg name="iv" type="unsigned char *" m68kreg="a3"/>
			<arg name="priv" type="EVP_PKEY *" m68kreg="a4"/>
		</method>
		<method name="EVP_OpenFinal" result="int">
			<arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="outl" type="int *" m68kreg="a2"/>
		</method>
		<method name="EVP_SealInit" result="int">
			<arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="type" type="const EVP_CIPHER *" m68kreg="a1"/>
			<arg name="ek" type="unsigned char **" m68kreg="a2"/>
			<arg name="ekl" type="int *" m68kreg="a3"/>
			<arg name="iv" type="unsigned char *" m68kreg="a4"/>
			<arg name="pubk" type="EVP_PKEY **" m68kreg="a5"/>
			<arg name="npubk" type="int" m68kreg="d0"/>
		</method>
		<method name="EVP_SealFinal" result="int">
			<arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="outl" type="int *" m68kreg="a2"/>
		</method>
		<method name="EVP_EncodeInit" result="void">
			<arg name="ctx" type="EVP_ENCODE_CTX *" m68kreg="a0"/>
		</method>
		<method name="EVP_EncodeUpdate" result="void">
			<arg name="ctx" type="EVP_ENCODE_CTX *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="outl" type="int *" m68kreg="a2"/>
			<arg name="in" type="unsigned char *" m68kreg="a3"/>
			<arg name="inl" type="int" m68kreg="d0"/>
		</method>
		<method name="EVP_EncodeFinal" result="void">
			<arg name="ctx" type="EVP_ENCODE_CTX *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="outl" type="int *" m68kreg="a2"/>
		</method>
		<method name="EVP_EncodeBlock" result="int">
			<arg name="t" type="unsigned char *" m68kreg="a0"/>
			<arg name="f" type="const unsigned char *" m68kreg="a1"/>
			<arg name="n" type="int" m68kreg="d0"/>
		</method>
		<method name="EVP_DecodeInit" result="void">
			<arg name="ctx" type="EVP_ENCODE_CTX *" m68kreg="a0"/>
		</method>
		<method name="EVP_DecodeUpdate" result="int">
			<arg name="ctx" type="EVP_ENCODE_CTX *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="outl" type="int *" m68kreg="a2"/>
			<arg name="in" type="unsigned char *" m68kreg="a3"/>
			<arg name="inl" type="int" m68kreg="d0"/>
		</method>
		<method name="EVP_DecodeFinal" result="int">
			<arg name="ctx" type="EVP_ENCODE_CTX *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="outl" type="int *" m68kreg="a2"/>
		</method>
		<method name="EVP_DecodeBlock" result="int">
			<arg name="t" type="unsigned char *" m68kreg="a0"/>
			<arg name="f" type="const unsigned char *" m68kreg="a1"/>
			<arg name="n" type="int" m68kreg="d0"/>
		</method>
		<method name="EVP_CIPHER_CTX_init" result="void">
			<arg name="a" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
		</method>
		<method name="EVP_CIPHER_CTX_cleanup" result="int">
			<arg name="a" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
		</method>
		<method name="EVP_CIPHER_CTX_set_key_length" result="int">
			<arg name="x" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="keylen" type="int" m68kreg="d0"/>
		</method>
		<method name="EVP_CIPHER_CTX_set_padding" result="int">
			<arg name="c" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="pad" type="int" m68kreg="d0"/>
		</method>
		<method name="EVP_CIPHER_CTX_ctrl" result="int">
			<arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="arg" type="int" m68kreg="d1"/>
			<arg name="ptr" type="void *" m68kreg="a1"/>
		</method>
		<method name="BIO_f_md" result="BIO_METHOD *">
		</method>
		<method name="BIO_f_base64" result="BIO_METHOD *">
		</method>
		<method name="BIO_f_cipher" result="BIO_METHOD *">
		</method>
		<method name="BIO_f_reliable" result="BIO_METHOD *">
		</method>
		<method name="BIO_set_cipher" result="void">
			<arg name="b" type="BIO *" m68kreg="a0"/>
			<arg name="c" type="const EVP_CIPHER *" m68kreg="a1"/>
			<arg name="k" type="unsigned char *" m68kreg="a2"/>
			<arg name="i" type="unsigned char *" m68kreg="a3"/>
			<arg name="enc" type="int" m68kreg="d0"/>
		</method>
		<method name="EVP_md_null" result="const EVP_MD *">
		</method>
		<method name="EVP_md2" result="const EVP_MD *">
		</method>
		<method name="EVP_md4" result="const EVP_MD *">
		</method>
		<method name="EVP_md5" result="const EVP_MD *">
		</method>
		<method name="EVP_sha" result="const EVP_MD *">
		</method>
		<method name="EVP_sha1" result="const EVP_MD *">
		</method>
		<method name="EVP_dss" result="const EVP_MD *">
		</method>
		<method name="EVP_dss1" result="const EVP_MD *">
		</method>
		<method name="EVP_mdc2" result="const EVP_MD *">
		</method>
		<method name="EVP_ripemd160" result="const EVP_MD *">
		</method>
		<method name="EVP_enc_null" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_des_ecb" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_des_ede" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_des_ede3" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_des_ede_ecb" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_des_ede3_ecb" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_des_cfb64" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_des_cfb1" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_des_cfb8" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_des_ede_cfb64" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_des_ede3_cfb64" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_des_ede3_cfb1" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_des_ede3_cfb8" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_des_ofb" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_des_ede_ofb" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_des_ede3_ofb" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_des_cbc" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_des_ede_cbc" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_des_ede3_cbc" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_desx_cbc" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_rc4" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_rc4_40" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_idea_ecb" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_idea_cfb64" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_idea_ofb" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_idea_cbc" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_rc2_ecb" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_rc2_cbc" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_rc2_40_cbc" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_rc2_64_cbc" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_rc2_cfb64" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_rc2_ofb" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_bf_ecb" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_bf_cbc" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_bf_cfb64" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_bf_ofb" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_cast5_ecb" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_cast5_cbc" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_cast5_cfb64" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_cast5_ofb" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_rc5_32_12_16_cbc" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_rc5_32_12_16_ecb" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_rc5_32_12_16_cfb64" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_rc5_32_12_16_ofb" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_aes_128_ecb" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_aes_128_cbc" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_aes_128_cfb1" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_aes_128_cfb8" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_aes_128_cfb128" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_aes_128_ofb" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_aes_192_ecb" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_aes_192_cbc" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_aes_192_cfb1" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_aes_192_cfb8" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_aes_192_cfb128" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_aes_192_ofb" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_aes_256_ecb" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_aes_256_cbc" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_aes_256_cfb1" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_aes_256_cfb8" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_aes_256_cfb128" result="const EVP_CIPHER *">
		</method>
		<method name="EVP_aes_256_ofb" result="const EVP_CIPHER *">
		</method>
		<method name="OPENSSL_add_all_algorithms_noconf" result="void">
		</method>
		<method name="OPENSSL_add_all_algorithms_conf" result="void">
		</method>
		<method name="OpenSSL_add_all_ciphers" result="void">
		</method>
		<method name="OpenSSL_add_all_digests" result="void">
		</method>
		<method name="EVP_add_cipher" result="int">
			<arg name="cipher" type="const EVP_CIPHER *" m68kreg="a0"/>
		</method>
		<method name="EVP_add_digest" result="int">
			<arg name="digest" type="const EVP_MD *" m68kreg="a0"/>
		</method>
		<method name="EVP_get_cipherbyname" result="const EVP_CIPHER *">
			<arg name="name" type="const char *" m68kreg="a0"/>
		</method>
		<method name="EVP_get_digestbyname" result="const EVP_MD *">
			<arg name="name" type="const char *" m68kreg="a0"/>
		</method>
		<method name="EVP_cleanup" result="void">
		</method>
		<method name="EVP_PKEY_decrypt" result="int">
			<arg name="dec_key" type="unsigned char *" m68kreg="a0"/>
			<arg name="enc_key" type="unsigned char *" m68kreg="a1"/>
			<arg name="enc_key_len" type="int" m68kreg="d0"/>
			<arg name="private_key" type="EVP_PKEY *" m68kreg="a2"/>
		</method>
		<method name="EVP_PKEY_encrypt" result="int">
			<arg name="enc_key" type="unsigned char *" m68kreg="a0"/>
			<arg name="key" type="unsigned char *" m68kreg="a1"/>
			<arg name="key_len" type="int" m68kreg="d0"/>
			<arg name="pub_key" type="EVP_PKEY *" m68kreg="a2"/>
		</method>
		<method name="EVP_PKEY_type" result="int">
			<arg name="type" type="int" m68kreg="d0"/>
		</method>
		<method name="EVP_PKEY_bits" result="int">
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
		</method>
		<method name="EVP_PKEY_size" result="int">
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
		</method>
		<method name="EVP_PKEY_assign" result="int">
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="key" type="char *" m68kreg="a1"/>
		</method>
		<method name="EVP_PKEY_set1_RSA" result="int">
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
			<arg name="key" type="struct rsa_st *" m68kreg="a1"/>
		</method>
		<method name="EVP_PKEY_get1_RSA" result="struct rsa_st *">
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
		</method>
		<method name="EVP_PKEY_set1_DSA" result="int">
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
			<arg name="key" type="struct dsa_st *" m68kreg="a1"/>
		</method>
		<method name="EVP_PKEY_get1_DSA" result="struct dsa_st *">
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
		</method>
		<method name="EVP_PKEY_set1_DH" result="int">
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
			<arg name="key" type="struct dh_st *" m68kreg="a1"/>
		</method>
		<method name="EVP_PKEY_get1_DH" result="struct dh_st *">
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
		</method>
		<method name="EVP_PKEY_new" result="EVP_PKEY *">
		</method>
		<method name="EVP_PKEY_free" result="void">
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
		</method>
		<method name="d2i_PublicKey" result="EVP_PKEY *">
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="a" type="EVP_PKEY **" m68kreg="a0"/>
			<arg name="pp" type="const unsigned char **" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d1"/>
		</method>
		<method name="i2d_PublicKey" result="int">
			<arg name="a" type="EVP_PKEY *" m68kreg="a0"/>
			<arg name="pp" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="d2i_PrivateKey" result="EVP_PKEY *">
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="a" type="EVP_PKEY **" m68kreg="a0"/>
			<arg name="pp" type="const unsigned char **" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d1"/>
		</method>
		<method name="d2i_AutoPrivateKey" result="EVP_PKEY *">
			<arg name="a" type="EVP_PKEY **" m68kreg="a0"/>
			<arg name="pp" type="const unsigned char **" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_PrivateKey" result="int">
			<arg name="a" type="EVP_PKEY *" m68kreg="a0"/>
			<arg name="pp" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="EVP_PKEY_copy_parameters" result="int">
			<arg name="to" type="EVP_PKEY *" m68kreg="a0"/>
			<arg name="from" type="EVP_PKEY *" m68kreg="a1"/>
		</method>
		<method name="EVP_PKEY_missing_parameters" result="int">
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
		</method>
		<method name="EVP_PKEY_save_parameters" result="int">
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
			<arg name="mode" type="int" m68kreg="d0"/>
		</method>
		<method name="EVP_PKEY_cmp_parameters" result="int">
			<arg name="a" type="EVP_PKEY *" m68kreg="a0"/>
			<arg name="b" type="EVP_PKEY *" m68kreg="a1"/>
		</method>
		<method name="EVP_CIPHER_type" result="int">
			<arg name="ctx" type="const EVP_CIPHER *" m68kreg="a0"/>
		</method>
		<method name="EVP_CIPHER_param_to_asn1" result="int">
			<arg name="c" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="type" type="ASN1_TYPE *" m68kreg="a1"/>
		</method>
		<method name="EVP_CIPHER_asn1_to_param" result="int">
			<arg name="c" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="type" type="ASN1_TYPE *" m68kreg="a1"/>
		</method>
		<method name="EVP_CIPHER_set_asn1_iv" result="int">
			<arg name="c" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="type" type="ASN1_TYPE *" m68kreg="a1"/>
		</method>
		<method name="EVP_CIPHER_get_asn1_iv" result="int">
			<arg name="c" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="type" type="ASN1_TYPE *" m68kreg="a1"/>
		</method>
		<method name="PKCS5_PBE_keyivgen" result="int">
			<arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="pass" type="const char *" m68kreg="a1"/>
			<arg name="passlen" type="int" m68kreg="d0"/>
			<arg name="param" type="ASN1_TYPE *" m68kreg="a2"/>
			<arg name="cipher" type="const EVP_CIPHER *" m68kreg="a3"/>
			<arg name="md" type="const EVP_MD *" m68kreg="a4"/>
			<arg name="en_de" type="int" m68kreg="d1"/>
		</method>
		<method name="PKCS5_PBKDF2_HMAC_SHA1" result="int">
			<arg name="pass" type="const char *" m68kreg="a0"/>
			<arg name="passlen" type="int" m68kreg="d0"/>
			<arg name="salt" type="unsigned char *" m68kreg="a1"/>
			<arg name="saltlen" type="int" m68kreg="d1"/>
			<arg name="iter" type="int" m68kreg="d2"/>
			<arg name="keylen" type="int" m68kreg="d3"/>
			<arg name="out" type="unsigned char *" m68kreg="a2"/>
		</method>
		<method name="PKCS5_v2_PBE_keyivgen" result="int">
			<arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="pass" type="const char *" m68kreg="a1"/>
			<arg name="passlen" type="int" m68kreg="d0"/>
			<arg name="param" type="ASN1_TYPE *" m68kreg="a2"/>
			<arg name="cipher" type="const EVP_CIPHER *" m68kreg="a3"/>
			<arg name="md" type="const EVP_MD *" m68kreg="a4"/>
			<arg name="en_de" type="int" m68kreg="d1"/>
		</method>
		<method name="PKCS5_PBE_add" result="void">
		</method>
		<method name="EVP_PBE_CipherInit" result="int">
			<arg name="pbe_obj" type="ASN1_OBJECT *" m68kreg="a0"/>
			<arg name="pass" type="const char *" m68kreg="a1"/>
			<arg name="passlen" type="int" m68kreg="d0"/>
			<arg name="param" type="ASN1_TYPE *" m68kreg="a2"/>
			<arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a3"/>
			<arg name="en_de" type="int" m68kreg="d1"/>
		</method>
		<method name="EVP_PBE_alg_add" result="int">
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="cipher" type="const EVP_CIPHER *" m68kreg="a0"/>
			<arg name="md" type="const EVP_MD *" m68kreg="a1"/>
			<arg name="keygen" type="EVP_PBE_KEYGEN *" m68kreg="a2"/>
		</method>
		<method name="EVP_PBE_cleanup" result="void">
		</method>
		<method name="ERR_load_EVP_strings" result="void">
		</method>
		<method name="HMAC_CTX_init" result="void">
			<arg name="ctx" type="HMAC_CTX *" m68kreg="a0"/>
		</method>
		<method name="HMAC_CTX_cleanup" result="void">
			<arg name="ctx" type="HMAC_CTX *" m68kreg="a0"/>
		</method>
		<method name="HMAC_Init" result="void">
			<arg name="ctx" type="HMAC_CTX *" m68kreg="a0"/>
			<arg name="key" type="const void *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d0"/>
			<arg name="md" type="const EVP_MD *" m68kreg="a2"/>
		</method>
		<method name="HMAC_Init_ex" result="void">
			<arg name="ctx" type="HMAC_CTX *" m68kreg="a0"/>
			<arg name="key" type="const void *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d0"/>
			<arg name="md" type="const EVP_MD *" m68kreg="a2"/>
			<arg name="impl" type="ENGINE *" m68kreg="a3"/>
		</method>
		<method name="HMAC_Update" result="void">
			<arg name="ctx" type="HMAC_CTX *" m68kreg="a0"/>
			<arg name="data" type="const unsigned char *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d0"/>
		</method>
		<method name="HMAC_Final" result="void">
			<arg name="ctx" type="HMAC_CTX *" m68kreg="a0"/>
			<arg name="md" type="unsigned char *" m68kreg="a1"/>
			<arg name="len" type="unsigned int *" m68kreg="a2"/>
		</method>
		<method name="HMAC" result="unsigned char *">
			<arg name="evp_md" type="const EVP_MD *" m68kreg="a0"/>
			<arg name="key" type="const void *" m68kreg="a1"/>
			<arg name="key_len" type="int" m68kreg="d0"/>
			<arg name="d" type="const unsigned char *" m68kreg="a2"/>
			<arg name="n" type="int" m68kreg="d1"/>
			<arg name="md" type="unsigned char *" m68kreg="a3"/>
			<arg name="md_len" type="unsigned int *" m68kreg="a4"/>
		</method>
		<method name="KRB5_ENCDATA_new" result="KRB5_ENCDATA *">
		</method>
		<method name="KRB5_ENCDATA_free" result="void">
			<arg name="a" type="KRB5_ENCDATA *" m68kreg="a0"/>
		</method>
		<method name="d2i_KRB5_ENCDATA" result="KRB5_ENCDATA *">
			<arg name="a" type="KRB5_ENCDATA **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_KRB5_ENCDATA" result="int">
			<arg name="a" type="KRB5_ENCDATA *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="KRB5_ENCDATA_it" result="const ASN1_ITEM *">
		</method>
		<method name="KRB5_PRINCNAME_new" result="KRB5_PRINCNAME *">
		</method>
		<method name="KRB5_PRINCNAME_free" result="void">
			<arg name="a" type="KRB5_PRINCNAME *" m68kreg="a0"/>
		</method>
		<method name="d2i_KRB5_PRINCNAME" result="KRB5_PRINCNAME *">
			<arg name="a" type="KRB5_PRINCNAME **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_KRB5_PRINCNAME" result="int">
			<arg name="a" type="KRB5_PRINCNAME *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="KRB5_PRINCNAME_it" result="const ASN1_ITEM *">
		</method>
		<method name="KRB5_TKTBODY_new" result="KRB5_TKTBODY *">
		</method>
		<method name="KRB5_TKTBODY_free" result="void">
			<arg name="a" type="KRB5_TKTBODY *" m68kreg="a0"/>
		</method>
		<method name="d2i_KRB5_TKTBODY" result="KRB5_TKTBODY *">
			<arg name="a" type="KRB5_TKTBODY **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_KRB5_TKTBODY" result="int">
			<arg name="a" type="KRB5_TKTBODY *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="KRB5_TKTBODY_it" result="const ASN1_ITEM *">
		</method>
		<method name="KRB5_APREQBODY_new" result="KRB5_APREQBODY *">
		</method>
		<method name="KRB5_APREQBODY_free" result="void">
			<arg name="a" type="KRB5_APREQBODY *" m68kreg="a0"/>
		</method>
		<method name="d2i_KRB5_APREQBODY" result="KRB5_APREQBODY *">
			<arg name="a" type="KRB5_APREQBODY **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_KRB5_APREQBODY" result="int">
			<arg name="a" type="KRB5_APREQBODY *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="KRB5_APREQBODY_it" result="const ASN1_ITEM *">
		</method>
		<method name="KRB5_TICKET_new" result="KRB5_TICKET *">
		</method>
		<method name="KRB5_TICKET_free" result="void">
			<arg name="a" type="KRB5_TICKET *" m68kreg="a0"/>
		</method>
		<method name="d2i_KRB5_TICKET" result="KRB5_TICKET *">
			<arg name="a" type="KRB5_TICKET **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_KRB5_TICKET" result="int">
			<arg name="a" type="KRB5_TICKET *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="KRB5_TICKET_it" result="const ASN1_ITEM *">
		</method>
		<method name="KRB5_APREQ_new" result="KRB5_APREQ *">
		</method>
		<method name="KRB5_APREQ_free" result="void">
			<arg name="a" type="KRB5_APREQ *" m68kreg="a0"/>
		</method>
		<method name="d2i_KRB5_APREQ" result="KRB5_APREQ *">
			<arg name="a" type="KRB5_APREQ **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_KRB5_APREQ" result="int">
			<arg name="a" type="KRB5_APREQ *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="KRB5_APREQ_it" result="const ASN1_ITEM *">
		</method>
		<method name="KRB5_CHECKSUM_new" result="KRB5_CHECKSUM *">
		</method>
		<method name="KRB5_CHECKSUM_free" result="void">
			<arg name="a" type="KRB5_CHECKSUM *" m68kreg="a0"/>
		</method>
		<method name="d2i_KRB5_CHECKSUM" result="KRB5_CHECKSUM *">
			<arg name="a" type="KRB5_CHECKSUM **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_KRB5_CHECKSUM" result="int">
			<arg name="a" type="KRB5_CHECKSUM *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="KRB5_CHECKSUM_it" result="const ASN1_ITEM *">
		</method>
		<method name="KRB5_ENCKEY_new" result="KRB5_ENCKEY *">
		</method>
		<method name="KRB5_ENCKEY_free" result="void">
			<arg name="a" type="KRB5_ENCKEY *" m68kreg="a0"/>
		</method>
		<method name="d2i_KRB5_ENCKEY" result="KRB5_ENCKEY *">
			<arg name="a" type="KRB5_ENCKEY **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_KRB5_ENCKEY" result="int">
			<arg name="a" type="KRB5_ENCKEY *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="KRB5_ENCKEY_it" result="const ASN1_ITEM *">
		</method>
		<method name="KRB5_AUTHDATA_new" result="KRB5_AUTHDATA *">
		</method>
		<method name="KRB5_AUTHDATA_free" result="void">
			<arg name="a" type="KRB5_AUTHDATA *" m68kreg="a0"/>
		</method>
		<method name="d2i_KRB5_AUTHDATA" result="KRB5_AUTHDATA *">
			<arg name="a" type="KRB5_AUTHDATA **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_KRB5_AUTHDATA" result="int">
			<arg name="a" type="KRB5_AUTHDATA *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="KRB5_AUTHDATA_it" result="const ASN1_ITEM *">
		</method>
		<method name="KRB5_AUTHENTBODY_new" result="KRB5_AUTHENTBODY *">
		</method>
		<method name="KRB5_AUTHENTBODY_free" result="void">
			<arg name="a" type="KRB5_AUTHENTBODY *" m68kreg="a0"/>
		</method>
		<method name="d2i_KRB5_AUTHENTBODY" result="KRB5_AUTHENTBODY *">
			<arg name="a" type="KRB5_AUTHENTBODY **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_KRB5_AUTHENTBODY" result="int">
			<arg name="a" type="KRB5_AUTHENTBODY *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="KRB5_AUTHENTBODY_it" result="const ASN1_ITEM *">
		</method>
		<method name="KRB5_AUTHENT_new" result="KRB5_AUTHENT *">
		</method>
		<method name="KRB5_AUTHENT_free" result="void">
			<arg name="a" type="KRB5_AUTHENT *" m68kreg="a0"/>
		</method>
		<method name="d2i_KRB5_AUTHENT" result="KRB5_AUTHENT *">
			<arg name="a" type="KRB5_AUTHENT **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_KRB5_AUTHENT" result="int">
			<arg name="a" type="KRB5_AUTHENT *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="KRB5_AUTHENT_it" result="const ASN1_ITEM *">
		</method>
		<method name="lh_new" result="LHASH *">
			<arg name="h" type="LHASH_HASH_FN_TYPE" m68kreg="d0"/>
			<arg name="c" type="LHASH_COMP_FN_TYPE" m68kreg="d1"/>
		</method>
		<method name="lh_free" result="void">
			<arg name="lh" type="LHASH *" m68kreg="a0"/>
		</method>
		<method name="lh_insert" result="void *">
			<arg name="lh" type="LHASH *" m68kreg="a0"/>
			<arg name="data" type="void *" m68kreg="a1"/>
		</method>
		<method name="lh_delete" result="void *">
			<arg name="lh" type="LHASH *" m68kreg="a0"/>
			<arg name="data" type="const void *" m68kreg="a1"/>
		</method>
		<method name="lh_retrieve" result="void *">
			<arg name="lh" type="LHASH *" m68kreg="a0"/>
			<arg name="data" type="const void *" m68kreg="a1"/>
		</method>
		<method name="lh_doall" result="void">
			<arg name="lh" type="LHASH *" m68kreg="a0"/>
			<arg name="func" type="LHASH_DOALL_FN_TYPE" m68kreg="d0"/>
		</method>
		<method name="lh_doall_arg" result="void">
			<arg name="lh" type="LHASH *" m68kreg="a0"/>
			<arg name="func" type="LHASH_DOALL_ARG_FN_TYPE" m68kreg="d0"/>
			<arg name="arg" type="void *" m68kreg="a1"/>
		</method>
		<method name="lh_strhash" result="unsigned long">
			<arg name="c" type="const char *" m68kreg="a0"/>
		</method>
		<method name="lh_num_items" result="unsigned long">
			<arg name="lh" type="const LHASH *" m68kreg="a0"/>
		</method>
		<method name="lh_stats_bio" result="void">
			<arg name="lh" type="const LHASH *" m68kreg="a0"/>
			<arg name="out" type="BIO *" m68kreg="a1"/>
		</method>
		<method name="lh_node_stats_bio" result="void">
			<arg name="lh" type="const LHASH *" m68kreg="a0"/>
			<arg name="out" type="BIO *" m68kreg="a1"/>
		</method>
		<method name="lh_node_usage_stats_bio" result="void">
			<arg name="lh" type="const LHASH *" m68kreg="a0"/>
			<arg name="out" type="BIO *" m68kreg="a1"/>
		</method>
		<method name="OBJ_NAME_init" result="int">
		</method>
		<method name="OBJ_NAME_new_index" result="int">
			<arg name="hash_func" type="unsigned long (*)(const char *)" m68kreg="a0"/>
			<arg name="cmp_func" type="int (*)(const char *, const char *)" m68kreg="a1"/>
			<arg name="free_func" type="void (*)(const char *, int, const char *)" m68kreg="a2"/>
		</method>
		<method name="OBJ_NAME_get" result="const char *">
			<arg name="name" type="const char *" m68kreg="a0"/>
			<arg name="type" type="int" m68kreg="d0"/>
		</method>
		<method name="OBJ_NAME_add" result="int">
			<arg name="name" type="const char *" m68kreg="a0"/>
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="data" type="const char *" m68kreg="a1"/>
		</method>
		<method name="OBJ_NAME_remove" result="int">
			<arg name="name" type="const char *" m68kreg="a0"/>
			<arg name="type" type="int" m68kreg="d0"/>
		</method>
		<method name="OBJ_NAME_cleanup" result="void">
			<arg name="type" type="int" m68kreg="d0"/>
		</method>
		<method name="OBJ_NAME_do_all" result="void">
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="fn" type="void (*)(const OBJ_NAME *, void *arg)" m68kreg="a0"/>
			<arg name="arg" type="void *" m68kreg="a1"/>
		</method>
		<method name="OBJ_NAME_do_all_sorted" result="void">
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="fn" type="void (*)(const OBJ_NAME *, void *arg)" m68kreg="a0"/>
			<arg name="arg" type="void *" m68kreg="a1"/>
		</method>
		<method name="OBJ_dup" result="ASN1_OBJECT *">
			<arg name="o" type="const ASN1_OBJECT *" m68kreg="a0"/>
		</method>
		<method name="OBJ_nid2obj" result="ASN1_OBJECT *">
			<arg name="n" type="int" m68kreg="d0"/>
		</method>
		<method name="OBJ_nid2ln" result="const char *">
			<arg name="n" type="int" m68kreg="d0"/>
		</method>
		<method name="OBJ_nid2sn" result="const char *">
			<arg name="n" type="int" m68kreg="d0"/>
		</method>
		<method name="OBJ_obj2nid" result="int">
			<arg name="o" type="const ASN1_OBJECT *" m68kreg="a0"/>
		</method>
		<method name="OBJ_txt2obj" result="ASN1_OBJECT *">
			<arg name="s" type="const char *" m68kreg="a0"/>
			<arg name="no_name" type="int" m68kreg="d0"/>
		</method>
		<method name="OBJ_obj2txt" result="int">
			<arg name="buf" type="char *" m68kreg="a0"/>
			<arg name="buf_len" type="int" m68kreg="d0"/>
			<arg name="a" type="const ASN1_OBJECT *" m68kreg="a1"/>
			<arg name="no_name" type="int" m68kreg="d1"/>
		</method>
		<method name="OBJ_txt2nid" result="int">
			<arg name="s" type="const char *" m68kreg="a0"/>
		</method>
		<method name="OBJ_ln2nid" result="int">
			<arg name="s" type="const char *" m68kreg="a0"/>
		</method>
		<method name="OBJ_sn2nid" result="int">
			<arg name="s" type="const char *" m68kreg="a0"/>
		</method>
		<method name="OBJ_cmp" result="int">
			<arg name="a" type="const ASN1_OBJECT *" m68kreg="a0"/>
			<arg name="b" type="const ASN1_OBJECT *" m68kreg="a1"/>
		</method>
		<method name="OBJ_bsearch" result="const char *">
			<arg name="key" type="const char *" m68kreg="a0"/>
			<arg name="base" type="const char *" m68kreg="a1"/>
			<arg name="num" type="int" m68kreg="d0"/>
			<arg name="size" type="int" m68kreg="d1"/>
			<arg name="cmp" type="int (*)(const void *, const void *)" m68kreg="a2"/>
		</method>
		<method name="OBJ_new_nid" result="int">
			<arg name="num" type="int" m68kreg="d0"/>
		</method>
		<method name="OBJ_add_object" result="int">
			<arg name="obj" type="const ASN1_OBJECT *" m68kreg="a0"/>
		</method>
		<method name="OBJ_create" result="int">
			<arg name="oid" type="const char *" m68kreg="a0"/>
			<arg name="sn" type="const char *" m68kreg="a1"/>
			<arg name="ln" type="const char *" m68kreg="a2"/>
		</method>
		<method name="OBJ_cleanup" result="void">
		</method>
		<method name="OBJ_create_objects" result="int">
			<arg name="in" type="BIO *" m68kreg="a0"/>
		</method>
		<method name="ERR_load_OBJ_strings" result="void">
		</method>
		<method name="OCSP_sendreq_bio" result="OCSP_RESPONSE *">
			<arg name="b" type="BIO *" m68kreg="a0"/>
			<arg name="path" type="char *" m68kreg="a1"/>
			<arg name="req" type="OCSP_REQUEST *" m68kreg="a2"/>
		</method>
		<method name="OCSP_cert_to_id" result="OCSP_CERTID *">
			<arg name="dgst" type="const EVP_MD *" m68kreg="a0"/>
			<arg name="subject" type="X509 *" m68kreg="a1"/>
			<arg name="issuer" type="X509 *" m68kreg="a2"/>
		</method>
		<method name="OCSP_cert_id_new" result="OCSP_CERTID *">
			<arg name="dgst" type="const EVP_MD *" m68kreg="a0"/>
			<arg name="issuerName" type="X509_NAME *" m68kreg="a1"/>
			<arg name="issuerKey" type="ASN1_BIT_STRING *" m68kreg="a2"/>
			<arg name="serialNumber" type="ASN1_INTEGER *" m68kreg="a3"/>
		</method>
		<method name="OCSP_request_add0_id" result="OCSP_ONEREQ *">
			<arg name="req" type="OCSP_REQUEST *" m68kreg="a0"/>
			<arg name="cid" type="OCSP_CERTID *" m68kreg="a1"/>
		</method>
		<method name="OCSP_request_add1_nonce" result="int">
			<arg name="req" type="OCSP_REQUEST *" m68kreg="a0"/>
			<arg name="val" type="unsigned char *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d0"/>
		</method>
		<method name="OCSP_basic_add1_nonce" result="int">
			<arg name="resp" type="OCSP_BASICRESP *" m68kreg="a0"/>
			<arg name="val" type="unsigned char *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d0"/>
		</method>
		<method name="OCSP_check_nonce" result="int">
			<arg name="req" type="OCSP_REQUEST *" m68kreg="a0"/>
			<arg name="bs" type="OCSP_BASICRESP *" m68kreg="a1"/>
		</method>
		<method name="OCSP_copy_nonce" result="int">
			<arg name="resp" type="OCSP_BASICRESP *" m68kreg="a0"/>
			<arg name="req" type="OCSP_REQUEST *" m68kreg="a1"/>
		</method>
		<method name="OCSP_request_set1_name" result="int">
			<arg name="req" type="OCSP_REQUEST *" m68kreg="a0"/>
			<arg name="nm" type="X509_NAME *" m68kreg="a1"/>
		</method>
		<method name="OCSP_request_add1_cert" result="int">
			<arg name="req" type="OCSP_REQUEST *" m68kreg="a0"/>
			<arg name="cert" type="X509 *" m68kreg="a1"/>
		</method>
		<method name="OCSP_request_sign" result="int">
			<arg name="req" type="OCSP_REQUEST *" m68kreg="a0"/>
			<arg name="signer" type="X509 *" m68kreg="a1"/>
			<arg name="key" type="EVP_PKEY *" m68kreg="a2"/>
			<arg name="dgst" type="const EVP_MD *" m68kreg="a3"/>
			<arg name="certs" type="STACK_OF(X509) *" m68kreg="a4"/>
			<arg name="flags" type="unsigned long" m68kreg="d0"/>
		</method>
		<method name="OCSP_response_status" result="int">
			<arg name="resp" type="OCSP_RESPONSE *" m68kreg="a0"/>
		</method>
		<method name="OCSP_response_get1_basic" result="OCSP_BASICRESP *">
			<arg name="resp" type="OCSP_RESPONSE *" m68kreg="a0"/>
		</method>
		<method name="OCSP_resp_count" result="int">
			<arg name="bs" type="OCSP_BASICRESP *" m68kreg="a0"/>
		</method>
		<method name="OCSP_resp_get0" result="OCSP_SINGLERESP *">
			<arg name="bs" type="OCSP_BASICRESP *" m68kreg="a0"/>
			<arg name="idx" type="int" m68kreg="d0"/>
		</method>
		<method name="OCSP_resp_find" result="int">
			<arg name="bs" type="OCSP_BASICRESP *" m68kreg="a0"/>
			<arg name="id" type="OCSP_CERTID *" m68kreg="a1"/>
			<arg name="last" type="int" m68kreg="d0"/>
		</method>
		<method name="OCSP_single_get0_status" result="int">
			<arg name="single" type="OCSP_SINGLERESP *" m68kreg="a0"/>
			<arg name="reason" type="int *" m68kreg="a1"/>
			<arg name="revtime" type="ASN1_GENERALIZEDTIME **" m68kreg="a2"/>
			<arg name="thisupd" type="ASN1_GENERALIZEDTIME **" m68kreg="a3"/>
			<arg name="nextupd" type="ASN1_GENERALIZEDTIME **" m68kreg="a4"/>
		</method>
		<method name="OCSP_resp_find_status" result="int">
			<arg name="bs" type="OCSP_BASICRESP *" m68kreg="a0"/>
			<arg name="id" type="OCSP_CERTID *" m68kreg="a1"/>
			<arg name="status" type="int *" m68kreg="a2"/>
			<arg name="reason" type="int *" m68kreg="a3"/>
			<arg name="revtime" type="ASN1_GENERALIZEDTIME **" m68kreg="a4"/>
			<arg name="thisupd" type="ASN1_GENERALIZEDTIME **" m68kreg="a5"/>
			<arg name="nextupd" type="ASN1_GENERALIZEDTIME **" m68kreg="a6"/>
		</method>
		<method name="OCSP_check_validity" result="int">
			<arg name="thisupd" type="ASN1_GENERALIZEDTIME *" m68kreg="a0"/>
			<arg name="nextupd" type="ASN1_GENERALIZEDTIME *" m68kreg="a1"/>
			<arg name="sec" type="long" m68kreg="d0"/>
			<arg name="maxsec" type="long" m68kreg="d1"/>
		</method>
		<method name="OCSP_request_verify" result="int">
			<arg name="req" type="OCSP_REQUEST *" m68kreg="a0"/>
			<arg name="certs" type="STACK_OF(X509) *" m68kreg="a1"/>
			<arg name="store" type="X509_STORE *" m68kreg="a2"/>
			<arg name="flags" type="unsigned long" m68kreg="d0"/>
		</method>
		<method name="OCSP_parse_url" result="int">
			<arg name="url" type="char *" m68kreg="a0"/>
			<arg name="phost" type="char **" m68kreg="a1"/>
			<arg name="pport" type="char **" m68kreg="a2"/>
			<arg name="ppath" type="char **" m68kreg="a3"/>
			<arg name="pssl" type="int *" m68kreg="a4"/>
		</method>
		<method name="OCSP_id_issuer_cmp" result="int">
			<arg name="a" type="OCSP_CERTID *" m68kreg="a0"/>
			<arg name="b" type="OCSP_CERTID *" m68kreg="a1"/>
		</method>
		<method name="OCSP_id_cmp" result="int">
			<arg name="a" type="OCSP_CERTID *" m68kreg="a0"/>
			<arg name="b" type="OCSP_CERTID *" m68kreg="a1"/>
		</method>
		<method name="OCSP_request_onereq_count" result="int">
			<arg name="req" type="OCSP_REQUEST *" m68kreg="a0"/>
		</method>
		<method name="OCSP_request_onereq_get0" result="OCSP_ONEREQ *">
			<arg name="req" type="OCSP_REQUEST *" m68kreg="a0"/>
			<arg name="i" type="int" m68kreg="d0"/>
		</method>
		<method name="OCSP_onereq_get0_id" result="OCSP_CERTID *">
			<arg name="one" type="OCSP_ONEREQ *" m68kreg="a0"/>
		</method>
		<method name="OCSP_id_get0_info" result="int">
			<arg name="piNameHash" type="ASN1_OCTET_STRING **" m68kreg="a0"/>
			<arg name="pmd" type="ASN1_OBJECT **" m68kreg="a1"/>
			<arg name="pikeyHash" type="ASN1_OCTET_STRING **" m68kreg="a2"/>
			<arg name="pserial" type="ASN1_INTEGER **" m68kreg="a3"/>
			<arg name="cid" type="OCSP_CERTID *" m68kreg="a4"/>
		</method>
		<method name="OCSP_request_is_signed" result="int">
			<arg name="req" type="OCSP_REQUEST *" m68kreg="a0"/>
		</method>
		<method name="OCSP_response_create" result="OCSP_RESPONSE *">
			<arg name="status" type="int" m68kreg="d0"/>
			<arg name="bs" type="OCSP_BASICRESP *" m68kreg="a0"/>
		</method>
		<method name="OCSP_basic_add1_status" result="OCSP_SINGLERESP *">
			<arg name="rsp" type="OCSP_BASICRESP *" m68kreg="a0"/>
			<arg name="cid" type="OCSP_CERTID *" m68kreg="a1"/>
			<arg name="status" type="int" m68kreg="d0"/>
			<arg name="reason" type="int" m68kreg="d1"/>
			<arg name="revtime" type="ASN1_TIME *" m68kreg="a2"/>
			<arg name="thisupd" type="ASN1_TIME *" m68kreg="a3"/>
			<arg name="nextupd" type="ASN1_TIME *" m68kreg="a4"/>
		</method>
		<method name="OCSP_basic_add1_cert" result="int">
			<arg name="resp" type="OCSP_BASICRESP *" m68kreg="a0"/>
			<arg name="cert" type="X509 *" m68kreg="a1"/>
		</method>
		<method name="OCSP_basic_sign" result="int">
			<arg name="brsp" type="OCSP_BASICRESP *" m68kreg="a0"/>
			<arg name="signer" type="X509 *" m68kreg="a1"/>
			<arg name="key" type="EVP_PKEY *" m68kreg="a2"/>
			<arg name="dgst" type="const EVP_MD *" m68kreg="a3"/>
			<arg name="certs" type="STACK_OF(X509) *" m68kreg="a4"/>
			<arg name="flags" type="unsigned long" m68kreg="d0"/>
		</method>
		<method name="ASN1_STRING_encode" result="ASN1_STRING *">
			<arg name="s" type="ASN1_STRING *" m68kreg="a0"/>
			<arg name="i2d" type="int (*)()" m68kreg="a1"/>
			<arg name="data" type="char *" m68kreg="a2"/>
			<arg name="sk" type="STACK_OF(ASN1_OBJECT) *" m68kreg="a3"/>
		</method>
		<method name="OCSP_crlID_new" result="X509_EXTENSION *">
			<arg name="url" type="char *" m68kreg="a0"/>
			<arg name="n" type="long *" m68kreg="a1"/>
			<arg name="tim" type="char *" m68kreg="a2"/>
		</method>
		<method name="OCSP_accept_responses_new" result="X509_EXTENSION *">
			<arg name="oids" type="char **" m68kreg="a0"/>
		</method>
		<method name="OCSP_archive_cutoff_new" result="X509_EXTENSION *">
			<arg name="tim" type="char *" m68kreg="a0"/>
		</method>
		<method name="OCSP_url_svcloc_new" result="X509_EXTENSION *">
			<arg name="issuer" type="X509_NAME *" m68kreg="a0"/>
			<arg name="urls" type="char **" m68kreg="a1"/>
		</method>
		<method name="OCSP_REQUEST_get_ext_count" result="int">
			<arg name="x" type="OCSP_REQUEST *" m68kreg="a0"/>
		</method>
		<method name="OCSP_REQUEST_get_ext_by_NID" result="int">
			<arg name="x" type="OCSP_REQUEST *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="lastpos" type="int" m68kreg="d1"/>
		</method>
		<method name="OCSP_REQUEST_get_ext_by_OBJ" result="int">
			<arg name="x" type="OCSP_REQUEST *" m68kreg="a0"/>
			<arg name="obj" type="ASN1_OBJECT *" m68kreg="a1"/>
			<arg name="lastpos" type="int" m68kreg="d0"/>
		</method>
		<method name="OCSP_REQUEST_get_ext_by_critical" result="int">
			<arg name="x" type="OCSP_REQUEST *" m68kreg="a0"/>
			<arg name="crit" type="int" m68kreg="d0"/>
			<arg name="lastpos" type="int" m68kreg="d1"/>
		</method>
		<method name="OCSP_REQUEST_get_ext" result="X509_EXTENSION *">
			<arg name="x" type="OCSP_REQUEST *" m68kreg="a0"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="OCSP_REQUEST_delete_ext" result="X509_EXTENSION *">
			<arg name="x" type="OCSP_REQUEST *" m68kreg="a0"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="OCSP_REQUEST_get1_ext_d2i" result="void *">
			<arg name="x" type="OCSP_REQUEST *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="crit" type="int *" m68kreg="a1"/>
			<arg name="idx" type="int *" m68kreg="a2"/>
		</method>
		<method name="OCSP_REQUEST_add1_ext_i2d" result="int">
			<arg name="x" type="OCSP_REQUEST *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="value" type="void *" m68kreg="a1"/>
			<arg name="crit" type="int" m68kreg="d1"/>
			<arg name="flags" type="unsigned long" m68kreg="d2"/>
		</method>
		<method name="OCSP_REQUEST_add_ext" result="int">
			<arg name="x" type="OCSP_REQUEST *" m68kreg="a0"/>
			<arg name="ex" type="X509_EXTENSION *" m68kreg="a1"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="OCSP_ONEREQ_get_ext_count" result="int">
			<arg name="x" type="OCSP_ONEREQ *" m68kreg="a0"/>
		</method>
		<method name="OCSP_ONEREQ_get_ext_by_NID" result="int">
			<arg name="x" type="OCSP_ONEREQ *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="lastpos" type="int" m68kreg="d1"/>
		</method>
		<method name="OCSP_ONEREQ_get_ext_by_OBJ" result="int">
			<arg name="x" type="OCSP_ONEREQ *" m68kreg="a0"/>
			<arg name="obj" type="ASN1_OBJECT *" m68kreg="a1"/>
			<arg name="lastpos" type="int" m68kreg="d0"/>
		</method>
		<method name="OCSP_ONEREQ_get_ext_by_critical" result="int">
			<arg name="x" type="OCSP_ONEREQ *" m68kreg="a0"/>
			<arg name="crit" type="int" m68kreg="d0"/>
			<arg name="lastpos" type="int" m68kreg="d1"/>
		</method>
		<method name="OCSP_ONEREQ_get_ext" result="X509_EXTENSION *">
			<arg name="x" type="OCSP_ONEREQ *" m68kreg="a0"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="OCSP_ONEREQ_delete_ext" result="X509_EXTENSION *">
			<arg name="x" type="OCSP_ONEREQ *" m68kreg="a0"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="OCSP_ONEREQ_get1_ext_d2i" result="void *">
			<arg name="x" type="OCSP_ONEREQ *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="crit" type="int *" m68kreg="a1"/>
			<arg name="idx" type="int *" m68kreg="a2"/>
		</method>
		<method name="OCSP_ONEREQ_add1_ext_i2d" result="int">
			<arg name="x" type="OCSP_ONEREQ *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="value" type="void *" m68kreg="a1"/>
			<arg name="crit" type="int" m68kreg="d1"/>
			<arg name="flags" type="unsigned long" m68kreg="d2"/>
		</method>
		<method name="OCSP_ONEREQ_add_ext" result="int">
			<arg name="x" type="OCSP_ONEREQ *" m68kreg="a0"/>
			<arg name="ex" type="X509_EXTENSION *" m68kreg="a1"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="OCSP_BASICRESP_get_ext_count" result="int">
			<arg name="x" type="OCSP_BASICRESP *" m68kreg="a0"/>
		</method>
		<method name="OCSP_BASICRESP_get_ext_by_NID" result="int">
			<arg name="x" type="OCSP_BASICRESP *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="lastpos" type="int" m68kreg="d1"/>
		</method>
		<method name="OCSP_BASICRESP_get_ext_by_OBJ" result="int">
			<arg name="x" type="OCSP_BASICRESP *" m68kreg="a0"/>
			<arg name="obj" type="ASN1_OBJECT *" m68kreg="a1"/>
			<arg name="lastpos" type="int" m68kreg="d0"/>
		</method>
		<method name="OCSP_BASICRESP_get_ext_by_critical" result="int">
			<arg name="x" type="OCSP_BASICRESP *" m68kreg="a0"/>
			<arg name="crit" type="int" m68kreg="d0"/>
			<arg name="lastpos" type="int" m68kreg="d1"/>
		</method>
		<method name="OCSP_BASICRESP_get_ext" result="X509_EXTENSION *">
			<arg name="x" type="OCSP_BASICRESP *" m68kreg="a0"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="OCSP_BASICRESP_delete_ext" result="X509_EXTENSION *">
			<arg name="x" type="OCSP_BASICRESP *" m68kreg="a0"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="OCSP_BASICRESP_get1_ext_d2i" result="void *">
			<arg name="x" type="OCSP_BASICRESP *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="crit" type="int *" m68kreg="a1"/>
			<arg name="idx" type="int *" m68kreg="a2"/>
		</method>
		<method name="OCSP_BASICRESP_add1_ext_i2d" result="int">
			<arg name="x" type="OCSP_BASICRESP *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="value" type="void *" m68kreg="a1"/>
			<arg name="crit" type="int" m68kreg="d1"/>
			<arg name="flags" type="unsigned long" m68kreg="d2"/>
		</method>
		<method name="OCSP_BASICRESP_add_ext" result="int">
			<arg name="x" type="OCSP_BASICRESP *" m68kreg="a0"/>
			<arg name="ex" type="X509_EXTENSION *" m68kreg="a1"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="OCSP_SINGLERESP_get_ext_count" result="int">
			<arg name="x" type="OCSP_SINGLERESP *" m68kreg="a0"/>
		</method>
		<method name="OCSP_SINGLERESP_get_ext_by_NID" result="int">
			<arg name="x" type="OCSP_SINGLERESP *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="lastpos" type="int" m68kreg="d1"/>
		</method>
		<method name="OCSP_SINGLERESP_get_ext_by_OBJ" result="int">
			<arg name="x" type="OCSP_SINGLERESP *" m68kreg="a0"/>
			<arg name="obj" type="ASN1_OBJECT *" m68kreg="a1"/>
			<arg name="lastpos" type="int" m68kreg="d0"/>
		</method>
		<method name="OCSP_SINGLERESP_get_ext_by_critical" result="int">
			<arg name="x" type="OCSP_SINGLERESP *" m68kreg="a0"/>
			<arg name="crit" type="int" m68kreg="d0"/>
			<arg name="lastpos" type="int" m68kreg="d1"/>
		</method>
		<method name="OCSP_SINGLERESP_get_ext" result="X509_EXTENSION *">
			<arg name="x" type="OCSP_SINGLERESP *" m68kreg="a0"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="OCSP_SINGLERESP_delete_ext" result="X509_EXTENSION *">
			<arg name="x" type="OCSP_SINGLERESP *" m68kreg="a0"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="OCSP_SINGLERESP_get1_ext_d2i" result="void *">
			<arg name="x" type="OCSP_SINGLERESP *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="crit" type="int *" m68kreg="a1"/>
			<arg name="idx" type="int *" m68kreg="a2"/>
		</method>
		<method name="OCSP_SINGLERESP_add1_ext_i2d" result="int">
			<arg name="x" type="OCSP_SINGLERESP *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="value" type="void *" m68kreg="a1"/>
			<arg name="crit" type="int" m68kreg="d1"/>
			<arg name="flags" type="unsigned long" m68kreg="d2"/>
		</method>
		<method name="OCSP_SINGLERESP_add_ext" result="int">
			<arg name="x" type="OCSP_SINGLERESP *" m68kreg="a0"/>
			<arg name="ex" type="X509_EXTENSION *" m68kreg="a1"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="OCSP_SINGLERESP_new" result="OCSP_SINGLERESP *">
		</method>
		<method name="OCSP_SINGLERESP_free" result="void">
			<arg name="a" type="OCSP_SINGLERESP *" m68kreg="a0"/>
		</method>
		<method name="d2i_OCSP_SINGLERESP" result="OCSP_SINGLERESP *">
			<arg name="a" type="OCSP_SINGLERESP **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_OCSP_SINGLERESP" result="int">
			<arg name="a" type="OCSP_SINGLERESP *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="OCSP_SINGLERESP_it" result="const ASN1_ITEM *">
		</method>
		<method name="OCSP_CERTSTATUS_new" result="OCSP_CERTSTATUS *">
		</method>
		<method name="OCSP_CERTSTATUS_free" result="void">
			<arg name="a" type="OCSP_CERTSTATUS *" m68kreg="a0"/>
		</method>
		<method name="d2i_OCSP_CERTSTATUS" result="OCSP_CERTSTATUS *">
			<arg name="a" type="OCSP_CERTSTATUS **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_OCSP_CERTSTATUS" result="int">
			<arg name="a" type="OCSP_CERTSTATUS *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="OCSP_CERTSTATUS_it" result="const ASN1_ITEM *">
		</method>
		<method name="OCSP_REVOKEDINFO_new" result="OCSP_REVOKEDINFO *">
		</method>
		<method name="OCSP_REVOKEDINFO_free" result="void">
			<arg name="a" type="OCSP_REVOKEDINFO *" m68kreg="a0"/>
		</method>
		<method name="d2i_OCSP_REVOKEDINFO" result="OCSP_REVOKEDINFO *">
			<arg name="a" type="OCSP_REVOKEDINFO **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_OCSP_REVOKEDINFO" result="int">
			<arg name="a" type="OCSP_REVOKEDINFO *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="OCSP_REVOKEDINFO_it" result="const ASN1_ITEM *">
		</method>
		<method name="OCSP_BASICRESP_new" result="OCSP_BASICRESP *">
		</method>
		<method name="OCSP_BASICRESP_free" result="void">
			<arg name="a" type="OCSP_BASICRESP *" m68kreg="a0"/>
		</method>
		<method name="d2i_OCSP_BASICRESP" result="OCSP_BASICRESP *">
			<arg name="a" type="OCSP_BASICRESP **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_OCSP_BASICRESP" result="int">
			<arg name="a" type="OCSP_BASICRESP *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="OCSP_BASICRESP_it" result="const ASN1_ITEM *">
		</method>
		<method name="OCSP_RESPDATA_new" result="OCSP_RESPDATA *">
		</method>
		<method name="OCSP_RESPDATA_free" result="void">
			<arg name="a" type="OCSP_RESPDATA *" m68kreg="a0"/>
		</method>
		<method name="d2i_OCSP_RESPDATA" result="OCSP_RESPDATA *">
			<arg name="a" type="OCSP_RESPDATA **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_OCSP_RESPDATA" result="int">
			<arg name="a" type="OCSP_RESPDATA *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="OCSP_RESPDATA_it" result="const ASN1_ITEM *">
		</method>
		<method name="OCSP_RESPID_new" result="OCSP_RESPID *">
		</method>
		<method name="OCSP_RESPID_free" result="void">
			<arg name="a" type="OCSP_RESPID *" m68kreg="a0"/>
		</method>
		<method name="d2i_OCSP_RESPID" result="OCSP_RESPID *">
			<arg name="a" type="OCSP_RESPID **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_OCSP_RESPID" result="int">
			<arg name="a" type="OCSP_RESPID *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="OCSP_RESPID_it" result="const ASN1_ITEM *">
		</method>
		<method name="OCSP_RESPONSE_new" result="OCSP_RESPONSE *">
		</method>
		<method name="OCSP_RESPONSE_free" result="void">
			<arg name="a" type="OCSP_RESPONSE *" m68kreg="a0"/>
		</method>
		<method name="d2i_OCSP_RESPONSE" result="OCSP_RESPONSE *">
			<arg name="a" type="OCSP_RESPONSE **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_OCSP_RESPONSE" result="int">
			<arg name="a" type="OCSP_RESPONSE *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="OCSP_RESPONSE_it" result="const ASN1_ITEM *">
		</method>
		<method name="OCSP_RESPBYTES_new" result="OCSP_RESPBYTES *">
		</method>
		<method name="OCSP_RESPBYTES_free" result="void">
			<arg name="a" type="OCSP_RESPBYTES *" m68kreg="a0"/>
		</method>
		<method name="d2i_OCSP_RESPBYTES" result="OCSP_RESPBYTES *">
			<arg name="a" type="OCSP_RESPBYTES **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_OCSP_RESPBYTES" result="int">
			<arg name="a" type="OCSP_RESPBYTES *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="OCSP_RESPBYTES_it" result="const ASN1_ITEM *">
		</method>
		<method name="OCSP_ONEREQ_new" result="OCSP_ONEREQ *">
		</method>
		<method name="OCSP_ONEREQ_free" result="void">
			<arg name="a" type="OCSP_ONEREQ *" m68kreg="a0"/>
		</method>
		<method name="d2i_OCSP_ONEREQ" result="OCSP_ONEREQ *">
			<arg name="a" type="OCSP_ONEREQ **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_OCSP_ONEREQ" result="int">
			<arg name="a" type="OCSP_ONEREQ *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="OCSP_ONEREQ_it" result="const ASN1_ITEM *">
		</method>
		<method name="OCSP_CERTID_new" result="OCSP_CERTID *">
		</method>
		<method name="OCSP_CERTID_free" result="void">
			<arg name="a" type="OCSP_CERTID *" m68kreg="a0"/>
		</method>
		<method name="d2i_OCSP_CERTID" result="OCSP_CERTID *">
			<arg name="a" type="OCSP_CERTID **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_OCSP_CERTID" result="int">
			<arg name="a" type="OCSP_CERTID *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="OCSP_CERTID_it" result="const ASN1_ITEM *">
		</method>
		<method name="OCSP_REQUEST_new" result="OCSP_REQUEST *">
		</method>
		<method name="OCSP_REQUEST_free" result="void">
			<arg name="a" type="OCSP_REQUEST *" m68kreg="a0"/>
		</method>
		<method name="d2i_OCSP_REQUEST" result="OCSP_REQUEST *">
			<arg name="a" type="OCSP_REQUEST **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_OCSP_REQUEST" result="int">
			<arg name="a" type="OCSP_REQUEST *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="OCSP_REQUEST_it" result="const ASN1_ITEM *">
		</method>
		<method name="OCSP_SIGNATURE_new" result="OCSP_SIGNATURE *">
		</method>
		<method name="OCSP_SIGNATURE_free" result="void">
			<arg name="a" type="OCSP_SIGNATURE *" m68kreg="a0"/>
		</method>
		<method name="d2i_OCSP_SIGNATURE" result="OCSP_SIGNATURE *">
			<arg name="a" type="OCSP_SIGNATURE **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_OCSP_SIGNATURE" result="int">
			<arg name="a" type="OCSP_SIGNATURE *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="OCSP_SIGNATURE_it" result="const ASN1_ITEM *">
		</method>
		<method name="OCSP_REQINFO_new" result="OCSP_REQINFO *">
		</method>
		<method name="OCSP_REQINFO_free" result="void">
			<arg name="a" type="OCSP_REQINFO *" m68kreg="a0"/>
		</method>
		<method name="d2i_OCSP_REQINFO" result="OCSP_REQINFO *">
			<arg name="a" type="OCSP_REQINFO **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_OCSP_REQINFO" result="int">
			<arg name="a" type="OCSP_REQINFO *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="OCSP_REQINFO_it" result="const ASN1_ITEM *">
		</method>
		<method name="OCSP_CRLID_new" result="OCSP_CRLID *">
		</method>
		<method name="OCSP_CRLID_free" result="void">
			<arg name="a" type="OCSP_CRLID *" m68kreg="a0"/>
		</method>
		<method name="d2i_OCSP_CRLID" result="OCSP_CRLID *">
			<arg name="a" type="OCSP_CRLID **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_OCSP_CRLID" result="int">
			<arg name="a" type="OCSP_CRLID *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="OCSP_CRLID_it" result="const ASN1_ITEM *">
		</method>
		<method name="OCSP_SERVICELOC_new" result="OCSP_SERVICELOC *">
		</method>
		<method name="OCSP_SERVICELOC_free" result="void">
			<arg name="a" type="OCSP_SERVICELOC *" m68kreg="a0"/>
		</method>
		<method name="d2i_OCSP_SERVICELOC" result="OCSP_SERVICELOC *">
			<arg name="a" type="OCSP_SERVICELOC **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_OCSP_SERVICELOC" result="int">
			<arg name="a" type="OCSP_SERVICELOC *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="OCSP_SERVICELOC_it" result="const ASN1_ITEM *">
		</method>
		<method name="OCSP_response_status_str" result="char *">
			<arg name="s" type="long" m68kreg="d0"/>
		</method>
		<method name="OCSP_cert_status_str" result="char *">
			<arg name="s" type="long" m68kreg="d0"/>
		</method>
		<method name="OCSP_crl_reason_str" result="char *">
			<arg name="s" type="long" m68kreg="d0"/>
		</method>
		<method name="OCSP_REQUEST_print" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="a" type="OCSP_REQUEST *" m68kreg="a1"/>
			<arg name="flags" type="unsigned long" m68kreg="d0"/>
		</method>
		<method name="OCSP_RESPONSE_print" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="o" type="OCSP_RESPONSE *" m68kreg="a1"/>
			<arg name="flags" type="unsigned long" m68kreg="d0"/>
		</method>
		<method name="OCSP_basic_verify" result="int">
			<arg name="bs" type="OCSP_BASICRESP *" m68kreg="a0"/>
			<arg name="certs" type="STACK_OF(X509) *" m68kreg="a1"/>
			<arg name="st" type="X509_STORE *" m68kreg="a2"/>
			<arg name="flags" type="unsigned long" m68kreg="d0"/>
		</method>
		<method name="ERR_load_OCSP_strings" result="void">
		</method>
		<method name="PEM_get_EVP_CIPHER_INFO" result="int">
			<arg name="header" type="char *" m68kreg="a0"/>
			<arg name="cipher" type="EVP_CIPHER_INFO *" m68kreg="a1"/>
		</method>
		<method name="PEM_do_header" result="int">
			<arg name="cipher" type="EVP_CIPHER_INFO *" m68kreg="a0"/>
			<arg name="data" type="unsigned char *" m68kreg="a1"/>
			<arg name="len" type="long *" m68kreg="a2"/>
			<arg name="callback" type="pem_password_cb *" m68kreg="a3"/>
			<arg name="u" type="void *" m68kreg="a4"/>
		</method>
		<method name="PEM_read_bio" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="name" type="char **" m68kreg="a1"/>
			<arg name="header" type="char **" m68kreg="a2"/>
			<arg name="data" type="unsigned char **" m68kreg="a3"/>
			<arg name="len" type="long *" m68kreg="a4"/>
		</method>
		<method name="PEM_write_bio" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="name" type="const char *" m68kreg="a1"/>
			<arg name="hdr" type="char *" m68kreg="a2"/>
			<arg name="data" type="unsigned char *" m68kreg="a3"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="PEM_bytes_read_bio" result="int">
			<arg name="pdata" type="unsigned char **" m68kreg="a0"/>
			<arg name="plen" type="long *" m68kreg="a1"/>
			<arg name="pnm" type="char **" m68kreg="a2"/>
			<arg name="name" type="const char *" m68kreg="a3"/>
			<arg name="bp" type="BIO *" m68kreg="a4"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a5"/>
			<arg name="u" type="void *" m68kreg="a6"/>
		</method>
		<method name="PEM_ASN1_read_bio" result="void *">
			<arg name="d2i" type="d2i_of_void *" m68kreg="a0"/>
			<arg name="name" type="const char *" m68kreg="a1"/>
			<arg name="bp" type="BIO *" m68kreg="a2"/>
			<arg name="x" type="void **" m68kreg="a3"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a4"/>
			<arg name="u" type="void *" m68kreg="a5"/>
		</method>
		<method name="PEM_ASN1_write_bio" result="int">
			<arg name="i2d" type="int (*)()" m68kreg="a0"/>
			<arg name="name" type="const char *" m68kreg="a1"/>
			<arg name="bp" type="BIO *" m68kreg="a2"/>
			<arg name="x" type="char *" m68kreg="a3"/>
			<arg name="enc" type="const EVP_CIPHER *" m68kreg="a4"/>
			<arg name="kstr" type="unsigned char *" m68kreg="a5"/>
			<arg name="klen" type="int" m68kreg="d0"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a6"/>
			<arg name="u" type="void *" m68kreg="a7"/>
		</method>
		<method name="PEM_X509_INFO_read_bio" result="STACK_OF(X509_INFO) *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="sk" type="STACK_OF(X509_INFO) *" m68kreg="a1"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
			<arg name="u" type="void *" m68kreg="a3"/>
		</method>
		<method name="PEM_X509_INFO_write_bio" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="xi" type="X509_INFO *" m68kreg="a1"/>
			<arg name="enc" type="EVP_CIPHER *" m68kreg="a2"/>
			<arg name="kstr" type="unsigned char *" m68kreg="a3"/>
			<arg name="klen" type="int" m68kreg="d0"/>
			<arg name="cd" type="pem_password_cb *" m68kreg="a4"/>
			<arg name="u" type="void *" m68kreg="a5"/>
		</method>
		<method name="PEM_SealInit" result="int">
			<arg name="ctx" type="PEM_ENCODE_SEAL_CTX *" m68kreg="a0"/>
			<arg name="type" type="EVP_CIPHER *" m68kreg="a1"/>
			<arg name="md_type" type="EVP_MD *" m68kreg="a2"/>
			<arg name="ek" type="unsigned char **" m68kreg="a3"/>
			<arg name="ekl" type="int *" m68kreg="a4"/>
			<arg name="iv" type="unsigned char *" m68kreg="a5"/>
			<arg name="pubk" type="EVP_PKEY **" m68kreg="a6"/>
			<arg name="npubk" type="int" m68kreg="d0"/>
		</method>
		<method name="PEM_SealUpdate" result="void">
			<arg name="ctx" type="PEM_ENCODE_SEAL_CTX *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="outl" type="int *" m68kreg="a2"/>
			<arg name="in" type="unsigned char *" m68kreg="a3"/>
			<arg name="inl" type="int" m68kreg="d0"/>
		</method>
		<method name="PEM_SealFinal" result="int">
			<arg name="ctx" type="PEM_ENCODE_SEAL_CTX *" m68kreg="a0"/>
			<arg name="sig" type="unsigned char *" m68kreg="a1"/>
			<arg name="sigl" type="int *" m68kreg="a2"/>
			<arg name="out" type="unsigned char *" m68kreg="a3"/>
			<arg name="outl" type="int *" m68kreg="a4"/>
			<arg name="priv" type="EVP_PKEY *" m68kreg="a5"/>
		</method>
		<method name="PEM_SignInit" result="void">
			<arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
			<arg name="type" type="EVP_MD *" m68kreg="a1"/>
		</method>
		<method name="PEM_SignUpdate" result="void">
			<arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
			<arg name="d" type="unsigned char *" m68kreg="a1"/>
			<arg name="cnt" type="unsigned int" m68kreg="d0"/>
		</method>
		<method name="PEM_SignFinal" result="int">
			<arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
			<arg name="sigret" type="unsigned char *" m68kreg="a1"/>
			<arg name="siglen" type="unsigned int *" m68kreg="a2"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a3"/>
		</method>
		<method name="PEM_def_callback" result="int">
			<arg name="buf" type="char *" m68kreg="a0"/>
			<arg name="num" type="int" m68kreg="d0"/>
			<arg name="w" type="int" m68kreg="d1"/>
			<arg name="key" type="void *" m68kreg="a1"/>
		</method>
		<method name="PEM_proc_type" result="void">
			<arg name="buf" type="char *" m68kreg="a0"/>
			<arg name="type" type="int" m68kreg="d0"/>
		</method>
		<method name="PEM_dek_info" result="void">
			<arg name="buf" type="char *" m68kreg="a0"/>
			<arg name="type" type="const char *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d0"/>
			<arg name="str" type="char *" m68kreg="a2"/>
		</method>
		<method name="PEM_read_bio_X509" result="X509 *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="X509 **" m68kreg="a1"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
			<arg name="u" type="void *" m68kreg="a3"/>
		</method>
		<method name="PEM_write_bio_X509" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="X509 *" m68kreg="a1"/>
		</method>
		<method name="PEM_read_bio_X509_AUX" result="X509 *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="X509 **" m68kreg="a1"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
			<arg name="u" type="void *" m68kreg="a3"/>
		</method>
		<method name="PEM_write_bio_X509_AUX" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="X509 *" m68kreg="a1"/>
		</method>
		<method name="PEM_read_bio_X509_REQ" result="X509_REQ *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="X509_REQ **" m68kreg="a1"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
			<arg name="u" type="void *" m68kreg="a3"/>
		</method>
		<method name="PEM_write_bio_X509_REQ" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="X509_REQ *" m68kreg="a1"/>
		</method>
		<method name="PEM_write_bio_X509_REQ_NEW" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="X509_REQ *" m68kreg="a1"/>
		</method>
		<method name="PEM_read_bio_X509_CRL" result="X509_CRL *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="X509_CRL **" m68kreg="a1"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
			<arg name="u" type="void *" m68kreg="a3"/>
		</method>
		<method name="PEM_write_bio_X509_CRL" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="X509_CRL *" m68kreg="a1"/>
		</method>
		<method name="PEM_read_bio_PKCS7" result="PKCS7 *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="PKCS7 **" m68kreg="a1"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
			<arg name="u" type="void *" m68kreg="a3"/>
		</method>
		<method name="PEM_write_bio_PKCS7" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="PKCS7 *" m68kreg="a1"/>
		</method>
		<method name="PEM_read_bio_NETSCAPE_CERT_SEQUENCE" result="NETSCAPE_CERT_SEQUENCE *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="NETSCAPE_CERT_SEQUENCE **" m68kreg="a1"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
			<arg name="u" type="void *" m68kreg="a3"/>
		</method>
		<method name="PEM_write_bio_NETSCAPE_CERT_SEQUENCE" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="NETSCAPE_CERT_SEQUENCE *" m68kreg="a1"/>
		</method>
		<method name="PEM_read_bio_PKCS8" result="X509_SIG *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="X509_SIG **" m68kreg="a1"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
			<arg name="u" type="void *" m68kreg="a3"/>
		</method>
		<method name="PEM_write_bio_PKCS8" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="X509_SIG *" m68kreg="a1"/>
		</method>
		<method name="PEM_read_bio_PKCS8_PRIV_KEY_INFO" result="PKCS8_PRIV_KEY_INFO *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="PKCS8_PRIV_KEY_INFO **" m68kreg="a1"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
			<arg name="u" type="void *" m68kreg="a3"/>
		</method>
		<method name="PEM_write_bio_PKCS8_PRIV_KEY_INFO" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="PKCS8_PRIV_KEY_INFO *" m68kreg="a1"/>
		</method>
		<method name="PEM_read_bio_RSAPrivateKey" result="RSA *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="RSA **" m68kreg="a1"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
			<arg name="u" type="void *" m68kreg="a3"/>
		</method>
		<method name="PEM_write_bio_RSAPrivateKey" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="RSA *" m68kreg="a1"/>
			<arg name="enc" type="const EVP_CIPHER *" m68kreg="a2"/>
			<arg name="kstr" type="unsigned char *" m68kreg="a3"/>
			<arg name="klen" type="int" m68kreg="d0"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a4"/>
			<arg name="u" type="void *" m68kreg="a5"/>
		</method>
		<method name="PEM_read_bio_RSAPublicKey" result="RSA *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="RSA **" m68kreg="a1"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
			<arg name="u" type="void *" m68kreg="a3"/>
		</method>
		<method name="PEM_write_bio_RSAPublicKey" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="RSA *" m68kreg="a1"/>
		</method>
		<method name="PEM_read_bio_RSA_PUBKEY" result="RSA *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="RSA **" m68kreg="a1"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
			<arg name="u" type="void *" m68kreg="a3"/>
		</method>
		<method name="PEM_write_bio_RSA_PUBKEY" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="RSA *" m68kreg="a1"/>
		</method>
		<method name="PEM_read_bio_DSAPrivateKey" result="DSA *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="DSA **" m68kreg="a1"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
			<arg name="u" type="void *" m68kreg="a3"/>
		</method>
		<method name="PEM_write_bio_DSAPrivateKey" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="DSA *" m68kreg="a1"/>
			<arg name="enc" type="const EVP_CIPHER *" m68kreg="a2"/>
			<arg name="kstr" type="unsigned char *" m68kreg="a3"/>
			<arg name="klen" type="int" m68kreg="d0"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a4"/>
			<arg name="u" type="void *" m68kreg="a5"/>
		</method>
		<method name="PEM_read_bio_DSA_PUBKEY" result="DSA *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="DSA **" m68kreg="a1"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
			<arg name="u" type="void *" m68kreg="a3"/>
		</method>
		<method name="PEM_write_bio_DSA_PUBKEY" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="DSA *" m68kreg="a1"/>
		</method>
		<method name="PEM_read_bio_DSAparams" result="DSA *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="DSA **" m68kreg="a1"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
			<arg name="u" type="void *" m68kreg="a3"/>
		</method>
		<method name="PEM_write_bio_DSAparams" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="DSA *" m68kreg="a1"/>
		</method>
		<method name="PEM_read_bio_DHparams" result="DH *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="DH **" m68kreg="a1"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
			<arg name="u" type="void *" m68kreg="a3"/>
		</method>
		<method name="PEM_write_bio_DHparams" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="DH *" m68kreg="a1"/>
		</method>
		<method name="PEM_read_bio_PrivateKey" result="EVP_PKEY *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="EVP_PKEY **" m68kreg="a1"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
			<arg name="u" type="void *" m68kreg="a3"/>
		</method>
		<method name="PEM_write_bio_PrivateKey" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="EVP_PKEY *" m68kreg="a1"/>
			<arg name="enc" type="const EVP_CIPHER *" m68kreg="a2"/>
			<arg name="kstr" type="unsigned char *" m68kreg="a3"/>
			<arg name="klen" type="int" m68kreg="d0"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a4"/>
			<arg name="u" type="void *" m68kreg="a5"/>
		</method>
		<method name="PEM_read_bio_PUBKEY" result="EVP_PKEY *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="EVP_PKEY **" m68kreg="a1"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
			<arg name="u" type="void *" m68kreg="a3"/>
		</method>
		<method name="PEM_write_bio_PUBKEY" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="EVP_PKEY *" m68kreg="a1"/>
		</method>
		<method name="PEM_write_bio_PKCS8PrivateKey_nid" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="EVP_PKEY *" m68kreg="a1"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="kstr" type="char *" m68kreg="a2"/>
			<arg name="klen" type="int" m68kreg="d1"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a3"/>
			<arg name="u" type="void *" m68kreg="a4"/>
		</method>
		<method name="PEM_write_bio_PKCS8PrivateKey" result="int">
			<arg name="a" type="BIO *" m68kreg="a0"/>
			<arg name="b" type="EVP_PKEY *" m68kreg="a1"/>
			<arg name="c" type="const EVP_CIPHER *" m68kreg="a2"/>
			<arg name="d" type="char *" m68kreg="a3"/>
			<arg name="a1" type="int" m68kreg="d0"/>
			<arg name="e" type="pem_password_cb *" m68kreg="a4"/>
			<arg name="f" type="void *" m68kreg="a5"/>
		</method>
		<method name="i2d_PKCS8PrivateKey_bio" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="EVP_PKEY *" m68kreg="a1"/>
			<arg name="enc" type="const EVP_CIPHER *" m68kreg="a2"/>
			<arg name="kstr" type="char *" m68kreg="a3"/>
			<arg name="klen" type="int" m68kreg="d0"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a4"/>
			<arg name="u" type="void *" m68kreg="a5"/>
		</method>
		<method name="i2d_PKCS8PrivateKey_nid_bio" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="EVP_PKEY *" m68kreg="a1"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="kstr" type="char *" m68kreg="a2"/>
			<arg name="klen" type="int" m68kreg="d1"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a3"/>
			<arg name="u" type="void *" m68kreg="a4"/>
		</method>
		<method name="d2i_PKCS8PrivateKey_bio" result="EVP_PKEY *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="EVP_PKEY **" m68kreg="a1"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
			<arg name="u" type="void *" m68kreg="a3"/>
		</method>
		<method name="ERR_load_PEM_strings" result="void">
		</method>
		<method name="PKCS12_x5092certbag" result="PKCS12_SAFEBAG *">
			<arg name="x509" type="X509 *" m68kreg="a0"/>
		</method>
		<method name="PKCS12_x509crl2certbag" result="PKCS12_SAFEBAG *">
			<arg name="crl" type="X509_CRL *" m68kreg="a0"/>
		</method>
		<method name="PKCS12_certbag2x509" result="X509 *">
			<arg name="bag" type="PKCS12_SAFEBAG *" m68kreg="a0"/>
		</method>
		<method name="PKCS12_certbag2x509crl" result="X509_CRL *">
			<arg name="bag" type="PKCS12_SAFEBAG *" m68kreg="a0"/>
		</method>
		<method name="PKCS12_item_pack_safebag" result="PKCS12_SAFEBAG *">
			<arg name="obj" type="void *" m68kreg="a0"/>
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
			<arg name="nid1" type="int" m68kreg="d0"/>
			<arg name="nid2" type="int" m68kreg="d1"/>
		</method>
		<method name="PKCS12_MAKE_KEYBAG" result="PKCS12_SAFEBAG *">
			<arg name="p8" type="PKCS8_PRIV_KEY_INFO *" m68kreg="a0"/>
		</method>
		<method name="PKCS8_decrypt" result="PKCS8_PRIV_KEY_INFO *">
			<arg name="p8" type="X509_SIG *" m68kreg="a0"/>
			<arg name="pass" type="const char *" m68kreg="a1"/>
			<arg name="passlen" type="int" m68kreg="d0"/>
		</method>
		<method name="PKCS12_decrypt_skey" result="PKCS8_PRIV_KEY_INFO *">
			<arg name="bag" type="PKCS12_SAFEBAG *" m68kreg="a0"/>
			<arg name="pass" type="const char *" m68kreg="a1"/>
			<arg name="passlen" type="int" m68kreg="d0"/>
		</method>
		<method name="PKCS8_encrypt" result="X509_SIG *">
			<arg name="pbe_nid" type="int" m68kreg="d0"/>
			<arg name="cipher" type="const EVP_CIPHER *" m68kreg="a0"/>
			<arg name="pass" type="const char *" m68kreg="a1"/>
			<arg name="passlen" type="int" m68kreg="d1"/>
			<arg name="salt" type="unsigned char *" m68kreg="a2"/>
			<arg name="saltlen" type="int" m68kreg="d2"/>
			<arg name="iter" type="int" m68kreg="d3"/>
			<arg name="p8" type="PKCS8_PRIV_KEY_INFO *" m68kreg="a3"/>
		</method>
		<method name="PKCS12_MAKE_SHKEYBAG" result="PKCS12_SAFEBAG *">
			<arg name="pbe_nid" type="int" m68kreg="d0"/>
			<arg name="pass" type="const char *" m68kreg="a0"/>
			<arg name="passlen" type="int" m68kreg="d1"/>
			<arg name="salt" type="unsigned char *" m68kreg="a1"/>
			<arg name="saltlen" type="int" m68kreg="d2"/>
			<arg name="iter" type="int" m68kreg="d3"/>
			<arg name="p8" type="PKCS8_PRIV_KEY_INFO *" m68kreg="a2"/>
		</method>
		<method name="PKCS12_pack_p7data" result="PKCS7 *">
			<arg name="sk" type="STACK_OF(PKCS12_SAFEBAG) *" m68kreg="a0"/>
		</method>
		<method name="PKCS12_unpack_p7data" result="STACK_OF(PKCS12_SAFEBAG) *">
			<arg name="p7" type="PKCS7 *" m68kreg="a0"/>
		</method>
		<method name="PKCS12_pack_p7encdata" result="PKCS7 *">
			<arg name="pbe_nid" type="int" m68kreg="d0"/>
			<arg name="pass" type="const char *" m68kreg="a0"/>
			<arg name="passlen" type="int" m68kreg="d1"/>
			<arg name="salt" type="unsigned char *" m68kreg="a1"/>
			<arg name="saltlen" type="int" m68kreg="d2"/>
			<arg name="iter" type="int" m68kreg="d3"/>
			<arg name="bags" type="STACK_OF(PKCS12_SAFEBAG) *" m68kreg="a2"/>
		</method>
		<method name="PKCS12_unpack_p7encdata" result="STACK_OF(PKCS12_SAFEBAG) *">
			<arg name="p7" type="PKCS7 *" m68kreg="a0"/>
			<arg name="pass" type="const char *" m68kreg="a1"/>
			<arg name="passlen" type="int" m68kreg="d0"/>
		</method>
		<method name="PKCS12_pack_authsafes" result="int">
			<arg name="p12" type="PKCS12 *" m68kreg="a0"/>
			<arg name="safes" type="STACK_OF(PKCS7) *" m68kreg="a1"/>
		</method>
		<method name="PKCS12_unpack_authsafes" result="STACK_OF(PKCS7) *">
			<arg name="p12" type="PKCS12 *" m68kreg="a0"/>
		</method>
		<method name="PKCS12_add_localkeyid" result="int">
			<arg name="bag" type="PKCS12_SAFEBAG *" m68kreg="a0"/>
			<arg name="name" type="unsigned char *" m68kreg="a1"/>
			<arg name="namelen" type="int" m68kreg="d0"/>
		</method>
		<method name="PKCS12_add_friendlyname_asc" result="int">
			<arg name="bag" type="PKCS12_SAFEBAG *" m68kreg="a0"/>
			<arg name="name" type="const char *" m68kreg="a1"/>
			<arg name="namelen" type="int" m68kreg="d0"/>
		</method>
		<method name="PKCS12_add_CSPName_asc" result="int">
			<arg name="bag" type="PKCS12_SAFEBAG *" m68kreg="a0"/>
			<arg name="name" type="const char *" m68kreg="a1"/>
			<arg name="namelen" type="int" m68kreg="d0"/>
		</method>
		<method name="PKCS12_add_friendlyname_uni" result="int">
			<arg name="bag" type="PKCS12_SAFEBAG *" m68kreg="a0"/>
			<arg name="name" type="const unsigned char *" m68kreg="a1"/>
			<arg name="namelen" type="int" m68kreg="d0"/>
		</method>
		<method name="PKCS8_add_keyusage" result="int">
			<arg name="p8" type="PKCS8_PRIV_KEY_INFO *" m68kreg="a0"/>
			<arg name="usage" type="int" m68kreg="d0"/>
		</method>
		<method name="PKCS12_get_attr_gen" result="ASN1_TYPE *">
			<arg name="attrs" type="STACK_OF(X509_ATTRIBUTE) *" m68kreg="a0"/>
			<arg name="attr_nid" type="int" m68kreg="d0"/>
		</method>
		<method name="PKCS12_get_friendlyname" result="char *">
			<arg name="bag" type="PKCS12_SAFEBAG *" m68kreg="a0"/>
		</method>
		<method name="PKCS12_pbe_crypt" result="unsigned char *">
			<arg name="algor" type="X509_ALGOR *" m68kreg="a0"/>
			<arg name="pass" type="const char *" m68kreg="a1"/>
			<arg name="passlen" type="int" m68kreg="d0"/>
			<arg name="in" type="unsigned char *" m68kreg="a2"/>
			<arg name="inlen" type="int" m68kreg="d1"/>
			<arg name="data" type="unsigned char **" m68kreg="a3"/>
			<arg name="datalen" type="int *" m68kreg="a4"/>
			<arg name="en_de" type="int" m68kreg="d2"/>
		</method>
		<method name="PKCS12_item_decrypt_d2i" result="void *">
			<arg name="algor" type="X509_ALGOR *" m68kreg="a0"/>
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
			<arg name="pass" type="const char *" m68kreg="a2"/>
			<arg name="passlen" type="int" m68kreg="d0"/>
			<arg name="oct" type="ASN1_OCTET_STRING *" m68kreg="a3"/>
			<arg name="zbuf" type="int" m68kreg="d1"/>
		</method>
		<method name="PKCS12_item_i2d_encrypt" result="ASN1_OCTET_STRING *">
			<arg name="algor" type="X509_ALGOR *" m68kreg="a0"/>
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
			<arg name="pass" type="const char *" m68kreg="a2"/>
			<arg name="passlen" type="int" m68kreg="d0"/>
			<arg name="obj" type="void *" m68kreg="a3"/>
			<arg name="zbuf" type="int" m68kreg="d1"/>
		</method>
		<method name="PKCS12_init" result="PKCS12 *">
			<arg name="mode" type="int" m68kreg="d0"/>
		</method>
		<method name="PKCS12_key_gen_asc" result="int">
			<arg name="pass" type="const char *" m68kreg="a0"/>
			<arg name="passlen" type="int" m68kreg="d0"/>
			<arg name="salt" type="unsigned char *" m68kreg="a1"/>
			<arg name="saltlen" type="int" m68kreg="d1"/>
			<arg name="id" type="int" m68kreg="d2"/>
			<arg name="iter" type="int" m68kreg="d3"/>
			<arg name="n" type="int" m68kreg="d4"/>
			<arg name="out" type="unsigned char *" m68kreg="a2"/>
			<arg name="md_type" type="const EVP_MD *" m68kreg="a3"/>
		</method>
		<method name="PKCS12_key_gen_uni" result="int">
			<arg name="pass" type="unsigned char *" m68kreg="a0"/>
			<arg name="passlen" type="int" m68kreg="d0"/>
			<arg name="salt" type="unsigned char *" m68kreg="a1"/>
			<arg name="saltlen" type="int" m68kreg="d1"/>
			<arg name="id" type="int" m68kreg="d2"/>
			<arg name="iter" type="int" m68kreg="d3"/>
			<arg name="n" type="int" m68kreg="d4"/>
			<arg name="out" type="unsigned char *" m68kreg="a2"/>
			<arg name="md_type" type="const EVP_MD *" m68kreg="a3"/>
		</method>
		<method name="PKCS12_PBE_keyivgen" result="int">
			<arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
			<arg name="pass" type="const char *" m68kreg="a1"/>
			<arg name="passlen" type="int" m68kreg="d0"/>
			<arg name="param" type="ASN1_TYPE *" m68kreg="a2"/>
			<arg name="cipher" type="const EVP_CIPHER *" m68kreg="a3"/>
			<arg name="md_type" type="const EVP_MD *" m68kreg="a4"/>
			<arg name="en_de" type="int" m68kreg="d1"/>
		</method>
		<method name="PKCS12_gen_mac" result="int">
			<arg name="p12" type="PKCS12 *" m68kreg="a0"/>
			<arg name="pass" type="const char *" m68kreg="a1"/>
			<arg name="passlen" type="int" m68kreg="d0"/>
			<arg name="mac" type="unsigned char *" m68kreg="a2"/>
			<arg name="maclen" type="unsigned int *" m68kreg="a3"/>
		</method>
		<method name="PKCS12_verify_mac" result="int">
			<arg name="p12" type="PKCS12 *" m68kreg="a0"/>
			<arg name="pass" type="const char *" m68kreg="a1"/>
			<arg name="passlen" type="int" m68kreg="d0"/>
		</method>
		<method name="PKCS12_set_mac" result="int">
			<arg name="p12" type="PKCS12 *" m68kreg="a0"/>
			<arg name="pass" type="const char *" m68kreg="a1"/>
			<arg name="passlen" type="int" m68kreg="d0"/>
			<arg name="salt" type="unsigned char *" m68kreg="a2"/>
			<arg name="saltlen" type="int" m68kreg="d1"/>
			<arg name="iter" type="int" m68kreg="d2"/>
			<arg name="md_type" type="const EVP_MD *" m68kreg="a3"/>
		</method>
		<method name="PKCS12_setup_mac" result="int">
			<arg name="p12" type="PKCS12 *" m68kreg="a0"/>
			<arg name="iter" type="int" m68kreg="d0"/>
			<arg name="salt" type="unsigned char *" m68kreg="a1"/>
			<arg name="saltlen" type="int" m68kreg="d1"/>
			<arg name="md_type" type="const EVP_MD *" m68kreg="a2"/>
		</method>
		<method name="asc2uni" result="unsigned char *">
			<arg name="asc" type="const char *" m68kreg="a0"/>
			<arg name="asclen" type="int" m68kreg="d0"/>
			<arg name="uni" type="unsigned char **" m68kreg="a1"/>
			<arg name="unilen" type="int *" m68kreg="a2"/>
		</method>
		<method name="uni2asc" result="char *">
			<arg name="uni" type="unsigned char *" m68kreg="a0"/>
			<arg name="unilen" type="int" m68kreg="d0"/>
		</method>
		<method name="PKCS12_new" result="PKCS12 *">
		</method>
		<method name="PKCS12_free" result="void">
			<arg name="a" type="PKCS12 *" m68kreg="a0"/>
		</method>
		<method name="d2i_PKCS12" result="PKCS12 *">
			<arg name="a" type="PKCS12 **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_PKCS12" result="int">
			<arg name="a" type="PKCS12 *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="PKCS12_it" result="const ASN1_ITEM *">
		</method>
		<method name="PKCS12_MAC_DATA_new" result="PKCS12_MAC_DATA *">
		</method>
		<method name="PKCS12_MAC_DATA_free" result="void">
			<arg name="a" type="PKCS12_MAC_DATA *" m68kreg="a0"/>
		</method>
		<method name="d2i_PKCS12_MAC_DATA" result="PKCS12_MAC_DATA *">
			<arg name="a" type="PKCS12_MAC_DATA **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_PKCS12_MAC_DATA" result="int">
			<arg name="a" type="PKCS12_MAC_DATA *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="PKCS12_MAC_DATA_it" result="const ASN1_ITEM *">
		</method>
		<method name="PKCS12_SAFEBAG_new" result="PKCS12_SAFEBAG *">
		</method>
		<method name="PKCS12_SAFEBAG_free" result="void">
			<arg name="a" type="PKCS12_SAFEBAG *" m68kreg="a0"/>
		</method>
		<method name="d2i_PKCS12_SAFEBAG" result="PKCS12_SAFEBAG *">
			<arg name="a" type="PKCS12_SAFEBAG **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_PKCS12_SAFEBAG" result="int">
			<arg name="a" type="PKCS12_SAFEBAG *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="PKCS12_SAFEBAG_it" result="const ASN1_ITEM *">
		</method>
		<method name="PKCS12_BAGS_new" result="PKCS12_BAGS *">
		</method>
		<method name="PKCS12_BAGS_free" result="void">
			<arg name="a" type="PKCS12_BAGS *" m68kreg="a0"/>
		</method>
		<method name="d2i_PKCS12_BAGS" result="PKCS12_BAGS *">
			<arg name="a" type="PKCS12_BAGS **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_PKCS12_BAGS" result="int">
			<arg name="a" type="PKCS12_BAGS *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="PKCS12_BAGS_it" result="const ASN1_ITEM *">
		</method>
		<method name="PKCS12_SAFEBAGS_it" result="const ASN1_ITEM *">
		</method>
		<method name="PKCS12_AUTHSAFES_it" result="const ASN1_ITEM *">
		</method>
		<method name="PKCS12_PBE_add" result="void">
		</method>
		<method name="PKCS12_parse" result="int">
			<arg name="p12" type="PKCS12 *" m68kreg="a0"/>
			<arg name="pass" type="const char *" m68kreg="a1"/>
			<arg name="pkey" type="EVP_PKEY **" m68kreg="a2"/>
			<arg name="cert" type="X509 **" m68kreg="a3"/>
			<arg name="ca" type="STACK_OF(X509) **" m68kreg="a4"/>
		</method>
		<method name="PKCS12_create" result="PKCS12 *">
			<arg name="pass" type="char *" m68kreg="a0"/>
			<arg name="name" type="char *" m68kreg="a1"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a2"/>
			<arg name="cert" type="X509 *" m68kreg="a3"/>
			<arg name="ca" type="STACK_OF(X509) *" m68kreg="a4"/>
			<arg name="nid_key" type="int" m68kreg="d0"/>
			<arg name="nid_cert" type="int" m68kreg="d1"/>
			<arg name="iter" type="int" m68kreg="d2"/>
			<arg name="mac_iter" type="int" m68kreg="d3"/>
			<arg name="keytype" type="int" m68kreg="d4"/>
		</method>
		<method name="i2d_PKCS12_bio" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="p12" type="PKCS12 *" m68kreg="a1"/>
		</method>
		<method name="d2i_PKCS12_bio" result="PKCS12 *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="p12" type="PKCS12 **" m68kreg="a1"/>
		</method>
		<method name="PKCS12_newpass" result="int">
			<arg name="p12" type="PKCS12 *" m68kreg="a0"/>
			<arg name="oldpass" type="char *" m68kreg="a1"/>
			<arg name="newpass" type="char *" m68kreg="a2"/>
		</method>
		<method name="ERR_load_PKCS12_strings" result="void">
		</method>
		<method name="PKCS7_ISSUER_AND_SERIAL_digest" result="int">
			<arg name="data" type="PKCS7_ISSUER_AND_SERIAL *" m68kreg="a0"/>
			<arg name="type" type="const EVP_MD *" m68kreg="a1"/>
			<arg name="md" type="unsigned char *" m68kreg="a2"/>
			<arg name="len" type="unsigned int *" m68kreg="a3"/>
		</method>
		<method name="PKCS7_dup" result="PKCS7 *">
			<arg name="p7" type="PKCS7 *" m68kreg="a0"/>
		</method>
		<method name="d2i_PKCS7_bio" result="PKCS7 *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="p7" type="PKCS7 **" m68kreg="a1"/>
		</method>
		<method name="i2d_PKCS7_bio" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="p7" type="PKCS7 *" m68kreg="a1"/>
		</method>
		<method name="PKCS7_ISSUER_AND_SERIAL_new" result="PKCS7_ISSUER_AND_SERIAL *">
		</method>
		<method name="PKCS7_ISSUER_AND_SERIAL_free" result="void">
			<arg name="a" type="PKCS7_ISSUER_AND_SERIAL *" m68kreg="a0"/>
		</method>
		<method name="d2i_PKCS7_ISSUER_AND_SERIAL" result="PKCS7_ISSUER_AND_SERIAL *">
			<arg name="a" type="PKCS7_ISSUER_AND_SERIAL **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_PKCS7_ISSUER_AND_SERIAL" result="int">
			<arg name="a" type="PKCS7_ISSUER_AND_SERIAL *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="PKCS7_ISSUER_AND_SERIAL_it" result="const ASN1_ITEM *">
		</method>
		<method name="PKCS7_SIGNER_INFO_new" result="PKCS7_SIGNER_INFO *">
		</method>
		<method name="PKCS7_SIGNER_INFO_free" result="void">
			<arg name="a" type="PKCS7_SIGNER_INFO *" m68kreg="a0"/>
		</method>
		<method name="d2i_PKCS7_SIGNER_INFO" result="PKCS7_SIGNER_INFO *">
			<arg name="a" type="PKCS7_SIGNER_INFO **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_PKCS7_SIGNER_INFO" result="int">
			<arg name="a" type="PKCS7_SIGNER_INFO *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="PKCS7_SIGNER_INFO_it" result="const ASN1_ITEM *">
		</method>
		<method name="PKCS7_RECIP_INFO_new" result="PKCS7_RECIP_INFO *">
		</method>
		<method name="PKCS7_RECIP_INFO_free" result="void">
			<arg name="a" type="PKCS7_RECIP_INFO *" m68kreg="a0"/>
		</method>
		<method name="d2i_PKCS7_RECIP_INFO" result="PKCS7_RECIP_INFO *">
			<arg name="a" type="PKCS7_RECIP_INFO **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_PKCS7_RECIP_INFO" result="int">
			<arg name="a" type="PKCS7_RECIP_INFO *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="PKCS7_RECIP_INFO_it" result="const ASN1_ITEM *">
		</method>
		<method name="PKCS7_SIGNED_new" result="PKCS7_SIGNED *">
		</method>
		<method name="PKCS7_SIGNED_free" result="void">
			<arg name="a" type="PKCS7_SIGNED *" m68kreg="a0"/>
		</method>
		<method name="d2i_PKCS7_SIGNED" result="PKCS7_SIGNED *">
			<arg name="a" type="PKCS7_SIGNED **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_PKCS7_SIGNED" result="int">
			<arg name="a" type="PKCS7_SIGNED *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="PKCS7_SIGNED_it" result="const ASN1_ITEM *">
		</method>
		<method name="PKCS7_ENC_CONTENT_new" result="PKCS7_ENC_CONTENT *">
		</method>
		<method name="PKCS7_ENC_CONTENT_free" result="void">
			<arg name="a" type="PKCS7_ENC_CONTENT *" m68kreg="a0"/>
		</method>
		<method name="d2i_PKCS7_ENC_CONTENT" result="PKCS7_ENC_CONTENT *">
			<arg name="a" type="PKCS7_ENC_CONTENT **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_PKCS7_ENC_CONTENT" result="int">
			<arg name="a" type="PKCS7_ENC_CONTENT *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="PKCS7_ENC_CONTENT_it" result="const ASN1_ITEM *">
		</method>
		<method name="PKCS7_ENVELOPE_new" result="PKCS7_ENVELOPE *">
		</method>
		<method name="PKCS7_ENVELOPE_free" result="void">
			<arg name="a" type="PKCS7_ENVELOPE *" m68kreg="a0"/>
		</method>
		<method name="d2i_PKCS7_ENVELOPE" result="PKCS7_ENVELOPE *">
			<arg name="a" type="PKCS7_ENVELOPE **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_PKCS7_ENVELOPE" result="int">
			<arg name="a" type="PKCS7_ENVELOPE *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="PKCS7_ENVELOPE_it" result="const ASN1_ITEM *">
		</method>
		<method name="PKCS7_SIGN_ENVELOPE_new" result="PKCS7_SIGN_ENVELOPE *">
		</method>
		<method name="PKCS7_SIGN_ENVELOPE_free" result="void">
			<arg name="a" type="PKCS7_SIGN_ENVELOPE *" m68kreg="a0"/>
		</method>
		<method name="d2i_PKCS7_SIGN_ENVELOPE" result="PKCS7_SIGN_ENVELOPE *">
			<arg name="a" type="PKCS7_SIGN_ENVELOPE **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_PKCS7_SIGN_ENVELOPE" result="int">
			<arg name="a" type="PKCS7_SIGN_ENVELOPE *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="PKCS7_SIGN_ENVELOPE_it" result="const ASN1_ITEM *">
		</method>
		<method name="PKCS7_DIGEST_new" result="PKCS7_DIGEST *">
		</method>
		<method name="PKCS7_DIGEST_free" result="void">
			<arg name="a" type="PKCS7_DIGEST *" m68kreg="a0"/>
		</method>
		<method name="d2i_PKCS7_DIGEST" result="PKCS7_DIGEST *">
			<arg name="a" type="PKCS7_DIGEST **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_PKCS7_DIGEST" result="int">
			<arg name="a" type="PKCS7_DIGEST *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="PKCS7_DIGEST_it" result="const ASN1_ITEM *">
		</method>
		<method name="PKCS7_ENCRYPT_new" result="PKCS7_ENCRYPT *">
		</method>
		<method name="PKCS7_ENCRYPT_free" result="void">
			<arg name="a" type="PKCS7_ENCRYPT *" m68kreg="a0"/>
		</method>
		<method name="d2i_PKCS7_ENCRYPT" result="PKCS7_ENCRYPT *">
			<arg name="a" type="PKCS7_ENCRYPT **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_PKCS7_ENCRYPT" result="int">
			<arg name="a" type="PKCS7_ENCRYPT *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="PKCS7_ENCRYPT_it" result="const ASN1_ITEM *">
		</method>
		<method name="PKCS7_new" result="PKCS7 *">
		</method>
		<method name="PKCS7_free" result="void">
			<arg name="a" type="PKCS7 *" m68kreg="a0"/>
		</method>
		<method name="d2i_PKCS7" result="PKCS7 *">
			<arg name="a" type="PKCS7 **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_PKCS7" result="int">
			<arg name="a" type="PKCS7 *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="PKCS7_it" result="const ASN1_ITEM *">
		</method>
		<method name="PKCS7_ATTR_SIGN_it" result="const ASN1_ITEM *">
		</method>
		<method name="PKCS7_ATTR_VERIFY_it" result="const ASN1_ITEM *">
		</method>
		<method name="PKCS7_ctrl" result="long">
			<arg name="p7" type="PKCS7 *" m68kreg="a0"/>
			<arg name="cmd" type="int" m68kreg="d0"/>
			<arg name="larg" type="long" m68kreg="d1"/>
			<arg name="parg" type="char *" m68kreg="a1"/>
		</method>
		<method name="PKCS7_set_type" result="int">
			<arg name="p7" type="PKCS7 *" m68kreg="a0"/>
			<arg name="type" type="int" m68kreg="d0"/>
		</method>
		<method name="PKCS7_set_content" result="int">
			<arg name="p7" type="PKCS7 *" m68kreg="a0"/>
			<arg name="p7_data" type="PKCS7 *" m68kreg="a1"/>
		</method>
		<method name="PKCS7_SIGNER_INFO_set" result="int">
			<arg name="p7i" type="PKCS7_SIGNER_INFO *" m68kreg="a0"/>
			<arg name="x509" type="X509 *" m68kreg="a1"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a2"/>
			<arg name="dgst" type="const EVP_MD *" m68kreg="a3"/>
		</method>
		<method name="PKCS7_add_signer" result="int">
			<arg name="p7" type="PKCS7 *" m68kreg="a0"/>
			<arg name="p7i" type="PKCS7_SIGNER_INFO *" m68kreg="a1"/>
		</method>
		<method name="PKCS7_add_certificate" result="int">
			<arg name="p7" type="PKCS7 *" m68kreg="a0"/>
			<arg name="x509" type="X509 *" m68kreg="a1"/>
		</method>
		<method name="PKCS7_add_crl" result="int">
			<arg name="p7" type="PKCS7 *" m68kreg="a0"/>
			<arg name="x509" type="X509_CRL *" m68kreg="a1"/>
		</method>
		<method name="PKCS7_content_new" result="int">
			<arg name="p7" type="PKCS7 *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
		</method>
		<method name="PKCS7_dataVerify" result="int">
			<arg name="cert_store" type="X509_STORE *" m68kreg="a0"/>
			<arg name="ctx" type="X509_STORE_CTX *" m68kreg="a1"/>
			<arg name="bio" type="BIO *" m68kreg="a2"/>
			<arg name="p7" type="PKCS7 *" m68kreg="a3"/>
			<arg name="si" type="PKCS7_SIGNER_INFO *" m68kreg="a4"/>
		</method>
		<method name="PKCS7_signatureVerify" result="int">
			<arg name="bio" type="BIO *" m68kreg="a0"/>
			<arg name="p7" type="PKCS7 *" m68kreg="a1"/>
			<arg name="si" type="PKCS7_SIGNER_INFO *" m68kreg="a2"/>
			<arg name="x509" type="X509 *" m68kreg="a3"/>
		</method>
		<method name="PKCS7_dataInit" result="BIO *">
			<arg name="p7" type="PKCS7 *" m68kreg="a0"/>
			<arg name="bio" type="BIO *" m68kreg="a1"/>
		</method>
		<method name="PKCS7_dataFinal" result="int">
			<arg name="p7" type="PKCS7 *" m68kreg="a0"/>
			<arg name="bio" type="BIO *" m68kreg="a1"/>
		</method>
		<method name="PKCS7_dataDecode" result="BIO *">
			<arg name="p7" type="PKCS7 *" m68kreg="a0"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
			<arg name="in_bio" type="BIO *" m68kreg="a2"/>
			<arg name="pcert" type="X509 *" m68kreg="a3"/>
		</method>
		<method name="PKCS7_add_signature" result="PKCS7_SIGNER_INFO *">
			<arg name="p7" type="PKCS7 *" m68kreg="a0"/>
			<arg name="x509" type="X509 *" m68kreg="a1"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a2"/>
			<arg name="dgst" type="const EVP_MD *" m68kreg="a3"/>
		</method>
		<method name="PKCS7_cert_from_signer_info" result="X509 *">
			<arg name="p7" type="PKCS7 *" m68kreg="a0"/>
			<arg name="si" type="PKCS7_SIGNER_INFO *" m68kreg="a1"/>
		</method>
		<method name="PKCS7_get_signer_info" result="STACK_OF(PKCS7_SIGNER_INFO) *">
			<arg name="p7" type="PKCS7 *" m68kreg="a0"/>
		</method>
		<method name="PKCS7_add_recipient" result="PKCS7_RECIP_INFO *">
			<arg name="p7" type="PKCS7 *" m68kreg="a0"/>
			<arg name="x509" type="X509 *" m68kreg="a1"/>
		</method>
		<method name="PKCS7_add_recipient_info" result="int">
			<arg name="p7" type="PKCS7 *" m68kreg="a0"/>
			<arg name="ri" type="PKCS7_RECIP_INFO *" m68kreg="a1"/>
		</method>
		<method name="PKCS7_RECIP_INFO_set" result="int">
			<arg name="p7i" type="PKCS7_RECIP_INFO *" m68kreg="a0"/>
			<arg name="x509" type="X509 *" m68kreg="a1"/>
		</method>
		<method name="PKCS7_set_cipher" result="int">
			<arg name="p7" type="PKCS7 *" m68kreg="a0"/>
			<arg name="cipher" type="const EVP_CIPHER *" m68kreg="a1"/>
		</method>
		<method name="PKCS7_get_issuer_and_serial" result="PKCS7_ISSUER_AND_SERIAL *">
			<arg name="p7" type="PKCS7 *" m68kreg="a0"/>
			<arg name="idx" type="int" m68kreg="d0"/>
		</method>
		<method name="PKCS7_digest_from_attributes" result="ASN1_OCTET_STRING *">
			<arg name="sk" type="STACK_OF(X509_ATTRIBUTE) *" m68kreg="a0"/>
		</method>
		<method name="PKCS7_add_signed_attribute" result="int">
			<arg name="p7si" type="PKCS7_SIGNER_INFO *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="type" type="int" m68kreg="d1"/>
			<arg name="data" type="void *" m68kreg="a1"/>
		</method>
		<method name="PKCS7_add_attribute" result="int">
			<arg name="p7si" type="PKCS7_SIGNER_INFO *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="atrtype" type="int" m68kreg="d1"/>
			<arg name="value" type="void *" m68kreg="a1"/>
		</method>
		<method name="PKCS7_get_attribute" result="ASN1_TYPE *">
			<arg name="si" type="PKCS7_SIGNER_INFO *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
		</method>
		<method name="PKCS7_get_signed_attribute" result="ASN1_TYPE *">
			<arg name="si" type="PKCS7_SIGNER_INFO *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
		</method>
		<method name="PKCS7_set_signed_attributes" result="int">
			<arg name="p7si" type="PKCS7_SIGNER_INFO *" m68kreg="a0"/>
			<arg name="sk" type="STACK_OF(X509_ATTRIBUTE) *" m68kreg="a1"/>
		</method>
		<method name="PKCS7_set_attributes" result="int">
			<arg name="p7si" type="PKCS7_SIGNER_INFO *" m68kreg="a0"/>
			<arg name="sk" type="STACK_OF(X509_ATTRIBUTE) *" m68kreg="a1"/>
		</method>
		<method name="PKCS7_sign" result="PKCS7 *">
			<arg name="signcert" type="X509 *" m68kreg="a0"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
			<arg name="certs" type="STACK_OF(X509) *" m68kreg="a2"/>
			<arg name="data" type="BIO *" m68kreg="a3"/>
			<arg name="flags" type="int" m68kreg="d0"/>
		</method>
		<method name="PKCS7_verify" result="int">
			<arg name="p7" type="PKCS7 *" m68kreg="a0"/>
			<arg name="certs" type="STACK_OF(X509) *" m68kreg="a1"/>
			<arg name="store" type="X509_STORE *" m68kreg="a2"/>
			<arg name="indata" type="BIO *" m68kreg="a3"/>
			<arg name="out" type="BIO *" m68kreg="a4"/>
			<arg name="flags" type="int" m68kreg="d0"/>
		</method>
		<method name="PKCS7_get0_signers" result="STACK_OF(X509) *">
			<arg name="p7" type="PKCS7 *" m68kreg="a0"/>
			<arg name="certs" type="STACK_OF(X509) *" m68kreg="a1"/>
			<arg name="flags" type="int" m68kreg="d0"/>
		</method>
		<method name="PKCS7_encrypt" result="PKCS7 *">
			<arg name="certs" type="STACK_OF(X509) *" m68kreg="a0"/>
			<arg name="in" type="BIO *" m68kreg="a1"/>
			<arg name="cipher" type="const EVP_CIPHER *" m68kreg="a2"/>
			<arg name="flags" type="int" m68kreg="d0"/>
		</method>
		<method name="PKCS7_decrypt" result="int">
			<arg name="p7" type="PKCS7 *" m68kreg="a0"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
			<arg name="cert" type="X509 *" m68kreg="a2"/>
			<arg name="data" type="BIO *" m68kreg="a3"/>
			<arg name="flags" type="int" m68kreg="d0"/>
		</method>
		<method name="PKCS7_add_attrib_smimecap" result="int">
			<arg name="si" type="PKCS7_SIGNER_INFO *" m68kreg="a0"/>
			<arg name="cap" type="STACK_OF(X509_ALGOR) *" m68kreg="a1"/>
		</method>
		<method name="PKCS7_get_smimecap" result="STACK_OF(X509_ALGOR) *">
			<arg name="si" type="PKCS7_SIGNER_INFO *" m68kreg="a0"/>
		</method>
		<method name="PKCS7_simple_smimecap" result="int">
			<arg name="sk" type="STACK_OF(X509_ALGOR) *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="arg" type="int" m68kreg="d1"/>
		</method>
		<method name="SMIME_write_PKCS7" result="int">
			<arg name="bio" type="BIO *" m68kreg="a0"/>
			<arg name="p7" type="PKCS7 *" m68kreg="a1"/>
			<arg name="data" type="BIO *" m68kreg="a2"/>
			<arg name="flags" type="int" m68kreg="d0"/>
		</method>
		<method name="SMIME_read_PKCS7" result="PKCS7 *">
			<arg name="bio" type="BIO *" m68kreg="a0"/>
			<arg name="bcont" type="BIO **" m68kreg="a1"/>
		</method>
		<method name="SMIME_crlf_copy" result="int">
			<arg name="in" type="BIO *" m68kreg="a0"/>
			<arg name="out" type="BIO *" m68kreg="a1"/>
			<arg name="flags" type="int" m68kreg="d0"/>
		</method>
		<method name="SMIME_text" result="int">
			<arg name="in" type="BIO *" m68kreg="a0"/>
			<arg name="out" type="BIO *" m68kreg="a1"/>
		</method>
		<method name="ERR_load_PKCS7_strings" result="void">
		</method>
		<method name="RAND_set_rand_method" result="int">
			<arg name="meth" type="const RAND_METHOD *" m68kreg="a0"/>
		</method>
		<method name="RAND_get_rand_method" result="const RAND_METHOD *">
		</method>
		<method name="RAND_SSLeay" result="RAND_METHOD *">
		</method>
		<method name="RAND_cleanup" result="void">
		</method>
		<method name="RAND_bytes" result="int">
			<arg name="buf" type="unsigned char *" m68kreg="a0"/>
			<arg name="num" type="int" m68kreg="d0"/>
		</method>
		<method name="RAND_pseudo_bytes" result="int">
			<arg name="buf" type="unsigned char *" m68kreg="a0"/>
			<arg name="num" type="int" m68kreg="d0"/>
		</method>
		<method name="RAND_seed" result="void">
			<arg name="buf" type="const void *" m68kreg="a0"/>
			<arg name="num" type="int" m68kreg="d0"/>
		</method>
		<method name="RAND_add" result="void">
			<arg name="buf" type="const void *" m68kreg="a0"/>
			<arg name="num" type="int" m68kreg="d0"/>
			<arg name="entropy" type="double" m68kreg="d1"/>
		</method>
		<method name="RAND_load_file" result="int">
			<arg name="file" type="const char *" m68kreg="a0"/>
			<arg name="max_bytes" type="long" m68kreg="d0"/>
		</method>
		<method name="RAND_write_file" result="int">
			<arg name="file" type="const char *" m68kreg="a0"/>
		</method>
		<method name="RAND_file_name" result="const char *">
			<arg name="file" type="char *" m68kreg="a0"/>
			<arg name="num" type="size_t" m68kreg="d0"/>
		</method>
		<method name="RAND_status" result="int">
		</method>
		<method name="RAND_query_egd_bytes" result="int">
			<arg name="path" type="const char *" m68kreg="a0"/>
			<arg name="buf" type="unsigned char *" m68kreg="a1"/>
			<arg name="bytes" type="int" m68kreg="d0"/>
		</method>
		<method name="RAND_egd" result="int">
			<arg name="path" type="const char *" m68kreg="a0"/>
		</method>
		<method name="RAND_egd_bytes" result="int">
			<arg name="path" type="const char *" m68kreg="a0"/>
			<arg name="bytes" type="int" m68kreg="d0"/>
		</method>
		<method name="RAND_poll" result="int">
		</method>
		<method name="ERR_load_RAND_strings" result="void">
		</method>
		<method name="SSL_CTX_set_msg_callback" result="void">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="cb" type="void (*)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg)" m68kreg="a1"/>
		</method>
		<method name="SSL_set_msg_callback" result="void">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
			<arg name="cb" type="void (*)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg)" m68kreg="a1"/>
		</method>
		<method name="SSL_CTX_sessions" result="struct lhash_st *">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
		</method>
		<method name="SSL_get_finished" result="size_t">
			<arg name="s" type="const SSL *" m68kreg="a0"/>
			<arg name="buf" type="void *" m68kreg="a1"/>
			<arg name="count" type="size_t" m68kreg="d0"/>
		</method>
		<method name="SSL_get_peer_finished" result="size_t">
			<arg name="s" type="const SSL *" m68kreg="a0"/>
			<arg name="buf" type="void *" m68kreg="a1"/>
			<arg name="count" type="size_t" m68kreg="d0"/>
		</method>
		<method name="BIO_f_ssl" result="BIO_METHOD *">
		</method>
		<method name="BIO_new_ssl" result="BIO *">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="client" type="int" m68kreg="d0"/>
		</method>
		<method name="BIO_new_ssl_connect" result="BIO *">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
		</method>
		<method name="BIO_new_buffer_ssl_connect" result="BIO *">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
		</method>
		<method name="BIO_ssl_copy_session_id" result="int">
			<arg name="to" type="BIO *" m68kreg="a0"/>
			<arg name="from" type="BIO *" m68kreg="a1"/>
		</method>
		<method name="BIO_ssl_shutdown" result="void">
			<arg name="ssl_bio" type="BIO *" m68kreg="a0"/>
		</method>
		<method name="SSL_CTX_set_cipher_list" result="int">
			<arg name="a" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="str" type="const char *" m68kreg="a1"/>
		</method>
		<method name="SSL_CTX_new" result="SSL_CTX *">
			<arg name="meth" type="SSL_METHOD *" m68kreg="a0"/>
		</method>
		<method name="SSL_CTX_free" result="void">
			<arg name="a" type="SSL_CTX *" m68kreg="a0"/>
		</method>
		<method name="SSL_CTX_set_timeout" result="long">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="t" type="long" m68kreg="d0"/>
		</method>
		<method name="SSL_CTX_get_timeout" result="long">
			<arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
		</method>
		<method name="SSL_CTX_get_cert_store" result="X509_STORE *">
			<arg name="a" type="const SSL_CTX *" m68kreg="a0"/>
		</method>
		<method name="SSL_CTX_set_cert_store" result="void">
			<arg name="a" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="b" type="X509_STORE *" m68kreg="a1"/>
		</method>
		<method name="SSL_want" result="int">
			<arg name="s" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_clear" result="int">
			<arg name="s" type="SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_CTX_flush_sessions" result="void">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="tm" type="long" m68kreg="d0"/>
		</method>
		<method name="SSL_get_current_cipher" result="SSL_CIPHER *">
			<arg name="s" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_CIPHER_get_bits" result="int">
			<arg name="c" type="const SSL_CIPHER *" m68kreg="a0"/>
			<arg name="alg_bits" type="int *" m68kreg="a1"/>
		</method>
		<method name="SSL_CIPHER_get_version" result="char *">
			<arg name="c" type="const SSL_CIPHER *" m68kreg="a0"/>
		</method>
		<method name="SSL_CIPHER_get_name" result="const char *">
			<arg name="c" type="const SSL_CIPHER *" m68kreg="a0"/>
		</method>
		<method name="SSL_CIPHER_get_mac" result="const char *">
			<arg name="cipher" type="SSL_CIPHER *" m68kreg="a0"/>
		</method>
		<method name="SSL_CIPHER_get_encryption" result="const char *">
			<arg name="cipher" type="SSL_CIPHER *" m68kreg="a0"/>
		</method>
		<method name="SSL_CIPHER_get_authentication" result="const char *">
			<arg name="cipher" type="SSL_CIPHER *" m68kreg="a0"/>
		</method>
		<method name="SSL_CIPHER_get_key_exchange" result="const char *">
			<arg name="cipher" type="SSL_CIPHER *" m68kreg="a0"/>
		</method>
		<method name="SSL_CIPHER_get_export" result="const char *">
			<arg name="cipher" type="SSL_CIPHER *" m68kreg="a0"/>
		</method>
		<method name="SSL_get_fd" result="int">
			<arg name="s" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_get_rfd" result="int">
			<arg name="s" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_get_wfd" result="int">
			<arg name="s" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_get_cipher_list" result="const char *">
			<arg name="s" type="const SSL *" m68kreg="a0"/>
			<arg name="n" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_get_shared_ciphers" result="char *">
			<arg name="s" type="const SSL *" m68kreg="a0"/>
			<arg name="buf" type="char *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_get_read_ahead" result="int">
			<arg name="s" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_pending" result="int">
			<arg name="s" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_set_fd" result="int">
			<arg name="s" type="SSL *" m68kreg="a0"/>
			<arg name="fd" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_set_rfd" result="int">
			<arg name="s" type="SSL *" m68kreg="a0"/>
			<arg name="fd" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_set_wfd" result="int">
			<arg name="s" type="SSL *" m68kreg="a0"/>
			<arg name="fd" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_set_bio" result="void">
			<arg name="s" type="SSL *" m68kreg="a0"/>
			<arg name="rbio" type="BIO *" m68kreg="a1"/>
			<arg name="wbio" type="BIO *" m68kreg="a2"/>
		</method>
		<method name="SSL_get_rbio" result="BIO *">
			<arg name="s" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_get_wbio" result="BIO *">
			<arg name="s" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_set_cipher_list" result="int">
			<arg name="s" type="SSL *" m68kreg="a0"/>
			<arg name="str" type="const char *" m68kreg="a1"/>
		</method>
		<method name="SSL_set_read_ahead" result="void">
			<arg name="s" type="SSL *" m68kreg="a0"/>
			<arg name="yes" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_get_verify_mode" result="int">
			<arg name="s" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_get_verify_depth" result="int">
			<arg name="s" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_get_verify_callback" result="int (*)(int, X509_STORE_CTX *)">
			<arg name="s" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_set_verify" result="void">
			<arg name="s" type="SSL *" m68kreg="a0"/>
			<arg name="mode" type="int" m68kreg="d0"/>
			<arg name="callback" type="int (*)(int ok, X509_STORE_CTX *ctx)" m68kreg="a1"/>
		</method>
		<method name="SSL_set_verify_depth" result="void">
			<arg name="s" type="SSL *" m68kreg="a0"/>
			<arg name="depth" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_use_RSAPrivateKey" result="int">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
			<arg name="rsa" type="RSA *" m68kreg="a1"/>
		</method>
		<method name="SSL_use_RSAPrivateKey_ASN1" result="int">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
			<arg name="d" type="unsigned char *" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="SSL_use_PrivateKey" result="int">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
		</method>
		<method name="SSL_use_PrivateKey_ASN1" result="int">
			<arg name="pk" type="int" m68kreg="d0"/>
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
			<arg name="d" type="unsigned char *" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d1"/>
		</method>
		<method name="SSL_use_certificate" result="int">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
			<arg name="x" type="X509 *" m68kreg="a1"/>
		</method>
		<method name="SSL_use_certificate_ASN1" result="int">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
			<arg name="d" type="unsigned char *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_use_RSAPrivateKey_file" result="int">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
			<arg name="file" type="const char *" m68kreg="a1"/>
			<arg name="type" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_use_PrivateKey_file" result="int">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
			<arg name="file" type="const char *" m68kreg="a1"/>
			<arg name="type" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_use_certificate_file" result="int">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
			<arg name="file" type="const char *" m68kreg="a1"/>
			<arg name="type" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_CTX_use_RSAPrivateKey_file" result="int">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="file" type="const char *" m68kreg="a1"/>
			<arg name="type" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_CTX_use_PrivateKey_file" result="int">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="file" type="const char *" m68kreg="a1"/>
			<arg name="type" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_CTX_use_certificate_file" result="int">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="file" type="const char *" m68kreg="a1"/>
			<arg name="type" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_CTX_use_certificate_chain_file" result="int">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="file" type="const char *" m68kreg="a1"/>
		</method>
		<method name="SSL_load_client_CA_file" result="STACK_OF(X509_NAME) *">
			<arg name="file" type="const char *" m68kreg="a0"/>
		</method>
		<method name="SSL_add_file_cert_subjects_to_stack" result="int">
			<arg name="stackCAs" type="STACK_OF(X509_NAME) *" m68kreg="a0"/>
			<arg name="file" type="const char *" m68kreg="a1"/>
		</method>
		<method name="SSL_add_dir_cert_subjects_to_stack" result="int">
			<arg name="stackCAs" type="STACK_OF(X509_NAME) *" m68kreg="a0"/>
			<arg name="dir" type="const char *" m68kreg="a1"/>
		</method>
		<method name="SSL_load_error_strings" result="void">
		</method>
		<method name="SSL_state_string" result="const char *">
			<arg name="s" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_rstate_string" result="const char *">
			<arg name="s" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_state_string_long" result="const char *">
			<arg name="s" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_rstate_string_long" result="const char *">
			<arg name="s" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_SESSION_get_time" result="long">
			<arg name="s" type="const SSL_SESSION *" m68kreg="a0"/>
		</method>
		<method name="SSL_SESSION_set_time" result="long">
			<arg name="s" type="SSL_SESSION *" m68kreg="a0"/>
			<arg name="t" type="long" m68kreg="d0"/>
		</method>
		<method name="SSL_SESSION_get_timeout" result="long">
			<arg name="s" type="const SSL_SESSION *" m68kreg="a0"/>
		</method>
		<method name="SSL_SESSION_set_timeout" result="long">
			<arg name="s" type="SSL_SESSION *" m68kreg="a0"/>
			<arg name="t" type="long" m68kreg="d0"/>
		</method>
		<method name="SSL_copy_session_id" result="void">
			<arg name="to" type="SSL *" m68kreg="a0"/>
			<arg name="from" type="const SSL *" m68kreg="a1"/>
		</method>
		<method name="SSL_SESSION_new" result="SSL_SESSION *">
		</method>
		<method name="SSL_SESSION_hash" result="unsigned long">
			<arg name="a" type="const SSL_SESSION *" m68kreg="a0"/>
		</method>
		<method name="SSL_SESSION_cmp" result="int">
			<arg name="a" type="const SSL_SESSION *" m68kreg="a0"/>
			<arg name="b" type="const SSL_SESSION *" m68kreg="a1"/>
		</method>
		<method name="SSL_SESSION_print" result="int">
			<arg name="fp" type="BIO *" m68kreg="a0"/>
			<arg name="ses" type="const SSL_SESSION *" m68kreg="a1"/>
		</method>
		<method name="SSL_SESSION_free" result="void">
			<arg name="ses" type="SSL_SESSION *" m68kreg="a0"/>
		</method>
		<method name="i2d_SSL_SESSION" result="int">
			<arg name="in" type="SSL_SESSION *" m68kreg="a0"/>
			<arg name="pp" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="SSL_set_session" result="int">
			<arg name="to" type="SSL *" m68kreg="a0"/>
			<arg name="session" type="SSL_SESSION *" m68kreg="a1"/>
		</method>
		<method name="SSL_CTX_add_session" result="int">
			<arg name="s" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="c" type="SSL_SESSION *" m68kreg="a1"/>
		</method>
		<method name="SSL_CTX_remove_session" result="int">
			<arg name="a1" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="c" type="SSL_SESSION *" m68kreg="a1"/>
		</method>
		<method name="SSL_CTX_set_generate_session_id" result="int">
			<arg name="a" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="b" type="GEN_SESSION_CB" m68kreg="d0"/>
		</method>
		<method name="SSL_set_generate_session_id" result="int">
			<arg name="a" type="SSL *" m68kreg="a0"/>
			<arg name="b" type="GEN_SESSION_CB" m68kreg="d0"/>
		</method>
		<method name="SSL_has_matching_session_id" result="int">
			<arg name="ssl" type="const SSL *" m68kreg="a0"/>
			<arg name="id" type="const unsigned char *" m68kreg="a1"/>
			<arg name="id_len" type="unsigned int" m68kreg="d0"/>
		</method>
		<method name="d2i_SSL_SESSION" result="SSL_SESSION *">
			<arg name="a" type="SSL_SESSION **" m68kreg="a0"/>
			<arg name="pp" type="const unsigned char **" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
		</method>
		<method name="SSL_get_peer_certificate" result="X509 *">
			<arg name="s" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_get_peer_cert_chain" result="STACK_OF(X509) *">
			<arg name="s" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_CTX_get_verify_mode" result="int">
			<arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
		</method>
		<method name="SSL_CTX_get_verify_depth" result="int">
			<arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
		</method>
		<method name="SSL_CTX_get_verify_callback" result="int (*)(int, X509_STORE_CTX *)">
			<arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
		</method>
		<method name="SSL_CTX_set_verify" result="void">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="mode" type="int" m68kreg="d0"/>
			<arg name="callback" type="int (*)(int, X509_STORE_CTX *)" m68kreg="a1"/>
		</method>
		<method name="SSL_CTX_set_verify_depth" result="void">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="depth" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_CTX_set_cert_verify_callback" result="void">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="cb" type="int (*)(X509_STORE_CTX *, void *)" m68kreg="a1"/>
			<arg name="arg" type="void *" m68kreg="a2"/>
		</method>
		<method name="SSL_CTX_use_RSAPrivateKey" result="int">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="rsa" type="RSA *" m68kreg="a1"/>
		</method>
		<method name="SSL_CTX_use_RSAPrivateKey_ASN1" result="int">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="d" type="unsigned char *" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="SSL_CTX_use_PrivateKey" result="int">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
		</method>
		<method name="SSL_CTX_use_PrivateKey_ASN1" result="int">
			<arg name="pk" type="int" m68kreg="d0"/>
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="d" type="unsigned char *" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d1"/>
		</method>
		<method name="SSL_CTX_use_certificate" result="int">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="x" type="X509 *" m68kreg="a1"/>
		</method>
		<method name="SSL_CTX_use_certificate_ASN1" result="int">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="len" type="int" m68kreg="d0"/>
			<arg name="d" type="unsigned char *" m68kreg="a1"/>
		</method>
		<method name="SSL_CTX_set_default_passwd_cb" result="void">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a1"/>
		</method>
		<method name="SSL_CTX_set_default_passwd_cb_userdata" result="void">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="u" type="void *" m68kreg="a1"/>
		</method>
		<method name="SSL_CTX_check_private_key" result="int">
			<arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
		</method>
		<method name="SSL_check_private_key" result="int">
			<arg name="ctx" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_CTX_set_session_id_context" result="int">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="sid_ctx" type="const unsigned char *" m68kreg="a1"/>
			<arg name="sid_ctx_len" type="unsigned int" m68kreg="d0"/>
		</method>
		<method name="SSL_new" result="SSL *">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
		</method>
		<method name="SSL_set_session_id_context" result="int">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
			<arg name="sid_ctx" type="const unsigned char *" m68kreg="a1"/>
			<arg name="sid_ctx_len" type="unsigned int" m68kreg="d0"/>
		</method>
		<method name="SSL_CTX_set_purpose" result="int">
			<arg name="s" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="purpose" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_set_purpose" result="int">
			<arg name="s" type="SSL *" m68kreg="a0"/>
			<arg name="purpose" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_CTX_set_trust" result="int">
			<arg name="s" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="trust" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_set_trust" result="int">
			<arg name="s" type="SSL *" m68kreg="a0"/>
			<arg name="trust" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_free" result="void">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_accept" result="int">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_connect" result="int">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_read" result="int">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
			<arg name="buf" type="void *" m68kreg="a1"/>
			<arg name="num" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_peek" result="int">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
			<arg name="buf" type="void *" m68kreg="a1"/>
			<arg name="num" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_write" result="int">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
			<arg name="buf" type="const void *" m68kreg="a1"/>
			<arg name="num" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_ctrl" result="long">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
			<arg name="cmd" type="int" m68kreg="d0"/>
			<arg name="larg" type="long" m68kreg="d1"/>
			<arg name="parg" type="void *" m68kreg="a1"/>
		</method>
		<method name="SSL_callback_ctrl" result="long">
			<arg name="a" type="SSL *" m68kreg="a0"/>
			<arg name="a1" type="int" m68kreg="d0"/>
			<arg name="b" type="void (*)()" m68kreg="a1"/>
		</method>
		<method name="SSL_CTX_ctrl" result="long">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="cmd" type="int" m68kreg="d0"/>
			<arg name="larg" type="long" m68kreg="d1"/>
			<arg name="parg" type="void *" m68kreg="a1"/>
		</method>
		<method name="SSL_CTX_callback_ctrl" result="long">
			<arg name="a1" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="a2" type="int" m68kreg="d0"/>
			<arg name="a3" type="void (*)()" m68kreg="a1"/>
		</method>
		<method name="SSL_get_error" result="int">
			<arg name="s" type="const SSL *" m68kreg="a0"/>
			<arg name="ret_code" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_get_version" result="const char *">
			<arg name="s" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_CTX_set_ssl_version" result="int">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="meth" type="SSL_METHOD *" m68kreg="a1"/>
		</method>
		<method name="SSLv2_method" result="SSL_METHOD *">
		</method>
		<method name="SSLv2_server_method" result="SSL_METHOD *">
		</method>
		<method name="SSLv2_client_method" result="SSL_METHOD *">
		</method>
		<method name="SSLv3_method" result="SSL_METHOD *">
		</method>
		<method name="SSLv3_server_method" result="SSL_METHOD *">
		</method>
		<method name="SSLv3_client_method" result="SSL_METHOD *">
		</method>
		<method name="SSLv23_method" result="SSL_METHOD *">
		</method>
		<method name="SSLv23_server_method" result="SSL_METHOD *">
		</method>
		<method name="SSLv23_client_method" result="SSL_METHOD *">
		</method>
		<method name="TLSv1_method" result="SSL_METHOD *">
		</method>
		<method name="TLSv1_server_method" result="SSL_METHOD *">
		</method>
		<method name="TLSv1_client_method" result="SSL_METHOD *">
		</method>
		<method name="SSL_get_ciphers" result="STACK_OF(SSL_CIPHER) *">
			<arg name="s" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_do_handshake" result="int">
			<arg name="s" type="SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_renegotiate" result="int">
			<arg name="s" type="SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_renegotiate_pending" result="int">
			<arg name="s" type="SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_shutdown" result="int">
			<arg name="s" type="SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_get_ssl_method" result="SSL_METHOD *">
			<arg name="s" type="SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_set_ssl_method" result="int">
			<arg name="s" type="SSL *" m68kreg="a0"/>
			<arg name="method" type="SSL_METHOD *" m68kreg="a1"/>
		</method>
		<method name="SSL_alert_type_string_long" result="const char *">
			<arg name="value" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_alert_type_string" result="const char *">
			<arg name="value" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_alert_desc_string_long" result="const char *">
			<arg name="value" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_alert_desc_string" result="const char *">
			<arg name="value" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_set_client_CA_list" result="void">
			<arg name="s" type="SSL *" m68kreg="a0"/>
			<arg name="name_list" type="STACK_OF(X509_NAME) *" m68kreg="a1"/>
		</method>
		<method name="SSL_CTX_set_client_CA_list" result="void">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="name_list" type="STACK_OF(X509_NAME) *" m68kreg="a1"/>
		</method>
		<method name="SSL_get_client_CA_list" result="STACK_OF(X509_NAME) *">
			<arg name="s" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_CTX_get_client_CA_list" result="STACK_OF(X509_NAME) *">
			<arg name="s" type="const SSL_CTX *" m68kreg="a0"/>
		</method>
		<method name="SSL_add_client_CA" result="int">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
			<arg name="x" type="X509 *" m68kreg="a1"/>
		</method>
		<method name="SSL_CTX_add_client_CA" result="int">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="x" type="X509 *" m68kreg="a1"/>
		</method>
		<method name="SSL_set_connect_state" result="void">
			<arg name="s" type="SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_set_accept_state" result="void">
			<arg name="s" type="SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_get_default_timeout" result="long">
			<arg name="s" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_library_init" result="int">
		</method>
		<method name="SSL_CIPHER_description" result="char *">
			<arg name="a1" type="SSL_CIPHER *" m68kreg="a0"/>
			<arg name="buf" type="char *" m68kreg="a1"/>
			<arg name="size" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_dup_CA_list" result="STACK_OF(X509_NAME) *">
			<arg name="sk" type="STACK_OF(X509_NAME) *" m68kreg="a0"/>
		</method>
		<method name="SSL_dup" result="SSL *">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_get_certificate" result="X509 *">
			<arg name="ssl" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_get_privatekey" result="struct evp_pkey_st *">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_CTX_set_quiet_shutdown" result="void">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="mode" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_CTX_get_quiet_shutdown" result="int">
			<arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
		</method>
		<method name="SSL_set_quiet_shutdown" result="void">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
			<arg name="mode" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_get_quiet_shutdown" result="int">
			<arg name="ssl" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_set_shutdown" result="void">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
			<arg name="mode" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_get_shutdown" result="int">
			<arg name="ssl" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_version" result="int">
			<arg name="ssl" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_CTX_set_default_verify_paths" result="int">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
		</method>
		<method name="SSL_CTX_load_verify_locations" result="int">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="CAfile" type="const char *" m68kreg="a1"/>
			<arg name="CApath" type="const char *" m68kreg="a2"/>
		</method>
		<method name="SSL_get_session" result="SSL_SESSION *">
			<arg name="ssl" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_get1_session" result="SSL_SESSION *">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_get_SSL_CTX" result="SSL_CTX *">
			<arg name="ssl" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_set_info_callback" result="void">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
			<arg name="cb" type="void (*)(const SSL *ssl, int type, int val)" m68kreg="a1"/>
		</method>
		<method name="SSL_get_info_callback" result="void (*)(const SSL *ssl, int type, int val)">
			<arg name="ssl" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_state" result="int">
			<arg name="ssl" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_set_verify_result" result="void">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
			<arg name="v" type="long" m68kreg="d0"/>
		</method>
		<method name="SSL_get_verify_result" result="long">
			<arg name="ssl" type="const SSL *" m68kreg="a0"/>
		</method>
		<method name="SSL_set_ex_data" result="int">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
			<arg name="idx" type="int" m68kreg="d0"/>
			<arg name="data" type="void *" m68kreg="a1"/>
		</method>
		<method name="SSL_get_ex_data" result="void *">
			<arg name="ssl" type="const SSL *" m68kreg="a0"/>
			<arg name="idx" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_get_ex_new_index" result="int">
			<arg name="argl" type="long" m68kreg="d0"/>
			<arg name="argp" type="void *" m68kreg="a0"/>
			<arg name="new_func" type="CRYPTO_EX_new *" m68kreg="a1"/>
			<arg name="dup_func" type="CRYPTO_EX_dup *" m68kreg="a2"/>
			<arg name="free_func" type="CRYPTO_EX_free *" m68kreg="a3"/>
		</method>
		<method name="SSL_SESSION_set_ex_data" result="int">
			<arg name="ss" type="SSL_SESSION *" m68kreg="a0"/>
			<arg name="idx" type="int" m68kreg="d0"/>
			<arg name="data" type="void *" m68kreg="a1"/>
		</method>
		<method name="SSL_SESSION_get_ex_data" result="void *">
			<arg name="ss" type="const SSL_SESSION *" m68kreg="a0"/>
			<arg name="idx" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_SESSION_get_ex_new_index" result="int">
			<arg name="argl" type="long" m68kreg="d0"/>
			<arg name="argp" type="void *" m68kreg="a0"/>
			<arg name="new_func" type="CRYPTO_EX_new *" m68kreg="a1"/>
			<arg name="dup_func" type="CRYPTO_EX_dup *" m68kreg="a2"/>
			<arg name="free_func" type="CRYPTO_EX_free *" m68kreg="a3"/>
		</method>
		<method name="SSL_CTX_set_ex_data" result="int">
			<arg name="ssl" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="idx" type="int" m68kreg="d0"/>
			<arg name="data" type="void *" m68kreg="a1"/>
		</method>
		<method name="SSL_CTX_get_ex_data" result="void *">
			<arg name="ssl" type="const SSL_CTX *" m68kreg="a0"/>
			<arg name="idx" type="int" m68kreg="d0"/>
		</method>
		<method name="SSL_CTX_get_ex_new_index" result="int">
			<arg name="argl" type="long" m68kreg="d0"/>
			<arg name="argp" type="void *" m68kreg="a0"/>
			<arg name="new_func" type="CRYPTO_EX_new *" m68kreg="a1"/>
			<arg name="dup_func" type="CRYPTO_EX_dup *" m68kreg="a2"/>
			<arg name="free_func" type="CRYPTO_EX_free *" m68kreg="a3"/>
		</method>
		<method name="SSL_get_ex_data_X509_STORE_CTX_idx" result="int">
		</method>
		<method name="SSL_CTX_set_tmp_rsa_callback" result="void">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="cb" type="RSA * (*)(SSL *ssl, int is_export, int keylength)" m68kreg="a1"/>
		</method>
		<method name="SSL_set_tmp_rsa_callback" result="void">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
			<arg name="cb" type="RSA * (*)(SSL *ssl, int is_export, int keylength)" m68kreg="a1"/>
		</method>
		<method name="SSL_CTX_set_tmp_dh_callback" result="void">
			<arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
			<arg name="dh" type="DH * (*)(SSL *ssl, int is_export, int keylength)" m68kreg="a1"/>
		</method>
		<method name="SSL_set_tmp_dh_callback" result="void">
			<arg name="ssl" type="SSL *" m68kreg="a0"/>
			<arg name="dh" type="DH * (*)(SSL *ssl, int is_export, int keylength)" m68kreg="a1"/>
		</method>
		<method name="SSL_COMP_add_compression_method" result="int">
			<arg name="id" type="int" m68kreg="d0"/>
			<arg name="cm" type="COMP_METHOD *" m68kreg="a0"/>
		</method>
		<method name="ERR_load_SSL_strings" result="void">
		</method>
		<method name="sk_num" result="int">
			<arg name="a" type="const STACK *" m68kreg="a0"/>
		</method>
		<method name="sk_value" result="char *">
			<arg name="a" type="const STACK *" m68kreg="a0"/>
			<arg name="b" type="int" m68kreg="d0"/>
		</method>
		<method name="sk_set" result="char *">
			<arg name="a" type="STACK *" m68kreg="a0"/>
			<arg name="b" type="int" m68kreg="d0"/>
			<arg name="c" type="char *" m68kreg="a1"/>
		</method>
		<method name="sk_new" result="STACK *">
			<arg name="cmp" type="int (*)(const char *const *, const char *const *)" m68kreg="a0"/>
		</method>
		<method name="sk_new_null" result="STACK *">
		</method>
		<method name="sk_free" result="void">
			<arg name="a" type="STACK *" m68kreg="a0"/>
		</method>
		<method name="sk_pop_free" result="void">
			<arg name="st" type="STACK *" m68kreg="a0"/>
			<arg name="func" type="void (*)(void *)" m68kreg="a1"/>
		</method>
		<method name="sk_insert" result="int">
			<arg name="sk" type="STACK *" m68kreg="a0"/>
			<arg name="data" type="char *" m68kreg="a1"/>
			<arg name="where" type="int" m68kreg="d0"/>
		</method>
		<method name="sk_delete" result="char *">
			<arg name="st" type="STACK *" m68kreg="a0"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="sk_delete_ptr" result="char *">
			<arg name="st" type="STACK *" m68kreg="a0"/>
			<arg name="p" type="char *" m68kreg="a1"/>
		</method>
		<method name="sk_find" result="int">
			<arg name="st" type="STACK *" m68kreg="a0"/>
			<arg name="data" type="char *" m68kreg="a1"/>
		</method>
		<method name="sk_push" result="int">
			<arg name="st" type="STACK *" m68kreg="a0"/>
			<arg name="data" type="char *" m68kreg="a1"/>
		</method>
		<method name="sk_unshift" result="int">
			<arg name="st" type="STACK *" m68kreg="a0"/>
			<arg name="data" type="char *" m68kreg="a1"/>
		</method>
		<method name="sk_shift" result="char *">
			<arg name="st" type="STACK *" m68kreg="a0"/>
		</method>
		<method name="sk_pop" result="char *">
			<arg name="st" type="STACK *" m68kreg="a0"/>
		</method>
		<method name="sk_zero" result="void">
			<arg name="st" type="STACK *" m68kreg="a0"/>
		</method>
		<method name="sk_set_cmp_func" result="int (*)(const char *const *, const char *const *)">
			<arg name="sk" type="STACK *" m68kreg="a0"/>
			<arg name="c" type="int (*)(const char *const *, const char *const *)" m68kreg="a1"/>
		</method>
		<method name="sk_dup" result="STACK *">
			<arg name="st" type="STACK *" m68kreg="a0"/>
		</method>
		<method name="sk_sort" result="void">
			<arg name="st" type="STACK *" m68kreg="a0"/>
		</method>
		<method name="sk_is_sorted" result="int">
			<arg name="st" type="const STACK *" m68kreg="a0"/>
		</method>
		<method name="ms_time_new" result="MS_TM *">
		</method>
		<method name="ms_time_free" result="void">
			<arg name="a" type="MS_TM *" m68kreg="a0"/>
		</method>
		<method name="ms_time_get" result="void">
			<arg name="a" type="MS_TM *" m68kreg="a0"/>
		</method>
		<method name="ms_time_diff" result="double">
			<arg name="start" type="MS_TM *" m68kreg="a0"/>
			<arg name="end" type="MS_TM *" m68kreg="a1"/>
		</method>
		<method name="ms_time_cmp" result="int">
			<arg name="ap" type="MS_TM *" m68kreg="a0"/>
			<arg name="bp" type="MS_TM *" m68kreg="a1"/>
		</method>
		<method name="TXT_DB_read" result="TXT_DB *">
			<arg name="in" type="BIO *" m68kreg="a0"/>
			<arg name="num" type="int" m68kreg="d0"/>
		</method>
		<method name="TXT_DB_write" result="long">
			<arg name="out" type="BIO *" m68kreg="a0"/>
			<arg name="db" type="TXT_DB *" m68kreg="a1"/>
		</method>
		<method name="TXT_DB_create_index" result="int">
			<arg name="db" type="TXT_DB *" m68kreg="a0"/>
			<arg name="field" type="int" m68kreg="d0"/>
			<arg name="qual" type="int (*)()" m68kreg="a1"/>
			<arg name="hash" type="LHASH_HASH_FN_TYPE" m68kreg="d1"/>
			<arg name="cmp" type="LHASH_COMP_FN_TYPE" m68kreg="d2"/>
		</method>
		<method name="TXT_DB_free" result="void">
			<arg name="db" type="TXT_DB *" m68kreg="a0"/>
		</method>
		<method name="TXT_DB_get_by_index" result="char **">
			<arg name="db" type="TXT_DB *" m68kreg="a0"/>
			<arg name="idx" type="int" m68kreg="d0"/>
			<arg name="value" type="char **" m68kreg="a1"/>
		</method>
		<method name="TXT_DB_insert" result="int">
			<arg name="db" type="TXT_DB *" m68kreg="a0"/>
			<arg name="value" type="char **" m68kreg="a1"/>
		</method>
		<method name="UI_new" result="UI *">
		</method>
		<method name="UI_new_method" result="UI *">
			<arg name="method" type="const UI_METHOD *" m68kreg="a0"/>
		</method>
		<method name="UI_free" result="void">
			<arg name="ui" type="UI *" m68kreg="a0"/>
		</method>
		<method name="UI_add_input_string" result="int">
			<arg name="ui" type="UI *" m68kreg="a0"/>
			<arg name="prompt" type="const char *" m68kreg="a1"/>
			<arg name="flags" type="int" m68kreg="d0"/>
			<arg name="result_buf" type="char *" m68kreg="a2"/>
			<arg name="minsize" type="int" m68kreg="d1"/>
			<arg name="maxsize" type="int" m68kreg="d2"/>
		</method>
		<method name="UI_dup_input_string" result="int">
			<arg name="ui" type="UI *" m68kreg="a0"/>
			<arg name="prompt" type="const char *" m68kreg="a1"/>
			<arg name="flags" type="int" m68kreg="d0"/>
			<arg name="result_buf" type="char *" m68kreg="a2"/>
			<arg name="minsize" type="int" m68kreg="d1"/>
			<arg name="maxsize" type="int" m68kreg="d2"/>
		</method>
		<method name="UI_add_verify_string" result="int">
			<arg name="ui" type="UI *" m68kreg="a0"/>
			<arg name="prompt" type="const char *" m68kreg="a1"/>
			<arg name="flags" type="int" m68kreg="d0"/>
			<arg name="result_buf" type="char *" m68kreg="a2"/>
			<arg name="minsize" type="int" m68kreg="d1"/>
			<arg name="maxsize" type="int" m68kreg="d2"/>
			<arg name="test_buf" type="const char *" m68kreg="a3"/>
		</method>
		<method name="UI_dup_verify_string" result="int">
			<arg name="ui" type="UI *" m68kreg="a0"/>
			<arg name="prompt" type="const char *" m68kreg="a1"/>
			<arg name="flags" type="int" m68kreg="d0"/>
			<arg name="result_buf" type="char *" m68kreg="a2"/>
			<arg name="minsize" type="int" m68kreg="d1"/>
			<arg name="maxsize" type="int" m68kreg="d2"/>
			<arg name="test_buf" type="const char *" m68kreg="a3"/>
		</method>
		<method name="UI_add_input_boolean" result="int">
			<arg name="ui" type="UI *" m68kreg="a0"/>
			<arg name="prompt" type="const char *" m68kreg="a1"/>
			<arg name="action_desc" type="const char *" m68kreg="a2"/>
			<arg name="ok_chars" type="const char *" m68kreg="a3"/>
			<arg name="cancel_chars" type="const char *" m68kreg="a4"/>
			<arg name="flags" type="int" m68kreg="d0"/>
			<arg name="result_buf" type="char *" m68kreg="a5"/>
		</method>
		<method name="UI_dup_input_boolean" result="int">
			<arg name="ui" type="UI *" m68kreg="a0"/>
			<arg name="prompt" type="const char *" m68kreg="a1"/>
			<arg name="action_desc" type="const char *" m68kreg="a2"/>
			<arg name="ok_chars" type="const char *" m68kreg="a3"/>
			<arg name="cancel_chars" type="const char *" m68kreg="a4"/>
			<arg name="flags" type="int" m68kreg="d0"/>
			<arg name="result_buf" type="char *" m68kreg="a5"/>
		</method>
		<method name="UI_add_info_string" result="int">
			<arg name="ui" type="UI *" m68kreg="a0"/>
			<arg name="text" type="const char *" m68kreg="a1"/>
		</method>
		<method name="UI_dup_info_string" result="int">
			<arg name="ui" type="UI *" m68kreg="a0"/>
			<arg name="text" type="const char *" m68kreg="a1"/>
		</method>
		<method name="UI_add_error_string" result="int">
			<arg name="ui" type="UI *" m68kreg="a0"/>
			<arg name="text" type="const char *" m68kreg="a1"/>
		</method>
		<method name="UI_dup_error_string" result="int">
			<arg name="ui" type="UI *" m68kreg="a0"/>
			<arg name="text" type="const char *" m68kreg="a1"/>
		</method>
		<method name="UI_construct_prompt" result="char *">
			<arg name="ui_method" type="UI *" m68kreg="a0"/>
			<arg name="object_desc" type="const char *" m68kreg="a1"/>
			<arg name="object_name" type="const char *" m68kreg="a2"/>
		</method>
		<method name="UI_add_user_data" result="void *">
			<arg name="ui" type="UI *" m68kreg="a0"/>
			<arg name="user_data" type="void *" m68kreg="a1"/>
		</method>
		<method name="UI_get0_user_data" result="void *">
			<arg name="ui" type="UI *" m68kreg="a0"/>
		</method>
		<method name="UI_get0_result" result="const char *">
			<arg name="ui" type="UI *" m68kreg="a0"/>
			<arg name="i" type="int" m68kreg="d0"/>
		</method>
		<method name="UI_process" result="int">
			<arg name="ui" type="UI *" m68kreg="a0"/>
		</method>
		<method name="UI_ctrl" result="int">
			<arg name="ui" type="UI *" m68kreg="a0"/>
			<arg name="cmd" type="int" m68kreg="d0"/>
			<arg name="i" type="long" m68kreg="d1"/>
			<arg name="p" type="void *" m68kreg="a1"/>
			<arg name="f" type="void (*)()" m68kreg="a2"/>
		</method>
		<method name="UI_get_ex_new_index" result="int">
			<arg name="argl" type="long" m68kreg="d0"/>
			<arg name="argp" type="void *" m68kreg="a0"/>
			<arg name="new_func" type="CRYPTO_EX_new *" m68kreg="a1"/>
			<arg name="dup_func" type="CRYPTO_EX_dup *" m68kreg="a2"/>
			<arg name="free_func" type="CRYPTO_EX_free *" m68kreg="a3"/>
		</method>
		<method name="UI_set_ex_data" result="int">
			<arg name="r" type="UI *" m68kreg="a0"/>
			<arg name="idx" type="int" m68kreg="d0"/>
			<arg name="arg" type="void *" m68kreg="a1"/>
		</method>
		<method name="UI_get_ex_data" result="void *">
			<arg name="r" type="UI *" m68kreg="a0"/>
			<arg name="idx" type="int" m68kreg="d0"/>
		</method>
		<method name="UI_set_default_method" result="void">
			<arg name="meth" type="const UI_METHOD *" m68kreg="a0"/>
		</method>
		<method name="UI_get_default_method" result="const UI_METHOD *">
		</method>
		<method name="UI_get_method" result="const UI_METHOD *">
			<arg name="ui" type="UI *" m68kreg="a0"/>
		</method>
		<method name="UI_set_method" result="const UI_METHOD *">
			<arg name="ui" type="UI *" m68kreg="a0"/>
			<arg name="meth" type="const UI_METHOD *" m68kreg="a1"/>
		</method>
		<method name="UI_OpenSSL" result="UI_METHOD *">
		</method>
		<method name="UI_create_method" result="UI_METHOD *">
			<arg name="name" type="char *" m68kreg="a0"/>
		</method>
		<method name="UI_destroy_method" result="void">
			<arg name="ui_method" type="UI_METHOD *" m68kreg="a0"/>
		</method>
		<method name="UI_method_set_opener" result="int">
			<arg name="method" type="UI_METHOD *" m68kreg="a0"/>
			<arg name="opener" type="int (*)(UI *ui)" m68kreg="a1"/>
		</method>
		<method name="UI_method_set_writer" result="int">
			<arg name="method" type="UI_METHOD *" m68kreg="a0"/>
			<arg name="writer" type="int (*)(UI *ui, UI_STRING *uis)" m68kreg="a1"/>
		</method>
		<method name="UI_method_set_flusher" result="int">
			<arg name="method" type="UI_METHOD *" m68kreg="a0"/>
			<arg name="flusher" type="int (*)(UI *ui)" m68kreg="a1"/>
		</method>
		<method name="UI_method_set_reader" result="int">
			<arg name="method" type="UI_METHOD *" m68kreg="a0"/>
			<arg name="reader" type="int (*)(UI *ui, UI_STRING *uis)" m68kreg="a1"/>
		</method>
		<method name="UI_method_set_closer" result="int">
			<arg name="method" type="UI_METHOD *" m68kreg="a0"/>
			<arg name="closer" type="int (*)(UI *ui)" m68kreg="a1"/>
		</method>
		<method name="UI_method_get_opener" result="int (*)(UI *)">
			<arg name="method" type="UI_METHOD *" m68kreg="a0"/>
		</method>
		<method name="UI_method_get_writer" result="int (*)(UI *, UI_STRING *)">
			<arg name="method" type="UI_METHOD *" m68kreg="a0"/>
		</method>
		<method name="UI_method_get_flusher" result="int (*)(UI *)">
			<arg name="method" type="UI_METHOD *" m68kreg="a0"/>
		</method>
		<method name="UI_method_get_reader" result="int (*)(UI *, UI_STRING *)">
			<arg name="method" type="UI_METHOD *" m68kreg="a0"/>
		</method>
		<method name="UI_method_get_closer" result="int (*)(UI *)">
			<arg name="method" type="UI_METHOD *" m68kreg="a0"/>
		</method>
		<method name="UI_get_string_type" result="enum UI_string_types">
			<arg name="uis" type="UI_STRING *" m68kreg="a0"/>
		</method>
		<method name="UI_get_input_flags" result="int">
			<arg name="uis" type="UI_STRING *" m68kreg="a0"/>
		</method>
		<method name="UI_get0_output_string" result="const char *">
			<arg name="uis" type="UI_STRING *" m68kreg="a0"/>
		</method>
		<method name="UI_get0_action_string" result="const char *">
			<arg name="uis" type="UI_STRING *" m68kreg="a0"/>
		</method>
		<method name="UI_get0_result_string" result="const char *">
			<arg name="uis" type="UI_STRING *" m68kreg="a0"/>
		</method>
		<method name="UI_get0_test_string" result="const char *">
			<arg name="uis" type="UI_STRING *" m68kreg="a0"/>
		</method>
		<method name="UI_get_result_minsize" result="int">
			<arg name="uis" type="UI_STRING *" m68kreg="a0"/>
		</method>
		<method name="UI_get_result_maxsize" result="int">
			<arg name="uis" type="UI_STRING *" m68kreg="a0"/>
		</method>
		<method name="UI_set_result" result="int">
			<arg name="ui" type="UI *" m68kreg="a0"/>
			<arg name="uis" type="UI_STRING *" m68kreg="a1"/>
			<arg name="result" type="const char *" m68kreg="a2"/>
		</method>
		<method name="UI_UTIL_read_pw_string" result="int">
			<arg name="buf" type="char *" m68kreg="a0"/>
			<arg name="length" type="int" m68kreg="d0"/>
			<arg name="prompt" type="const char *" m68kreg="a1"/>
			<arg name="verify" type="int" m68kreg="d1"/>
		</method>
		<method name="UI_UTIL_read_pw" result="int">
			<arg name="buf" type="char *" m68kreg="a0"/>
			<arg name="buff" type="char *" m68kreg="a1"/>
			<arg name="size" type="int" m68kreg="d0"/>
			<arg name="prompt" type="const char *" m68kreg="a2"/>
			<arg name="verify" type="int" m68kreg="d1"/>
		</method>
		<method name="ERR_load_UI_strings" result="void">
		</method>
		<method name="_ossl_old_des_read_pw_string" result="int">
			<arg name="buf" type="char *" m68kreg="a0"/>
			<arg name="length" type="int" m68kreg="d0"/>
			<arg name="prompt" type="const char *" m68kreg="a1"/>
			<arg name="verify" type="int" m68kreg="d1"/>
		</method>
		<method name="_ossl_old_des_read_pw" result="int">
			<arg name="buf" type="char *" m68kreg="a0"/>
			<arg name="buff" type="char *" m68kreg="a1"/>
			<arg name="size" type="int" m68kreg="d0"/>
			<arg name="prompt" type="const char *" m68kreg="a2"/>
			<arg name="verify" type="int" m68kreg="d1"/>
		</method>
		<method name="X509_verify_cert_error_string" result="const char *">
			<arg name="n" type="long" m68kreg="d0"/>
		</method>
		<method name="X509_verify" result="int">
			<arg name="a" type="X509 *" m68kreg="a0"/>
			<arg name="r" type="EVP_PKEY *" m68kreg="a1"/>
		</method>
		<method name="X509_REQ_verify" result="int">
			<arg name="a" type="X509_REQ *" m68kreg="a0"/>
			<arg name="r" type="EVP_PKEY *" m68kreg="a1"/>
		</method>
		<method name="X509_CRL_verify" result="int">
			<arg name="a" type="X509_CRL *" m68kreg="a0"/>
			<arg name="r" type="EVP_PKEY *" m68kreg="a1"/>
		</method>
		<method name="NETSCAPE_SPKI_verify" result="int">
			<arg name="a" type="NETSCAPE_SPKI *" m68kreg="a0"/>
			<arg name="r" type="EVP_PKEY *" m68kreg="a1"/>
		</method>
		<method name="NETSCAPE_SPKI_b64_decode" result="NETSCAPE_SPKI *">
			<arg name="str" type="const char *" m68kreg="a0"/>
			<arg name="len" type="int" m68kreg="d0"/>
		</method>
		<method name="NETSCAPE_SPKI_b64_encode" result="char *">
			<arg name="x" type="NETSCAPE_SPKI *" m68kreg="a0"/>
		</method>
		<method name="NETSCAPE_SPKI_get_pubkey" result="EVP_PKEY *">
			<arg name="x" type="NETSCAPE_SPKI *" m68kreg="a0"/>
		</method>
		<method name="NETSCAPE_SPKI_set_pubkey" result="int">
			<arg name="x" type="NETSCAPE_SPKI *" m68kreg="a0"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
		</method>
		<method name="NETSCAPE_SPKI_print" result="int">
			<arg name="out" type="BIO *" m68kreg="a0"/>
			<arg name="spki" type="NETSCAPE_SPKI *" m68kreg="a1"/>
		</method>
		<method name="X509_signature_print" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="alg" type="X509_ALGOR *" m68kreg="a1"/>
			<arg name="sig" type="ASN1_STRING *" m68kreg="a2"/>
		</method>
		<method name="X509_sign" result="int">
			<arg name="x" type="X509 *" m68kreg="a0"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
			<arg name="md" type="const EVP_MD *" m68kreg="a2"/>
		</method>
		<method name="X509_REQ_sign" result="int">
			<arg name="x" type="X509_REQ *" m68kreg="a0"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
			<arg name="md" type="const EVP_MD *" m68kreg="a2"/>
		</method>
		<method name="X509_CRL_sign" result="int">
			<arg name="x" type="X509_CRL *" m68kreg="a0"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
			<arg name="md" type="const EVP_MD *" m68kreg="a2"/>
		</method>
		<method name="NETSCAPE_SPKI_sign" result="int">
			<arg name="x" type="NETSCAPE_SPKI *" m68kreg="a0"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
			<arg name="md" type="const EVP_MD *" m68kreg="a2"/>
		</method>
		<method name="X509_pubkey_digest" result="int">
			<arg name="data" type="const X509 *" m68kreg="a0"/>
			<arg name="type" type="const EVP_MD *" m68kreg="a1"/>
			<arg name="md" type="unsigned char *" m68kreg="a2"/>
			<arg name="len" type="unsigned int *" m68kreg="a3"/>
		</method>
		<method name="X509_digest" result="int">
			<arg name="data" type="const X509 *" m68kreg="a0"/>
			<arg name="type" type="const EVP_MD *" m68kreg="a1"/>
			<arg name="md" type="unsigned char *" m68kreg="a2"/>
			<arg name="len" type="unsigned int *" m68kreg="a3"/>
		</method>
		<method name="X509_CRL_digest" result="int">
			<arg name="data" type="const X509_CRL *" m68kreg="a0"/>
			<arg name="type" type="const EVP_MD *" m68kreg="a1"/>
			<arg name="md" type="unsigned char *" m68kreg="a2"/>
			<arg name="len" type="unsigned int *" m68kreg="a3"/>
		</method>
		<method name="X509_REQ_digest" result="int">
			<arg name="data" type="const X509_REQ *" m68kreg="a0"/>
			<arg name="type" type="const EVP_MD *" m68kreg="a1"/>
			<arg name="md" type="unsigned char *" m68kreg="a2"/>
			<arg name="len" type="unsigned int *" m68kreg="a3"/>
		</method>
		<method name="X509_NAME_digest" result="int">
			<arg name="data" type="const X509_NAME *" m68kreg="a0"/>
			<arg name="type" type="const EVP_MD *" m68kreg="a1"/>
			<arg name="md" type="unsigned char *" m68kreg="a2"/>
			<arg name="len" type="unsigned int *" m68kreg="a3"/>
		</method>
		<method name="d2i_X509_bio" result="X509 *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x509" type="X509 **" m68kreg="a1"/>
		</method>
		<method name="i2d_X509_bio" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x509" type="X509 *" m68kreg="a1"/>
		</method>
		<method name="d2i_X509_CRL_bio" result="X509_CRL *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="crl" type="X509_CRL **" m68kreg="a1"/>
		</method>
		<method name="i2d_X509_CRL_bio" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="crl" type="X509_CRL *" m68kreg="a1"/>
		</method>
		<method name="d2i_X509_REQ_bio" result="X509_REQ *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="req" type="X509_REQ **" m68kreg="a1"/>
		</method>
		<method name="i2d_X509_REQ_bio" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="req" type="X509_REQ *" m68kreg="a1"/>
		</method>
		<method name="d2i_RSAPrivateKey_bio" result="RSA *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="rsa" type="RSA **" m68kreg="a1"/>
		</method>
		<method name="i2d_RSAPrivateKey_bio" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="rsa" type="RSA *" m68kreg="a1"/>
		</method>
		<method name="d2i_RSAPublicKey_bio" result="RSA *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="rsa" type="RSA **" m68kreg="a1"/>
		</method>
		<method name="i2d_RSAPublicKey_bio" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="rsa" type="RSA *" m68kreg="a1"/>
		</method>
		<method name="d2i_RSA_PUBKEY_bio" result="RSA *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="rsa" type="RSA **" m68kreg="a1"/>
		</method>
		<method name="i2d_RSA_PUBKEY_bio" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="rsa" type="RSA *" m68kreg="a1"/>
		</method>
		<method name="d2i_DSA_PUBKEY_bio" result="DSA *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="dsa" type="DSA **" m68kreg="a1"/>
		</method>
		<method name="i2d_DSA_PUBKEY_bio" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="dsa" type="DSA *" m68kreg="a1"/>
		</method>
		<method name="d2i_DSAPrivateKey_bio" result="DSA *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="dsa" type="DSA **" m68kreg="a1"/>
		</method>
		<method name="i2d_DSAPrivateKey_bio" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="dsa" type="DSA *" m68kreg="a1"/>
		</method>
		<method name="d2i_PKCS8_bio" result="X509_SIG *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="p8" type="X509_SIG **" m68kreg="a1"/>
		</method>
		<method name="i2d_PKCS8_bio" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="p8" type="X509_SIG *" m68kreg="a1"/>
		</method>
		<method name="d2i_PKCS8_PRIV_KEY_INFO_bio" result="PKCS8_PRIV_KEY_INFO *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="p8inf" type="PKCS8_PRIV_KEY_INFO **" m68kreg="a1"/>
		</method>
		<method name="i2d_PKCS8_PRIV_KEY_INFO_bio" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="p8inf" type="PKCS8_PRIV_KEY_INFO *" m68kreg="a1"/>
		</method>
		<method name="i2d_PKCS8PrivateKeyInfo_bio" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="key" type="EVP_PKEY *" m68kreg="a1"/>
		</method>
		<method name="i2d_PrivateKey_bio" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
		</method>
		<method name="d2i_PrivateKey_bio" result="EVP_PKEY *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="a" type="EVP_PKEY **" m68kreg="a1"/>
		</method>
		<method name="i2d_PUBKEY_bio" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
		</method>
		<method name="d2i_PUBKEY_bio" result="EVP_PKEY *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="a" type="EVP_PKEY **" m68kreg="a1"/>
		</method>
		<method name="X509_dup" result="X509 *">
			<arg name="x509" type="X509 *" m68kreg="a0"/>
		</method>
		<method name="X509_ATTRIBUTE_dup" result="X509_ATTRIBUTE *">
			<arg name="xa" type="X509_ATTRIBUTE *" m68kreg="a0"/>
		</method>
		<method name="X509_EXTENSION_dup" result="X509_EXTENSION *">
			<arg name="ex" type="X509_EXTENSION *" m68kreg="a0"/>
		</method>
		<method name="X509_CRL_dup" result="X509_CRL *">
			<arg name="crl" type="X509_CRL *" m68kreg="a0"/>
		</method>
		<method name="X509_REQ_dup" result="X509_REQ *">
			<arg name="req" type="X509_REQ *" m68kreg="a0"/>
		</method>
		<method name="X509_ALGOR_dup" result="X509_ALGOR *">
			<arg name="xn" type="X509_ALGOR *" m68kreg="a0"/>
		</method>
		<method name="X509_NAME_dup" result="X509_NAME *">
			<arg name="xn" type="X509_NAME *" m68kreg="a0"/>
		</method>
		<method name="X509_NAME_ENTRY_dup" result="X509_NAME_ENTRY *">
			<arg name="ne" type="X509_NAME_ENTRY *" m68kreg="a0"/>
		</method>
		<method name="X509_cmp_time" result="int">
			<arg name="s" type="ASN1_TIME *" m68kreg="a0"/>
			<arg name="t" type="time_t *" m68kreg="a1"/>
		</method>
		<method name="X509_cmp_current_time" result="int">
			<arg name="s" type="ASN1_TIME *" m68kreg="a0"/>
		</method>
		<method name="X509_time_adj" result="ASN1_TIME *">
			<arg name="s" type="ASN1_TIME *" m68kreg="a0"/>
			<arg name="adj" type="long" m68kreg="d0"/>
			<arg name="t" type="time_t *" m68kreg="a1"/>
		</method>
		<method name="X509_gmtime_adj" result="ASN1_TIME *">
			<arg name="s" type="ASN1_TIME *" m68kreg="a0"/>
			<arg name="adj" type="long" m68kreg="d0"/>
		</method>
		<method name="X509_get_default_cert_area" result="const char *">
		</method>
		<method name="X509_get_default_cert_dir" result="const char *">
		</method>
		<method name="X509_get_default_cert_file" result="const char *">
		</method>
		<method name="X509_get_default_cert_dir_env" result="const char *">
		</method>
		<method name="X509_get_default_cert_file_env" result="const char *">
		</method>
		<method name="X509_get_default_private_dir" result="const char *">
		</method>
		<method name="X509_to_X509_REQ" result="X509_REQ *">
			<arg name="x" type="X509 *" m68kreg="a0"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
			<arg name="md" type="const EVP_MD *" m68kreg="a2"/>
		</method>
		<method name="X509_REQ_to_X509" result="X509 *">
			<arg name="r" type="X509_REQ *" m68kreg="a0"/>
			<arg name="days" type="int" m68kreg="d0"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
		</method>
		<method name="X509_ALGOR_new" result="X509_ALGOR *">
		</method>
		<method name="X509_ALGOR_free" result="void">
			<arg name="a" type="X509_ALGOR *" m68kreg="a0"/>
		</method>
		<method name="d2i_X509_ALGOR" result="X509_ALGOR *">
			<arg name="a" type="X509_ALGOR **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_X509_ALGOR" result="int">
			<arg name="a" type="X509_ALGOR *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="X509_ALGOR_it" result="const ASN1_ITEM *">
		</method>
		<method name="X509_VAL_new" result="X509_VAL *">
		</method>
		<method name="X509_VAL_free" result="void">
			<arg name="a" type="X509_VAL *" m68kreg="a0"/>
		</method>
		<method name="d2i_X509_VAL" result="X509_VAL *">
			<arg name="a" type="X509_VAL **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_X509_VAL" result="int">
			<arg name="a" type="X509_VAL *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="X509_VAL_it" result="const ASN1_ITEM *">
		</method>
		<method name="X509_PUBKEY_new" result="X509_PUBKEY *">
		</method>
		<method name="X509_PUBKEY_free" result="void">
			<arg name="a" type="X509_PUBKEY *" m68kreg="a0"/>
		</method>
		<method name="d2i_X509_PUBKEY" result="X509_PUBKEY *">
			<arg name="a" type="X509_PUBKEY **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_X509_PUBKEY" result="int">
			<arg name="a" type="X509_PUBKEY *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="X509_PUBKEY_it" result="const ASN1_ITEM *">
		</method>
		<method name="X509_PUBKEY_set" result="int">
			<arg name="x" type="X509_PUBKEY **" m68kreg="a0"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
		</method>
		<method name="X509_PUBKEY_get" result="EVP_PKEY *">
			<arg name="key" type="X509_PUBKEY *" m68kreg="a0"/>
		</method>
		<method name="X509_get_pubkey_parameters" result="int">
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
			<arg name="chain" type="STACK_OF(X509) *" m68kreg="a1"/>
		</method>
		<method name="i2d_PUBKEY" result="int">
			<arg name="a" type="EVP_PKEY *" m68kreg="a0"/>
			<arg name="pp" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="d2i_PUBKEY" result="EVP_PKEY *">
			<arg name="a" type="EVP_PKEY **" m68kreg="a0"/>
			<arg name="pp" type="const unsigned char **" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_RSA_PUBKEY" result="int">
			<arg name="a" type="RSA *" m68kreg="a0"/>
			<arg name="pp" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="d2i_RSA_PUBKEY" result="RSA *">
			<arg name="a" type="RSA **" m68kreg="a0"/>
			<arg name="pp" type="const unsigned char **" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_DSA_PUBKEY" result="int">
			<arg name="a" type="DSA *" m68kreg="a0"/>
			<arg name="pp" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="d2i_DSA_PUBKEY" result="DSA *">
			<arg name="a" type="DSA **" m68kreg="a0"/>
			<arg name="pp" type="const unsigned char **" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
		</method>
		<method name="X509_SIG_new" result="X509_SIG *">
		</method>
		<method name="X509_SIG_free" result="void">
			<arg name="a" type="X509_SIG *" m68kreg="a0"/>
		</method>
		<method name="d2i_X509_SIG" result="X509_SIG *">
			<arg name="a" type="X509_SIG **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_X509_SIG" result="int">
			<arg name="a" type="X509_SIG *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="X509_SIG_it" result="const ASN1_ITEM *">
		</method>
		<method name="X509_REQ_INFO_new" result="X509_REQ_INFO *">
		</method>
		<method name="X509_REQ_INFO_free" result="void">
			<arg name="a" type="X509_REQ_INFO *" m68kreg="a0"/>
		</method>
		<method name="d2i_X509_REQ_INFO" result="X509_REQ_INFO *">
			<arg name="a" type="X509_REQ_INFO **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_X509_REQ_INFO" result="int">
			<arg name="a" type="X509_REQ_INFO *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="X509_REQ_INFO_it" result="const ASN1_ITEM *">
		</method>
		<method name="X509_REQ_new" result="X509_REQ *">
		</method>
		<method name="X509_REQ_free" result="void">
			<arg name="a" type="X509_REQ *" m68kreg="a0"/>
		</method>
		<method name="d2i_X509_REQ" result="X509_REQ *">
			<arg name="a" type="X509_REQ **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_X509_REQ" result="int">
			<arg name="a" type="X509_REQ *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="X509_REQ_it" result="const ASN1_ITEM *">
		</method>
		<method name="X509_ATTRIBUTE_new" result="X509_ATTRIBUTE *">
		</method>
		<method name="X509_ATTRIBUTE_free" result="void">
			<arg name="a" type="X509_ATTRIBUTE *" m68kreg="a0"/>
		</method>
		<method name="d2i_X509_ATTRIBUTE" result="X509_ATTRIBUTE *">
			<arg name="a" type="X509_ATTRIBUTE **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_X509_ATTRIBUTE" result="int">
			<arg name="a" type="X509_ATTRIBUTE *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="X509_ATTRIBUTE_it" result="const ASN1_ITEM *">
		</method>
		<method name="X509_ATTRIBUTE_create" result="X509_ATTRIBUTE *">
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="atrtype" type="int" m68kreg="d1"/>
			<arg name="value" type="void *" m68kreg="a0"/>
		</method>
		<method name="X509_EXTENSION_new" result="X509_EXTENSION *">
		</method>
		<method name="X509_EXTENSION_free" result="void">
			<arg name="a" type="X509_EXTENSION *" m68kreg="a0"/>
		</method>
		<method name="d2i_X509_EXTENSION" result="X509_EXTENSION *">
			<arg name="a" type="X509_EXTENSION **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_X509_EXTENSION" result="int">
			<arg name="a" type="X509_EXTENSION *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="X509_EXTENSION_it" result="const ASN1_ITEM *">
		</method>
		<method name="X509_NAME_ENTRY_new" result="X509_NAME_ENTRY *">
		</method>
		<method name="X509_NAME_ENTRY_free" result="void">
			<arg name="a" type="X509_NAME_ENTRY *" m68kreg="a0"/>
		</method>
		<method name="d2i_X509_NAME_ENTRY" result="X509_NAME_ENTRY *">
			<arg name="a" type="X509_NAME_ENTRY **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_X509_NAME_ENTRY" result="int">
			<arg name="a" type="X509_NAME_ENTRY *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="X509_NAME_ENTRY_it" result="const ASN1_ITEM *">
		</method>
		<method name="X509_NAME_new" result="X509_NAME *">
		</method>
		<method name="X509_NAME_free" result="void">
			<arg name="a" type="X509_NAME *" m68kreg="a0"/>
		</method>
		<method name="d2i_X509_NAME" result="X509_NAME *">
			<arg name="a" type="X509_NAME **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_X509_NAME" result="int">
			<arg name="a" type="X509_NAME *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="X509_NAME_it" result="const ASN1_ITEM *">
		</method>
		<method name="X509_NAME_set" result="int">
			<arg name="xn" type="X509_NAME **" m68kreg="a0"/>
			<arg name="name" type="X509_NAME *" m68kreg="a1"/>
		</method>
		<method name="X509_CINF_new" result="X509_CINF *">
		</method>
		<method name="X509_CINF_free" result="void">
			<arg name="a" type="X509_CINF *" m68kreg="a0"/>
		</method>
		<method name="d2i_X509_CINF" result="X509_CINF *">
			<arg name="a" type="X509_CINF **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_X509_CINF" result="int">
			<arg name="a" type="X509_CINF *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="X509_CINF_it" result="const ASN1_ITEM *">
		</method>
		<method name="X509_new" result="X509 *">
		</method>
		<method name="X509_free" result="void">
			<arg name="a" type="X509 *" m68kreg="a0"/>
		</method>
		<method name="d2i_X509" result="X509 *">
			<arg name="a" type="X509 **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_X509" result="int">
			<arg name="a" type="X509 *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="X509_it" result="const ASN1_ITEM *">
		</method>
		<method name="X509_CERT_AUX_new" result="X509_CERT_AUX *">
		</method>
		<method name="X509_CERT_AUX_free" result="void">
			<arg name="a" type="X509_CERT_AUX *" m68kreg="a0"/>
		</method>
		<method name="d2i_X509_CERT_AUX" result="X509_CERT_AUX *">
			<arg name="a" type="X509_CERT_AUX **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_X509_CERT_AUX" result="int">
			<arg name="a" type="X509_CERT_AUX *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="X509_CERT_AUX_it" result="const ASN1_ITEM *">
		</method>
		<method name="X509_get_ex_new_index" result="int">
			<arg name="argl" type="long" m68kreg="d0"/>
			<arg name="argp" type="void *" m68kreg="a0"/>
			<arg name="new_func" type="CRYPTO_EX_new *" m68kreg="a1"/>
			<arg name="dup_func" type="CRYPTO_EX_dup *" m68kreg="a2"/>
			<arg name="free_func" type="CRYPTO_EX_free *" m68kreg="a3"/>
		</method>
		<method name="X509_set_ex_data" result="int">
			<arg name="r" type="X509 *" m68kreg="a0"/>
			<arg name="idx" type="int" m68kreg="d0"/>
			<arg name="arg" type="void *" m68kreg="a1"/>
		</method>
		<method name="X509_get_ex_data" result="void *">
			<arg name="r" type="X509 *" m68kreg="a0"/>
			<arg name="idx" type="int" m68kreg="d0"/>
		</method>
		<method name="i2d_X509_AUX" result="int">
			<arg name="a" type="X509 *" m68kreg="a0"/>
			<arg name="pp" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="d2i_X509_AUX" result="X509 *">
			<arg name="a" type="X509 **" m68kreg="a0"/>
			<arg name="pp" type="const unsigned char **" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
		</method>
		<method name="X509_alias_set1" result="int">
			<arg name="x" type="X509 *" m68kreg="a0"/>
			<arg name="name" type="unsigned char *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_keyid_set1" result="int">
			<arg name="x" type="X509 *" m68kreg="a0"/>
			<arg name="id" type="unsigned char *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_alias_get0" result="unsigned char *">
			<arg name="x" type="X509 *" m68kreg="a0"/>
			<arg name="len" type="int *" m68kreg="a1"/>
		</method>
		<method name="X509_TRUST_set_default" result="int (*)(int, X509 *, int)">
			<arg name="trust" type="int (*)(int, X509 *, int)" m68kreg="a0"/>
		</method>
		<method name="X509_TRUST_set" result="int">
			<arg name="t" type="int *" m68kreg="a0"/>
			<arg name="trust" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_add1_trust_object" result="int">
			<arg name="x" type="X509 *" m68kreg="a0"/>
			<arg name="obj" type="ASN1_OBJECT *" m68kreg="a1"/>
		</method>
		<method name="X509_add1_reject_object" result="int">
			<arg name="x" type="X509 *" m68kreg="a0"/>
			<arg name="obj" type="ASN1_OBJECT *" m68kreg="a1"/>
		</method>
		<method name="X509_trust_clear" result="void">
			<arg name="x" type="X509 *" m68kreg="a0"/>
		</method>
		<method name="X509_reject_clear" result="void">
			<arg name="x" type="X509 *" m68kreg="a0"/>
		</method>
		<method name="X509_REVOKED_new" result="X509_REVOKED *">
		</method>
		<method name="X509_REVOKED_free" result="void">
			<arg name="a" type="X509_REVOKED *" m68kreg="a0"/>
		</method>
		<method name="d2i_X509_REVOKED" result="X509_REVOKED *">
			<arg name="a" type="X509_REVOKED **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_X509_REVOKED" result="int">
			<arg name="a" type="X509_REVOKED *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="X509_REVOKED_it" result="const ASN1_ITEM *">
		</method>
		<method name="X509_CRL_INFO_new" result="X509_CRL_INFO *">
		</method>
		<method name="X509_CRL_INFO_free" result="void">
			<arg name="a" type="X509_CRL_INFO *" m68kreg="a0"/>
		</method>
		<method name="d2i_X509_CRL_INFO" result="X509_CRL_INFO *">
			<arg name="a" type="X509_CRL_INFO **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_X509_CRL_INFO" result="int">
			<arg name="a" type="X509_CRL_INFO *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="X509_CRL_INFO_it" result="const ASN1_ITEM *">
		</method>
		<method name="X509_CRL_new" result="X509_CRL *">
		</method>
		<method name="X509_CRL_free" result="void">
			<arg name="a" type="X509_CRL *" m68kreg="a0"/>
		</method>
		<method name="d2i_X509_CRL" result="X509_CRL *">
			<arg name="a" type="X509_CRL **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_X509_CRL" result="int">
			<arg name="a" type="X509_CRL *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="X509_CRL_it" result="const ASN1_ITEM *">
		</method>
		<method name="X509_CRL_add0_revoked" result="int">
			<arg name="crl" type="X509_CRL *" m68kreg="a0"/>
			<arg name="rev" type="X509_REVOKED *" m68kreg="a1"/>
		</method>
		<method name="X509_PKEY_new" result="X509_PKEY *">
		</method>
		<method name="X509_PKEY_free" result="void">
			<arg name="a" type="X509_PKEY *" m68kreg="a0"/>
		</method>
		<method name="i2d_X509_PKEY" result="int">
			<arg name="a" type="X509_PKEY *" m68kreg="a0"/>
			<arg name="pp" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="d2i_X509_PKEY" result="X509_PKEY *">
			<arg name="a" type="X509_PKEY **" m68kreg="a0"/>
			<arg name="pp" type="const unsigned char **" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
		</method>
		<method name="NETSCAPE_SPKI_new" result="NETSCAPE_SPKI *">
		</method>
		<method name="NETSCAPE_SPKI_free" result="void">
			<arg name="a" type="NETSCAPE_SPKI *" m68kreg="a0"/>
		</method>
		<method name="d2i_NETSCAPE_SPKI" result="NETSCAPE_SPKI *">
			<arg name="a" type="NETSCAPE_SPKI **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_NETSCAPE_SPKI" result="int">
			<arg name="a" type="NETSCAPE_SPKI *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="NETSCAPE_SPKI_it" result="const ASN1_ITEM *">
		</method>
		<method name="NETSCAPE_SPKAC_new" result="NETSCAPE_SPKAC *">
		</method>
		<method name="NETSCAPE_SPKAC_free" result="void">
			<arg name="a" type="NETSCAPE_SPKAC *" m68kreg="a0"/>
		</method>
		<method name="d2i_NETSCAPE_SPKAC" result="NETSCAPE_SPKAC *">
			<arg name="a" type="NETSCAPE_SPKAC **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_NETSCAPE_SPKAC" result="int">
			<arg name="a" type="NETSCAPE_SPKAC *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="NETSCAPE_SPKAC_it" result="const ASN1_ITEM *">
		</method>
		<method name="NETSCAPE_CERT_SEQUENCE_new" result="NETSCAPE_CERT_SEQUENCE *">
		</method>
		<method name="NETSCAPE_CERT_SEQUENCE_free" result="void">
			<arg name="a" type="NETSCAPE_CERT_SEQUENCE *" m68kreg="a0"/>
		</method>
		<method name="d2i_NETSCAPE_CERT_SEQUENCE" result="NETSCAPE_CERT_SEQUENCE *">
			<arg name="a" type="NETSCAPE_CERT_SEQUENCE **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_NETSCAPE_CERT_SEQUENCE" result="int">
			<arg name="a" type="NETSCAPE_CERT_SEQUENCE *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="NETSCAPE_CERT_SEQUENCE_it" result="const ASN1_ITEM *">
		</method>
		<method name="X509_INFO_new" result="X509_INFO *">
		</method>
		<method name="X509_INFO_free" result="void">
			<arg name="a" type="X509_INFO *" m68kreg="a0"/>
		</method>
		<method name="X509_NAME_oneline" result="char *">
			<arg name="a" type="X509_NAME *" m68kreg="a0"/>
			<arg name="buf" type="char *" m68kreg="a1"/>
			<arg name="size" type="int" m68kreg="d0"/>
		</method>
		<method name="ASN1_verify" result="int">
			<arg name="i2d" type="int (*)()" m68kreg="a0"/>
			<arg name="algor1" type="X509_ALGOR *" m68kreg="a1"/>
			<arg name="signature" type="ASN1_BIT_STRING *" m68kreg="a2"/>
			<arg name="data" type="char *" m68kreg="a3"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a4"/>
		</method>
		<method name="ASN1_digest" result="int">
			<arg name="i2d" type="int (*)()" m68kreg="a0"/>
			<arg name="type" type="const EVP_MD *" m68kreg="a1"/>
			<arg name="data" type="char *" m68kreg="a2"/>
			<arg name="md" type="unsigned char *" m68kreg="a3"/>
			<arg name="len" type="unsigned int *" m68kreg="a4"/>
		</method>
		<method name="ASN1_sign" result="int">
			<arg name="i2d" type="int (*)()" m68kreg="a0"/>
			<arg name="algor1" type="X509_ALGOR *" m68kreg="a1"/>
			<arg name="algor2" type="X509_ALGOR *" m68kreg="a2"/>
			<arg name="signature" type="ASN1_BIT_STRING *" m68kreg="a3"/>
			<arg name="data" type="char *" m68kreg="a4"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a5"/>
			<arg name="type" type="const EVP_MD *" m68kreg="a6"/>
		</method>
		<method name="ASN1_item_digest" result="int">
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a0"/>
			<arg name="type" type="const EVP_MD *" m68kreg="a1"/>
			<arg name="data" type="void *" m68kreg="a2"/>
			<arg name="md" type="unsigned char *" m68kreg="a3"/>
			<arg name="len" type="unsigned int *" m68kreg="a4"/>
		</method>
		<method name="ASN1_item_verify" result="int">
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a0"/>
			<arg name="algor1" type="X509_ALGOR *" m68kreg="a1"/>
			<arg name="signature" type="ASN1_BIT_STRING *" m68kreg="a2"/>
			<arg name="data" type="void *" m68kreg="a3"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a4"/>
		</method>
		<method name="ASN1_item_sign" result="int">
			<arg name="it" type="const ASN1_ITEM *" m68kreg="a0"/>
			<arg name="algor1" type="X509_ALGOR *" m68kreg="a1"/>
			<arg name="algor2" type="X509_ALGOR *" m68kreg="a2"/>
			<arg name="signature" type="ASN1_BIT_STRING *" m68kreg="a3"/>
			<arg name="data" type="void *" m68kreg="a4"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a5"/>
			<arg name="type" type="const EVP_MD *" m68kreg="a6"/>
		</method>
		<method name="X509_set_version" result="int">
			<arg name="x" type="X509 *" m68kreg="a0"/>
			<arg name="version" type="long" m68kreg="d0"/>
		</method>
		<method name="X509_set_serialNumber" result="int">
			<arg name="x" type="X509 *" m68kreg="a0"/>
			<arg name="serial" type="ASN1_INTEGER *" m68kreg="a1"/>
		</method>
		<method name="X509_get_serialNumber" result="ASN1_INTEGER *">
			<arg name="x" type="X509 *" m68kreg="a0"/>
		</method>
		<method name="X509_set_issuer_name" result="int">
			<arg name="x" type="X509 *" m68kreg="a0"/>
			<arg name="name" type="X509_NAME *" m68kreg="a1"/>
		</method>
		<method name="X509_get_issuer_name" result="X509_NAME *">
			<arg name="a" type="X509 *" m68kreg="a0"/>
		</method>
		<method name="X509_set_subject_name" result="int">
			<arg name="x" type="X509 *" m68kreg="a0"/>
			<arg name="name" type="X509_NAME *" m68kreg="a1"/>
		</method>
		<method name="X509_get_subject_name" result="X509_NAME *">
			<arg name="a" type="X509 *" m68kreg="a0"/>
		</method>
		<method name="X509_set_notBefore" result="int">
			<arg name="x" type="X509 *" m68kreg="a0"/>
			<arg name="tm" type="ASN1_TIME *" m68kreg="a1"/>
		</method>
		<method name="X509_set_notAfter" result="int">
			<arg name="x" type="X509 *" m68kreg="a0"/>
			<arg name="tm" type="ASN1_TIME *" m68kreg="a1"/>
		</method>
		<method name="X509_set_pubkey" result="int">
			<arg name="x" type="X509 *" m68kreg="a0"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
		</method>
		<method name="X509_get_pubkey" result="EVP_PKEY *">
			<arg name="x" type="X509 *" m68kreg="a0"/>
		</method>
		<method name="X509_get0_pubkey_bitstr" result="ASN1_BIT_STRING *">
			<arg name="x" type="const X509 *" m68kreg="a0"/>
		</method>
		<method name="X509_certificate_type" result="int">
			<arg name="x" type="X509 *" m68kreg="a0"/>
			<arg name="pubkey" type="EVP_PKEY *" m68kreg="a1"/>
		</method>
		<method name="X509_REQ_set_version" result="int">
			<arg name="x" type="X509_REQ *" m68kreg="a0"/>
			<arg name="version" type="long" m68kreg="d0"/>
		</method>
		<method name="X509_REQ_set_subject_name" result="int">
			<arg name="req" type="X509_REQ *" m68kreg="a0"/>
			<arg name="name" type="X509_NAME *" m68kreg="a1"/>
		</method>
		<method name="X509_REQ_set_pubkey" result="int">
			<arg name="x" type="X509_REQ *" m68kreg="a0"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
		</method>
		<method name="X509_REQ_get_pubkey" result="EVP_PKEY *">
			<arg name="req" type="X509_REQ *" m68kreg="a0"/>
		</method>
		<method name="X509_REQ_extension_nid" result="int">
			<arg name="nid" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_REQ_get_extension_nids" result="int *">
		</method>
		<method name="X509_REQ_set_extension_nids" result="void">
			<arg name="nids" type="int *" m68kreg="a0"/>
		</method>
		<method name="X509_REQ_get_extensions" result="STACK_OF(X509_EXTENSION) *">
			<arg name="req" type="X509_REQ *" m68kreg="a0"/>
		</method>
		<method name="X509_REQ_add_extensions_nid" result="int">
			<arg name="req" type="X509_REQ *" m68kreg="a0"/>
			<arg name="exts" type="STACK_OF(X509_EXTENSION) *" m68kreg="a1"/>
			<arg name="nid" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_REQ_add_extensions" result="int">
			<arg name="req" type="X509_REQ *" m68kreg="a0"/>
			<arg name="exts" type="STACK_OF(X509_EXTENSION) *" m68kreg="a1"/>
		</method>
		<method name="X509_REQ_get_attr_count" result="int">
			<arg name="req" type="const X509_REQ *" m68kreg="a0"/>
		</method>
		<method name="X509_REQ_get_attr_by_NID" result="int">
			<arg name="req" type="const X509_REQ *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="lastpos" type="int" m68kreg="d1"/>
		</method>
		<method name="X509_REQ_get_attr_by_OBJ" result="int">
			<arg name="req" type="const X509_REQ *" m68kreg="a0"/>
			<arg name="obj" type="ASN1_OBJECT *" m68kreg="a1"/>
			<arg name="lastpos" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_REQ_get_attr" result="X509_ATTRIBUTE *">
			<arg name="req" type="const X509_REQ *" m68kreg="a0"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_REQ_delete_attr" result="X509_ATTRIBUTE *">
			<arg name="req" type="X509_REQ *" m68kreg="a0"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_REQ_add1_attr" result="int">
			<arg name="req" type="X509_REQ *" m68kreg="a0"/>
			<arg name="attr" type="X509_ATTRIBUTE *" m68kreg="a1"/>
		</method>
		<method name="X509_REQ_add1_attr_by_OBJ" result="int">
			<arg name="req" type="X509_REQ *" m68kreg="a0"/>
			<arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="bytes" type="const unsigned char *" m68kreg="a2"/>
			<arg name="len" type="int" m68kreg="d1"/>
		</method>
		<method name="X509_REQ_add1_attr_by_NID" result="int">
			<arg name="req" type="X509_REQ *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="type" type="int" m68kreg="d1"/>
			<arg name="bytes" type="const unsigned char *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d2"/>
		</method>
		<method name="X509_REQ_add1_attr_by_txt" result="int">
			<arg name="req" type="X509_REQ *" m68kreg="a0"/>
			<arg name="attrname" type="const char *" m68kreg="a1"/>
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="bytes" type="const unsigned char *" m68kreg="a2"/>
			<arg name="len" type="int" m68kreg="d1"/>
		</method>
		<method name="X509_CRL_set_version" result="int">
			<arg name="x" type="X509_CRL *" m68kreg="a0"/>
			<arg name="version" type="long" m68kreg="d0"/>
		</method>
		<method name="X509_CRL_set_issuer_name" result="int">
			<arg name="x" type="X509_CRL *" m68kreg="a0"/>
			<arg name="name" type="X509_NAME *" m68kreg="a1"/>
		</method>
		<method name="X509_CRL_set_lastUpdate" result="int">
			<arg name="x" type="X509_CRL *" m68kreg="a0"/>
			<arg name="tm" type="ASN1_TIME *" m68kreg="a1"/>
		</method>
		<method name="X509_CRL_set_nextUpdate" result="int">
			<arg name="x" type="X509_CRL *" m68kreg="a0"/>
			<arg name="tm" type="ASN1_TIME *" m68kreg="a1"/>
		</method>
		<method name="X509_CRL_sort" result="int">
			<arg name="crl" type="X509_CRL *" m68kreg="a0"/>
		</method>
		<method name="X509_REVOKED_set_serialNumber" result="int">
			<arg name="x" type="X509_REVOKED *" m68kreg="a0"/>
			<arg name="serial" type="ASN1_INTEGER *" m68kreg="a1"/>
		</method>
		<method name="X509_REVOKED_set_revocationDate" result="int">
			<arg name="r" type="X509_REVOKED *" m68kreg="a0"/>
			<arg name="tm" type="ASN1_TIME *" m68kreg="a1"/>
		</method>
		<method name="X509_check_private_key" result="int">
			<arg name="x509" type="X509 *" m68kreg="a0"/>
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
		</method>
		<method name="X509_issuer_and_serial_cmp" result="int">
			<arg name="a" type="const X509 *" m68kreg="a0"/>
			<arg name="b" type="const X509 *" m68kreg="a1"/>
		</method>
		<method name="X509_issuer_and_serial_hash" result="unsigned long">
			<arg name="a" type="X509 *" m68kreg="a0"/>
		</method>
		<method name="X509_issuer_name_cmp" result="int">
			<arg name="a" type="const X509 *" m68kreg="a0"/>
			<arg name="b" type="const X509 *" m68kreg="a1"/>
		</method>
		<method name="X509_issuer_name_hash" result="unsigned long">
			<arg name="a" type="X509 *" m68kreg="a0"/>
		</method>
		<method name="X509_subject_name_cmp" result="int">
			<arg name="a" type="const X509 *" m68kreg="a0"/>
			<arg name="b" type="const X509 *" m68kreg="a1"/>
		</method>
		<method name="X509_subject_name_hash" result="unsigned long">
			<arg name="x" type="X509 *" m68kreg="a0"/>
		</method>
		<method name="X509_cmp" result="int">
			<arg name="a" type="const X509 *" m68kreg="a0"/>
			<arg name="b" type="const X509 *" m68kreg="a1"/>
		</method>
		<method name="X509_NAME_cmp" result="int">
			<arg name="a" type="const X509_NAME *" m68kreg="a0"/>
			<arg name="b" type="const X509_NAME *" m68kreg="a1"/>
		</method>
		<method name="X509_NAME_hash" result="unsigned long">
			<arg name="x" type="X509_NAME *" m68kreg="a0"/>
		</method>
		<method name="X509_CRL_cmp" result="int">
			<arg name="a" type="const X509_CRL *" m68kreg="a0"/>
			<arg name="b" type="const X509_CRL *" m68kreg="a1"/>
		</method>
		<method name="X509_NAME_print" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="name" type="X509_NAME *" m68kreg="a1"/>
			<arg name="obase" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_NAME_print_ex" result="int">
			<arg name="out" type="BIO *" m68kreg="a0"/>
			<arg name="nm" type="X509_NAME *" m68kreg="a1"/>
			<arg name="indent" type="int" m68kreg="d0"/>
			<arg name="flags" type="unsigned long" m68kreg="d1"/>
		</method>
		<method name="X509_print_ex" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="X509 *" m68kreg="a1"/>
			<arg name="nmflag" type="unsigned long" m68kreg="d0"/>
			<arg name="cflag" type="unsigned long" m68kreg="d1"/>
		</method>
		<method name="X509_print" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="X509 *" m68kreg="a1"/>
		</method>
		<method name="X509_ocspid_print" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="X509 *" m68kreg="a1"/>
		</method>
		<method name="X509_CERT_AUX_print" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="X509_CERT_AUX *" m68kreg="a1"/>
			<arg name="indent" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_CRL_print" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="X509_CRL *" m68kreg="a1"/>
		</method>
		<method name="X509_REQ_print_ex" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="X509_REQ *" m68kreg="a1"/>
			<arg name="nmflag" type="unsigned long" m68kreg="d0"/>
			<arg name="cflag" type="unsigned long" m68kreg="d1"/>
		</method>
		<method name="X509_REQ_print" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="req" type="X509_REQ *" m68kreg="a1"/>
		</method>
		<method name="X509_NAME_entry_count" result="int">
			<arg name="name" type="X509_NAME *" m68kreg="a0"/>
		</method>
		<method name="X509_NAME_get_text_by_NID" result="int">
			<arg name="name" type="X509_NAME *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="buf" type="char *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d1"/>
		</method>
		<method name="X509_NAME_get_text_by_OBJ" result="int">
			<arg name="name" type="X509_NAME *" m68kreg="a0"/>
			<arg name="obj" type="ASN1_OBJECT *" m68kreg="a1"/>
			<arg name="buf" type="char *" m68kreg="a2"/>
			<arg name="len" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_NAME_get_index_by_NID" result="int">
			<arg name="name" type="X509_NAME *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="lastpos" type="int" m68kreg="d1"/>
		</method>
		<method name="X509_NAME_get_index_by_OBJ" result="int">
			<arg name="name" type="X509_NAME *" m68kreg="a0"/>
			<arg name="obj" type="ASN1_OBJECT *" m68kreg="a1"/>
			<arg name="lastpos" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_NAME_get_entry" result="X509_NAME_ENTRY *">
			<arg name="name" type="X509_NAME *" m68kreg="a0"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_NAME_delete_entry" result="X509_NAME_ENTRY *">
			<arg name="name" type="X509_NAME *" m68kreg="a0"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_NAME_add_entry" result="int">
			<arg name="name" type="X509_NAME *" m68kreg="a0"/>
			<arg name="ne" type="X509_NAME_ENTRY *" m68kreg="a1"/>
			<arg name="loc" type="int" m68kreg="d0"/>
			<arg name="set" type="int" m68kreg="d1"/>
		</method>
		<method name="X509_NAME_add_entry_by_OBJ" result="int">
			<arg name="name" type="X509_NAME *" m68kreg="a0"/>
			<arg name="obj" type="ASN1_OBJECT *" m68kreg="a1"/>
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="bytes" type="unsigned char *" m68kreg="a2"/>
			<arg name="len" type="int" m68kreg="d1"/>
			<arg name="loc" type="int" m68kreg="d2"/>
			<arg name="set" type="int" m68kreg="d3"/>
		</method>
		<method name="X509_NAME_add_entry_by_NID" result="int">
			<arg name="name" type="X509_NAME *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="type" type="int" m68kreg="d1"/>
			<arg name="bytes" type="unsigned char *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d2"/>
			<arg name="loc" type="int" m68kreg="d3"/>
			<arg name="set" type="int" m68kreg="d4"/>
		</method>
		<method name="X509_NAME_ENTRY_create_by_txt" result="X509_NAME_ENTRY *">
			<arg name="ne" type="X509_NAME_ENTRY **" m68kreg="a0"/>
			<arg name="field" type="const char *" m68kreg="a1"/>
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="bytes" type="const unsigned char *" m68kreg="a2"/>
			<arg name="len" type="int" m68kreg="d1"/>
		</method>
		<method name="X509_NAME_ENTRY_create_by_NID" result="X509_NAME_ENTRY *">
			<arg name="ne" type="X509_NAME_ENTRY **" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="type" type="int" m68kreg="d1"/>
			<arg name="bytes" type="unsigned char *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d2"/>
		</method>
		<method name="X509_NAME_add_entry_by_txt" result="int">
			<arg name="name" type="X509_NAME *" m68kreg="a0"/>
			<arg name="field" type="const char *" m68kreg="a1"/>
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="bytes" type="const unsigned char *" m68kreg="a2"/>
			<arg name="len" type="int" m68kreg="d1"/>
			<arg name="loc" type="int" m68kreg="d2"/>
			<arg name="set" type="int" m68kreg="d3"/>
		</method>
		<method name="X509_NAME_ENTRY_create_by_OBJ" result="X509_NAME_ENTRY *">
			<arg name="ne" type="X509_NAME_ENTRY **" m68kreg="a0"/>
			<arg name="obj" type="ASN1_OBJECT *" m68kreg="a1"/>
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="bytes" type="const unsigned char *" m68kreg="a2"/>
			<arg name="len" type="int" m68kreg="d1"/>
		</method>
		<method name="X509_NAME_ENTRY_set_object" result="int">
			<arg name="ne" type="X509_NAME_ENTRY *" m68kreg="a0"/>
			<arg name="obj" type="ASN1_OBJECT *" m68kreg="a1"/>
		</method>
		<method name="X509_NAME_ENTRY_set_data" result="int">
			<arg name="ne" type="X509_NAME_ENTRY *" m68kreg="a0"/>
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="bytes" type="const unsigned char *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d1"/>
		</method>
		<method name="X509_NAME_ENTRY_get_object" result="ASN1_OBJECT *">
			<arg name="ne" type="X509_NAME_ENTRY *" m68kreg="a0"/>
		</method>
		<method name="X509_NAME_ENTRY_get_data" result="ASN1_STRING *">
			<arg name="ne" type="X509_NAME_ENTRY *" m68kreg="a0"/>
		</method>
		<method name="X509v3_get_ext_count" result="int">
			<arg name="x" type="const STACK_OF(X509_EXTENSION) *" m68kreg="a0"/>
		</method>
		<method name="X509v3_get_ext_by_NID" result="int">
			<arg name="x" type="const STACK_OF(X509_EXTENSION) *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="lastpos" type="int" m68kreg="d1"/>
		</method>
		<method name="X509v3_get_ext_by_OBJ" result="int">
			<arg name="x" type="const STACK_OF(X509_EXTENSION) *" m68kreg="a0"/>
			<arg name="obj" type="ASN1_OBJECT *" m68kreg="a1"/>
			<arg name="lastpos" type="int" m68kreg="d0"/>
		</method>
		<method name="X509v3_get_ext_by_critical" result="int">
			<arg name="x" type="const STACK_OF(X509_EXTENSION) *" m68kreg="a0"/>
			<arg name="crit" type="int" m68kreg="d0"/>
			<arg name="lastpos" type="int" m68kreg="d1"/>
		</method>
		<method name="X509v3_get_ext" result="X509_EXTENSION *">
			<arg name="x" type="const STACK_OF(X509_EXTENSION) *" m68kreg="a0"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="X509v3_delete_ext" result="X509_EXTENSION *">
			<arg name="x" type="STACK_OF(X509_EXTENSION) *" m68kreg="a0"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="X509v3_add_ext" result="STACK_OF(X509_EXTENSION) *">
			<arg name="x" type="STACK_OF(X509_EXTENSION) **" m68kreg="a0"/>
			<arg name="ex" type="X509_EXTENSION *" m68kreg="a1"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_get_ext_count" result="int">
			<arg name="x" type="X509 *" m68kreg="a0"/>
		</method>
		<method name="X509_get_ext_by_NID" result="int">
			<arg name="x" type="X509 *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="lastpos" type="int" m68kreg="d1"/>
		</method>
		<method name="X509_get_ext_by_OBJ" result="int">
			<arg name="x" type="X509 *" m68kreg="a0"/>
			<arg name="obj" type="ASN1_OBJECT *" m68kreg="a1"/>
			<arg name="lastpos" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_get_ext_by_critical" result="int">
			<arg name="x" type="X509 *" m68kreg="a0"/>
			<arg name="crit" type="int" m68kreg="d0"/>
			<arg name="lastpos" type="int" m68kreg="d1"/>
		</method>
		<method name="X509_get_ext" result="X509_EXTENSION *">
			<arg name="x" type="X509 *" m68kreg="a0"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_delete_ext" result="X509_EXTENSION *">
			<arg name="x" type="X509 *" m68kreg="a0"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_add_ext" result="int">
			<arg name="x" type="X509 *" m68kreg="a0"/>
			<arg name="ex" type="X509_EXTENSION *" m68kreg="a1"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_get_ext_d2i" result="void *">
			<arg name="x" type="X509 *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="crit" type="int *" m68kreg="a1"/>
			<arg name="idx" type="int *" m68kreg="a2"/>
		</method>
		<method name="X509_add1_ext_i2d" result="int">
			<arg name="x" type="X509 *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="value" type="void *" m68kreg="a1"/>
			<arg name="crit" type="int" m68kreg="d1"/>
			<arg name="flags" type="unsigned long" m68kreg="d2"/>
		</method>
		<method name="X509_CRL_get_ext_count" result="int">
			<arg name="x" type="X509_CRL *" m68kreg="a0"/>
		</method>
		<method name="X509_CRL_get_ext_by_NID" result="int">
			<arg name="x" type="X509_CRL *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="lastpos" type="int" m68kreg="d1"/>
		</method>
		<method name="X509_CRL_get_ext_by_OBJ" result="int">
			<arg name="x" type="X509_CRL *" m68kreg="a0"/>
			<arg name="obj" type="ASN1_OBJECT *" m68kreg="a1"/>
			<arg name="lastpos" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_CRL_get_ext_by_critical" result="int">
			<arg name="x" type="X509_CRL *" m68kreg="a0"/>
			<arg name="crit" type="int" m68kreg="d0"/>
			<arg name="lastpos" type="int" m68kreg="d1"/>
		</method>
		<method name="X509_CRL_get_ext" result="X509_EXTENSION *">
			<arg name="x" type="X509_CRL *" m68kreg="a0"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_CRL_delete_ext" result="X509_EXTENSION *">
			<arg name="x" type="X509_CRL *" m68kreg="a0"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_CRL_add_ext" result="int">
			<arg name="x" type="X509_CRL *" m68kreg="a0"/>
			<arg name="ex" type="X509_EXTENSION *" m68kreg="a1"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_CRL_get_ext_d2i" result="void *">
			<arg name="x" type="X509_CRL *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="crit" type="int *" m68kreg="a1"/>
			<arg name="idx" type="int *" m68kreg="a2"/>
		</method>
		<method name="X509_CRL_add1_ext_i2d" result="int">
			<arg name="x" type="X509_CRL *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="value" type="void *" m68kreg="a1"/>
			<arg name="crit" type="int" m68kreg="d1"/>
			<arg name="flags" type="unsigned long" m68kreg="d2"/>
		</method>
		<method name="X509_REVOKED_get_ext_count" result="int">
			<arg name="x" type="X509_REVOKED *" m68kreg="a0"/>
		</method>
		<method name="X509_REVOKED_get_ext_by_NID" result="int">
			<arg name="x" type="X509_REVOKED *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="lastpos" type="int" m68kreg="d1"/>
		</method>
		<method name="X509_REVOKED_get_ext_by_OBJ" result="int">
			<arg name="x" type="X509_REVOKED *" m68kreg="a0"/>
			<arg name="obj" type="ASN1_OBJECT *" m68kreg="a1"/>
			<arg name="lastpos" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_REVOKED_get_ext_by_critical" result="int">
			<arg name="x" type="X509_REVOKED *" m68kreg="a0"/>
			<arg name="crit" type="int" m68kreg="d0"/>
			<arg name="lastpos" type="int" m68kreg="d1"/>
		</method>
		<method name="X509_REVOKED_get_ext" result="X509_EXTENSION *">
			<arg name="x" type="X509_REVOKED *" m68kreg="a0"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_REVOKED_delete_ext" result="X509_EXTENSION *">
			<arg name="x" type="X509_REVOKED *" m68kreg="a0"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_REVOKED_add_ext" result="int">
			<arg name="x" type="X509_REVOKED *" m68kreg="a0"/>
			<arg name="ex" type="X509_EXTENSION *" m68kreg="a1"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_REVOKED_get_ext_d2i" result="void *">
			<arg name="x" type="X509_REVOKED *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="crit" type="int *" m68kreg="a1"/>
			<arg name="idx" type="int *" m68kreg="a2"/>
		</method>
		<method name="X509_REVOKED_add1_ext_i2d" result="int">
			<arg name="x" type="X509_REVOKED *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="value" type="void *" m68kreg="a1"/>
			<arg name="crit" type="int" m68kreg="d1"/>
			<arg name="flags" type="unsigned long" m68kreg="d2"/>
		</method>
		<method name="X509_EXTENSION_create_by_NID" result="X509_EXTENSION *">
			<arg name="ex" type="X509_EXTENSION **" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="crit" type="int" m68kreg="d1"/>
			<arg name="data" type="ASN1_OCTET_STRING *" m68kreg="a1"/>
		</method>
		<method name="X509_EXTENSION_create_by_OBJ" result="X509_EXTENSION *">
			<arg name="ex" type="X509_EXTENSION **" m68kreg="a0"/>
			<arg name="obj" type="ASN1_OBJECT *" m68kreg="a1"/>
			<arg name="crit" type="int" m68kreg="d0"/>
			<arg name="data" type="ASN1_OCTET_STRING *" m68kreg="a2"/>
		</method>
		<method name="X509_EXTENSION_set_object" result="int">
			<arg name="ex" type="X509_EXTENSION *" m68kreg="a0"/>
			<arg name="obj" type="ASN1_OBJECT *" m68kreg="a1"/>
		</method>
		<method name="X509_EXTENSION_set_critical" result="int">
			<arg name="ex" type="X509_EXTENSION *" m68kreg="a0"/>
			<arg name="crit" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_EXTENSION_set_data" result="int">
			<arg name="ex" type="X509_EXTENSION *" m68kreg="a0"/>
			<arg name="data" type="ASN1_OCTET_STRING *" m68kreg="a1"/>
		</method>
		<method name="X509_EXTENSION_get_object" result="ASN1_OBJECT *">
			<arg name="ex" type="X509_EXTENSION *" m68kreg="a0"/>
		</method>
		<method name="X509_EXTENSION_get_data" result="ASN1_OCTET_STRING *">
			<arg name="ne" type="X509_EXTENSION *" m68kreg="a0"/>
		</method>
		<method name="X509_EXTENSION_get_critical" result="int">
			<arg name="ex" type="X509_EXTENSION *" m68kreg="a0"/>
		</method>
		<method name="X509at_get_attr_count" result="int">
			<arg name="x" type="const STACK_OF(X509_ATTRIBUTE) *" m68kreg="a0"/>
		</method>
		<method name="X509at_get_attr_by_NID" result="int">
			<arg name="x" type="const STACK_OF(X509_ATTRIBUTE) *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="lastpos" type="int" m68kreg="d1"/>
		</method>
		<method name="X509at_get_attr_by_OBJ" result="int">
			<arg name="sk" type="const STACK_OF(X509_ATTRIBUTE) *" m68kreg="a0"/>
			<arg name="obj" type="ASN1_OBJECT *" m68kreg="a1"/>
			<arg name="lastpos" type="int" m68kreg="d0"/>
		</method>
		<method name="X509at_get_attr" result="X509_ATTRIBUTE *">
			<arg name="x" type="const STACK_OF(X509_ATTRIBUTE) *" m68kreg="a0"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="X509at_delete_attr" result="X509_ATTRIBUTE *">
			<arg name="x" type="STACK_OF(X509_ATTRIBUTE) *" m68kreg="a0"/>
			<arg name="loc" type="int" m68kreg="d0"/>
		</method>
		<method name="X509at_add1_attr" result="STACK_OF(X509_ATTRIBUTE) *">
			<arg name="x" type="STACK_OF(X509_ATTRIBUTE) **" m68kreg="a0"/>
			<arg name="attr" type="X509_ATTRIBUTE *" m68kreg="a1"/>
		</method>
		<method name="X509at_add1_attr_by_OBJ" result="STACK_OF(X509_ATTRIBUTE) *">
			<arg name="x" type="STACK_OF(X509_ATTRIBUTE) **" m68kreg="a0"/>
			<arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="bytes" type="const unsigned char *" m68kreg="a2"/>
			<arg name="len" type="int" m68kreg="d1"/>
		</method>
		<method name="X509at_add1_attr_by_NID" result="STACK_OF(X509_ATTRIBUTE) *">
			<arg name="x" type="STACK_OF(X509_ATTRIBUTE) **" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="type" type="int" m68kreg="d1"/>
			<arg name="bytes" type="const unsigned char *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d2"/>
		</method>
		<method name="X509at_add1_attr_by_txt" result="STACK_OF(X509_ATTRIBUTE) *">
			<arg name="x" type="STACK_OF(X509_ATTRIBUTE) **" m68kreg="a0"/>
			<arg name="attrname" type="const char *" m68kreg="a1"/>
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="bytes" type="const unsigned char *" m68kreg="a2"/>
			<arg name="len" type="int" m68kreg="d1"/>
		</method>
		<method name="X509_ATTRIBUTE_create_by_NID" result="X509_ATTRIBUTE *">
			<arg name="attr" type="X509_ATTRIBUTE **" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="atrtype" type="int" m68kreg="d1"/>
			<arg name="data" type="const void *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d2"/>
		</method>
		<method name="X509_ATTRIBUTE_create_by_OBJ" result="X509_ATTRIBUTE *">
			<arg name="attr" type="X509_ATTRIBUTE **" m68kreg="a0"/>
			<arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
			<arg name="atrtype" type="int" m68kreg="d0"/>
			<arg name="data" type="const void *" m68kreg="a2"/>
			<arg name="len" type="int" m68kreg="d1"/>
		</method>
		<method name="X509_ATTRIBUTE_create_by_txt" result="X509_ATTRIBUTE *">
			<arg name="attr" type="X509_ATTRIBUTE **" m68kreg="a0"/>
			<arg name="atrname" type="const char *" m68kreg="a1"/>
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="bytes" type="const unsigned char *" m68kreg="a2"/>
			<arg name="len" type="int" m68kreg="d1"/>
		</method>
		<method name="X509_ATTRIBUTE_set1_object" result="int">
			<arg name="attr" type="X509_ATTRIBUTE *" m68kreg="a0"/>
			<arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
		</method>
		<method name="X509_ATTRIBUTE_set1_data" result="int">
			<arg name="attr" type="X509_ATTRIBUTE *" m68kreg="a0"/>
			<arg name="attrtype" type="int" m68kreg="d0"/>
			<arg name="data" type="const void *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d1"/>
		</method>
		<method name="X509_ATTRIBUTE_get0_data" result="void *">
			<arg name="attr" type="X509_ATTRIBUTE *" m68kreg="a0"/>
			<arg name="idx" type="int" m68kreg="d0"/>
			<arg name="atrtype" type="int" m68kreg="d1"/>
			<arg name="data" type="void *" m68kreg="a1"/>
		</method>
		<method name="X509_ATTRIBUTE_count" result="int">
			<arg name="attr" type="X509_ATTRIBUTE *" m68kreg="a0"/>
		</method>
		<method name="X509_ATTRIBUTE_get0_object" result="ASN1_OBJECT *">
			<arg name="attr" type="X509_ATTRIBUTE *" m68kreg="a0"/>
		</method>
		<method name="X509_ATTRIBUTE_get0_type" result="ASN1_TYPE *">
			<arg name="attr" type="X509_ATTRIBUTE *" m68kreg="a0"/>
			<arg name="idx" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_verify_cert" result="int">
			<arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
		</method>
		<method name="X509_find_by_issuer_and_serial" result="X509 *">
			<arg name="sk" type="STACK_OF(X509) *" m68kreg="a0"/>
			<arg name="name" type="X509_NAME *" m68kreg="a1"/>
			<arg name="serial" type="ASN1_INTEGER *" m68kreg="a2"/>
		</method>
		<method name="X509_find_by_subject" result="X509 *">
			<arg name="sk" type="STACK_OF(X509) *" m68kreg="a0"/>
			<arg name="name" type="X509_NAME *" m68kreg="a1"/>
		</method>
		<method name="PBEPARAM_new" result="PBEPARAM *">
		</method>
		<method name="PBEPARAM_free" result="void">
			<arg name="a" type="PBEPARAM *" m68kreg="a0"/>
		</method>
		<method name="d2i_PBEPARAM" result="PBEPARAM *">
			<arg name="a" type="PBEPARAM **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_PBEPARAM" result="int">
			<arg name="a" type="PBEPARAM *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="PBEPARAM_it" result="const ASN1_ITEM *">
		</method>
		<method name="PBE2PARAM_new" result="PBE2PARAM *">
		</method>
		<method name="PBE2PARAM_free" result="void">
			<arg name="a" type="PBE2PARAM *" m68kreg="a0"/>
		</method>
		<method name="d2i_PBE2PARAM" result="PBE2PARAM *">
			<arg name="a" type="PBE2PARAM **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_PBE2PARAM" result="int">
			<arg name="a" type="PBE2PARAM *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="PBE2PARAM_it" result="const ASN1_ITEM *">
		</method>
		<method name="PBKDF2PARAM_new" result="PBKDF2PARAM *">
		</method>
		<method name="PBKDF2PARAM_free" result="void">
			<arg name="a" type="PBKDF2PARAM *" m68kreg="a0"/>
		</method>
		<method name="d2i_PBKDF2PARAM" result="PBKDF2PARAM *">
			<arg name="a" type="PBKDF2PARAM **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_PBKDF2PARAM" result="int">
			<arg name="a" type="PBKDF2PARAM *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="PBKDF2PARAM_it" result="const ASN1_ITEM *">
		</method>
		<method name="PKCS5_pbe_set" result="X509_ALGOR *">
			<arg name="alg" type="int" m68kreg="d0"/>
			<arg name="iter" type="int" m68kreg="d1"/>
			<arg name="salt" type="unsigned char *" m68kreg="a0"/>
			<arg name="saltlen" type="int" m68kreg="d2"/>
		</method>
		<method name="PKCS5_pbe2_set" result="X509_ALGOR *">
			<arg name="cipher" type="const EVP_CIPHER *" m68kreg="a0"/>
			<arg name="iter" type="int" m68kreg="d0"/>
			<arg name="salt" type="unsigned char *" m68kreg="a1"/>
			<arg name="saltlen" type="int" m68kreg="d1"/>
		</method>
		<method name="PKCS8_PRIV_KEY_INFO_new" result="PKCS8_PRIV_KEY_INFO *">
		</method>
		<method name="PKCS8_PRIV_KEY_INFO_free" result="void">
			<arg name="a" type="PKCS8_PRIV_KEY_INFO *" m68kreg="a0"/>
		</method>
		<method name="d2i_PKCS8_PRIV_KEY_INFO" result="PKCS8_PRIV_KEY_INFO *">
			<arg name="a" type="PKCS8_PRIV_KEY_INFO **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_PKCS8_PRIV_KEY_INFO" result="int">
			<arg name="a" type="PKCS8_PRIV_KEY_INFO *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="PKCS8_PRIV_KEY_INFO_it" result="const ASN1_ITEM *">
		</method>
		<method name="EVP_PKCS82PKEY" result="EVP_PKEY *">
			<arg name="p8" type="PKCS8_PRIV_KEY_INFO *" m68kreg="a0"/>
		</method>
		<method name="EVP_PKEY2PKCS8" result="PKCS8_PRIV_KEY_INFO *">
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
		</method>
		<method name="EVP_PKEY2PKCS8_broken" result="PKCS8_PRIV_KEY_INFO *">
			<arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
			<arg name="broken" type="int" m68kreg="d0"/>
		</method>
		<method name="PKCS8_set_broken" result="PKCS8_PRIV_KEY_INFO *">
			<arg name="p8" type="PKCS8_PRIV_KEY_INFO *" m68kreg="a0"/>
			<arg name="broken" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_check_trust" result="int">
			<arg name="x" type="X509 *" m68kreg="a0"/>
			<arg name="id" type="int" m68kreg="d0"/>
			<arg name="flags" type="int" m68kreg="d1"/>
		</method>
		<method name="X509_TRUST_get_count" result="int">
		</method>
		<method name="X509_TRUST_get0" result="X509_TRUST *">
			<arg name="idx" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_TRUST_get_by_id" result="int">
			<arg name="id" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_TRUST_add" result="int">
			<arg name="id" type="int" m68kreg="d0"/>
			<arg name="flags" type="int" m68kreg="d1"/>
			<arg name="ck" type="int (*)(X509_TRUST *, X509 *, int)" m68kreg="a0"/>
			<arg name="name" type="char *" m68kreg="a1"/>
			<arg name="arg1" type="int" m68kreg="d2"/>
			<arg name="arg2" type="void *" m68kreg="a2"/>
		</method>
		<method name="X509_TRUST_cleanup" result="void">
		</method>
		<method name="X509_TRUST_get_flags" result="int">
			<arg name="xp" type="X509_TRUST *" m68kreg="a0"/>
		</method>
		<method name="X509_TRUST_get0_name" result="char *">
			<arg name="xp" type="X509_TRUST *" m68kreg="a0"/>
		</method>
		<method name="X509_TRUST_get_trust" result="int">
			<arg name="xp" type="X509_TRUST *" m68kreg="a0"/>
		</method>
		<method name="ERR_load_X509_strings" result="void">
		</method>
		<method name="X509_OBJECT_idx_by_subject" result="int">
			<arg name="h" type="STACK_OF(X509_OBJECT) *" m68kreg="a0"/>
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="name" type="X509_NAME *" m68kreg="a1"/>
		</method>
		<method name="X509_OBJECT_retrieve_by_subject" result="X509_OBJECT *">
			<arg name="h" type="STACK_OF(X509_OBJECT) *" m68kreg="a0"/>
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="name" type="X509_NAME *" m68kreg="a1"/>
		</method>
		<method name="X509_OBJECT_retrieve_match" result="X509_OBJECT *">
			<arg name="h" type="STACK_OF(X509_OBJECT) *" m68kreg="a0"/>
			<arg name="x" type="X509_OBJECT *" m68kreg="a1"/>
		</method>
		<method name="X509_OBJECT_up_ref_count" result="void">
			<arg name="a" type="X509_OBJECT *" m68kreg="a0"/>
		</method>
		<method name="X509_OBJECT_free_contents" result="void">
			<arg name="a" type="X509_OBJECT *" m68kreg="a0"/>
		</method>
		<method name="X509_STORE_new" result="X509_STORE *">
		</method>
		<method name="X509_STORE_free" result="void">
			<arg name="v" type="X509_STORE *" m68kreg="a0"/>
		</method>
		<method name="X509_STORE_set_flags" result="void">
			<arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
			<arg name="flags" type="long" m68kreg="d0"/>
		</method>
		<method name="X509_STORE_set_purpose" result="int">
			<arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
			<arg name="purpose" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_STORE_set_trust" result="int">
			<arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
			<arg name="trust" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_STORE_CTX_new" result="X509_STORE_CTX *">
		</method>
		<method name="X509_STORE_CTX_get1_issuer" result="int">
			<arg name="issuer" type="X509 **" m68kreg="a0"/>
			<arg name="ctx" type="X509_STORE_CTX *" m68kreg="a1"/>
			<arg name="x" type="X509 *" m68kreg="a2"/>
		</method>
		<method name="X509_STORE_CTX_free" result="void">
			<arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
		</method>
		<method name="X509_STORE_CTX_init" result="int">
			<arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
			<arg name="store" type="X509_STORE *" m68kreg="a1"/>
			<arg name="x509" type="X509 *" m68kreg="a2"/>
			<arg name="chain" type="STACK_OF(X509) *" m68kreg="a3"/>
		</method>
		<method name="X509_STORE_CTX_trusted_stack" result="void">
			<arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
			<arg name="sk" type="STACK_OF(X509) *" m68kreg="a1"/>
		</method>
		<method name="X509_STORE_CTX_cleanup" result="void">
			<arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
		</method>
		<method name="X509_STORE_add_lookup" result="X509_LOOKUP *">
			<arg name="v" type="X509_STORE *" m68kreg="a0"/>
			<arg name="m" type="X509_LOOKUP_METHOD *" m68kreg="a1"/>
		</method>
		<method name="X509_LOOKUP_hash_dir" result="X509_LOOKUP_METHOD *">
		</method>
		<method name="X509_LOOKUP_file" result="X509_LOOKUP_METHOD *">
		</method>
		<method name="X509_STORE_add_cert" result="int">
			<arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
			<arg name="x" type="X509 *" m68kreg="a1"/>
		</method>
		<method name="X509_STORE_add_crl" result="int">
			<arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
			<arg name="x" type="X509_CRL *" m68kreg="a1"/>
		</method>
		<method name="X509_STORE_get_by_subject" result="int">
			<arg name="vs" type="X509_STORE_CTX *" m68kreg="a0"/>
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="name" type="X509_NAME *" m68kreg="a1"/>
			<arg name="ret" type="X509_OBJECT *" m68kreg="a2"/>
		</method>
		<method name="X509_LOOKUP_ctrl" result="int">
			<arg name="ctx" type="X509_LOOKUP *" m68kreg="a0"/>
			<arg name="cmd" type="int" m68kreg="d0"/>
			<arg name="argc" type="const char *" m68kreg="a1"/>
			<arg name="argl" type="long" m68kreg="d1"/>
			<arg name="ret" type="char **" m68kreg="a2"/>
		</method>
		<method name="X509_load_cert_file" result="int">
			<arg name="ctx" type="X509_LOOKUP *" m68kreg="a0"/>
			<arg name="file" type="const char *" m68kreg="a1"/>
			<arg name="type" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_load_crl_file" result="int">
			<arg name="ctx" type="X509_LOOKUP *" m68kreg="a0"/>
			<arg name="file" type="const char *" m68kreg="a1"/>
			<arg name="type" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_load_cert_crl_file" result="int">
			<arg name="ctx" type="X509_LOOKUP *" m68kreg="a0"/>
			<arg name="file" type="const char *" m68kreg="a1"/>
			<arg name="type" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_LOOKUP_new" result="X509_LOOKUP *">
			<arg name="method" type="X509_LOOKUP_METHOD *" m68kreg="a0"/>
		</method>
		<method name="X509_LOOKUP_free" result="void">
			<arg name="ctx" type="X509_LOOKUP *" m68kreg="a0"/>
		</method>
		<method name="X509_LOOKUP_init" result="int">
			<arg name="ctx" type="X509_LOOKUP *" m68kreg="a0"/>
		</method>
		<method name="X509_LOOKUP_by_subject" result="int">
			<arg name="ctx" type="X509_LOOKUP *" m68kreg="a0"/>
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="name" type="X509_NAME *" m68kreg="a1"/>
			<arg name="ret" type="X509_OBJECT *" m68kreg="a2"/>
		</method>
		<method name="X509_LOOKUP_by_issuer_serial" result="int">
			<arg name="ctx" type="X509_LOOKUP *" m68kreg="a0"/>
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="name" type="X509_NAME *" m68kreg="a1"/>
			<arg name="serial" type="ASN1_INTEGER *" m68kreg="a2"/>
			<arg name="ret" type="X509_OBJECT *" m68kreg="a3"/>
		</method>
		<method name="X509_LOOKUP_by_fingerprint" result="int">
			<arg name="ctx" type="X509_LOOKUP *" m68kreg="a0"/>
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="bytes" type="unsigned char *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d1"/>
			<arg name="ret" type="X509_OBJECT *" m68kreg="a2"/>
		</method>
		<method name="X509_LOOKUP_by_alias" result="int">
			<arg name="ctx" type="X509_LOOKUP *" m68kreg="a0"/>
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="str" type="char *" m68kreg="a1"/>
			<arg name="len" type="int" m68kreg="d1"/>
			<arg name="ret" type="X509_OBJECT *" m68kreg="a2"/>
		</method>
		<method name="X509_LOOKUP_shutdown" result="int">
			<arg name="ctx" type="X509_LOOKUP *" m68kreg="a0"/>
		</method>
		<method name="X509_STORE_load_locations" result="int">
			<arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
			<arg name="file" type="const char *" m68kreg="a1"/>
			<arg name="dir" type="const char *" m68kreg="a2"/>
		</method>
		<method name="X509_STORE_set_default_paths" result="int">
			<arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
		</method>
		<method name="X509_STORE_CTX_get_ex_new_index" result="int">
			<arg name="argl" type="long" m68kreg="d0"/>
			<arg name="argp" type="void *" m68kreg="a0"/>
			<arg name="new_func" type="CRYPTO_EX_new *" m68kreg="a1"/>
			<arg name="dup_func" type="CRYPTO_EX_dup *" m68kreg="a2"/>
			<arg name="free_func" type="CRYPTO_EX_free *" m68kreg="a3"/>
		</method>
		<method name="X509_STORE_CTX_set_ex_data" result="int">
			<arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
			<arg name="idx" type="int" m68kreg="d0"/>
			<arg name="data" type="void *" m68kreg="a1"/>
		</method>
		<method name="X509_STORE_CTX_get_ex_data" result="void *">
			<arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
			<arg name="idx" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_STORE_CTX_get_error" result="int">
			<arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
		</method>
		<method name="X509_STORE_CTX_set_error" result="void">
			<arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
			<arg name="s" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_STORE_CTX_get_error_depth" result="int">
			<arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
		</method>
		<method name="X509_STORE_CTX_get_current_cert" result="X509 *">
			<arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
		</method>
		<method name="X509_STORE_CTX_get_chain" result="STACK_OF(X509) *">
			<arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
		</method>
		<method name="X509_STORE_CTX_get1_chain" result="STACK_OF(X509) *">
			<arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
		</method>
		<method name="X509_STORE_CTX_set_cert" result="void">
			<arg name="c" type="X509_STORE_CTX *" m68kreg="a0"/>
			<arg name="x" type="X509 *" m68kreg="a1"/>
		</method>
		<method name="X509_STORE_CTX_set_chain" result="void">
			<arg name="c" type="X509_STORE_CTX *" m68kreg="a0"/>
			<arg name="sk" type="STACK_OF(X509) *" m68kreg="a1"/>
		</method>
		<method name="X509_STORE_CTX_set_purpose" result="int">
			<arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
			<arg name="purpose" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_STORE_CTX_set_trust" result="int">
			<arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
			<arg name="trust" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_STORE_CTX_purpose_inherit" result="int">
			<arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
			<arg name="def_purpose" type="int" m68kreg="d0"/>
			<arg name="purpose" type="int" m68kreg="d1"/>
			<arg name="trust" type="int" m68kreg="d2"/>
		</method>
		<method name="X509_STORE_CTX_set_flags" result="void">
			<arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
			<arg name="flags" type="long" m68kreg="d0"/>
		</method>
		<method name="X509_STORE_CTX_set_time" result="void">
			<arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
			<arg name="flags" type="long" m68kreg="d0"/>
			<arg name="t" type="time_t" m68kreg="d1"/>
		</method>
		<method name="X509_STORE_CTX_set_verify_cb" result="void">
			<arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
			<arg name="verify_cb" type="int (*)(int, X509_STORE_CTX *)" m68kreg="a1"/>
		</method>
		<method name="BASIC_CONSTRAINTS_new" result="BASIC_CONSTRAINTS *">
		</method>
		<method name="BASIC_CONSTRAINTS_free" result="void">
			<arg name="a" type="BASIC_CONSTRAINTS *" m68kreg="a0"/>
		</method>
		<method name="d2i_BASIC_CONSTRAINTS" result="BASIC_CONSTRAINTS *">
			<arg name="a" type="BASIC_CONSTRAINTS **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_BASIC_CONSTRAINTS" result="int">
			<arg name="a" type="BASIC_CONSTRAINTS *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="BASIC_CONSTRAINTS_it" result="const ASN1_ITEM *">
		</method>
		<method name="SXNET_new" result="SXNET *">
		</method>
		<method name="SXNET_free" result="void">
			<arg name="a" type="SXNET *" m68kreg="a0"/>
		</method>
		<method name="d2i_SXNET" result="SXNET *">
			<arg name="a" type="SXNET **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_SXNET" result="int">
			<arg name="a" type="SXNET *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="SXNET_it" result="const ASN1_ITEM *">
		</method>
		<method name="SXNETID_new" result="SXNETID *">
		</method>
		<method name="SXNETID_free" result="void">
			<arg name="a" type="SXNETID *" m68kreg="a0"/>
		</method>
		<method name="d2i_SXNETID" result="SXNETID *">
			<arg name="a" type="SXNETID **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_SXNETID" result="int">
			<arg name="a" type="SXNETID *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="SXNETID_it" result="const ASN1_ITEM *">
		</method>
		<method name="SXNET_add_id_asc" result="int">
			<arg name="psx" type="SXNET **" m68kreg="a0"/>
			<arg name="zone" type="char *" m68kreg="a1"/>
			<arg name="user" type="char *" m68kreg="a2"/>
			<arg name="userlen" type="int" m68kreg="d0"/>
		</method>
		<method name="SXNET_add_id_ulong" result="int">
			<arg name="psx" type="SXNET **" m68kreg="a0"/>
			<arg name="lzone" type="unsigned long" m68kreg="d0"/>
			<arg name="user" type="char *" m68kreg="a1"/>
			<arg name="userlen" type="int" m68kreg="d1"/>
		</method>
		<method name="SXNET_add_id_INTEGER" result="int">
			<arg name="psx" type="SXNET **" m68kreg="a0"/>
			<arg name="izone" type="ASN1_INTEGER *" m68kreg="a1"/>
			<arg name="user" type="char *" m68kreg="a2"/>
			<arg name="userlen" type="int" m68kreg="d0"/>
		</method>
		<method name="SXNET_get_id_asc" result="ASN1_OCTET_STRING *">
			<arg name="sx" type="SXNET *" m68kreg="a0"/>
			<arg name="zone" type="char *" m68kreg="a1"/>
		</method>
		<method name="SXNET_get_id_ulong" result="ASN1_OCTET_STRING *">
			<arg name="sx" type="SXNET *" m68kreg="a0"/>
			<arg name="lzone" type="unsigned long" m68kreg="d0"/>
		</method>
		<method name="SXNET_get_id_INTEGER" result="ASN1_OCTET_STRING *">
			<arg name="sx" type="SXNET *" m68kreg="a0"/>
			<arg name="zone" type="ASN1_INTEGER *" m68kreg="a1"/>
		</method>
		<method name="AUTHORITY_KEYID_new" result="AUTHORITY_KEYID *">
		</method>
		<method name="AUTHORITY_KEYID_free" result="void">
			<arg name="a" type="AUTHORITY_KEYID *" m68kreg="a0"/>
		</method>
		<method name="d2i_AUTHORITY_KEYID" result="AUTHORITY_KEYID *">
			<arg name="a" type="AUTHORITY_KEYID **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_AUTHORITY_KEYID" result="int">
			<arg name="a" type="AUTHORITY_KEYID *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="AUTHORITY_KEYID_it" result="const ASN1_ITEM *">
		</method>
		<method name="PKEY_USAGE_PERIOD_new" result="PKEY_USAGE_PERIOD *">
		</method>
		<method name="PKEY_USAGE_PERIOD_free" result="void">
			<arg name="a" type="PKEY_USAGE_PERIOD *" m68kreg="a0"/>
		</method>
		<method name="d2i_PKEY_USAGE_PERIOD" result="PKEY_USAGE_PERIOD *">
			<arg name="a" type="PKEY_USAGE_PERIOD **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_PKEY_USAGE_PERIOD" result="int">
			<arg name="a" type="PKEY_USAGE_PERIOD *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="PKEY_USAGE_PERIOD_it" result="const ASN1_ITEM *">
		</method>
		<method name="GENERAL_NAME_new" result="GENERAL_NAME *">
		</method>
		<method name="GENERAL_NAME_free" result="void">
			<arg name="a" type="GENERAL_NAME *" m68kreg="a0"/>
		</method>
		<method name="d2i_GENERAL_NAME" result="GENERAL_NAME *">
			<arg name="a" type="GENERAL_NAME **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_GENERAL_NAME" result="int">
			<arg name="a" type="GENERAL_NAME *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="GENERAL_NAME_it" result="const ASN1_ITEM *">
		</method>
		<method name="i2v_GENERAL_NAME" result="STACK_OF(CONF_VALUE) *">
			<arg name="method" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
			<arg name="gen" type="GENERAL_NAME *" m68kreg="a1"/>
			<arg name="ret" type="STACK_OF(CONF_VALUE) *" m68kreg="a2"/>
		</method>
		<method name="GENERAL_NAME_print" result="int">
			<arg name="out" type="BIO *" m68kreg="a0"/>
			<arg name="gen" type="GENERAL_NAME *" m68kreg="a1"/>
		</method>
		<method name="GENERAL_NAMES_new" result="GENERAL_NAMES *">
		</method>
		<method name="GENERAL_NAMES_free" result="void">
			<arg name="a" type="GENERAL_NAMES *" m68kreg="a0"/>
		</method>
		<method name="d2i_GENERAL_NAMES" result="GENERAL_NAMES *">
			<arg name="a" type="GENERAL_NAMES **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_GENERAL_NAMES" result="int">
			<arg name="a" type="GENERAL_NAMES *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="GENERAL_NAMES_it" result="const ASN1_ITEM *">
		</method>
		<method name="i2v_GENERAL_NAMES" result="STACK_OF(CONF_VALUE) *">
			<arg name="method" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
			<arg name="gen" type="GENERAL_NAMES *" m68kreg="a1"/>
			<arg name="extlist" type="STACK_OF(CONF_VALUE) *" m68kreg="a2"/>
		</method>
		<method name="v2i_GENERAL_NAMES" result="GENERAL_NAMES *">
			<arg name="method" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
			<arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
			<arg name="nval" type="STACK_OF(CONF_VALUE) *" m68kreg="a2"/>
		</method>
		<method name="OTHERNAME_new" result="OTHERNAME *">
		</method>
		<method name="OTHERNAME_free" result="void">
			<arg name="a" type="OTHERNAME *" m68kreg="a0"/>
		</method>
		<method name="d2i_OTHERNAME" result="OTHERNAME *">
			<arg name="a" type="OTHERNAME **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_OTHERNAME" result="int">
			<arg name="a" type="OTHERNAME *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="OTHERNAME_it" result="const ASN1_ITEM *">
		</method>
		<method name="EDIPARTYNAME_new" result="EDIPARTYNAME *">
		</method>
		<method name="EDIPARTYNAME_free" result="void">
			<arg name="a" type="EDIPARTYNAME *" m68kreg="a0"/>
		</method>
		<method name="d2i_EDIPARTYNAME" result="EDIPARTYNAME *">
			<arg name="a" type="EDIPARTYNAME **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_EDIPARTYNAME" result="int">
			<arg name="a" type="EDIPARTYNAME *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="EDIPARTYNAME_it" result="const ASN1_ITEM *">
		</method>
		<method name="i2s_ASN1_OCTET_STRING" result="char *">
			<arg name="method" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
			<arg name="ia5" type="ASN1_OCTET_STRING *" m68kreg="a1"/>
		</method>
		<method name="s2i_ASN1_OCTET_STRING" result="ASN1_OCTET_STRING *">
			<arg name="method" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
			<arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
			<arg name="str" type="char *" m68kreg="a2"/>
		</method>
		<method name="EXTENDED_KEY_USAGE_new" result="EXTENDED_KEY_USAGE *">
		</method>
		<method name="EXTENDED_KEY_USAGE_free" result="void">
			<arg name="a" type="EXTENDED_KEY_USAGE *" m68kreg="a0"/>
		</method>
		<method name="d2i_EXTENDED_KEY_USAGE" result="EXTENDED_KEY_USAGE *">
			<arg name="a" type="EXTENDED_KEY_USAGE **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_EXTENDED_KEY_USAGE" result="int">
			<arg name="a" type="EXTENDED_KEY_USAGE *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="EXTENDED_KEY_USAGE_it" result="const ASN1_ITEM *">
		</method>
		<method name="i2a_ACCESS_DESCRIPTION" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="a" type="ACCESS_DESCRIPTION *" m68kreg="a1"/>
		</method>
		<method name="CERTIFICATEPOLICIES_new" result="CERTIFICATEPOLICIES *">
		</method>
		<method name="CERTIFICATEPOLICIES_free" result="void">
			<arg name="a" type="CERTIFICATEPOLICIES *" m68kreg="a0"/>
		</method>
		<method name="d2i_CERTIFICATEPOLICIES" result="CERTIFICATEPOLICIES *">
			<arg name="a" type="CERTIFICATEPOLICIES **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_CERTIFICATEPOLICIES" result="int">
			<arg name="a" type="CERTIFICATEPOLICIES *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="CERTIFICATEPOLICIES_it" result="const ASN1_ITEM *">
		</method>
		<method name="POLICYINFO_new" result="POLICYINFO *">
		</method>
		<method name="POLICYINFO_free" result="void">
			<arg name="a" type="POLICYINFO *" m68kreg="a0"/>
		</method>
		<method name="d2i_POLICYINFO" result="POLICYINFO *">
			<arg name="a" type="POLICYINFO **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_POLICYINFO" result="int">
			<arg name="a" type="POLICYINFO *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="POLICYINFO_it" result="const ASN1_ITEM *">
		</method>
		<method name="POLICYQUALINFO_new" result="POLICYQUALINFO *">
		</method>
		<method name="POLICYQUALINFO_free" result="void">
			<arg name="a" type="POLICYQUALINFO *" m68kreg="a0"/>
		</method>
		<method name="d2i_POLICYQUALINFO" result="POLICYQUALINFO *">
			<arg name="a" type="POLICYQUALINFO **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_POLICYQUALINFO" result="int">
			<arg name="a" type="POLICYQUALINFO *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="POLICYQUALINFO_it" result="const ASN1_ITEM *">
		</method>
		<method name="USERNOTICE_new" result="USERNOTICE *">
		</method>
		<method name="USERNOTICE_free" result="void">
			<arg name="a" type="USERNOTICE *" m68kreg="a0"/>
		</method>
		<method name="d2i_USERNOTICE" result="USERNOTICE *">
			<arg name="a" type="USERNOTICE **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_USERNOTICE" result="int">
			<arg name="a" type="USERNOTICE *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="USERNOTICE_it" result="const ASN1_ITEM *">
		</method>
		<method name="NOTICEREF_new" result="NOTICEREF *">
		</method>
		<method name="NOTICEREF_free" result="void">
			<arg name="a" type="NOTICEREF *" m68kreg="a0"/>
		</method>
		<method name="d2i_NOTICEREF" result="NOTICEREF *">
			<arg name="a" type="NOTICEREF **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_NOTICEREF" result="int">
			<arg name="a" type="NOTICEREF *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="NOTICEREF_it" result="const ASN1_ITEM *">
		</method>
		<method name="CRL_DIST_POINTS_new" result="CRL_DIST_POINTS *">
		</method>
		<method name="CRL_DIST_POINTS_free" result="void">
			<arg name="a" type="CRL_DIST_POINTS *" m68kreg="a0"/>
		</method>
		<method name="d2i_CRL_DIST_POINTS" result="CRL_DIST_POINTS *">
			<arg name="a" type="CRL_DIST_POINTS **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_CRL_DIST_POINTS" result="int">
			<arg name="a" type="CRL_DIST_POINTS *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="CRL_DIST_POINTS_it" result="const ASN1_ITEM *">
		</method>
		<method name="DIST_POINT_new" result="DIST_POINT *">
		</method>
		<method name="DIST_POINT_free" result="void">
			<arg name="a" type="DIST_POINT *" m68kreg="a0"/>
		</method>
		<method name="d2i_DIST_POINT" result="DIST_POINT *">
			<arg name="a" type="DIST_POINT **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_DIST_POINT" result="int">
			<arg name="a" type="DIST_POINT *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="DIST_POINT_it" result="const ASN1_ITEM *">
		</method>
		<method name="DIST_POINT_NAME_new" result="DIST_POINT_NAME *">
		</method>
		<method name="DIST_POINT_NAME_free" result="void">
			<arg name="a" type="DIST_POINT_NAME *" m68kreg="a0"/>
		</method>
		<method name="d2i_DIST_POINT_NAME" result="DIST_POINT_NAME *">
			<arg name="a" type="DIST_POINT_NAME **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_DIST_POINT_NAME" result="int">
			<arg name="a" type="DIST_POINT_NAME *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="DIST_POINT_NAME_it" result="const ASN1_ITEM *">
		</method>
		<method name="ACCESS_DESCRIPTION_new" result="ACCESS_DESCRIPTION *">
		</method>
		<method name="ACCESS_DESCRIPTION_free" result="void">
			<arg name="a" type="ACCESS_DESCRIPTION *" m68kreg="a0"/>
		</method>
		<method name="d2i_ACCESS_DESCRIPTION" result="ACCESS_DESCRIPTION *">
			<arg name="a" type="ACCESS_DESCRIPTION **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_ACCESS_DESCRIPTION" result="int">
			<arg name="a" type="ACCESS_DESCRIPTION *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="ACCESS_DESCRIPTION_it" result="const ASN1_ITEM *">
		</method>
		<method name="AUTHORITY_INFO_ACCESS_new" result="AUTHORITY_INFO_ACCESS *">
		</method>
		<method name="AUTHORITY_INFO_ACCESS_free" result="void">
			<arg name="a" type="AUTHORITY_INFO_ACCESS *" m68kreg="a0"/>
		</method>
		<method name="d2i_AUTHORITY_INFO_ACCESS" result="AUTHORITY_INFO_ACCESS *">
			<arg name="a" type="AUTHORITY_INFO_ACCESS **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_AUTHORITY_INFO_ACCESS" result="int">
			<arg name="a" type="AUTHORITY_INFO_ACCESS *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="AUTHORITY_INFO_ACCESS_it" result="const ASN1_ITEM *">
		</method>
		<method name="v2i_GENERAL_NAME" result="GENERAL_NAME *">
			<arg name="method" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
			<arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
			<arg name="cnf" type="CONF_VALUE *" m68kreg="a2"/>
		</method>
		<method name="X509V3_conf_free" result="void">
			<arg name="val" type="CONF_VALUE *" m68kreg="a0"/>
		</method>
		<method name="X509V3_EXT_nconf_nid" result="X509_EXTENSION *">
			<arg name="conf" type="CONF *" m68kreg="a0"/>
			<arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
			<arg name="ext_nid" type="int" m68kreg="d0"/>
			<arg name="value" type="char *" m68kreg="a2"/>
		</method>
		<method name="X509V3_EXT_nconf" result="X509_EXTENSION *">
			<arg name="conf" type="CONF *" m68kreg="a0"/>
			<arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
			<arg name="name" type="char *" m68kreg="a2"/>
			<arg name="value" type="char *" m68kreg="a3"/>
		</method>
		<method name="X509V3_EXT_add_nconf_sk" result="int">
			<arg name="conf" type="CONF *" m68kreg="a0"/>
			<arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
			<arg name="section" type="char *" m68kreg="a2"/>
			<arg name="sk" type="STACK_OF(X509_EXTENSION) **" m68kreg="a3"/>
		</method>
		<method name="X509V3_EXT_add_nconf" result="int">
			<arg name="conf" type="CONF *" m68kreg="a0"/>
			<arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
			<arg name="section" type="char *" m68kreg="a2"/>
			<arg name="cert" type="X509 *" m68kreg="a3"/>
		</method>
		<method name="X509V3_EXT_REQ_add_nconf" result="int">
			<arg name="conf" type="CONF *" m68kreg="a0"/>
			<arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
			<arg name="section" type="char *" m68kreg="a2"/>
			<arg name="req" type="X509_REQ *" m68kreg="a3"/>
		</method>
		<method name="X509V3_EXT_CRL_add_nconf" result="int">
			<arg name="conf" type="CONF *" m68kreg="a0"/>
			<arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
			<arg name="section" type="char *" m68kreg="a2"/>
			<arg name="crl" type="X509_CRL *" m68kreg="a3"/>
		</method>
		<method name="X509V3_EXT_conf_nid" result="X509_EXTENSION *">
			<arg name="conf" type="LHASH *" m68kreg="a0"/>
			<arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
			<arg name="ext_nid" type="int" m68kreg="d0"/>
			<arg name="value" type="char *" m68kreg="a2"/>
		</method>
		<method name="X509V3_EXT_conf" result="X509_EXTENSION *">
			<arg name="conf" type="LHASH *" m68kreg="a0"/>
			<arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
			<arg name="name" type="char *" m68kreg="a2"/>
			<arg name="value" type="char *" m68kreg="a3"/>
		</method>
		<method name="X509V3_EXT_add_conf" result="int">
			<arg name="conf" type="LHASH *" m68kreg="a0"/>
			<arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
			<arg name="section" type="char *" m68kreg="a2"/>
			<arg name="cert" type="X509 *" m68kreg="a3"/>
		</method>
		<method name="X509V3_EXT_REQ_add_conf" result="int">
			<arg name="conf" type="LHASH *" m68kreg="a0"/>
			<arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
			<arg name="section" type="char *" m68kreg="a2"/>
			<arg name="req" type="X509_REQ *" m68kreg="a3"/>
		</method>
		<method name="X509V3_EXT_CRL_add_conf" result="int">
			<arg name="conf" type="LHASH *" m68kreg="a0"/>
			<arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
			<arg name="section" type="char *" m68kreg="a2"/>
			<arg name="crl" type="X509_CRL *" m68kreg="a3"/>
		</method>
		<method name="X509V3_add_value_bool_nf" result="int">
			<arg name="name" type="char *" m68kreg="a0"/>
			<arg name="asn1_bool" type="int" m68kreg="d0"/>
			<arg name="extlist" type="STACK_OF(CONF_VALUE) **" m68kreg="a1"/>
		</method>
		<method name="X509V3_get_value_bool" result="int">
			<arg name="value" type="CONF_VALUE *" m68kreg="a0"/>
			<arg name="asn1_bool" type="int *" m68kreg="a1"/>
		</method>
		<method name="X509V3_get_value_int" result="int">
			<arg name="value" type="CONF_VALUE *" m68kreg="a0"/>
			<arg name="aint" type="ASN1_INTEGER **" m68kreg="a1"/>
		</method>
		<method name="X509V3_set_nconf" result="void">
			<arg name="ctx" type="X509V3_CTX *" m68kreg="a0"/>
			<arg name="conf" type="CONF *" m68kreg="a1"/>
		</method>
		<method name="X509V3_set_conf_lhash" result="void">
			<arg name="ctx" type="X509V3_CTX *" m68kreg="a0"/>
			<arg name="lhash" type="LHASH *" m68kreg="a1"/>
		</method>
		<method name="X509V3_get_string" result="char *">
			<arg name="ctx" type="X509V3_CTX *" m68kreg="a0"/>
			<arg name="name" type="char *" m68kreg="a1"/>
			<arg name="section" type="char *" m68kreg="a2"/>
		</method>
		<method name="X509V3_get_section" result="STACK_OF(CONF_VALUE) *">
			<arg name="ctx" type="X509V3_CTX *" m68kreg="a0"/>
			<arg name="section" type="char *" m68kreg="a1"/>
		</method>
		<method name="X509V3_string_free" result="void">
			<arg name="ctx" type="X509V3_CTX *" m68kreg="a0"/>
			<arg name="str" type="char *" m68kreg="a1"/>
		</method>
		<method name="X509V3_section_free" result="void">
			<arg name="ctx" type="X509V3_CTX *" m68kreg="a0"/>
			<arg name="section" type="STACK_OF(CONF_VALUE) *" m68kreg="a1"/>
		</method>
		<method name="X509V3_set_ctx" result="void">
			<arg name="ctx" type="X509V3_CTX *" m68kreg="a0"/>
			<arg name="issuer" type="X509 *" m68kreg="a1"/>
			<arg name="subject" type="X509 *" m68kreg="a2"/>
			<arg name="req" type="X509_REQ *" m68kreg="a3"/>
			<arg name="crl" type="X509_CRL *" m68kreg="a4"/>
			<arg name="flags" type="int" m68kreg="d0"/>
		</method>
		<method name="X509V3_add_value" result="int">
			<arg name="name" type="const char *" m68kreg="a0"/>
			<arg name="value" type="const char *" m68kreg="a1"/>
			<arg name="extlist" type="STACK_OF(CONF_VALUE) **" m68kreg="a2"/>
		</method>
		<method name="X509V3_add_value_uchar" result="int">
			<arg name="name" type="const char *" m68kreg="a0"/>
			<arg name="value" type="const unsigned char *" m68kreg="a1"/>
			<arg name="extlist" type="STACK_OF(CONF_VALUE) **" m68kreg="a2"/>
		</method>
		<method name="X509V3_add_value_bool" result="int">
			<arg name="name" type="const char *" m68kreg="a0"/>
			<arg name="asn1_bool" type="int" m68kreg="d0"/>
			<arg name="extlist" type="STACK_OF(CONF_VALUE) **" m68kreg="a1"/>
		</method>
		<method name="X509V3_add_value_int" result="int">
			<arg name="name" type="const char *" m68kreg="a0"/>
			<arg name="aint" type="ASN1_INTEGER *" m68kreg="a1"/>
			<arg name="extlist" type="STACK_OF(CONF_VALUE) **" m68kreg="a2"/>
		</method>
		<method name="i2s_ASN1_INTEGER" result="char *">
			<arg name="meth" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
			<arg name="aint" type="ASN1_INTEGER *" m68kreg="a1"/>
		</method>
		<method name="s2i_ASN1_INTEGER" result="ASN1_INTEGER *">
			<arg name="meth" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
			<arg name="value" type="char *" m68kreg="a1"/>
		</method>
		<method name="i2s_ASN1_ENUMERATED" result="char *">
			<arg name="meth" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
			<arg name="aint" type="ASN1_ENUMERATED *" m68kreg="a1"/>
		</method>
		<method name="i2s_ASN1_ENUMERATED_TABLE" result="char *">
			<arg name="meth" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
			<arg name="aint" type="ASN1_ENUMERATED *" m68kreg="a1"/>
		</method>
		<method name="X509V3_EXT_add" result="int">
			<arg name="ext" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
		</method>
		<method name="X509V3_EXT_add_list" result="int">
			<arg name="extlist" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
		</method>
		<method name="X509V3_EXT_add_alias" result="int">
			<arg name="nid_to" type="int" m68kreg="d0"/>
			<arg name="nid_from" type="int" m68kreg="d1"/>
		</method>
		<method name="X509V3_EXT_cleanup" result="void">
		</method>
		<method name="X509V3_EXT_get" result="X509V3_EXT_METHOD *">
			<arg name="ext" type="X509_EXTENSION *" m68kreg="a0"/>
		</method>
		<method name="X509V3_EXT_get_nid" result="X509V3_EXT_METHOD *">
			<arg name="nid" type="int" m68kreg="d0"/>
		</method>
		<method name="X509V3_add_standard_extensions" result="int">
		</method>
		<method name="X509V3_parse_list" result="STACK_OF(CONF_VALUE) *">
			<arg name="line" type="const char *" m68kreg="a0"/>
		</method>
		<method name="X509V3_EXT_d2i" result="void *">
			<arg name="ext" type="X509_EXTENSION *" m68kreg="a0"/>
		</method>
		<method name="X509V3_get_d2i" result="void *">
			<arg name="x" type="STACK_OF(X509_EXTENSION) *" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="crit" type="int *" m68kreg="a1"/>
			<arg name="idx" type="int *" m68kreg="a2"/>
		</method>
		<method name="X509V3_EXT_i2d" result="X509_EXTENSION *">
			<arg name="ext_nid" type="int" m68kreg="d0"/>
			<arg name="crit" type="int" m68kreg="d1"/>
			<arg name="ext_struc" type="void *" m68kreg="a0"/>
		</method>
		<method name="X509V3_add1_i2d" result="int">
			<arg name="x" type="STACK_OF(X509_EXTENSION) **" m68kreg="a0"/>
			<arg name="nid" type="int" m68kreg="d0"/>
			<arg name="value" type="void *" m68kreg="a1"/>
			<arg name="crit" type="int" m68kreg="d1"/>
			<arg name="flags" type="unsigned long" m68kreg="d2"/>
		</method>
		<method name="hex_to_string" result="char *">
			<arg name="buffer" type="unsigned char *" m68kreg="a0"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="string_to_hex" result="unsigned char *">
			<arg name="str" type="char *" m68kreg="a0"/>
			<arg name="len" type="long *" m68kreg="a1"/>
		</method>
		<method name="name_cmp" result="int">
			<arg name="name" type="const char *" m68kreg="a0"/>
			<arg name="cmp" type="const char *" m68kreg="a1"/>
		</method>
		<method name="X509V3_EXT_val_prn" result="void">
			<arg name="out" type="BIO *" m68kreg="a0"/>
			<arg name="val" type="STACK_OF(CONF_VALUE) *" m68kreg="a1"/>
			<arg name="indent" type="int" m68kreg="d0"/>
			<arg name="ml" type="int" m68kreg="d1"/>
		</method>
		<method name="X509V3_EXT_print" result="int">
			<arg name="out" type="BIO *" m68kreg="a0"/>
			<arg name="ext" type="X509_EXTENSION *" m68kreg="a1"/>
			<arg name="flag" type="unsigned long" m68kreg="d0"/>
			<arg name="indent" type="int" m68kreg="d1"/>
		</method>
		<method name="X509V3_extensions_print" result="int">
			<arg name="out" type="BIO *" m68kreg="a0"/>
			<arg name="title" type="char *" m68kreg="a1"/>
			<arg name="exts" type="STACK_OF(X509_EXTENSION) *" m68kreg="a2"/>
			<arg name="flag" type="unsigned long" m68kreg="d0"/>
			<arg name="indent" type="int" m68kreg="d1"/>
		</method>
		<method name="X509_check_purpose" result="int">
			<arg name="x" type="X509 *" m68kreg="a0"/>
			<arg name="id" type="int" m68kreg="d0"/>
			<arg name="ca" type="int" m68kreg="d1"/>
		</method>
		<method name="X509_supported_extension" result="int">
			<arg name="ex" type="X509_EXTENSION *" m68kreg="a0"/>
		</method>
		<method name="X509_PURPOSE_set" result="int">
			<arg name="p" type="int *" m68kreg="a0"/>
			<arg name="purpose" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_check_issued" result="int">
			<arg name="issuer" type="X509 *" m68kreg="a0"/>
			<arg name="subject" type="X509 *" m68kreg="a1"/>
		</method>
		<method name="X509_PURPOSE_get_count" result="int">
		</method>
		<method name="X509_PURPOSE_get0" result="X509_PURPOSE *">
			<arg name="idx" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_PURPOSE_get_by_sname" result="int">
			<arg name="sname" type="char *" m68kreg="a0"/>
		</method>
		<method name="X509_PURPOSE_get_by_id" result="int">
			<arg name="id" type="int" m68kreg="d0"/>
		</method>
		<method name="X509_PURPOSE_add" result="int">
			<arg name="id" type="int" m68kreg="d0"/>
			<arg name="trust" type="int" m68kreg="d1"/>
			<arg name="flags" type="int" m68kreg="d2"/>
			<arg name="ck" type="int (*)(const X509_PURPOSE *, const X509 *, int)" m68kreg="a0"/>
			<arg name="name" type="char *" m68kreg="a1"/>
			<arg name="sname" type="char *" m68kreg="a2"/>
			<arg name="arg" type="void *" m68kreg="a3"/>
		</method>
		<method name="X509_PURPOSE_get0_name" result="char *">
			<arg name="xp" type="X509_PURPOSE *" m68kreg="a0"/>
		</method>
		<method name="X509_PURPOSE_get0_sname" result="char *">
			<arg name="xp" type="X509_PURPOSE *" m68kreg="a0"/>
		</method>
		<method name="X509_PURPOSE_get_trust" result="int">
			<arg name="xp" type="X509_PURPOSE *" m68kreg="a0"/>
		</method>
		<method name="X509_PURPOSE_cleanup" result="void">
		</method>
		<method name="X509_PURPOSE_get_id" result="int">
			<arg name="a" type="X509_PURPOSE *" m68kreg="a0"/>
		</method>
		<method name="X509_get1_email" result="STACK *">
			<arg name="x" type="X509 *" m68kreg="a0"/>
		</method>
		<method name="X509_REQ_get1_email" result="STACK *">
			<arg name="x" type="X509_REQ *" m68kreg="a0"/>
		</method>
		<method name="X509_email_free" result="void">
			<arg name="sk" type="STACK *" m68kreg="a0"/>
		</method>
		<method name="ERR_load_X509V3_strings" result="void">
		</method>
		<method name="AES_options" result="const char *">
		</method>
		<method name="AES_set_encrypt_key" result="int">
			<arg name="userKey" type="const unsigned char *" m68kreg="a0"/>
			<arg name="bits" type="const int" m68kreg="d0"/>
			<arg name="key" type="AES_KEY *" m68kreg="a1"/>
		</method>
		<method name="AES_set_decrypt_key" result="int">
			<arg name="userKey" type="const unsigned char *" m68kreg="a0"/>
			<arg name="bits" type="const int" m68kreg="d0"/>
			<arg name="key" type="AES_KEY *" m68kreg="a1"/>
		</method>
		<method name="AES_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="key" type="const AES_KEY *" m68kreg="a2"/>
		</method>
		<method name="AES_decrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="key" type="const AES_KEY *" m68kreg="a2"/>
		</method>
		<method name="AES_ecb_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="key" type="const AES_KEY *" m68kreg="a2"/>
			<arg name="enc" type="const int" m68kreg="d0"/>
		</method>
		<method name="AES_cbc_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="const unsigned long" m68kreg="d0"/>
			<arg name="key" type="const AES_KEY *" m68kreg="a2"/>
			<arg name="ivec" type="unsigned char *" m68kreg="a3"/>
			<arg name="enc" type="const int" m68kreg="d1"/>
		</method>
		<method name="AES_cfb128_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="const unsigned long" m68kreg="d0"/>
			<arg name="key" type="const AES_KEY *" m68kreg="a2"/>
			<arg name="ivec" type="unsigned char *" m68kreg="a3"/>
			<arg name="num" type="int *" m68kreg="a4"/>
			<arg name="enc" type="const int" m68kreg="d1"/>
		</method>
		<method name="AES_cfb1_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="const unsigned long" m68kreg="d0"/>
			<arg name="key" type="const AES_KEY *" m68kreg="a2"/>
			<arg name="ivec" type="unsigned char *" m68kreg="a3"/>
			<arg name="num" type="int *" m68kreg="a4"/>
			<arg name="enc" type="const int" m68kreg="d1"/>
		</method>
		<method name="AES_cfb8_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="const unsigned long" m68kreg="d0"/>
			<arg name="key" type="const AES_KEY *" m68kreg="a2"/>
			<arg name="ivec" type="unsigned char *" m68kreg="a3"/>
			<arg name="num" type="int *" m68kreg="a4"/>
			<arg name="enc" type="const int" m68kreg="d1"/>
		</method>
		<method name="AES_cfbr_encrypt_block" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="nbits" type="const int" m68kreg="d0"/>
			<arg name="key" type="const AES_KEY *" m68kreg="a2"/>
			<arg name="ivec" type="unsigned char *" m68kreg="a3"/>
			<arg name="enc" type="const int" m68kreg="d1"/>
		</method>
		<method name="AES_ofb128_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="const unsigned long" m68kreg="d0"/>
			<arg name="key" type="const AES_KEY *" m68kreg="a2"/>
			<arg name="ivec" type="unsigned char *" m68kreg="a3"/>
			<arg name="num" type="int *" m68kreg="a4"/>
		</method>
		<method name="AES_ctr128_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="const unsigned long" m68kreg="d0"/>
			<arg name="key" type="const AES_KEY *" m68kreg="a2"/>
			<arg name="ivec" type="unsigned char *" m68kreg="d1"/>
			<arg name="ecount_buf" type="unsigned char *" m68kreg="d2"/>
			<arg name="num" type="unsigned int *" m68kreg="a3"/>
		</method>
		<method name="BF_set_key" result="void">
			<arg name="key" type="BF_KEY *" m68kreg="a0"/>
			<arg name="len" type="int" m68kreg="d0"/>
			<arg name="data" type="const unsigned char *" m68kreg="a1"/>
		</method>
		<method name="BF_encrypt" result="void">
			<arg name="data" type="BF_LONG *" m68kreg="a0"/>
			<arg name="key" type="const BF_KEY *" m68kreg="a1"/>
		</method>
		<method name="BF_decrypt" result="void">
			<arg name="data" type="BF_LONG *" m68kreg="a0"/>
			<arg name="key" type="const BF_KEY *" m68kreg="a1"/>
		</method>
		<method name="BF_ecb_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="key" type="const BF_KEY *" m68kreg="a2"/>
			<arg name="enc" type="int" m68kreg="d0"/>
		</method>
		<method name="BF_cbc_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="schedule" type="const BF_KEY *" m68kreg="a2"/>
			<arg name="ivec" type="unsigned char *" m68kreg="a3"/>
			<arg name="enc" type="int" m68kreg="d1"/>
		</method>
		<method name="BF_cfb64_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="schedule" type="const BF_KEY *" m68kreg="a2"/>
			<arg name="ivec" type="unsigned char *" m68kreg="a3"/>
			<arg name="num" type="int *" m68kreg="a4"/>
			<arg name="enc" type="int" m68kreg="d1"/>
		</method>
		<method name="BF_ofb64_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="schedule" type="const BF_KEY *" m68kreg="a2"/>
			<arg name="ivec" type="unsigned char *" m68kreg="a3"/>
			<arg name="num" type="int *" m68kreg="a4"/>
		</method>
		<method name="BF_options" result="const char *">
		</method>
		<method name="CAST_set_key" result="void">
			<arg name="key" type="CAST_KEY *" m68kreg="a0"/>
			<arg name="len" type="int" m68kreg="d0"/>
			<arg name="data" type="const unsigned char *" m68kreg="a1"/>
		</method>
		<method name="CAST_ecb_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="key" type="CAST_KEY *" m68kreg="a2"/>
			<arg name="enc" type="int" m68kreg="d0"/>
		</method>
		<method name="CAST_encrypt" result="void">
			<arg name="data" type="CAST_LONG *" m68kreg="a0"/>
			<arg name="key" type="CAST_KEY *" m68kreg="a1"/>
		</method>
		<method name="CAST_decrypt" result="void">
			<arg name="data" type="CAST_LONG *" m68kreg="a0"/>
			<arg name="key" type="CAST_KEY *" m68kreg="a1"/>
		</method>
		<method name="CAST_cbc_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="ks" type="CAST_KEY *" m68kreg="a2"/>
			<arg name="iv" type="unsigned char *" m68kreg="a3"/>
			<arg name="enc" type="int" m68kreg="d1"/>
		</method>
		<method name="CAST_cfb64_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="schedule" type="CAST_KEY *" m68kreg="a2"/>
			<arg name="ivec" type="unsigned char *" m68kreg="a3"/>
			<arg name="num" type="int *" m68kreg="a4"/>
			<arg name="enc" type="int" m68kreg="d1"/>
		</method>
		<method name="CAST_ofb64_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="schedule" type="CAST_KEY *" m68kreg="a2"/>
			<arg name="ivec" type="unsigned char *" m68kreg="a3"/>
			<arg name="num" type="int *" m68kreg="a4"/>
		</method>
		<method name="_shadow_DES_check_key" result="int *">
		</method>
		<method name="_shadow_DES_rw_mode" result="int *">
		</method>
		<method name="DES_options" result="const char *">
		</method>
		<method name="DES_ecb3_encrypt" result="void">
			<arg name="input" type="const_DES_cblock *" m68kreg="a0"/>
			<arg name="output" type="DES_cblock *" m68kreg="a1"/>
			<arg name="ks1" type="DES_key_schedule *" m68kreg="a2"/>
			<arg name="ks2" type="DES_key_schedule *" m68kreg="a3"/>
			<arg name="ks3" type="DES_key_schedule *" m68kreg="a4"/>
			<arg name="enc" type="int" m68kreg="d0"/>
		</method>
		<method name="DES_cbc_cksum" result="DES_LONG">
			<arg name="input" type="const unsigned char *" m68kreg="a0"/>
			<arg name="output" type="DES_cblock *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="schedule" type="DES_key_schedule *" m68kreg="a2"/>
			<arg name="ivec" type="const_DES_cblock *" m68kreg="a3"/>
		</method>
		<method name="DES_cbc_encrypt" result="void">
			<arg name="input" type="const unsigned char *" m68kreg="a0"/>
			<arg name="output" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="schedule" type="DES_key_schedule *" m68kreg="a2"/>
			<arg name="ivec" type="DES_cblock *" m68kreg="a3"/>
			<arg name="enc" type="int" m68kreg="d1"/>
		</method>
		<method name="DES_ncbc_encrypt" result="void">
			<arg name="input" type="const unsigned char *" m68kreg="a0"/>
			<arg name="output" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="schedule" type="DES_key_schedule *" m68kreg="a2"/>
			<arg name="ivec" type="DES_cblock *" m68kreg="a3"/>
			<arg name="enc" type="int" m68kreg="d1"/>
		</method>
		<method name="DES_xcbc_encrypt" result="void">
			<arg name="input" type="const unsigned char *" m68kreg="a0"/>
			<arg name="output" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="schedule" type="DES_key_schedule *" m68kreg="a2"/>
			<arg name="ivec" type="DES_cblock *" m68kreg="a3"/>
			<arg name="inw" type="const_DES_cblock *" m68kreg="a4"/>
			<arg name="outw" type="const_DES_cblock *" m68kreg="a5"/>
			<arg name="enc" type="int" m68kreg="d1"/>
		</method>
		<method name="DES_cfb_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="numbits" type="int" m68kreg="d0"/>
			<arg name="length" type="long" m68kreg="d1"/>
			<arg name="schedule" type="DES_key_schedule *" m68kreg="a2"/>
			<arg name="ivec" type="DES_cblock *" m68kreg="a3"/>
			<arg name="enc" type="int" m68kreg="d2"/>
		</method>
		<method name="DES_ecb_encrypt" result="void">
			<arg name="input" type="const_DES_cblock *" m68kreg="a0"/>
			<arg name="output" type="DES_cblock *" m68kreg="a1"/>
			<arg name="ks" type="DES_key_schedule *" m68kreg="a2"/>
			<arg name="enc" type="int" m68kreg="d0"/>
		</method>
		<method name="DES_encrypt1" result="void">
			<arg name="data" type="DES_LONG *" m68kreg="a0"/>
			<arg name="ks" type="DES_key_schedule *" m68kreg="a1"/>
			<arg name="enc" type="int" m68kreg="d0"/>
		</method>
		<method name="DES_encrypt2" result="void">
			<arg name="data" type="DES_LONG *" m68kreg="a0"/>
			<arg name="ks" type="DES_key_schedule *" m68kreg="a1"/>
			<arg name="enc" type="int" m68kreg="d0"/>
		</method>
		<method name="DES_encrypt3" result="void">
			<arg name="data" type="DES_LONG *" m68kreg="a0"/>
			<arg name="ks1" type="DES_key_schedule *" m68kreg="a1"/>
			<arg name="ks2" type="DES_key_schedule *" m68kreg="a2"/>
			<arg name="ks3" type="DES_key_schedule *" m68kreg="a3"/>
		</method>
		<method name="DES_decrypt3" result="void">
			<arg name="data" type="DES_LONG *" m68kreg="a0"/>
			<arg name="ks1" type="DES_key_schedule *" m68kreg="a1"/>
			<arg name="ks2" type="DES_key_schedule *" m68kreg="a2"/>
			<arg name="ks3" type="DES_key_schedule *" m68kreg="a3"/>
		</method>
		<method name="DES_ede3_cbc_encrypt" result="void">
			<arg name="input" type="const unsigned char *" m68kreg="a0"/>
			<arg name="output" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="ks1" type="DES_key_schedule *" m68kreg="a2"/>
			<arg name="ks2" type="DES_key_schedule *" m68kreg="a3"/>
			<arg name="ks3" type="DES_key_schedule *" m68kreg="a4"/>
			<arg name="ivec" type="DES_cblock *" m68kreg="a5"/>
			<arg name="enc" type="int" m68kreg="d1"/>
		</method>
		<method name="DES_ede3_cbcm_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="ks1" type="DES_key_schedule *" m68kreg="a2"/>
			<arg name="ks2" type="DES_key_schedule *" m68kreg="a3"/>
			<arg name="ks3" type="DES_key_schedule *" m68kreg="a4"/>
			<arg name="ivec1" type="DES_cblock *" m68kreg="a5"/>
			<arg name="ivec2" type="DES_cblock *" m68kreg="a6"/>
			<arg name="enc" type="int" m68kreg="d1"/>
		</method>
		<method name="DES_ede3_cfb64_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="ks1" type="DES_key_schedule *" m68kreg="a2"/>
			<arg name="ks2" type="DES_key_schedule *" m68kreg="a3"/>
			<arg name="ks3" type="DES_key_schedule *" m68kreg="a4"/>
			<arg name="ivec" type="DES_cblock *" m68kreg="a5"/>
			<arg name="num" type="int *" m68kreg="a6"/>
			<arg name="enc" type="int" m68kreg="d1"/>
		</method>
		<method name="DES_ede3_cfb_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="numbits" type="int" m68kreg="d0"/>
			<arg name="length" type="long" m68kreg="d1"/>
			<arg name="ks1" type="DES_key_schedule *" m68kreg="a2"/>
			<arg name="ks2" type="DES_key_schedule *" m68kreg="a3"/>
			<arg name="ks3" type="DES_key_schedule *" m68kreg="a4"/>
			<arg name="ivec" type="DES_cblock *" m68kreg="a5"/>
			<arg name="enc" type="int" m68kreg="d2"/>
		</method>
		<method name="DES_ede3_ofb64_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="ks1" type="DES_key_schedule *" m68kreg="a2"/>
			<arg name="ks2" type="DES_key_schedule *" m68kreg="a3"/>
			<arg name="ks3" type="DES_key_schedule *" m68kreg="a4"/>
			<arg name="ivec" type="DES_cblock *" m68kreg="a5"/>
			<arg name="num" type="int *" m68kreg="a6"/>
		</method>
		<method name="DES_xwhite_in2out" result="void">
			<arg name="DES_key" type="const_DES_cblock *" m68kreg="a0"/>
			<arg name="in_white" type="const_DES_cblock *" m68kreg="a1"/>
			<arg name="out_white" type="DES_cblock *" m68kreg="a2"/>
		</method>
		<method name="DES_enc_read" result="int">
			<arg name="fd" type="int" m68kreg="d0"/>
			<arg name="buf" type="void *" m68kreg="a0"/>
			<arg name="len" type="int" m68kreg="d1"/>
			<arg name="sched" type="DES_key_schedule *" m68kreg="a1"/>
			<arg name="iv" type="DES_cblock *" m68kreg="a2"/>
		</method>
		<method name="DES_enc_write" result="int">
			<arg name="fd" type="int" m68kreg="d0"/>
			<arg name="buf" type="const void *" m68kreg="a0"/>
			<arg name="len" type="int" m68kreg="d1"/>
			<arg name="sched" type="DES_key_schedule *" m68kreg="a1"/>
			<arg name="iv" type="DES_cblock *" m68kreg="a2"/>
		</method>
		<method name="DES_fcrypt" result="char *">
			<arg name="buf" type="const char *" m68kreg="a0"/>
			<arg name="salt" type="const char *" m68kreg="a1"/>
			<arg name="ret" type="char *" m68kreg="a2"/>
		</method>
		<method name="DES_crypt" result="char *">
			<arg name="buf" type="const char *" m68kreg="a0"/>
			<arg name="salt" type="const char *" m68kreg="a1"/>
		</method>
		<method name="DES_ofb_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="numbits" type="int" m68kreg="d0"/>
			<arg name="length" type="long" m68kreg="d1"/>
			<arg name="schedule" type="DES_key_schedule *" m68kreg="a2"/>
			<arg name="ivec" type="DES_cblock *" m68kreg="a3"/>
		</method>
		<method name="DES_pcbc_encrypt" result="void">
			<arg name="input" type="const unsigned char *" m68kreg="a0"/>
			<arg name="output" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="schedule" type="DES_key_schedule *" m68kreg="a2"/>
			<arg name="ivec" type="DES_cblock *" m68kreg="a3"/>
			<arg name="enc" type="int" m68kreg="d1"/>
		</method>
		<method name="DES_quad_cksum" result="DES_LONG">
			<arg name="input" type="const unsigned char *" m68kreg="a0"/>
			<arg name="output" type="DES_cblock *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="out_count" type="int" m68kreg="d1"/>
			<arg name="seed" type="DES_cblock *" m68kreg="a2"/>
		</method>
		<method name="DES_random_key" result="int">
			<arg name="ret" type="DES_cblock *" m68kreg="a0"/>
		</method>
		<method name="DES_set_odd_parity" result="void">
			<arg name="key" type="DES_cblock *" m68kreg="a0"/>
		</method>
		<method name="DES_check_key_parity" result="int">
			<arg name="key" type="const_DES_cblock *" m68kreg="a0"/>
		</method>
		<method name="DES_is_weak_key" result="int">
			<arg name="key" type="const_DES_cblock *" m68kreg="a0"/>
		</method>
		<method name="DES_set_key" result="int">
			<arg name="key" type="const_DES_cblock *" m68kreg="a0"/>
			<arg name="schedule" type="DES_key_schedule *" m68kreg="a1"/>
		</method>
		<method name="DES_key_sched" result="int">
			<arg name="key" type="const_DES_cblock *" m68kreg="a0"/>
			<arg name="schedule" type="DES_key_schedule *" m68kreg="a1"/>
		</method>
		<method name="DES_set_key_checked" result="int">
			<arg name="key" type="const_DES_cblock *" m68kreg="a0"/>
			<arg name="schedule" type="DES_key_schedule *" m68kreg="a1"/>
		</method>
		<method name="DES_set_key_unchecked" result="void">
			<arg name="key" type="const_DES_cblock *" m68kreg="a0"/>
			<arg name="schedule" type="DES_key_schedule *" m68kreg="a1"/>
		</method>
		<method name="DES_string_to_key" result="void">
			<arg name="str" type="const char *" m68kreg="a0"/>
			<arg name="key" type="DES_cblock *" m68kreg="a1"/>
		</method>
		<method name="DES_string_to_2keys" result="void">
			<arg name="str" type="const char *" m68kreg="a0"/>
			<arg name="key1" type="DES_cblock *" m68kreg="a1"/>
			<arg name="key2" type="DES_cblock *" m68kreg="a2"/>
		</method>
		<method name="DES_cfb64_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="schedule" type="DES_key_schedule *" m68kreg="a2"/>
			<arg name="ivec" type="DES_cblock *" m68kreg="a3"/>
			<arg name="num" type="int *" m68kreg="a4"/>
			<arg name="enc" type="int" m68kreg="d1"/>
		</method>
		<method name="DES_ofb64_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="schedule" type="DES_key_schedule *" m68kreg="a2"/>
			<arg name="ivec" type="DES_cblock *" m68kreg="a3"/>
			<arg name="num" type="int *" m68kreg="a4"/>
		</method>
		<method name="DES_read_password" result="int">
			<arg name="key" type="DES_cblock *" m68kreg="a0"/>
			<arg name="prompt" type="const char *" m68kreg="a1"/>
			<arg name="verify" type="int" m68kreg="d0"/>
		</method>
		<method name="DES_read_2passwords" result="int">
			<arg name="key1" type="DES_cblock *" m68kreg="a0"/>
			<arg name="key2" type="DES_cblock *" m68kreg="a1"/>
			<arg name="prompt" type="const char *" m68kreg="a2"/>
			<arg name="verify" type="int" m68kreg="d0"/>
		</method>
		<method name="_ossl_old_des_options" result="const char *">
		</method>
		<method name="_ossl_old_des_ecb3_encrypt" result="void">
			<arg name="input" type="_ossl_old_des_cblock *" m68kreg="a0"/>
			<arg name="output" type="_ossl_old_des_cblock *" m68kreg="a1"/>
			<arg name="ks1" type="_ossl_old_des_key_schedule" m68kreg="d0"/>
			<arg name="ks2" type="_ossl_old_des_key_schedule" m68kreg="d1"/>
			<arg name="ks3" type="_ossl_old_des_key_schedule" m68kreg="d2"/>
			<arg name="enc" type="int" m68kreg="d3"/>
		</method>
		<method name="_ossl_old_des_cbc_cksum" result="DES_LONG">
			<arg name="input" type="_ossl_old_des_cblock *" m68kreg="a0"/>
			<arg name="output" type="_ossl_old_des_cblock *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="schedule" type="_ossl_old_des_key_schedule" m68kreg="d1"/>
			<arg name="ivec" type="_ossl_old_des_cblock *" m68kreg="a2"/>
		</method>
		<method name="_ossl_old_des_cbc_encrypt" result="void">
			<arg name="input" type="_ossl_old_des_cblock *" m68kreg="a0"/>
			<arg name="output" type="_ossl_old_des_cblock *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="schedule" type="_ossl_old_des_key_schedule" m68kreg="d1"/>
			<arg name="ivec" type="_ossl_old_des_cblock *" m68kreg="a2"/>
			<arg name="enc" type="int" m68kreg="d2"/>
		</method>
		<method name="_ossl_old_des_ncbc_encrypt" result="void">
			<arg name="input" type="_ossl_old_des_cblock *" m68kreg="a0"/>
			<arg name="output" type="_ossl_old_des_cblock *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="schedule" type="_ossl_old_des_key_schedule" m68kreg="d1"/>
			<arg name="ivec" type="_ossl_old_des_cblock *" m68kreg="a2"/>
			<arg name="enc" type="int" m68kreg="d2"/>
		</method>
		<method name="_ossl_old_des_xcbc_encrypt" result="void">
			<arg name="input" type="_ossl_old_des_cblock *" m68kreg="a0"/>
			<arg name="output" type="_ossl_old_des_cblock *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="schedule" type="_ossl_old_des_key_schedule" m68kreg="d1"/>
			<arg name="ivec" type="_ossl_old_des_cblock *" m68kreg="a2"/>
			<arg name="inw" type="_ossl_old_des_cblock *" m68kreg="a3"/>
			<arg name="outw" type="_ossl_old_des_cblock *" m68kreg="a4"/>
			<arg name="enc" type="int" m68kreg="d2"/>
		</method>
		<method name="_ossl_old_des_cfb_encrypt" result="void">
			<arg name="in" type="unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="numbits" type="int" m68kreg="d0"/>
			<arg name="length" type="long" m68kreg="d1"/>
			<arg name="schedule" type="_ossl_old_des_key_schedule" m68kreg="d2"/>
			<arg name="ivec" type="_ossl_old_des_cblock *" m68kreg="a2"/>
			<arg name="enc" type="int" m68kreg="d3"/>
		</method>
		<method name="_ossl_old_des_ecb_encrypt" result="void">
			<arg name="input" type="_ossl_old_des_cblock *" m68kreg="a0"/>
			<arg name="output" type="_ossl_old_des_cblock *" m68kreg="a1"/>
			<arg name="ks" type="_ossl_old_des_key_schedule" m68kreg="d0"/>
			<arg name="enc" type="int" m68kreg="d1"/>
		</method>
		<method name="_ossl_old_des_encrypt" result="void">
			<arg name="data" type="DES_LONG *" m68kreg="a0"/>
			<arg name="ks" type="_ossl_old_des_key_schedule" m68kreg="d0"/>
			<arg name="enc" type="int" m68kreg="d1"/>
		</method>
		<method name="_ossl_old_des_encrypt2" result="void">
			<arg name="data" type="DES_LONG *" m68kreg="a0"/>
			<arg name="ks" type="_ossl_old_des_key_schedule" m68kreg="d0"/>
			<arg name="enc" type="int" m68kreg="d1"/>
		</method>
		<method name="_ossl_old_des_encrypt3" result="void">
			<arg name="data" type="DES_LONG *" m68kreg="a0"/>
			<arg name="ks1" type="_ossl_old_des_key_schedule" m68kreg="d0"/>
			<arg name="ks2" type="_ossl_old_des_key_schedule" m68kreg="d1"/>
			<arg name="ks3" type="_ossl_old_des_key_schedule" m68kreg="d2"/>
		</method>
		<method name="_ossl_old_des_decrypt3" result="void">
			<arg name="data" type="DES_LONG *" m68kreg="a0"/>
			<arg name="ks1" type="_ossl_old_des_key_schedule" m68kreg="d0"/>
			<arg name="ks2" type="_ossl_old_des_key_schedule" m68kreg="d1"/>
			<arg name="ks3" type="_ossl_old_des_key_schedule" m68kreg="d2"/>
		</method>
		<method name="_ossl_old_des_ede3_cbc_encrypt" result="void">
			<arg name="input" type="_ossl_old_des_cblock *" m68kreg="a0"/>
			<arg name="output" type="_ossl_old_des_cblock *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="ks1" type="_ossl_old_des_key_schedule" m68kreg="d1"/>
			<arg name="ks2" type="_ossl_old_des_key_schedule" m68kreg="d2"/>
			<arg name="ks3" type="_ossl_old_des_key_schedule" m68kreg="d3"/>
			<arg name="ivec" type="_ossl_old_des_cblock *" m68kreg="a2"/>
			<arg name="enc" type="int" m68kreg="d4"/>
		</method>
		<method name="_ossl_old_des_ede3_cfb64_encrypt" result="void">
			<arg name="in" type="unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="ks1" type="_ossl_old_des_key_schedule" m68kreg="d1"/>
			<arg name="ks2" type="_ossl_old_des_key_schedule" m68kreg="d2"/>
			<arg name="ks3" type="_ossl_old_des_key_schedule" m68kreg="d3"/>
			<arg name="ivec" type="_ossl_old_des_cblock *" m68kreg="a2"/>
			<arg name="num" type="int *" m68kreg="a3"/>
			<arg name="enc" type="int" m68kreg="d4"/>
		</method>
		<method name="_ossl_old_des_ede3_ofb64_encrypt" result="void">
			<arg name="in" type="unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="ks1" type="_ossl_old_des_key_schedule" m68kreg="d1"/>
			<arg name="ks2" type="_ossl_old_des_key_schedule" m68kreg="d2"/>
			<arg name="ks3" type="_ossl_old_des_key_schedule" m68kreg="d3"/>
			<arg name="ivec" type="_ossl_old_des_cblock *" m68kreg="a2"/>
			<arg name="num" type="int *" m68kreg="a3"/>
		</method>
		<method name="_ossl_old_des_xwhite_in2out" result="void">
			<arg name="des_key" type="_ossl_old_des_cblock *" m68kreg="a0"/>
			<arg name="in_white" type="_ossl_old_des_cblock *" m68kreg="a1"/>
			<arg name="out_white" type="_ossl_old_des_cblock *" m68kreg="a2"/>
		</method>
		<method name="_ossl_old_des_enc_read" result="int">
			<arg name="fd" type="int" m68kreg="d0"/>
			<arg name="buf" type="char *" m68kreg="a0"/>
			<arg name="len" type="int" m68kreg="d1"/>
			<arg name="sched" type="_ossl_old_des_key_schedule" m68kreg="d2"/>
			<arg name="iv" type="_ossl_old_des_cblock *" m68kreg="a1"/>
		</method>
		<method name="_ossl_old_des_enc_write" result="int">
			<arg name="fd" type="int" m68kreg="d0"/>
			<arg name="buf" type="char *" m68kreg="a0"/>
			<arg name="len" type="int" m68kreg="d1"/>
			<arg name="sched" type="_ossl_old_des_key_schedule" m68kreg="d2"/>
			<arg name="iv" type="_ossl_old_des_cblock *" m68kreg="a1"/>
		</method>
		<method name="_ossl_old_des_fcrypt" result="char *">
			<arg name="buf" type="const char *" m68kreg="a0"/>
			<arg name="salt" type="const char *" m68kreg="a1"/>
			<arg name="ret" type="char *" m68kreg="a2"/>
		</method>
		<method name="_ossl_old_des_crypt" result="char *">
			<arg name="buf" type="const char *" m68kreg="a0"/>
			<arg name="salt" type="const char *" m68kreg="a1"/>
		</method>
		<method name="_ossl_old_crypt" result="char *">
			<arg name="buf" type="const char *" m68kreg="a0"/>
			<arg name="salt" type="const char *" m68kreg="a1"/>
		</method>
		<method name="_ossl_old_des_ofb_encrypt" result="void">
			<arg name="in" type="unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="numbits" type="int" m68kreg="d0"/>
			<arg name="length" type="long" m68kreg="d1"/>
			<arg name="schedule" type="_ossl_old_des_key_schedule" m68kreg="d2"/>
			<arg name="ivec" type="_ossl_old_des_cblock *" m68kreg="a2"/>
		</method>
		<method name="_ossl_old_des_pcbc_encrypt" result="void">
			<arg name="input" type="_ossl_old_des_cblock *" m68kreg="a0"/>
			<arg name="output" type="_ossl_old_des_cblock *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="schedule" type="_ossl_old_des_key_schedule" m68kreg="d1"/>
			<arg name="ivec" type="_ossl_old_des_cblock *" m68kreg="a2"/>
			<arg name="enc" type="int" m68kreg="d2"/>
		</method>
		<method name="_ossl_old_des_quad_cksum" result="DES_LONG">
			<arg name="input" type="_ossl_old_des_cblock *" m68kreg="a0"/>
			<arg name="output" type="_ossl_old_des_cblock *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="out_count" type="int" m68kreg="d1"/>
			<arg name="seed" type="_ossl_old_des_cblock *" m68kreg="a2"/>
		</method>
		<method name="_ossl_old_des_random_seed" result="void">
			<arg name="key" type="_ossl_old_des_cblock" m68kreg="d0"/>
		</method>
		<method name="_ossl_old_des_random_key" result="void">
			<arg name="ret" type="_ossl_old_des_cblock" m68kreg="d0"/>
		</method>
		<method name="_ossl_old_des_read_password" result="int">
			<arg name="key" type="_ossl_old_des_cblock *" m68kreg="a0"/>
			<arg name="prompt" type="const char *" m68kreg="a1"/>
			<arg name="verify" type="int" m68kreg="d0"/>
		</method>
		<method name="_ossl_old_des_read_2passwords" result="int">
			<arg name="key1" type="_ossl_old_des_cblock *" m68kreg="a0"/>
			<arg name="key2" type="_ossl_old_des_cblock *" m68kreg="a1"/>
			<arg name="prompt" type="const char *" m68kreg="a2"/>
			<arg name="verify" type="int" m68kreg="d0"/>
		</method>
		<method name="_ossl_old_des_set_odd_parity" result="void">
			<arg name="key" type="_ossl_old_des_cblock *" m68kreg="a0"/>
		</method>
		<method name="_ossl_old_des_is_weak_key" result="int">
			<arg name="key" type="_ossl_old_des_cblock *" m68kreg="a0"/>
		</method>
		<method name="_ossl_old_des_set_key" result="int">
			<arg name="key" type="_ossl_old_des_cblock *" m68kreg="a0"/>
			<arg name="schedule" type="_ossl_old_des_key_schedule" m68kreg="d0"/>
		</method>
		<method name="_ossl_old_des_key_sched" result="int">
			<arg name="key" type="_ossl_old_des_cblock *" m68kreg="a0"/>
			<arg name="schedule" type="_ossl_old_des_key_schedule" m68kreg="d0"/>
		</method>
		<method name="_ossl_old_des_string_to_key" result="void">
			<arg name="str" type="char *" m68kreg="a0"/>
			<arg name="key" type="_ossl_old_des_cblock *" m68kreg="a1"/>
		</method>
		<method name="_ossl_old_des_string_to_2keys" result="void">
			<arg name="str" type="char *" m68kreg="a0"/>
			<arg name="key1" type="_ossl_old_des_cblock *" m68kreg="a1"/>
			<arg name="key2" type="_ossl_old_des_cblock *" m68kreg="a2"/>
		</method>
		<method name="_ossl_old_des_cfb64_encrypt" result="void">
			<arg name="in" type="unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="schedule" type="_ossl_old_des_key_schedule" m68kreg="d1"/>
			<arg name="ivec" type="_ossl_old_des_cblock *" m68kreg="a2"/>
			<arg name="num" type="int *" m68kreg="a3"/>
			<arg name="enc" type="int" m68kreg="d2"/>
		</method>
		<method name="_ossl_old_des_ofb64_encrypt" result="void">
			<arg name="in" type="unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="schedule" type="_ossl_old_des_key_schedule" m68kreg="d1"/>
			<arg name="ivec" type="_ossl_old_des_cblock *" m68kreg="a2"/>
			<arg name="num" type="int *" m68kreg="a3"/>
		</method>
		<method name="_ossl_096_des_random_seed" result="void">
			<arg name="key" type="des_cblock *" m68kreg="a0"/>
		</method>
		<method name="DH_OpenSSL" result="const DH_METHOD *">
		</method>
		<method name="DH_set_default_method" result="void">
			<arg name="meth" type="const DH_METHOD *" m68kreg="a0"/>
		</method>
		<method name="DH_get_default_method" result="const DH_METHOD *">
		</method>
		<method name="DH_set_method" result="int">
			<arg name="dh" type="DH *" m68kreg="a0"/>
			<arg name="meth" type="const DH_METHOD *" m68kreg="a1"/>
		</method>
		<method name="DH_new_method" result="DH *">
			<arg name="engine" type="ENGINE *" m68kreg="a0"/>
		</method>
		<method name="DH_new" result="DH *">
		</method>
		<method name="DH_free" result="void">
			<arg name="dh" type="DH *" m68kreg="a0"/>
		</method>
		<method name="DH_up_ref" result="int">
			<arg name="dh" type="DH *" m68kreg="a0"/>
		</method>
		<method name="DH_size" result="int">
			<arg name="dh" type="const DH *" m68kreg="a0"/>
		</method>
		<method name="DH_get_ex_new_index" result="int">
			<arg name="argl" type="long" m68kreg="d0"/>
			<arg name="argp" type="void *" m68kreg="a0"/>
			<arg name="new_func" type="CRYPTO_EX_new *" m68kreg="a1"/>
			<arg name="dup_func" type="CRYPTO_EX_dup *" m68kreg="a2"/>
			<arg name="free_func" type="CRYPTO_EX_free *" m68kreg="a3"/>
		</method>
		<method name="DH_set_ex_data" result="int">
			<arg name="d" type="DH *" m68kreg="a0"/>
			<arg name="idx" type="int" m68kreg="d0"/>
			<arg name="arg" type="void *" m68kreg="a1"/>
		</method>
		<method name="DH_get_ex_data" result="void *">
			<arg name="d" type="DH *" m68kreg="a0"/>
			<arg name="idx" type="int" m68kreg="d0"/>
		</method>
		<method name="DH_generate_parameters" result="DH *">
			<arg name="prime_len" type="int" m68kreg="d0"/>
			<arg name="generator" type="int" m68kreg="d1"/>
			<arg name="callback" type="void (*)(int, int, void *)" m68kreg="a0"/>
			<arg name="cb_arg" type="void *" m68kreg="a1"/>
		</method>
		<method name="DH_check" result="int">
			<arg name="dh" type="const DH *" m68kreg="a0"/>
			<arg name="codes" type="int *" m68kreg="a1"/>
		</method>
		<method name="DH_generate_key" result="int">
			<arg name="dh" type="DH *" m68kreg="a0"/>
		</method>
		<method name="DH_compute_key" result="int">
			<arg name="key" type="unsigned char *" m68kreg="a0"/>
			<arg name="pub_key" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="dh" type="DH *" m68kreg="a2"/>
		</method>
		<method name="d2i_DHparams" result="DH *">
			<arg name="a" type="DH **" m68kreg="a0"/>
			<arg name="pp" type="const unsigned char **" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_DHparams" result="int">
			<arg name="a" type="const DH *" m68kreg="a0"/>
			<arg name="pp" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="DHparams_print" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="const DH *" m68kreg="a1"/>
		</method>
		<method name="ERR_load_DH_strings" result="void">
		</method>
		<method name="DSA_SIG_new" result="DSA_SIG *">
		</method>
		<method name="DSA_SIG_free" result="void">
			<arg name="sig" type="DSA_SIG *" m68kreg="a0"/>
		</method>
		<method name="i2d_DSA_SIG" result="int">
			<arg name="a" type="const DSA_SIG *" m68kreg="a0"/>
			<arg name="pp" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="d2i_DSA_SIG" result="DSA_SIG *">
			<arg name="v" type="DSA_SIG **" m68kreg="a0"/>
			<arg name="pp" type="const unsigned char **" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
		</method>
		<method name="DSA_do_sign" result="DSA_SIG *">
			<arg name="dgst" type="const unsigned char *" m68kreg="a0"/>
			<arg name="dlen" type="int" m68kreg="d0"/>
			<arg name="dsa" type="DSA *" m68kreg="a1"/>
		</method>
		<method name="DSA_do_verify" result="int">
			<arg name="dgst" type="const unsigned char *" m68kreg="a0"/>
			<arg name="dgst_len" type="int" m68kreg="d0"/>
			<arg name="sig" type="DSA_SIG *" m68kreg="a1"/>
			<arg name="dsa" type="DSA *" m68kreg="a2"/>
		</method>
		<method name="DSA_OpenSSL" result="const DSA_METHOD *">
		</method>
		<method name="DSA_set_default_method" result="void">
			<arg name="a" type="const DSA_METHOD *" m68kreg="a0"/>
		</method>
		<method name="DSA_get_default_method" result="const DSA_METHOD *">
		</method>
		<method name="DSA_set_method" result="int">
			<arg name="dsa" type="DSA *" m68kreg="a0"/>
			<arg name="a" type="const DSA_METHOD *" m68kreg="a1"/>
		</method>
		<method name="DSA_new" result="DSA *">
		</method>
		<method name="DSA_new_method" result="DSA *">
			<arg name="engine" type="ENGINE *" m68kreg="a0"/>
		</method>
		<method name="DSA_free" result="void">
			<arg name="r" type="DSA *" m68kreg="a0"/>
		</method>
		<method name="DSA_up_ref" result="int">
			<arg name="r" type="DSA *" m68kreg="a0"/>
		</method>
		<method name="DSA_size" result="int">
			<arg name="a" type="const DSA *" m68kreg="a0"/>
		</method>
		<method name="DSA_sign_setup" result="int">
			<arg name="dsa" type="DSA *" m68kreg="a0"/>
			<arg name="ctx_in" type="BN_CTX *" m68kreg="a1"/>
			<arg name="kinvp" type="BIGNUM **" m68kreg="a2"/>
			<arg name="rp" type="BIGNUM **" m68kreg="a3"/>
		</method>
		<method name="DSA_sign" result="int">
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="dgst" type="const unsigned char *" m68kreg="a0"/>
			<arg name="dlen" type="int" m68kreg="d1"/>
			<arg name="sig" type="unsigned char *" m68kreg="a1"/>
			<arg name="siglen" type="unsigned int *" m68kreg="a2"/>
			<arg name="dsa" type="DSA *" m68kreg="a3"/>
		</method>
		<method name="DSA_verify" result="int">
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="dgst" type="const unsigned char *" m68kreg="a0"/>
			<arg name="dgst_len" type="int" m68kreg="d1"/>
			<arg name="sigbuf" type="const unsigned char *" m68kreg="a1"/>
			<arg name="siglen" type="int" m68kreg="d2"/>
			<arg name="dsa" type="DSA *" m68kreg="a2"/>
		</method>
		<method name="DSA_get_ex_new_index" result="int">
			<arg name="argl" type="long" m68kreg="d0"/>
			<arg name="argp" type="void *" m68kreg="a0"/>
			<arg name="new_func" type="CRYPTO_EX_new *" m68kreg="a1"/>
			<arg name="dup_func" type="CRYPTO_EX_dup *" m68kreg="a2"/>
			<arg name="free_func" type="CRYPTO_EX_free *" m68kreg="a3"/>
		</method>
		<method name="DSA_set_ex_data" result="int">
			<arg name="d" type="DSA *" m68kreg="a0"/>
			<arg name="idx" type="int" m68kreg="d0"/>
			<arg name="arg" type="void *" m68kreg="a1"/>
		</method>
		<method name="DSA_get_ex_data" result="void *">
			<arg name="d" type="DSA *" m68kreg="a0"/>
			<arg name="idx" type="int" m68kreg="d0"/>
		</method>
		<method name="d2i_DSAPublicKey" result="DSA *">
			<arg name="a" type="DSA **" m68kreg="a0"/>
			<arg name="pp" type="const unsigned char **" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
		</method>
		<method name="d2i_DSAPrivateKey" result="DSA *">
			<arg name="a" type="DSA **" m68kreg="a0"/>
			<arg name="pp" type="const unsigned char **" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
		</method>
		<method name="d2i_DSAparams" result="DSA *">
			<arg name="a" type="DSA **" m68kreg="a0"/>
			<arg name="pp" type="const unsigned char **" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
		</method>
		<method name="DSA_generate_parameters" result="DSA *">
			<arg name="bits" type="int" m68kreg="d0"/>
			<arg name="seed" type="unsigned char *" m68kreg="a0"/>
			<arg name="seed_len" type="int" m68kreg="d1"/>
			<arg name="counter_ret" type="int *" m68kreg="a1"/>
			<arg name="h_ret" type="unsigned long *" m68kreg="a2"/>
			<arg name="callback" type="void (*)(int, int, void *)" m68kreg="a3"/>
			<arg name="cb_arg" type="void *" m68kreg="a4"/>
		</method>
		<method name="DSA_generate_key" result="int">
			<arg name="a" type="DSA *" m68kreg="a0"/>
		</method>
		<method name="i2d_DSAPublicKey" result="int">
			<arg name="a" type="const DSA *" m68kreg="a0"/>
			<arg name="pp" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="i2d_DSAPrivateKey" result="int">
			<arg name="a" type="const DSA *" m68kreg="a0"/>
			<arg name="pp" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="i2d_DSAparams" result="int">
			<arg name="a" type="const DSA *" m68kreg="a0"/>
			<arg name="pp" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="DSAparams_print" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="const DSA *" m68kreg="a1"/>
		</method>
		<method name="DSA_print" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="const DSA *" m68kreg="a1"/>
			<arg name="off" type="int" m68kreg="d0"/>
		</method>
		<method name="DSA_dup_DH" result="DH *">
			<arg name="r" type="const DSA *" m68kreg="a0"/>
		</method>
		<method name="ERR_load_DSA_strings" result="void">
		</method>
		<method name="idea_options" result="const char *">
		</method>
		<method name="idea_ecb_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="ks" type="IDEA_KEY_SCHEDULE *" m68kreg="a2"/>
		</method>
		<method name="idea_set_encrypt_key" result="void">
			<arg name="key" type="const unsigned char *" m68kreg="a0"/>
			<arg name="ks" type="IDEA_KEY_SCHEDULE *" m68kreg="a1"/>
		</method>
		<method name="idea_set_decrypt_key" result="void">
			<arg name="ek" type="IDEA_KEY_SCHEDULE *" m68kreg="a0"/>
			<arg name="dk" type="IDEA_KEY_SCHEDULE *" m68kreg="a1"/>
		</method>
		<method name="idea_cbc_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="ks" type="IDEA_KEY_SCHEDULE *" m68kreg="a2"/>
			<arg name="iv" type="unsigned char *" m68kreg="a3"/>
			<arg name="enc" type="int" m68kreg="d1"/>
		</method>
		<method name="idea_cfb64_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="ks" type="IDEA_KEY_SCHEDULE *" m68kreg="a2"/>
			<arg name="iv" type="unsigned char *" m68kreg="a3"/>
			<arg name="num" type="int *" m68kreg="a4"/>
			<arg name="enc" type="int" m68kreg="d1"/>
		</method>
		<method name="idea_ofb64_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="ks" type="IDEA_KEY_SCHEDULE *" m68kreg="a2"/>
			<arg name="iv" type="unsigned char *" m68kreg="a3"/>
			<arg name="num" type="int *" m68kreg="a4"/>
		</method>
		<method name="idea_encrypt" result="void">
			<arg name="in" type="unsigned long *" m68kreg="a0"/>
			<arg name="ks" type="IDEA_KEY_SCHEDULE *" m68kreg="a1"/>
		</method>
		<method name="MD2_options" result="const char *">
		</method>
		<method name="MD2_Init" result="int">
			<arg name="c" type="MD2_CTX *" m68kreg="a0"/>
		</method>
		<method name="MD2_Update" result="int">
			<arg name="c" type="MD2_CTX *" m68kreg="a0"/>
			<arg name="data" type="const unsigned char *" m68kreg="a1"/>
			<arg name="len" type="unsigned long" m68kreg="d0"/>
		</method>
		<method name="MD2_Final" result="int">
			<arg name="md" type="unsigned char *" m68kreg="a0"/>
			<arg name="c" type="MD2_CTX *" m68kreg="a1"/>
		</method>
		<method name="MD2" result="unsigned char *">
			<arg name="d" type="const unsigned char *" m68kreg="a0"/>
			<arg name="n" type="unsigned long" m68kreg="d0"/>
			<arg name="md" type="unsigned char *" m68kreg="a1"/>
		</method>
		<method name="MD4_Init" result="int">
			<arg name="c" type="MD4_CTX *" m68kreg="a0"/>
		</method>
		<method name="MD4_Update" result="int">
			<arg name="c" type="MD4_CTX *" m68kreg="a0"/>
			<arg name="data" type="const void *" m68kreg="a1"/>
			<arg name="len" type="unsigned long" m68kreg="d0"/>
		</method>
		<method name="MD4_Final" result="int">
			<arg name="md" type="unsigned char *" m68kreg="a0"/>
			<arg name="c" type="MD4_CTX *" m68kreg="a1"/>
		</method>
		<method name="MD4" result="unsigned char *">
			<arg name="d" type="const unsigned char *" m68kreg="a0"/>
			<arg name="n" type="unsigned long" m68kreg="d0"/>
			<arg name="md" type="unsigned char *" m68kreg="a1"/>
		</method>
		<method name="MD4_Transform" result="void">
			<arg name="c" type="MD4_CTX *" m68kreg="a0"/>
			<arg name="b" type="const unsigned char *" m68kreg="a1"/>
		</method>
		<method name="MD5_Init" result="int">
			<arg name="c" type="MD5_CTX *" m68kreg="a0"/>
		</method>
		<method name="MD5_Update" result="int">
			<arg name="c" type="MD5_CTX *" m68kreg="a0"/>
			<arg name="data" type="const void *" m68kreg="a1"/>
			<arg name="len" type="unsigned long" m68kreg="d0"/>
		</method>
		<method name="MD5_Final" result="int">
			<arg name="md" type="unsigned char *" m68kreg="a0"/>
			<arg name="c" type="MD5_CTX *" m68kreg="a1"/>
		</method>
		<method name="MD5" result="unsigned char *">
			<arg name="d" type="const unsigned char *" m68kreg="a0"/>
			<arg name="n" type="unsigned long" m68kreg="d0"/>
			<arg name="md" type="unsigned char *" m68kreg="a1"/>
		</method>
		<method name="MD5_Transform" result="void">
			<arg name="c" type="MD5_CTX *" m68kreg="a0"/>
			<arg name="b" type="const unsigned char *" m68kreg="a1"/>
		</method>
		<method name="MDC2_Init" result="int">
			<arg name="c" type="MDC2_CTX *" m68kreg="a0"/>
		</method>
		<method name="MDC2_Update" result="int">
			<arg name="c" type="MDC2_CTX *" m68kreg="a0"/>
			<arg name="data" type="const unsigned char *" m68kreg="a1"/>
			<arg name="len" type="unsigned long" m68kreg="d0"/>
		</method>
		<method name="MDC2_Final" result="int">
			<arg name="md" type="unsigned char *" m68kreg="a0"/>
			<arg name="c" type="MDC2_CTX *" m68kreg="a1"/>
		</method>
		<method name="MDC2" result="unsigned char *">
			<arg name="d" type="const unsigned char *" m68kreg="a0"/>
			<arg name="n" type="unsigned long" m68kreg="d0"/>
			<arg name="md" type="unsigned char *" m68kreg="a1"/>
		</method>
		<method name="RC2_set_key" result="void">
			<arg name="key" type="RC2_KEY *" m68kreg="a0"/>
			<arg name="len" type="int" m68kreg="d0"/>
			<arg name="data" type="const unsigned char *" m68kreg="a1"/>
			<arg name="bits" type="int" m68kreg="d1"/>
		</method>
		<method name="RC2_ecb_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="key" type="RC2_KEY *" m68kreg="a2"/>
			<arg name="enc" type="int" m68kreg="d0"/>
		</method>
		<method name="RC2_encrypt" result="void">
			<arg name="data" type="unsigned long *" m68kreg="a0"/>
			<arg name="key" type="RC2_KEY *" m68kreg="a1"/>
		</method>
		<method name="RC2_decrypt" result="void">
			<arg name="data" type="unsigned long *" m68kreg="a0"/>
			<arg name="key" type="RC2_KEY *" m68kreg="a1"/>
		</method>
		<method name="RC2_cbc_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="ks" type="RC2_KEY *" m68kreg="a2"/>
			<arg name="iv" type="unsigned char *" m68kreg="a3"/>
			<arg name="enc" type="int" m68kreg="d1"/>
		</method>
		<method name="RC2_cfb64_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="schedule" type="RC2_KEY *" m68kreg="a2"/>
			<arg name="ivec" type="unsigned char *" m68kreg="a3"/>
			<arg name="num" type="int *" m68kreg="a4"/>
			<arg name="enc" type="int" m68kreg="d1"/>
		</method>
		<method name="RC2_ofb64_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="schedule" type="RC2_KEY *" m68kreg="a2"/>
			<arg name="ivec" type="unsigned char *" m68kreg="a3"/>
			<arg name="num" type="int *" m68kreg="a4"/>
		</method>
		<method name="RC4_options" result="const char *">
		</method>
		<method name="RC4_set_key" result="void">
			<arg name="key" type="RC4_KEY *" m68kreg="a0"/>
			<arg name="len" type="int" m68kreg="d0"/>
			<arg name="data" type="const unsigned char *" m68kreg="a1"/>
		</method>
		<method name="RC4" result="void">
			<arg name="key" type="RC4_KEY *" m68kreg="a0"/>
			<arg name="len" type="unsigned long" m68kreg="d0"/>
			<arg name="indata" type="const unsigned char *" m68kreg="a1"/>
			<arg name="outdata" type="unsigned char *" m68kreg="a2"/>
		</method>
		<method name="RC5_32_set_key" result="void">
			<arg name="key" type="RC5_32_KEY *" m68kreg="a0"/>
			<arg name="len" type="int" m68kreg="d0"/>
			<arg name="data" type="const unsigned char *" m68kreg="a1"/>
			<arg name="rounds" type="int" m68kreg="d1"/>
		</method>
		<method name="RC5_32_ecb_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="key" type="RC5_32_KEY *" m68kreg="a2"/>
			<arg name="enc" type="int" m68kreg="d0"/>
		</method>
		<method name="RC5_32_encrypt" result="void">
			<arg name="data" type="unsigned long *" m68kreg="a0"/>
			<arg name="key" type="RC5_32_KEY *" m68kreg="a1"/>
		</method>
		<method name="RC5_32_decrypt" result="void">
			<arg name="data" type="unsigned long *" m68kreg="a0"/>
			<arg name="key" type="RC5_32_KEY *" m68kreg="a1"/>
		</method>
		<method name="RC5_32_cbc_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="ks" type="RC5_32_KEY *" m68kreg="a2"/>
			<arg name="iv" type="unsigned char *" m68kreg="a3"/>
			<arg name="enc" type="int" m68kreg="d1"/>
		</method>
		<method name="RC5_32_cfb64_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="schedule" type="RC5_32_KEY *" m68kreg="a2"/>
			<arg name="ivec" type="unsigned char *" m68kreg="a3"/>
			<arg name="num" type="int *" m68kreg="a4"/>
			<arg name="enc" type="int" m68kreg="d1"/>
		</method>
		<method name="RC5_32_ofb64_encrypt" result="void">
			<arg name="in" type="const unsigned char *" m68kreg="a0"/>
			<arg name="out" type="unsigned char *" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="schedule" type="RC5_32_KEY *" m68kreg="a2"/>
			<arg name="ivec" type="unsigned char *" m68kreg="a3"/>
			<arg name="num" type="int *" m68kreg="a4"/>
		</method>
		<method name="RIPEMD160_Init" result="int">
			<arg name="c" type="RIPEMD160_CTX *" m68kreg="a0"/>
		</method>
		<method name="RIPEMD160_Update" result="int">
			<arg name="c" type="RIPEMD160_CTX *" m68kreg="a0"/>
			<arg name="data" type="const void *" m68kreg="a1"/>
			<arg name="len" type="unsigned long" m68kreg="d0"/>
		</method>
		<method name="RIPEMD160_Final" result="int">
			<arg name="md" type="unsigned char *" m68kreg="a0"/>
			<arg name="c" type="RIPEMD160_CTX *" m68kreg="a1"/>
		</method>
		<method name="RIPEMD160" result="unsigned char *">
			<arg name="d" type="const unsigned char *" m68kreg="a0"/>
			<arg name="n" type="unsigned long" m68kreg="d0"/>
			<arg name="md" type="unsigned char *" m68kreg="a1"/>
		</method>
		<method name="RIPEMD160_Transform" result="void">
			<arg name="c" type="RIPEMD160_CTX *" m68kreg="a0"/>
			<arg name="b" type="const unsigned char *" m68kreg="a1"/>
		</method>
		<method name="RSA_new" result="RSA *">
		</method>
		<method name="RSA_new_method" result="RSA *">
			<arg name="engine" type="ENGINE *" m68kreg="a0"/>
		</method>
		<method name="RSA_size" result="int">
			<arg name="a" type="const RSA *" m68kreg="a0"/>
		</method>
		<method name="RSA_generate_key" result="RSA *">
			<arg name="bits" type="int" m68kreg="d0"/>
			<arg name="e" type="unsigned long" m68kreg="d1"/>
			<arg name="callback" type="void (*)(int, int, void *)" m68kreg="a0"/>
			<arg name="cb_arg" type="void *" m68kreg="a1"/>
		</method>
		<method name="RSA_check_key" result="int">
			<arg name="a" type="const RSA *" m68kreg="a0"/>
		</method>
		<method name="RSA_public_encrypt" result="int">
			<arg name="flen" type="int" m68kreg="d0"/>
			<arg name="from" type="const unsigned char *" m68kreg="a0"/>
			<arg name="to" type="unsigned char *" m68kreg="a1"/>
			<arg name="rsa" type="RSA *" m68kreg="a2"/>
			<arg name="padding" type="int" m68kreg="d1"/>
		</method>
		<method name="RSA_private_encrypt" result="int">
			<arg name="flen" type="int" m68kreg="d0"/>
			<arg name="from" type="const unsigned char *" m68kreg="a0"/>
			<arg name="to" type="unsigned char *" m68kreg="a1"/>
			<arg name="rsa" type="RSA *" m68kreg="a2"/>
			<arg name="padding" type="int" m68kreg="d1"/>
		</method>
		<method name="RSA_public_decrypt" result="int">
			<arg name="flen" type="int" m68kreg="d0"/>
			<arg name="from" type="const unsigned char *" m68kreg="a0"/>
			<arg name="to" type="unsigned char *" m68kreg="a1"/>
			<arg name="rsa" type="RSA *" m68kreg="a2"/>
			<arg name="padding" type="int" m68kreg="d1"/>
		</method>
		<method name="RSA_private_decrypt" result="int">
			<arg name="flen" type="int" m68kreg="d0"/>
			<arg name="from" type="const unsigned char *" m68kreg="a0"/>
			<arg name="to" type="unsigned char *" m68kreg="a1"/>
			<arg name="rsa" type="RSA *" m68kreg="a2"/>
			<arg name="padding" type="int" m68kreg="d1"/>
		</method>
		<method name="RSA_free" result="void">
			<arg name="r" type="RSA *" m68kreg="a0"/>
		</method>
		<method name="RSA_up_ref" result="int">
			<arg name="r" type="RSA *" m68kreg="a0"/>
		</method>
		<method name="RSA_flags" result="int">
			<arg name="r" type="const RSA *" m68kreg="a0"/>
		</method>
		<method name="RSA_set_default_method" result="void">
			<arg name="meth" type="const RSA_METHOD *" m68kreg="a0"/>
		</method>
		<method name="RSA_get_default_method" result="const RSA_METHOD *">
		</method>
		<method name="RSA_get_method" result="const RSA_METHOD *">
			<arg name="rsa" type="const RSA *" m68kreg="a0"/>
		</method>
		<method name="RSA_set_method" result="int">
			<arg name="rsa" type="RSA *" m68kreg="a0"/>
			<arg name="meth" type="const RSA_METHOD *" m68kreg="a1"/>
		</method>
		<method name="RSA_memory_lock" result="int">
			<arg name="r" type="RSA *" m68kreg="a0"/>
		</method>
		<method name="RSA_PKCS1_SSLeay" result="const RSA_METHOD *">
		</method>
		<method name="RSA_null_method" result="const RSA_METHOD *">
		</method>
		<method name="d2i_RSAPublicKey" result="RSA *">
			<arg name="a" type="RSA **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_RSAPublicKey" result="int">
			<arg name="a" type="const RSA *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="RSAPublicKey_it" result="const ASN1_ITEM *">
		</method>
		<method name="d2i_RSAPrivateKey" result="RSA *">
			<arg name="a" type="RSA **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_RSAPrivateKey" result="int">
			<arg name="a" type="const RSA *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="RSAPrivateKey_it" result="const ASN1_ITEM *">
		</method>
		<method name="RSA_print" result="int">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="r" type="const RSA *" m68kreg="a1"/>
			<arg name="offset" type="int" m68kreg="d0"/>
		</method>
		<method name="i2d_RSA_NET" result="int">
			<arg name="a" type="const RSA *" m68kreg="a0"/>
			<arg name="pp" type="unsigned char **" m68kreg="a1"/>
			<arg name="cb" type="int (*)()" m68kreg="a2"/>
			<arg name="sgckey" type="int" m68kreg="d0"/>
		</method>
		<method name="d2i_RSA_NET" result="RSA *">
			<arg name="a" type="RSA **" m68kreg="a0"/>
			<arg name="pp" type="const unsigned char **" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="cb" type="int (*)()" m68kreg="a2"/>
			<arg name="sgckey" type="int" m68kreg="d1"/>
		</method>
		<method name="i2d_Netscape_RSA" result="int">
			<arg name="a" type="const RSA *" m68kreg="a0"/>
			<arg name="pp" type="unsigned char **" m68kreg="a1"/>
			<arg name="cb" type="int (*)()" m68kreg="a2"/>
		</method>
		<method name="d2i_Netscape_RSA" result="RSA *">
			<arg name="a" type="RSA **" m68kreg="a0"/>
			<arg name="pp" type="const unsigned char **" m68kreg="a1"/>
			<arg name="length" type="long" m68kreg="d0"/>
			<arg name="cb" type="int (*)()" m68kreg="a2"/>
		</method>
		<method name="RSA_sign" result="int">
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="m" type="const unsigned char *" m68kreg="a0"/>
			<arg name="m_length" type="unsigned int" m68kreg="d1"/>
			<arg name="sigret" type="unsigned char *" m68kreg="a1"/>
			<arg name="siglen" type="unsigned int *" m68kreg="a2"/>
			<arg name="rsa" type="RSA *" m68kreg="a3"/>
		</method>
		<method name="RSA_verify" result="int">
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="m" type="const unsigned char *" m68kreg="a0"/>
			<arg name="m_length" type="unsigned int" m68kreg="d1"/>
			<arg name="sigbuf" type="unsigned char *" m68kreg="a1"/>
			<arg name="siglen" type="unsigned int" m68kreg="d2"/>
			<arg name="rsa" type="RSA *" m68kreg="a2"/>
		</method>
		<method name="RSA_sign_ASN1_OCTET_STRING" result="int">
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="m" type="const unsigned char *" m68kreg="a0"/>
			<arg name="m_length" type="unsigned int" m68kreg="d1"/>
			<arg name="sigret" type="unsigned char *" m68kreg="a1"/>
			<arg name="siglen" type="unsigned int *" m68kreg="a2"/>
			<arg name="rsa" type="RSA *" m68kreg="a3"/>
		</method>
		<method name="RSA_verify_ASN1_OCTET_STRING" result="int">
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="m" type="const unsigned char *" m68kreg="a0"/>
			<arg name="m_length" type="unsigned int" m68kreg="d1"/>
			<arg name="sigbuf" type="unsigned char *" m68kreg="a1"/>
			<arg name="siglen" type="unsigned int" m68kreg="d2"/>
			<arg name="rsa" type="RSA *" m68kreg="a2"/>
		</method>
		<method name="RSA_blinding_on" result="int">
			<arg name="rsa" type="RSA *" m68kreg="a0"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a1"/>
		</method>
		<method name="RSA_blinding_off" result="void">
			<arg name="rsa" type="RSA *" m68kreg="a0"/>
		</method>
		<method name="RSA_padding_add_PKCS1_type_1" result="int">
			<arg name="to" type="unsigned char *" m68kreg="a0"/>
			<arg name="tlen" type="int" m68kreg="d0"/>
			<arg name="f" type="const unsigned char *" m68kreg="a1"/>
			<arg name="fl" type="int" m68kreg="d1"/>
		</method>
		<method name="RSA_padding_check_PKCS1_type_1" result="int">
			<arg name="to" type="unsigned char *" m68kreg="a0"/>
			<arg name="tlen" type="int" m68kreg="d0"/>
			<arg name="f" type="const unsigned char *" m68kreg="a1"/>
			<arg name="fl" type="int" m68kreg="d1"/>
			<arg name="rsa_len" type="int" m68kreg="d2"/>
		</method>
		<method name="RSA_padding_add_PKCS1_type_2" result="int">
			<arg name="to" type="unsigned char *" m68kreg="a0"/>
			<arg name="tlen" type="int" m68kreg="d0"/>
			<arg name="f" type="const unsigned char *" m68kreg="a1"/>
			<arg name="fl" type="int" m68kreg="d1"/>
		</method>
		<method name="RSA_padding_check_PKCS1_type_2" result="int">
			<arg name="to" type="unsigned char *" m68kreg="a0"/>
			<arg name="tlen" type="int" m68kreg="d0"/>
			<arg name="f" type="const unsigned char *" m68kreg="a1"/>
			<arg name="fl" type="int" m68kreg="d1"/>
			<arg name="rsa_len" type="int" m68kreg="d2"/>
		</method>
		<method name="RSA_padding_add_PKCS1_OAEP" result="int">
			<arg name="to" type="unsigned char *" m68kreg="a0"/>
			<arg name="tlen" type="int" m68kreg="d0"/>
			<arg name="f" type="const unsigned char *" m68kreg="a1"/>
			<arg name="fl" type="int" m68kreg="d1"/>
			<arg name="p" type="const unsigned char *" m68kreg="a2"/>
			<arg name="pl" type="int" m68kreg="d2"/>
		</method>
		<method name="RSA_padding_check_PKCS1_OAEP" result="int">
			<arg name="to" type="unsigned char *" m68kreg="a0"/>
			<arg name="tlen" type="int" m68kreg="d0"/>
			<arg name="f" type="const unsigned char *" m68kreg="a1"/>
			<arg name="fl" type="int" m68kreg="d1"/>
			<arg name="rsa_len" type="int" m68kreg="d2"/>
			<arg name="p" type="const unsigned char *" m68kreg="a2"/>
			<arg name="pl" type="int" m68kreg="d3"/>
		</method>
		<method name="RSA_padding_add_SSLv23" result="int">
			<arg name="to" type="unsigned char *" m68kreg="a0"/>
			<arg name="tlen" type="int" m68kreg="d0"/>
			<arg name="f" type="const unsigned char *" m68kreg="a1"/>
			<arg name="fl" type="int" m68kreg="d1"/>
		</method>
		<method name="RSA_padding_check_SSLv23" result="int">
			<arg name="to" type="unsigned char *" m68kreg="a0"/>
			<arg name="tlen" type="int" m68kreg="d0"/>
			<arg name="f" type="const unsigned char *" m68kreg="a1"/>
			<arg name="fl" type="int" m68kreg="d1"/>
			<arg name="rsa_len" type="int" m68kreg="d2"/>
		</method>
		<method name="RSA_padding_add_none" result="int">
			<arg name="to" type="unsigned char *" m68kreg="a0"/>
			<arg name="tlen" type="int" m68kreg="d0"/>
			<arg name="f" type="const unsigned char *" m68kreg="a1"/>
			<arg name="fl" type="int" m68kreg="d1"/>
		</method>
		<method name="RSA_padding_check_none" result="int">
			<arg name="to" type="unsigned char *" m68kreg="a0"/>
			<arg name="tlen" type="int" m68kreg="d0"/>
			<arg name="f" type="const unsigned char *" m68kreg="a1"/>
			<arg name="fl" type="int" m68kreg="d1"/>
			<arg name="rsa_len" type="int" m68kreg="d2"/>
		</method>
		<method name="RSA_get_ex_new_index" result="int">
			<arg name="argl" type="long" m68kreg="d0"/>
			<arg name="argp" type="void *" m68kreg="a0"/>
			<arg name="new_func" type="CRYPTO_EX_new *" m68kreg="a1"/>
			<arg name="dup_func" type="CRYPTO_EX_dup *" m68kreg="a2"/>
			<arg name="free_func" type="CRYPTO_EX_free *" m68kreg="a3"/>
		</method>
		<method name="RSA_set_ex_data" result="int">
			<arg name="r" type="RSA *" m68kreg="a0"/>
			<arg name="idx" type="int" m68kreg="d0"/>
			<arg name="arg" type="void *" m68kreg="a1"/>
		</method>
		<method name="RSA_get_ex_data" result="void *">
			<arg name="r" type="const RSA *" m68kreg="a0"/>
			<arg name="idx" type="int" m68kreg="d0"/>
		</method>
		<method name="RSAPublicKey_dup" result="RSA *">
			<arg name="rsa" type="RSA *" m68kreg="a0"/>
		</method>
		<method name="RSAPrivateKey_dup" result="RSA *">
			<arg name="rsa" type="RSA *" m68kreg="a0"/>
		</method>
		<method name="ERR_load_RSA_strings" result="void">
		</method>
		<method name="SHA_Init" result="int">
			<arg name="c" type="SHA_CTX *" m68kreg="a0"/>
		</method>
		<method name="SHA_Update" result="int">
			<arg name="c" type="SHA_CTX *" m68kreg="a0"/>
			<arg name="data" type="const void *" m68kreg="a1"/>
			<arg name="len" type="unsigned long" m68kreg="d0"/>
		</method>
		<method name="SHA_Final" result="int">
			<arg name="md" type="unsigned char *" m68kreg="a0"/>
			<arg name="c" type="SHA_CTX *" m68kreg="a1"/>
		</method>
		<method name="SHA" result="unsigned char *">
			<arg name="d" type="const unsigned char *" m68kreg="a0"/>
			<arg name="n" type="unsigned long" m68kreg="d0"/>
			<arg name="md" type="unsigned char *" m68kreg="a1"/>
		</method>
		<method name="SHA_Transform" result="void">
			<arg name="c" type="SHA_CTX *" m68kreg="a0"/>
			<arg name="data" type="const unsigned char *" m68kreg="a1"/>
		</method>
		<method name="SHA1_Init" result="int">
			<arg name="c" type="SHA_CTX *" m68kreg="a0"/>
		</method>
		<method name="SHA1_Update" result="int">
			<arg name="c" type="SHA_CTX *" m68kreg="a0"/>
			<arg name="data" type="const void *" m68kreg="a1"/>
			<arg name="len" type="unsigned long" m68kreg="d0"/>
		</method>
		<method name="SHA1_Final" result="int">
			<arg name="md" type="unsigned char *" m68kreg="a0"/>
			<arg name="c" type="SHA_CTX *" m68kreg="a1"/>
		</method>
		<method name="SHA1" result="unsigned char *">
			<arg name="d" type="const unsigned char *" m68kreg="a0"/>
			<arg name="n" type="unsigned long" m68kreg="d0"/>
			<arg name="md" type="unsigned char *" m68kreg="a1"/>
		</method>
		<method name="SHA1_Transform" result="void">
			<arg name="c" type="SHA_CTX *" m68kreg="a0"/>
			<arg name="data" type="const unsigned char *" m68kreg="a1"/>
		</method>
		<method name="UI_read_string_lib" result="int" status="private">
			<arg name="ui" type="UI *" m68kreg="a0"/>
			<arg name="uis" type="UI_STRING *" m68kreg="a1"/>
		</method>
		<method name="UI_write_string_lib" result="int" status="private">
			<arg name="ui" type="UI *" m68kreg="a0"/>
			<arg name="uis" type="UI_STRING *" m68kreg="a1"/>
		</method>
		<method name="HMAC_CTX_set_flags" result="void">
			<arg name="ctx" type="HMAC_CTX *" m68kreg="a0"/>
			<arg name="flags" type="unsigned long" m68kreg="d0"/>
		</method>
		<method name="X509_check_ca" result="int">
			<arg name="x" type="X509 *" m68kreg="a0"/>
		</method>
		<method name="PROXY_POLICY_new" result="PROXY_POLICY *">
		</method>
		<method name="PROXY_POLICY_free" result="void">
			<arg name="a" type="PROXY_POLICY *" m68kreg="a0"/>
		</method>
		<method name="d2i_PROXY_POLICY" result="PROXY_POLICY *">
			<arg name="a" type="PROXY_POLICY **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_PROXY_POLICY" result="int">
			<arg name="a" type="PROXY_POLICY *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="PROXY_POLICY_it" result="const ASN1_ITEM *">
		</method>
		<method name="PROXY_CERT_INFO_EXTENSION_new" result="PROXY_CERT_INFO_EXTENSION *">
		</method>
		<method name="PROXY_CERT_INFO_EXTENSION_free" result="void">
			<arg name="a" type="PROXY_CERT_INFO_EXTENSION *" m68kreg="a0"/>
		</method>
		<method name="d2i_PROXY_CERT_INFO_EXTENSION" result="PROXY_CERT_INFO_EXTENSION *">
			<arg name="a" type="PROXY_CERT_INFO_EXTENSION **" m68kreg="a0"/>
			<arg name="in" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="d0"/>
		</method>
		<method name="i2d_PROXY_CERT_INFO_EXTENSION" result="int">
			<arg name="a" type="PROXY_CERT_INFO_EXTENSION *" m68kreg="a0"/>
			<arg name="out" type="unsigned char **" m68kreg="a1"/>
		</method>
		<method name="PROXY_CERT_INFO_EXTENSION_it" result="const ASN1_ITEM *">
		</method>
    <!-- OpenSSL 0.9.7m -->
		<method name="BN_mod_exp_mont_consttime" result="int">
			<arg name="rr" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="p" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="m" type="const BIGNUM *" m68kreg="a3"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a4"/>
			<arg name="in_mont" type="BN_MONT_CTX *" m68kreg="a5"/>
		</method>
		<method name="BN_MONT_CTX_set_locked" result="BN_MONT_CTX *">
			<arg name="pmont" type="BN_MONT_CTX **" m68kreg="a0"/>
			<arg name="lock" type="int" m68kreg="d0"/>
			<arg name="mod" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a2"/>
		</method>
		<method name="PKCS1_MGF1" result="int">
			<arg name="mask" type="unsigned char *" m68kreg="a0"/>
			<arg name="len" type="long" m68kreg="d0"/>
			<arg name="seed" type="const unsigned char *" m68kreg="a1"/>
			<arg name="seedlen" type="long" m68kreg="d1"/>
			<arg name="dgst" type="const EVP_MD *" m68kreg="a2"/>
    </method>
		<method name="RSA_padding_add_X931" result="int">
			<arg name="to" type="unsigned char *" m68kreg="a0"/>
			<arg name="tlen" type="int" m68kreg="d0"/>
			<arg name="from" type="const unsigned char *" m68kreg="a1"/>
			<arg name="flen" type="int" m68kreg="d1"/>
    </method>
		<method name="RSA_padding_check_X931" result="int">
			<arg name="to" type="unsigned char *" m68kreg="a0"/>
			<arg name="tlen" type="int" m68kreg="d0"/>
			<arg name="from" type="const unsigned char *" m68kreg="a1"/>
			<arg name="flen" type="int" m68kreg="d1"/>
			<arg name="num" type="int" m68kreg="d2"/>
    </method>
		<method name="RSA_X931_hash_id" result="int">
			<arg name="nid" type="int" m68kreg="d0"/>
    </method>
		<method name="RSA_verify_PKCS1_PSS" result="int">
			<arg name="rsa" type="RSA *" m68kreg="a0"/>
			<arg name="mHash" type="const unsigned char *" m68kreg="a1"/>
			<arg name="Hash" type="const EVP_MD *" m68kreg="a2"/>
			<arg name="EM" type="const unsigned char *" m68kreg="a3"/>
			<arg name="sLen" type="int" m68kreg="d0"/>
    </method>
		<method name="RSA_padding_add_PKCS1_PSS" result="int">
			<arg name="rsa" type="RSA *" m68kreg="a0"/>
			<arg name="EM" type="unsigned char *" m68kreg="a1"/>
			<arg name="mHash" type="const unsigned char *" m68kreg="a2"/>
			<arg name="Hash" type="const EVP_MD *" m68kreg="a3"/>
			<arg name="sLen" type="int" m68kreg="d0"/>
    </method>
    <!-- OpenSSL 0.9.8y -->
		<method name="EVP_sha224" result="const EVP_MD *">
		</method>
		<method name="EVP_sha256" result="const EVP_MD *">
		</method>
		<method name="EVP_sha384" result="const EVP_MD *">
		</method>
		<method name="EVP_sha512" result="const EVP_MD *">
		</method>
    <method name="BN_GF2m_add" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="b" type="const BIGNUM *" m68kreg="a2"/>
    </method>
    <method name="BN_GF2m_arr2poly" result="int">
			<arg name="p" type="const unsigned int *" m68kreg="a0"/>
			<arg name="a" type="BIGNUM *" m68kreg="a1"/>
    </method>
    <method name="BN_GF2m_mod" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="p" type="const BIGNUM *" m68kreg="a2"/>
    </method>
    <method name="BN_GF2m_mod_mul" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="b" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="p" type="const BIGNUM *" m68kreg="a3"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a4"/>
    </method>
    <method name="BN_GF2m_mod_sqr" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="p" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="BN_GF2m_mod_inv" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="b" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="p" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="BN_GF2m_mod_div" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="b" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="p" type="const BIGNUM *" m68kreg="a3"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a4"/>
    </method>
    <method name="BN_GF2m_mod_exp" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="b" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="p" type="const BIGNUM *" m68kreg="a3"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a4"/>
    </method>
    <method name="BN_GF2m_mod_sqrt" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="p" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="BN_GF2m_mod_solve_quad" result="int">
			<arg name="r" type="BIGNUM *" m68kreg="a0"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="p" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="BN_generate_prime_ex" result="int">
			<arg name="ret" type="BIGNUM *" m68kreg="a0"/>
			<arg name="bits" type="int" m68kreg="d0"/>
			<arg name="safe" type="int" m68kreg="d1"/>
			<arg name="add" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="rem" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="cb" type="BN_GENCB *" m68kreg="a3"/>
    </method>
    <method name="BN_is_prime_ex" result="int">
			<arg name="p" type="const BIGNUM *" m68kreg="a0"/>
			<arg name="nchecks" type="int" m68kreg="d0"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a1"/>
			<arg name="cb" type="BN_GENCB *" m68kreg="a2"/>
    </method>
    <method name="BN_set_negative" result="void">
			<arg name="b" type="BIGNUM *" m68kreg="a0"/>
			<arg name="n" type="int" m68kreg="d0"/>
    </method>
    <method name="EC_GROUP_get_degree" result="int">
			<arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
    </method>
    <method name="EC_GF2m_simple_method" result="const EC_METHOD *">
    </method>
    <method name="EC_GROUP_set_curve_GF2m" result="int">
			<arg name="group" type="EC_GROUP *" m68kreg="a0"/>
			<arg name="p" type="const BIGNUM *" m68kreg="a1"/>
			<arg name="a" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="b" type="const BIGNUM *" m68kreg="a3"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a4"/>
    </method>
    <method name="EC_GROUP_get_curve_GF2m" result="int">
			<arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
			<arg name="p" type="BIGNUM *" m68kreg="a1"/>
			<arg name="a" type="BIGNUM *" m68kreg="a2"/>
			<arg name="b" type="BIGNUM *" m68kreg="a3"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a4"/>
    </method>
    <method name="EC_POINT_set_affine_coordinates_GF2m" result="int">
			<arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
			<arg name="point" type="EC_POINT *" m68kreg="a1"/>
			<arg name="x" type="const BIGNUM *" m68kreg="a2"/>
			<arg name="y" type="const BIGNUM *" m68kreg="a3"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a4"/>
    </method>
    <method name="EC_POINT_get_affine_coordinates_GF2m" result="int">
			<arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
			<arg name="point" type="const EC_POINT *" m68kreg="a1"/>
			<arg name="x" type="BIGNUM *" m68kreg="a2"/>
			<arg name="y" type="BIGNUM *" m68kreg="a3"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a4"/>
    </method>
    <method name="EC_get_builtin_curves" result="size_t">
			<arg name="r" type="EC_builtin_curve *" m68kreg="a0"/>
			<arg name="nitems" type="size_t" m68kreg="d0"/>
    </method>
    <method name="EC_GROUP_new_by_curve_name" result="EC_GROUP *">
			<arg name="nid" type="int" m68kreg="d0"/>
    </method>
    <method name="EC_GROUP_check" result="int">
			<arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
			<arg name="ctx" type="BN_CTX *" m68kreg="a1"/>
    </method>
    <method name="CRYPTO_malloc_debug_init" result="void">
    </method>
    <method name="ENGINE_cleanup" result="void">
    </method>
    <method name="DSA_generate_parameters_ex" result="int">
			<arg name="dsa" type="DSA *" m68kreg="a0"/>
			<arg name="bits" type="int" m68kreg="d0"/>
			<arg name="seed" type="unsigned char *" m68kreg="a1"/>
			<arg name="seed_len" type="int" m68kreg="d1"/>
			<arg name="counter_ret" type="int *" m68kreg="a2"/>
			<arg name="h_ret" type="unsigned long *" m68kreg="a3"/>
			<arg name="cb" type="BN_GENCB *" m68kreg="a4"/>
    </method>
    <method name="EVP_ecdsa" result="const EVP_MD *">
    </method>
    <method name="EC_KEY_new_by_curve_name" result="EC_KEY *">
			<arg name="nid" type="int" m68kreg="d0"/>
    </method>
    <method name="EC_KEY_generate_key" result="int">
			<arg name="key" type="EC_KEY *" m68kreg="a0"/>
    </method>
    <method name="EC_KEY_free" result="void">
			<arg name="key" type="EC_KEY *" m68kreg="a0"/>
    </method>
    <method name="ECDSA_SIG_free" result="void">
			<arg name="a" type="ECDSA_SIG *" m68kreg="a0"/>
    </method>
    <method name="ECDSA_do_sign" result="ECDSA_SIG *">
			<arg name="dgst" type="const unsigned char *" m68kreg="a0"/>
			<arg name="dlen" type="int" m68kreg="d0"/>
			<arg name="eckey" type="EC_KEY *" m68kreg="a1"/>
    </method>
    <method name="ECDSA_do_verify" result="int">
			<arg name="dgst" type="const unsigned char *" m68kreg="a0"/>
			<arg name="dgst_len" type="int" m68kreg="d0"/>
			<arg name="sig" type="const ECDSA_SIG *" m68kreg="a1"/>
			<arg name="eckey" type="EC_KEY *" m68kreg="a2"/>
    </method>
    <method name="EC_KEY_new" result="EC_KEY *">
    </method>
    <method name="EC_KEY_set_group" result="int">
			<arg name="eckey" type="EC_KEY *" m68kreg="a0"/>
			<arg name="group" type="const EC_GROUP *" m68kreg="a1"/>
    </method>
    <method name="EC_KEY_get0_group" result="const EC_GROUP *">
			<arg name="key" type="const EC_KEY *" m68kreg="a0"/>
    </method>
    <method name="EC_KEY_check_key" result="int">
			<arg name="eckey" type="const EC_KEY *" m68kreg="a0"/>
    </method>
    <method name="ECDSA_size" result="int">
			<arg name="eckey" type="const EC_KEY *" m68kreg="a0"/>
    </method>
    <method name="ECDSA_sign" result="int">
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="dgst" type="const unsigned char *" m68kreg="a0"/>
			<arg name="dgstlen" type="int" m68kreg="d1"/>
			<arg name="sig" type="unsigned char *" m68kreg="a1"/>
			<arg name="siglen" type="unsigned int *" m68kreg="a2"/>
			<arg name="eckey" type="EC_KEY *" m68kreg="a3"/>
    </method>
    <method name="ECDSA_verify" result="int">
			<arg name="type" type="int" m68kreg="d0"/>
			<arg name="dgst" type="const unsigned char *" m68kreg="a0"/>
			<arg name="dgstlen" type="int" m68kreg="d1"/>
			<arg name="sig" type="const unsigned char *" m68kreg="a1"/>
			<arg name="siglen" type="int" m68kreg="d2"/>
			<arg name="eckey" type="EC_KEY *" m68kreg="a2"/>
    </method>
    <method name="d2i_ECDSA_SIG" result="ECDSA_SIG *">
			<arg name="v" type="ECDSA_SIG **" m68kreg="a0"/>
			<arg name="pp" type="const unsigned char **" m68kreg="a1"/>
			<arg name="len" type="long" m68kreg="a2"/>
    </method>
    <method name="i2d_ECDSA_SIG" result="int">
			<arg name="a" type="const ECDSA_SIG *" m68kreg="a0"/>
			<arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="DH_generate_parameters_ex" result="int">
			<arg name="ret" type="DH *" m68kreg="a0"/>
			<arg name="prime_len" type="int" m68kreg="d0"/>
			<arg name="generator" type="int" m68kreg="d1"/>
			<arg name="cb" type="BN_GENCB *" m68kreg="a1"/>
    </method>
    <method name="EC_METHOD_get_field_type" result="int">
			<arg name="meth" type="const EC_METHOD *" m68kreg="a0"/>
    </method>
    <method name="EC_KEY_get0_public_key" result="const EC_POINT *">
			<arg name="eckey" type="const EC_KEY *" m68kreg="a0"/>
    </method>
    <method name="ECDH_compute_key" result="int">
			<arg name="out" type="void *" m68kreg="a0"/>
			<arg name="outlen" type="size_t" m68kreg="d0"/>
			<arg name="pub_key" type="const EC_POINT *" m68kreg="a1"/>
			<arg name="ecdh" type="EC_KEY *" m68kreg="a2"/>
			<arg name="KDF" type="void *(*)(const void *, size_t, void *, size_t *)" m68kreg="a3"/>
    </method>
    <method name="EC_KEY_get0_private_key" result="const BIGNUM *">
			<arg name="eckey" type="const EC_KEY *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_first" result="ENGINE *">
    </method>
    <method name="ENGINE_get_id" result="const char *">
			<arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_name" result="const char *">
			<arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_next" result="ENGINE *">
			<arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_free" result="int">
			<arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_new" result="ENGINE *">
    </method>
    <method name="ENGINE_set_id" result="int">
			<arg name="e" type="ENGINE *" m68kreg="a0"/>
			<arg name="id" type="const char *" m68kreg="a1"/>
    </method>
    <method name="ENGINE_set_name" result="int">
			<arg name="e" type="ENGINE *" m68kreg="a0"/>
			<arg name="name" type="const char *" m68kreg="a1"/>
    </method>
    <method name="ENGINE_add" result="int">
			<arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_remove" result="int">
			<arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_load_builtin_engines" result="void">
    </method>
    <method name="ENGINE_register_all_ciphers" result="void">
    </method>
    <method name="EVP_CIPHER_nid" result="int">
			<arg name="cipher" type="const EVP_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_type" result="int">
			<arg name="md" type="const EVP_MD *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_register_all_digests" result="void">
    </method>
    <method name="BIO_test_flags" result="int">
			<arg name="b" type="const BIO *" m68kreg="a0"/>
			<arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_COMP_get_compression_methods" result="STACK_OF(SSL_COMP) *">
    </method>
    <method name="RSA_generate_key_ex" result="int">
			<arg name="rsa" type="RSA *" m68kreg="a0"/>
			<arg name="bits" type="int" m68kreg="d0"/>
			<arg name="e" type="BIGNUM *" m68kreg="a1"/>
			<arg name="cb" type="BN_GENCB *" m68kreg="a2"/>
    </method>
    <method name="X509_VERIFY_PARAM_free" result="void">
			<arg name="param" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_set1_param" result="int">
			<arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
			<arg name="pm" type="X509_VERIFY_PARAM *" m68kreg="a1"/>
    </method>
    <method name="ASN1_generate_nconf" result="ASN1_TYPE *">
			<arg name="str" type="char *" m68kreg="a0"/>
			<arg name="nconf" type="CONF *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_bio_ECPKParameters" result="EC_GROUP *">
			<arg name="bp" type="BIO *" m68kreg="a0"/>
			<arg name="x" type="EC_GROUP **" m68kreg="a1"/>
			<arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
			<arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="EC_KEY_dup" result="EC_KEY *">
			<arg name="ec_key" type="const EC_KEY *" m68kreg="a0"/>
    </method>
    <method name="BIO_set_callback" result="void">
			<arg name="b" type="BIO *" m68kreg="a0"/>
			<arg name="callback" type="long (*)(struct bio_st *, int, const char *, int, long, long)" m68kreg="a1"/>
    </method>
    <method name="BIO_set_callback_arg" result="void">
      <arg name="b" type="BIO *" m68kreg="a0"/>
      <arg name="arg" type="char *" m68kreg="a1"/>
    </method>
    <method name="EVP_MD_CTX_set_flags" result="void">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_set_flags" result="void">
      <arg name="b" type="BIO *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_CIPHER_CTX_set_flags" result="void">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_CIPHER_iv_length" result="int">
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="X509_REQ_check_private_key" result="int">
      <arg name="x509" type="X509_REQ *" m68kreg="a0"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_bio_EC_PUBKEY" result="EC_KEY *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="EC_KEY **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a2"/>
    </method>
    <method name="PEM_read_bio_ECPrivateKey" result="EC_KEY *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="EC_KEY **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a2"/>
    </method>
    <method name="PEM_write_bio_EC_PUBKEY" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="EC_KEY *" m68kreg="a1"/>
    </method>
    <method name="d2i_EC_PUBKEY_bio" result="EC_KEY *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="eckey" type="EC_KEY **" m68kreg="a1"/>
    </method>
    <method name="EC_KEY_set_asn1_flag" result="void">
      <arg name="key" type="EC_KEY *" m68kreg="a0"/>
      <arg name="flag" type="int" m68kreg="d0"/>
    </method>
    <method name="EC_KEY_set_conv_form" result="void">
      <arg name="key" type="EC_KEY *" m68kreg="a0"/>
      <arg name="cform" type="point_conversion_form_t" m68kreg="d0"/>
    </method>
    <method name="EC_KEY_print" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="const EC_KEY *" m68kreg="a1"/>
      <arg name="off" type="int" m68kreg="d0"/>
    </method>
    <method name="d2i_ECPrivateKey_bio" result="EC_KEY *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="eckey" type="EC_KEY **" m68kreg="a1"/>
    </method>
    <method name="i2d_EC_PUBKEY_bio" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="eckey" type="EC_KEY *" m68kreg="a1"/>
    </method>
    <method name="PEM_write_bio_ECPrivateKey" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="EC_KEY *" m68kreg="a1"/>
      <arg name="enc" type="const EVP_CIPHER *" m68kreg="a2"/>
      <arg name="kstr" type="unsigned char *" m68kreg="a3"/>
      <arg name="klen" type="int" m68kreg="d0"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a4"/>
      <arg name="u" type="void *" m68kreg="a5"/>
    </method>
    <method name="PEM_write_bio_ECPKParameters" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="const EC_GROUP *" m68kreg="a1"/>
    </method>
    <method name="i2d_ECPrivateKey_bio" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="eckey" type="EC_KEY *" m68kreg="a1"/>
    </method>
    <method name="i2d_ECPKParameters" result="int">
      <arg name="a" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="EC_GROUP_set_asn1_flag" result="void">
      <arg name="group" type="EC_GROUP *" m68kreg="a0"/>
      <arg name="flag" type="int" m68kreg="d0"/>
    </method>
    <method name="EC_GROUP_set_point_conversion_form" result="void">
      <arg name="group" type="EC_GROUP *" m68kreg="a0"/>
      <arg name="form" type="point_conversion_form_t" m68kreg="d0"/>
    </method>
    <method name="EC_GROUP_get_point_conversion_form" result="point_conversion_form_t">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
    </method>
    <method name="ECPKParameters_print" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="const EC_GROUP *" m68kreg="a1"/>
      <arg name="off" type="int" m68kreg="d0"/>
    </method>
    <method name="EC_GROUP_set_seed" result="size_t">
      <arg name="group" type="EC_GROUP *" m68kreg="a0"/>
      <arg name="p" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="d2i_ECPKParameters" result="EC_GROUP *">
      <arg name="a" type="EC_GROUP **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="EC_POINT_point2bn" result="BIGNUM *">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="point" type="const EC_POINT *" m68kreg="a1"/>
      <arg name="form" type="point_conversion_form_t" m68kreg="d0"/>
      <arg name="ret" type="BIGNUM *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="X509_get1_ocsp" result="STACK *">
      <arg name="x" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="RSA_X931_generate_key_ex" result="int">
      <arg name="rsa" type="RSA *" m68kreg="a0"/>
      <arg name="bits" type="int" m68kreg="d0"/>
      <arg name="e" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="cb" type="BN_GENCB *" m68kreg="a2"/>
    </method>
    <method name="SSL_get_servername" result="const char *">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
      <arg name="type" type="const int" m68kreg="d0"/>
    </method>
    <method name="SSL_set_SSL_CTX" result="SSL_CTX *">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="ctx" type="SSL_CTX *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_cookie_generate_cb" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="app_gen_cookie_cb" type="int (*)(SSL *ssl, unsigned char *cookie, unsigned int *cookie_len)" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_cookie_verify_cb" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="app_verify_cookie_cb" type="int (*)(SSL *ssl, unsigned char *cookie, unsigned int cookie_len)" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_info_callback" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="cb" type="void (*)(const SSL *ssl, int type, int val)" m68kreg="a1"/>
    </method>
    <method name="DTLSv1_server_method" result="SSL_METHOD *">
    </method>
    <method name="BIO_new_dgram" result="BIO *">
      <arg name="fd" type="int" m68kreg="d0"/>
      <arg name="close_flag" type="int" m68kreg="d1"/>
    </method>
    <method name="SSL_get_servername_type" result="int">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_current_compression" result="const COMP_METHOD *">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_current_expansion" result="const COMP_METHOD *">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_COMP_get_name" result="const char *">
      <arg name="comp" type="const COMP_METHOD *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_by_id" result="ENGINE *">
      <arg name="id" type="const char *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_set_client_cert_engine" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="e" type="ENGINE *" m68kreg="a1"/>
    </method>
    <method name="DTLSv1_client_method" result="SSL_METHOD *">
    </method>
    <method name="SHA256" result="unsigned char *">
      <arg name="d" type="const unsigned char *" m68kreg="a0"/>
      <arg name="n" type="size_t" m68kreg="d0"/>
      <arg name="md" type="unsigned char *" m68kreg="a1"/>
    </method>
    <method name="SHA512" result="unsigned char *">
      <arg name="d" type="const unsigned char *" m68kreg="a0"/>
      <arg name="n" type="size_t" m68kreg="d0"/>
      <arg name="md" type="unsigned char *" m68kreg="a1"/>
    </method>
    <method name="AES_ige_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="const unsigned long" m68kreg="d0"/>
      <arg name="key" type="const AES_KEY *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="enc" type="const int" m68kreg="d1"/>
    </method>
    <method name="EC_KEY_precompute_mult" result="int">
      <arg name="key" type="EC_KEY *" m68kreg="a0"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a1"/>
    </method>
    <method name="ENGINE_load_private_key" result="EVP_PKEY *">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="key_id" type="const char *" m68kreg="a1"/>
      <arg name="ui_method" type="UI_METHOD *" m68kreg="a2"/>
      <arg name="callback_data" type="void *" m68kreg="a3"/>
    </method>
    <method name="ENGINE_load_public_key" result="EVP_PKEY *">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="key_id" type="const char *" m68kreg="a1"/>
      <arg name="ui_method" type="UI_METHOD *" m68kreg="a2"/>
      <arg name="callback_data" type="void *" m68kreg="a3"/>
    </method>
    <method name="ENGINE_ctrl_cmd" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="cmd_name" type="const char *" m68kreg="a1"/>
      <arg name="i" type="long" m68kreg="a2"/>
      <arg name="p" type="void *" m68kreg="a3"/>
      <arg name="f" type="void (*)(void)" m68kreg="a4"/>
      <arg name="cmd_optional" type="int" m68kreg="d0"/>
    </method>
    <method name="ENGINE_set_default" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="flags" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="ENGINE_ctrl" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="cmd" type="int" m68kreg="d0"/>
      <arg name="i" type="long" m68kreg="d1"/>
      <arg name="p" type="void *" m68kreg="a1"/>
      <arg name="f" type="void (*)(void)" m68kreg="a2"/>
    </method>
    <method name="ENGINE_register_all_complete" result="int">
    </method>
    <method name="ENGINE_ctrl_cmd_string" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="cmd_name" type="const char *" m68kreg="a1"/>
      <arg name="arg" type="const char *" m68kreg="a2"/>
      <arg name="cmd_optional" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_VERIFY_PARAM_add0_policy" result="int">
      <arg name="param" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
      <arg name="policy" type="ASN1_OBJECT *" m68kreg="a1"/>
    </method>
    <method name="X509_VERIFY_PARAM_set_purpose" result="int">
      <arg name="param" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
      <arg name="purpose" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_VERIFY_PARAM_set_flags" result="int">
      <arg name="param" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="X509_VERIFY_PARAM_new" result="X509_VERIFY_PARAM *">
    </method>
    <method name="X509_POLICY_NODE_print" result="void">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="node" type="X509_POLICY_NODE *" m68kreg="a1"/>
      <arg name="indent" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_STORE_CTX_get0_policy_tree" result="X509_POLICY_TREE *">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_get_explicit_policy" result="int">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_policy_tree_get0_policies" result="STACK_OF(X509_POLICY_NODE) *">
      <arg name="tree" type="const X509_POLICY_TREE *" m68kreg="a0"/>
    </method>
    <method name="X509_policy_tree_get0_user_policies" result="STACK_OF(X509_POLICY_NODE) *">
      <arg name="tree" type="const X509_POLICY_TREE *" m68kreg="a0"/>
    </method>
    <method name="BIO_get_callback_arg" result="char *">
      <arg name="b" type="const BIO *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_add1_attr_by_NID" result="int">
      <arg name="key" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="type" type="int" m68kreg="d1"/>
      <arg name="bytes" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d2"/>
    </method>
    <method name="ENGINE_get_RSA" result="const RSA_METHOD *">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_DSA" result="const DSA_METHOD *">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_DH" result="const DH_METHOD *">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_RAND" result="const RAND_METHOD *">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_ciphers" result="ENGINE_CIPHERS_PTR">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_digests" result="ENGINE_DIGESTS_PTR">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_init" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_finish" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="OCSP_sendreq_new" result="OCSP_REQ_CTX *">
      <arg name="io" type="BIO *" m68kreg="a0"/>
      <arg name="path" type="char *" m68kreg="a1"/>
      <arg name="req" type="OCSP_REQUEST *" m68kreg="a2"/>
      <arg name="maxline" type="int" m68kreg="a3"/>
    </method>
    <method name="OCSP_sendreq_nbio" result="int">
      <arg name="presp" type="OCSP_RESPONSE **" m68kreg="a0"/>
      <arg name="rctx" type="OCSP_REQ_CTX *" m68kreg="a1"/>
    </method>
    <method name="OCSP_REQ_CTX_free" result="void">
      <arg name="rctx" type="OCSP_REQ_CTX *" m68kreg="a0"/>
    </method>
	</interface>
</library>
