
/* This file was generated by idltool 53.7. Do not edit */

#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif
#ifndef EXEC_EXEC_H
#include <exec/exec.h>
#endif
#ifndef EXEC_INTERFACES_H
#include <exec/interfaces.h>
#endif

#ifndef DOS_DOS_H
#include <dos/dos.h>
#endif
#ifndef AMISSL_AMISSL_H
#include <amissl/amissl.h>
#endif

extern ULONG                VARARGS68K _AmiSSL_Obtain(struct AmiSSLIFace *);
extern ULONG                VARARGS68K _AmiSSL_Release(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_InternalInitAmiSSL(struct AmiSSLIFace *, void * amisslinit);
extern long                 VARARGS68K _AmiSSL_InitAmiSSLA(struct AmiSSLIFace *, struct TagItem * tagList);
extern long                 VARARGS68K _AmiSSL_InitAmiSSL(struct AmiSSLIFace *, ...);
extern long                 VARARGS68K _AmiSSL_CleanupAmiSSLA(struct AmiSSLIFace *, struct TagItem * tagList);
extern long                 VARARGS68K _AmiSSL_CleanupAmiSSL(struct AmiSSLIFace *, ...);
extern ASN1_TYPE *          VARARGS68K _AmiSSL_ASN1_TYPE_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ASN1_TYPE_free(struct AmiSSLIFace *, ASN1_TYPE * a);
extern ASN1_TYPE *          VARARGS68K _AmiSSL_d2i_ASN1_TYPE(struct AmiSSLIFace *, ASN1_TYPE ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_ASN1_TYPE(struct AmiSSLIFace *, ASN1_TYPE * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ASN1_ANY_it(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_ASN1_TYPE_get(struct AmiSSLIFace *, ASN1_TYPE * a);
extern void                 VARARGS68K _AmiSSL_ASN1_TYPE_set(struct AmiSSLIFace *, ASN1_TYPE * a, int type, void * value);
extern ASN1_OBJECT *        VARARGS68K _AmiSSL_ASN1_OBJECT_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ASN1_OBJECT_free(struct AmiSSLIFace *, ASN1_OBJECT * a);
extern int                  VARARGS68K _AmiSSL_i2d_ASN1_OBJECT(struct AmiSSLIFace *, ASN1_OBJECT * a, unsigned char ** pp);
extern ASN1_OBJECT *        VARARGS68K _AmiSSL_c2i_ASN1_OBJECT(struct AmiSSLIFace *, ASN1_OBJECT ** a, const unsigned char ** pp, long length);
extern ASN1_OBJECT *        VARARGS68K _AmiSSL_d2i_ASN1_OBJECT(struct AmiSSLIFace *, ASN1_OBJECT ** a, const unsigned char ** pp, long length);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ASN1_OBJECT_it(struct AmiSSLIFace *);
extern ASN1_STRING *        VARARGS68K _AmiSSL_ASN1_STRING_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ASN1_STRING_free(struct AmiSSLIFace *, ASN1_STRING * a);
extern ASN1_STRING *        VARARGS68K _AmiSSL_ASN1_STRING_dup(struct AmiSSLIFace *, ASN1_STRING * a);
extern ASN1_STRING *        VARARGS68K _AmiSSL_ASN1_STRING_type_new(struct AmiSSLIFace *, int type);
extern int                  VARARGS68K _AmiSSL_ASN1_STRING_cmp(struct AmiSSLIFace *, ASN1_STRING * a, ASN1_STRING * b);
extern int                  VARARGS68K _AmiSSL_ASN1_STRING_set(struct AmiSSLIFace *, ASN1_STRING * str, const void * data, int len);
extern int                  VARARGS68K _AmiSSL_ASN1_STRING_length(struct AmiSSLIFace *, ASN1_STRING * x);
extern void                 VARARGS68K _AmiSSL_ASN1_STRING_length_set(struct AmiSSLIFace *, ASN1_STRING * x, int n);
extern int                  VARARGS68K _AmiSSL_ASN1_STRING_type(struct AmiSSLIFace *, ASN1_STRING * x);
extern unsigned char *      VARARGS68K _AmiSSL_ASN1_STRING_data(struct AmiSSLIFace *, ASN1_STRING * x);
extern ASN1_BIT_STRING *    VARARGS68K _AmiSSL_ASN1_BIT_STRING_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ASN1_BIT_STRING_free(struct AmiSSLIFace *, ASN1_BIT_STRING * a);
extern ASN1_BIT_STRING *    VARARGS68K _AmiSSL_d2i_ASN1_BIT_STRING(struct AmiSSLIFace *, ASN1_BIT_STRING ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_ASN1_BIT_STRING(struct AmiSSLIFace *, ASN1_BIT_STRING * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ASN1_BIT_STRING_it(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_i2c_ASN1_BIT_STRING(struct AmiSSLIFace *, ASN1_BIT_STRING * a, unsigned char ** pp);
extern ASN1_BIT_STRING *    VARARGS68K _AmiSSL_c2i_ASN1_BIT_STRING(struct AmiSSLIFace *, ASN1_BIT_STRING ** a, const unsigned char ** pp, long length);
extern int                  VARARGS68K _AmiSSL_ASN1_BIT_STRING_set(struct AmiSSLIFace *, ASN1_BIT_STRING * a, unsigned char * d, int length);
extern int                  VARARGS68K _AmiSSL_ASN1_BIT_STRING_set_bit(struct AmiSSLIFace *, ASN1_BIT_STRING * a, int n, int value);
extern int                  VARARGS68K _AmiSSL_ASN1_BIT_STRING_get_bit(struct AmiSSLIFace *, ASN1_BIT_STRING * a, int n);
extern int                  VARARGS68K _AmiSSL_ASN1_BIT_STRING_name_print(struct AmiSSLIFace *, BIO * out, ASN1_BIT_STRING * bs, BIT_STRING_BITNAME * tbl, int indent);
extern int                  VARARGS68K _AmiSSL_ASN1_BIT_STRING_num_asc(struct AmiSSLIFace *, char * name, BIT_STRING_BITNAME * tbl);
extern int                  VARARGS68K _AmiSSL_ASN1_BIT_STRING_set_asc(struct AmiSSLIFace *, ASN1_BIT_STRING * bs, char * name, int value, BIT_STRING_BITNAME * tbl);
extern int                  VARARGS68K _AmiSSL_i2d_ASN1_BOOLEAN(struct AmiSSLIFace *, int a, unsigned char ** pp);
extern int                  VARARGS68K _AmiSSL_d2i_ASN1_BOOLEAN(struct AmiSSLIFace *, int * a, const unsigned char ** pp, long length);
extern ASN1_INTEGER *       VARARGS68K _AmiSSL_ASN1_INTEGER_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ASN1_INTEGER_free(struct AmiSSLIFace *, ASN1_INTEGER * a);
extern ASN1_INTEGER *       VARARGS68K _AmiSSL_d2i_ASN1_INTEGER(struct AmiSSLIFace *, ASN1_INTEGER ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_ASN1_INTEGER(struct AmiSSLIFace *, ASN1_INTEGER * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ASN1_INTEGER_it(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_i2c_ASN1_INTEGER(struct AmiSSLIFace *, ASN1_INTEGER * a, unsigned char ** pp);
extern ASN1_INTEGER *       VARARGS68K _AmiSSL_c2i_ASN1_INTEGER(struct AmiSSLIFace *, ASN1_INTEGER ** a, const unsigned char ** pp, long length);
extern ASN1_INTEGER *       VARARGS68K _AmiSSL_d2i_ASN1_UINTEGER(struct AmiSSLIFace *, ASN1_INTEGER ** a, const unsigned char ** pp, long length);
extern ASN1_INTEGER *       VARARGS68K _AmiSSL_ASN1_INTEGER_dup(struct AmiSSLIFace *, ASN1_INTEGER * x);
extern int                  VARARGS68K _AmiSSL_ASN1_INTEGER_cmp(struct AmiSSLIFace *, ASN1_INTEGER * x, ASN1_INTEGER * y);
extern ASN1_ENUMERATED *    VARARGS68K _AmiSSL_ASN1_ENUMERATED_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ASN1_ENUMERATED_free(struct AmiSSLIFace *, ASN1_ENUMERATED * a);
extern ASN1_ENUMERATED *    VARARGS68K _AmiSSL_d2i_ASN1_ENUMERATED(struct AmiSSLIFace *, ASN1_ENUMERATED ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_ASN1_ENUMERATED(struct AmiSSLIFace *, ASN1_ENUMERATED * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ASN1_ENUMERATED_it(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_ASN1_UTCTIME_check(struct AmiSSLIFace *, ASN1_UTCTIME * a);
extern ASN1_UTCTIME *       VARARGS68K _AmiSSL_ASN1_UTCTIME_set(struct AmiSSLIFace *, ASN1_UTCTIME * s, time_t t);
extern int                  VARARGS68K _AmiSSL_ASN1_UTCTIME_set_string(struct AmiSSLIFace *, ASN1_UTCTIME * s, char * str);
extern int                  VARARGS68K _AmiSSL_ASN1_UTCTIME_cmp_time_t(struct AmiSSLIFace *, const ASN1_UTCTIME * s, time_t t);
extern int                  VARARGS68K _AmiSSL_ASN1_GENERALIZEDTIME_check(struct AmiSSLIFace *, ASN1_GENERALIZEDTIME * a);
extern ASN1_GENERALIZEDTIME * VARARGS68K _AmiSSL_ASN1_GENERALIZEDTIME_set(struct AmiSSLIFace *, ASN1_GENERALIZEDTIME * s, time_t t);
extern int                  VARARGS68K _AmiSSL_ASN1_GENERALIZEDTIME_set_string(struct AmiSSLIFace *, ASN1_GENERALIZEDTIME * s, char * str);
extern ASN1_OCTET_STRING *  VARARGS68K _AmiSSL_ASN1_OCTET_STRING_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ASN1_OCTET_STRING_free(struct AmiSSLIFace *, ASN1_OCTET_STRING * a);
extern ASN1_OCTET_STRING *  VARARGS68K _AmiSSL_d2i_ASN1_OCTET_STRING(struct AmiSSLIFace *, ASN1_OCTET_STRING ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_ASN1_OCTET_STRING(struct AmiSSLIFace *, ASN1_OCTET_STRING * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ASN1_OCTET_STRING_it(struct AmiSSLIFace *);
extern ASN1_OCTET_STRING *  VARARGS68K _AmiSSL_ASN1_OCTET_STRING_dup(struct AmiSSLIFace *, ASN1_OCTET_STRING * a);
extern int                  VARARGS68K _AmiSSL_ASN1_OCTET_STRING_cmp(struct AmiSSLIFace *, ASN1_OCTET_STRING * a, ASN1_OCTET_STRING * b);
extern int                  VARARGS68K _AmiSSL_ASN1_OCTET_STRING_set(struct AmiSSLIFace *, ASN1_OCTET_STRING * str, unsigned char * data, int len);
extern ASN1_VISIBLESTRING * VARARGS68K _AmiSSL_ASN1_VISIBLESTRING_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ASN1_VISIBLESTRING_free(struct AmiSSLIFace *, ASN1_VISIBLESTRING * a);
extern ASN1_VISIBLESTRING * VARARGS68K _AmiSSL_d2i_ASN1_VISIBLESTRING(struct AmiSSLIFace *, ASN1_VISIBLESTRING ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_ASN1_VISIBLESTRING(struct AmiSSLIFace *, ASN1_VISIBLESTRING * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ASN1_VISIBLESTRING_it(struct AmiSSLIFace *);
extern ASN1_UNIVERSALSTRING * VARARGS68K _AmiSSL_ASN1_UNIVERSALSTRING_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ASN1_UNIVERSALSTRING_free(struct AmiSSLIFace *, ASN1_UNIVERSALSTRING * a);
extern ASN1_UNIVERSALSTRING * VARARGS68K _AmiSSL_d2i_ASN1_UNIVERSALSTRING(struct AmiSSLIFace *, ASN1_UNIVERSALSTRING ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_ASN1_UNIVERSALSTRING(struct AmiSSLIFace *, ASN1_UNIVERSALSTRING * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ASN1_UNIVERSALSTRING_it(struct AmiSSLIFace *);
extern ASN1_UTF8STRING *    VARARGS68K _AmiSSL_ASN1_UTF8STRING_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ASN1_UTF8STRING_free(struct AmiSSLIFace *, ASN1_UTF8STRING * a);
extern ASN1_UTF8STRING *    VARARGS68K _AmiSSL_d2i_ASN1_UTF8STRING(struct AmiSSLIFace *, ASN1_UTF8STRING ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_ASN1_UTF8STRING(struct AmiSSLIFace *, ASN1_UTF8STRING * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ASN1_UTF8STRING_it(struct AmiSSLIFace *);
extern ASN1_NULL *          VARARGS68K _AmiSSL_ASN1_NULL_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ASN1_NULL_free(struct AmiSSLIFace *, ASN1_NULL * a);
extern ASN1_NULL *          VARARGS68K _AmiSSL_d2i_ASN1_NULL(struct AmiSSLIFace *, ASN1_NULL ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_ASN1_NULL(struct AmiSSLIFace *, ASN1_NULL * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ASN1_NULL_it(struct AmiSSLIFace *);
extern ASN1_BMPSTRING *     VARARGS68K _AmiSSL_ASN1_BMPSTRING_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ASN1_BMPSTRING_free(struct AmiSSLIFace *, ASN1_BMPSTRING * a);
extern ASN1_BMPSTRING *     VARARGS68K _AmiSSL_d2i_ASN1_BMPSTRING(struct AmiSSLIFace *, ASN1_BMPSTRING ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_ASN1_BMPSTRING(struct AmiSSLIFace *, ASN1_BMPSTRING * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ASN1_BMPSTRING_it(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_UTF8_getc(struct AmiSSLIFace *, const unsigned char * str, int len, unsigned long * val);
extern int                  VARARGS68K _AmiSSL_UTF8_putc(struct AmiSSLIFace *, unsigned char * str, int len, unsigned long value);
extern ASN1_STRING *        VARARGS68K _AmiSSL_ASN1_PRINTABLE_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ASN1_PRINTABLE_free(struct AmiSSLIFace *, ASN1_STRING * a);
extern ASN1_STRING *        VARARGS68K _AmiSSL_d2i_ASN1_PRINTABLE(struct AmiSSLIFace *, ASN1_STRING ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_ASN1_PRINTABLE(struct AmiSSLIFace *, ASN1_STRING * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ASN1_PRINTABLE_it(struct AmiSSLIFace *);
extern ASN1_STRING *        VARARGS68K _AmiSSL_DIRECTORYSTRING_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_DIRECTORYSTRING_free(struct AmiSSLIFace *, ASN1_STRING * a);
extern ASN1_STRING *        VARARGS68K _AmiSSL_d2i_DIRECTORYSTRING(struct AmiSSLIFace *, ASN1_STRING ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_DIRECTORYSTRING(struct AmiSSLIFace *, ASN1_STRING * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_DIRECTORYSTRING_it(struct AmiSSLIFace *);
extern ASN1_STRING *        VARARGS68K _AmiSSL_DISPLAYTEXT_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_DISPLAYTEXT_free(struct AmiSSLIFace *, ASN1_STRING * a);
extern ASN1_STRING *        VARARGS68K _AmiSSL_d2i_DISPLAYTEXT(struct AmiSSLIFace *, ASN1_STRING ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_DISPLAYTEXT(struct AmiSSLIFace *, ASN1_STRING * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_DISPLAYTEXT_it(struct AmiSSLIFace *);
extern ASN1_PRINTABLESTRING * VARARGS68K _AmiSSL_ASN1_PRINTABLESTRING_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ASN1_PRINTABLESTRING_free(struct AmiSSLIFace *, ASN1_PRINTABLESTRING * a);
extern ASN1_PRINTABLESTRING * VARARGS68K _AmiSSL_d2i_ASN1_PRINTABLESTRING(struct AmiSSLIFace *, ASN1_PRINTABLESTRING ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_ASN1_PRINTABLESTRING(struct AmiSSLIFace *, ASN1_PRINTABLESTRING * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ASN1_PRINTABLESTRING_it(struct AmiSSLIFace *);
extern ASN1_T61STRING *     VARARGS68K _AmiSSL_ASN1_T61STRING_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ASN1_T61STRING_free(struct AmiSSLIFace *, ASN1_T61STRING * a);
extern ASN1_T61STRING *     VARARGS68K _AmiSSL_d2i_ASN1_T61STRING(struct AmiSSLIFace *, ASN1_T61STRING ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_ASN1_T61STRING(struct AmiSSLIFace *, ASN1_T61STRING * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ASN1_T61STRING_it(struct AmiSSLIFace *);
extern ASN1_IA5STRING *     VARARGS68K _AmiSSL_ASN1_IA5STRING_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ASN1_IA5STRING_free(struct AmiSSLIFace *, ASN1_IA5STRING * a);
extern ASN1_IA5STRING *     VARARGS68K _AmiSSL_d2i_ASN1_IA5STRING(struct AmiSSLIFace *, ASN1_IA5STRING ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_ASN1_IA5STRING(struct AmiSSLIFace *, ASN1_IA5STRING * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ASN1_IA5STRING_it(struct AmiSSLIFace *);
extern ASN1_GENERALSTRING * VARARGS68K _AmiSSL_ASN1_GENERALSTRING_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ASN1_GENERALSTRING_free(struct AmiSSLIFace *, ASN1_GENERALSTRING * a);
extern ASN1_GENERALSTRING * VARARGS68K _AmiSSL_d2i_ASN1_GENERALSTRING(struct AmiSSLIFace *, ASN1_GENERALSTRING ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_ASN1_GENERALSTRING(struct AmiSSLIFace *, ASN1_GENERALSTRING * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ASN1_GENERALSTRING_it(struct AmiSSLIFace *);
extern ASN1_UTCTIME *       VARARGS68K _AmiSSL_ASN1_UTCTIME_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ASN1_UTCTIME_free(struct AmiSSLIFace *, ASN1_UTCTIME * a);
extern ASN1_UTCTIME *       VARARGS68K _AmiSSL_d2i_ASN1_UTCTIME(struct AmiSSLIFace *, ASN1_UTCTIME ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_ASN1_UTCTIME(struct AmiSSLIFace *, ASN1_UTCTIME * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ASN1_UTCTIME_it(struct AmiSSLIFace *);
extern ASN1_GENERALIZEDTIME * VARARGS68K _AmiSSL_ASN1_GENERALIZEDTIME_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ASN1_GENERALIZEDTIME_free(struct AmiSSLIFace *, ASN1_GENERALIZEDTIME * a);
extern ASN1_GENERALIZEDTIME * VARARGS68K _AmiSSL_d2i_ASN1_GENERALIZEDTIME(struct AmiSSLIFace *, ASN1_GENERALIZEDTIME ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_ASN1_GENERALIZEDTIME(struct AmiSSLIFace *, ASN1_GENERALIZEDTIME * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ASN1_GENERALIZEDTIME_it(struct AmiSSLIFace *);
extern ASN1_TIME *          VARARGS68K _AmiSSL_ASN1_TIME_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ASN1_TIME_free(struct AmiSSLIFace *, ASN1_TIME * a);
extern ASN1_TIME *          VARARGS68K _AmiSSL_d2i_ASN1_TIME(struct AmiSSLIFace *, ASN1_TIME ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_ASN1_TIME(struct AmiSSLIFace *, ASN1_TIME * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ASN1_TIME_it(struct AmiSSLIFace *);
extern ASN1_TIME *          VARARGS68K _AmiSSL_ASN1_TIME_set(struct AmiSSLIFace *, ASN1_TIME * s, time_t t);
extern int                  VARARGS68K _AmiSSL_ASN1_TIME_check(struct AmiSSLIFace *, ASN1_TIME * t);
extern ASN1_GENERALIZEDTIME * VARARGS68K _AmiSSL_ASN1_TIME_to_generalizedtime(struct AmiSSLIFace *, ASN1_TIME * t, ASN1_GENERALIZEDTIME ** out);
extern int                  VARARGS68K _AmiSSL_i2d_ASN1_SET(struct AmiSSLIFace *, STACK_OF(OPENSSL_BLOCK) * a, unsigned char ** pp, i2d_of_void * i2d, int ex_tag, int ex_class, int is_set);
extern STACK_OF(OPENSSL_BLOCK) * VARARGS68K _AmiSSL_d2i_ASN1_SET(struct AmiSSLIFace *, STACK_OF(OPENSSL_BLOCK) ** a, const unsigned char ** pp, long length, d2i_of_void * d2i, void (*free_func)(OPENSSL_BLOCK), int ex_tag, int ex_class);
extern int                  VARARGS68K _AmiSSL_i2a_ASN1_INTEGER(struct AmiSSLIFace *, BIO * bp, ASN1_INTEGER * a);
extern int                  VARARGS68K _AmiSSL_a2i_ASN1_INTEGER(struct AmiSSLIFace *, BIO * bp, ASN1_INTEGER * bs, char * buf, int size);
extern int                  VARARGS68K _AmiSSL_i2a_ASN1_ENUMERATED(struct AmiSSLIFace *, BIO * bp, ASN1_ENUMERATED * a);
extern int                  VARARGS68K _AmiSSL_a2i_ASN1_ENUMERATED(struct AmiSSLIFace *, BIO * bp, ASN1_ENUMERATED * bs, char * buf, int size);
extern int                  VARARGS68K _AmiSSL_i2a_ASN1_OBJECT(struct AmiSSLIFace *, BIO * bp, ASN1_OBJECT * a);
extern int                  VARARGS68K _AmiSSL_a2i_ASN1_STRING(struct AmiSSLIFace *, BIO * bp, ASN1_STRING * bs, char * buf, int size);
extern int                  VARARGS68K _AmiSSL_i2a_ASN1_STRING(struct AmiSSLIFace *, BIO * bp, ASN1_STRING * a, int type);
extern int                  VARARGS68K _AmiSSL_i2t_ASN1_OBJECT(struct AmiSSLIFace *, char * buf, int buf_len, ASN1_OBJECT * a);
extern int                  VARARGS68K _AmiSSL_a2d_ASN1_OBJECT(struct AmiSSLIFace *, unsigned char * out, int olen, const char * buf, int num);
extern ASN1_OBJECT *        VARARGS68K _AmiSSL_ASN1_OBJECT_create(struct AmiSSLIFace *, int nid, unsigned char * data, int len, const char * sn, const char * ln);
extern int                  VARARGS68K _AmiSSL_ASN1_INTEGER_set(struct AmiSSLIFace *, ASN1_INTEGER * a, long v);
extern long                 VARARGS68K _AmiSSL_ASN1_INTEGER_get(struct AmiSSLIFace *, ASN1_INTEGER * a);
extern ASN1_INTEGER *       VARARGS68K _AmiSSL_BN_to_ASN1_INTEGER(struct AmiSSLIFace *, BIGNUM * bn, ASN1_INTEGER * ai);
extern BIGNUM *             VARARGS68K _AmiSSL_ASN1_INTEGER_to_BN(struct AmiSSLIFace *, ASN1_INTEGER * ai, BIGNUM * bn);
extern int                  VARARGS68K _AmiSSL_ASN1_ENUMERATED_set(struct AmiSSLIFace *, ASN1_ENUMERATED * a, long v);
extern long                 VARARGS68K _AmiSSL_ASN1_ENUMERATED_get(struct AmiSSLIFace *, ASN1_ENUMERATED * a);
extern ASN1_ENUMERATED *    VARARGS68K _AmiSSL_BN_to_ASN1_ENUMERATED(struct AmiSSLIFace *, BIGNUM * bn, ASN1_ENUMERATED * ai);
extern BIGNUM *             VARARGS68K _AmiSSL_ASN1_ENUMERATED_to_BN(struct AmiSSLIFace *, ASN1_ENUMERATED * ai, BIGNUM * bn);
extern int                  VARARGS68K _AmiSSL_ASN1_PRINTABLE_type(struct AmiSSLIFace *, const unsigned char * s, int max);
extern int                  VARARGS68K _AmiSSL_i2d_ASN1_bytes(struct AmiSSLIFace *, ASN1_STRING * a, unsigned char ** pp, int tag, int xclass);
extern ASN1_STRING *        VARARGS68K _AmiSSL_d2i_ASN1_bytes(struct AmiSSLIFace *, ASN1_STRING ** a, const unsigned char ** pp, long length, int Ptag, int Pclass);
extern unsigned long        VARARGS68K _AmiSSL_ASN1_tag2bit(struct AmiSSLIFace *, int tag);
extern ASN1_STRING *        VARARGS68K _AmiSSL_d2i_ASN1_type_bytes(struct AmiSSLIFace *, ASN1_STRING ** a, const unsigned char ** pp, long length, int type);
extern int                  VARARGS68K _AmiSSL_asn1_Finish(struct AmiSSLIFace *, ASN1_CTX * c);
extern int                  VARARGS68K _AmiSSL_ASN1_get_object(struct AmiSSLIFace *, const unsigned char ** pp, long * plength, int * ptag, int * pclass, long omax);
extern int                  VARARGS68K _AmiSSL_ASN1_check_infinite_end(struct AmiSSLIFace *, unsigned char ** p, long len);
extern void                 VARARGS68K _AmiSSL_ASN1_put_object(struct AmiSSLIFace *, unsigned char ** pp, int constructed, int length, int tag, int xclass);
extern int                  VARARGS68K _AmiSSL_ASN1_object_size(struct AmiSSLIFace *, int constructed, int length, int tag);
extern void *               VARARGS68K _AmiSSL_ASN1_dup(struct AmiSSLIFace *, i2d_of_void * i2d, d2i_of_void * d2i, char * x);
extern void *               VARARGS68K _AmiSSL_ASN1_item_dup(struct AmiSSLIFace *, const ASN1_ITEM * it, void * x);
extern int                  VARARGS68K _AmiSSL_ASN1_STRING_to_UTF8(struct AmiSSLIFace *, unsigned char ** out, ASN1_STRING * in);
extern void *               VARARGS68K _AmiSSL_ASN1_d2i_bio(struct AmiSSLIFace *, void * (*xnew)(void), d2i_of_void * d2i, BIO * in, void ** x);
extern void *               VARARGS68K _AmiSSL_ASN1_item_d2i_bio(struct AmiSSLIFace *, const ASN1_ITEM * it, BIO * in, void * x);
extern int                  VARARGS68K _AmiSSL_ASN1_i2d_bio(struct AmiSSLIFace *, i2d_of_void * i2d, BIO * out, unsigned char * x);
extern int                  VARARGS68K _AmiSSL_ASN1_item_i2d_bio(struct AmiSSLIFace *, const ASN1_ITEM * it, BIO * out, void * x);
extern int                  VARARGS68K _AmiSSL_ASN1_UTCTIME_print(struct AmiSSLIFace *, BIO * fp, ASN1_UTCTIME * a);
extern int                  VARARGS68K _AmiSSL_ASN1_GENERALIZEDTIME_print(struct AmiSSLIFace *, BIO * fp, ASN1_GENERALIZEDTIME * a);
extern int                  VARARGS68K _AmiSSL_ASN1_TIME_print(struct AmiSSLIFace *, BIO * fp, ASN1_TIME * a);
extern int                  VARARGS68K _AmiSSL_ASN1_STRING_print(struct AmiSSLIFace *, BIO * bp, ASN1_STRING * v);
extern int                  VARARGS68K _AmiSSL_ASN1_STRING_print_ex(struct AmiSSLIFace *, BIO * out, ASN1_STRING * str, unsigned long flags);
extern int                  VARARGS68K _AmiSSL_ASN1_parse(struct AmiSSLIFace *, BIO * bp, unsigned char * pp, long len, int indent);
extern int                  VARARGS68K _AmiSSL_ASN1_parse_dump(struct AmiSSLIFace *, BIO * bp, unsigned char * pp, long len, int indent, int dump);
extern const char *         VARARGS68K _AmiSSL_ASN1_tag2str(struct AmiSSLIFace *, int tag);
extern int                  VARARGS68K _AmiSSL_ASN1_UNIVERSALSTRING_to_string(struct AmiSSLIFace *, ASN1_UNIVERSALSTRING * s);
extern int                  VARARGS68K _AmiSSL_ASN1_TYPE_set_octetstring(struct AmiSSLIFace *, ASN1_TYPE * a, unsigned char * data, int len);
extern int                  VARARGS68K _AmiSSL_ASN1_TYPE_get_octetstring(struct AmiSSLIFace *, ASN1_TYPE * a, unsigned char * data, int max_len);
extern int                  VARARGS68K _AmiSSL_ASN1_TYPE_set_int_octetstring(struct AmiSSLIFace *, ASN1_TYPE * a, long num, unsigned char * data, int len);
extern int                  VARARGS68K _AmiSSL_ASN1_TYPE_get_int_octetstring(struct AmiSSLIFace *, ASN1_TYPE * a, long * num, unsigned char * data, int max_len);
extern STACK_OF(OPENSSL_BLOCK) * VARARGS68K _AmiSSL_ASN1_seq_unpack(struct AmiSSLIFace *, const unsigned char * buf, int len, d2i_of_void * d2i, void (*free_func)(OPENSSL_BLOCK));
extern unsigned char *      VARARGS68K _AmiSSL_ASN1_seq_pack(struct AmiSSLIFace *, STACK_OF(OPENSSL_BLOCK) * safes, i2d_of_void * i2d, unsigned char ** buf, int * len);
extern void *               VARARGS68K _AmiSSL_ASN1_unpack_string(struct AmiSSLIFace *, ASN1_STRING * oct, d2i_of_void * d2i);
extern void *               VARARGS68K _AmiSSL_ASN1_item_unpack(struct AmiSSLIFace *, ASN1_STRING * oct, const ASN1_ITEM * it);
extern ASN1_STRING *        VARARGS68K _AmiSSL_ASN1_pack_string(struct AmiSSLIFace *, void * obj, int (*i2d)(), ASN1_OCTET_STRING ** oct);
extern ASN1_STRING *        VARARGS68K _AmiSSL_ASN1_item_pack(struct AmiSSLIFace *, void * obj, const ASN1_ITEM * it, ASN1_OCTET_STRING ** oct);
extern void                 VARARGS68K _AmiSSL_ASN1_STRING_set_default_mask(struct AmiSSLIFace *, unsigned long mask);
extern int                  VARARGS68K _AmiSSL_ASN1_STRING_set_default_mask_asc(struct AmiSSLIFace *, char * p);
extern unsigned long        VARARGS68K _AmiSSL_ASN1_STRING_get_default_mask(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_ASN1_mbstring_copy(struct AmiSSLIFace *, ASN1_STRING ** out, const unsigned char * in, int len, int inform, unsigned long mask);
extern int                  VARARGS68K _AmiSSL_ASN1_mbstring_ncopy(struct AmiSSLIFace *, ASN1_STRING ** out, const unsigned char * in, int len, int inform, unsigned long mask, long minsize, long maxsize);
extern ASN1_STRING *        VARARGS68K _AmiSSL_ASN1_STRING_set_by_NID(struct AmiSSLIFace *, ASN1_STRING ** out, const unsigned char * in, int inlen, int inform, int nid);
extern ASN1_STRING_TABLE *  VARARGS68K _AmiSSL_ASN1_STRING_TABLE_get(struct AmiSSLIFace *, int nid);
extern int                  VARARGS68K _AmiSSL_ASN1_STRING_TABLE_add(struct AmiSSLIFace *, int a, long b, long c, unsigned long d, unsigned long e);
extern void                 VARARGS68K _AmiSSL_ASN1_STRING_TABLE_cleanup(struct AmiSSLIFace *);
extern ASN1_VALUE *         VARARGS68K _AmiSSL_ASN1_item_new(struct AmiSSLIFace *, const ASN1_ITEM * it);
extern void                 VARARGS68K _AmiSSL_ASN1_item_free(struct AmiSSLIFace *, ASN1_VALUE * val, const ASN1_ITEM * it);
extern ASN1_VALUE *         VARARGS68K _AmiSSL_ASN1_item_d2i(struct AmiSSLIFace *, ASN1_VALUE ** val, const unsigned char ** in, long len, const ASN1_ITEM * it);
extern int                  VARARGS68K _AmiSSL_ASN1_item_i2d(struct AmiSSLIFace *, ASN1_VALUE * val, unsigned char ** out, const ASN1_ITEM * it);
extern void                 VARARGS68K _AmiSSL_ASN1_add_oid_module(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ERR_load_ASN1_strings(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_asn1_GetSequence(struct AmiSSLIFace *, ASN1_const_CTX * c, long * length);
extern void                 VARARGS68K _AmiSSL_asn1_add_error(struct AmiSSLIFace *, unsigned char * address, int offset);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ASN1_BOOLEAN_it(struct AmiSSLIFace *);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ASN1_TBOOLEAN_it(struct AmiSSLIFace *);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ASN1_FBOOLEAN_it(struct AmiSSLIFace *);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ASN1_SEQUENCE_it(struct AmiSSLIFace *);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_CBIGNUM_it(struct AmiSSLIFace *);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_BIGNUM_it(struct AmiSSLIFace *);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_LONG_it(struct AmiSSLIFace *);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ZLONG_it(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_ASN1_item_ex_new(struct AmiSSLIFace *, ASN1_VALUE ** pval, const ASN1_ITEM * it);
extern void                 VARARGS68K _AmiSSL_ASN1_item_ex_free(struct AmiSSLIFace *, ASN1_VALUE ** pval, const ASN1_ITEM * it);
extern int                  VARARGS68K _AmiSSL_ASN1_template_new(struct AmiSSLIFace *, ASN1_VALUE ** pval, const ASN1_TEMPLATE * tt);
extern int                  VARARGS68K _AmiSSL_ASN1_primitive_new(struct AmiSSLIFace *, ASN1_VALUE ** pval, const ASN1_ITEM * it);
extern void                 VARARGS68K _AmiSSL_ASN1_template_free(struct AmiSSLIFace *, ASN1_VALUE ** pval, const ASN1_TEMPLATE * tt);
extern int                  VARARGS68K _AmiSSL_ASN1_template_d2i(struct AmiSSLIFace *, ASN1_VALUE ** pval, const unsigned char ** in, long len, const ASN1_TEMPLATE * tt);
extern int                  VARARGS68K _AmiSSL_ASN1_item_ex_d2i(struct AmiSSLIFace *, ASN1_VALUE ** pval, const unsigned char ** in, long len, const ASN1_ITEM * it, int tag, int aclass, char opt, ASN1_TLC * ctx);
extern int                  VARARGS68K _AmiSSL_ASN1_item_ex_i2d(struct AmiSSLIFace *, ASN1_VALUE ** pval, unsigned char ** out, const ASN1_ITEM * it, int tag, int aclass);
extern int                  VARARGS68K _AmiSSL_ASN1_template_i2d(struct AmiSSLIFace *, ASN1_VALUE ** pval, unsigned char ** out, const ASN1_TEMPLATE * tt);
extern void                 VARARGS68K _AmiSSL_ASN1_primitive_free(struct AmiSSLIFace *, ASN1_VALUE ** pval, const ASN1_ITEM * it);
extern int                  VARARGS68K _AmiSSL_asn1_ex_i2c(struct AmiSSLIFace *, ASN1_VALUE ** pval, unsigned char * cont, int * putype, const ASN1_ITEM * it);
extern int                  VARARGS68K _AmiSSL_asn1_ex_c2i(struct AmiSSLIFace *, ASN1_VALUE ** pval, unsigned char * cont, int len, int utype, char * free_cont, const ASN1_ITEM * it);
extern int                  VARARGS68K _AmiSSL_asn1_get_choice_selector(struct AmiSSLIFace *, ASN1_VALUE ** pval, const ASN1_ITEM * it);
extern int                  VARARGS68K _AmiSSL_asn1_set_choice_selector(struct AmiSSLIFace *, ASN1_VALUE ** pval, int value, const ASN1_ITEM * it);
extern ASN1_VALUE **        VARARGS68K _AmiSSL_asn1_get_field_ptr(struct AmiSSLIFace *, ASN1_VALUE ** pval, const ASN1_TEMPLATE * tt);
extern const ASN1_TEMPLATE * VARARGS68K _AmiSSL_asn1_do_adb(struct AmiSSLIFace *, ASN1_VALUE ** pval, const ASN1_TEMPLATE * tt, int nullerr);
extern int                  VARARGS68K _AmiSSL_asn1_do_lock(struct AmiSSLIFace *, ASN1_VALUE ** pval, int op, const ASN1_ITEM * it);
extern void                 VARARGS68K _AmiSSL_asn1_enc_init(struct AmiSSLIFace *, ASN1_VALUE ** pval, const ASN1_ITEM * it);
extern void                 VARARGS68K _AmiSSL_asn1_enc_free(struct AmiSSLIFace *, ASN1_VALUE ** pval, const ASN1_ITEM * it);
extern int                  VARARGS68K _AmiSSL_asn1_enc_restore(struct AmiSSLIFace *, int * len, unsigned char ** out, ASN1_VALUE ** pval, const ASN1_ITEM * it);
extern int                  VARARGS68K _AmiSSL_asn1_enc_save(struct AmiSSLIFace *, ASN1_VALUE ** pval, unsigned char * in, int inlen, const ASN1_ITEM * it);
extern size_t               VARARGS68K _AmiSSL_BIO_ctrl_pending(struct AmiSSLIFace *, BIO * b);
extern size_t               VARARGS68K _AmiSSL_BIO_ctrl_wpending(struct AmiSSLIFace *, BIO * b);
extern size_t               VARARGS68K _AmiSSL_BIO_ctrl_get_write_guarantee(struct AmiSSLIFace *, BIO * b);
extern size_t               VARARGS68K _AmiSSL_BIO_ctrl_get_read_request(struct AmiSSLIFace *, BIO * b);
extern int                  VARARGS68K _AmiSSL_BIO_ctrl_reset_read_request(struct AmiSSLIFace *, BIO * b);
extern int                  VARARGS68K _AmiSSL_BIO_set_ex_data(struct AmiSSLIFace *, BIO * bio, int idx, void * data);
extern void *               VARARGS68K _AmiSSL_BIO_get_ex_data(struct AmiSSLIFace *, BIO * bio, int idx);
extern int                  VARARGS68K _AmiSSL_BIO_get_ex_new_index(struct AmiSSLIFace *, long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func);
extern unsigned long        VARARGS68K _AmiSSL_BIO_number_read(struct AmiSSLIFace *, BIO * bio);
extern unsigned long        VARARGS68K _AmiSSL_BIO_number_written(struct AmiSSLIFace *, BIO * bio);
extern BIO_METHOD *         VARARGS68K _AmiSSL_BIO_s_file(struct AmiSSLIFace *);
extern BIO *                VARARGS68K _AmiSSL_BIO_new_file(struct AmiSSLIFace *, const char * filename, const char * mode);
extern BIO *                VARARGS68K _AmiSSL_BIO_new_fp_amiga(struct AmiSSLIFace *, BPTR stream, int close_flag);
extern BIO *                VARARGS68K _AmiSSL_BIO_new(struct AmiSSLIFace *, BIO_METHOD * type);
extern int                  VARARGS68K _AmiSSL_BIO_set(struct AmiSSLIFace *, BIO * a, BIO_METHOD * type);
extern int                  VARARGS68K _AmiSSL_BIO_free(struct AmiSSLIFace *, BIO * a);
extern void                 VARARGS68K _AmiSSL_BIO_vfree(struct AmiSSLIFace *, BIO * a);
extern int                  VARARGS68K _AmiSSL_BIO_read(struct AmiSSLIFace *, BIO * b, void * data, int len);
extern int                  VARARGS68K _AmiSSL_BIO_gets(struct AmiSSLIFace *, BIO * bp, char * buf, int size);
extern int                  VARARGS68K _AmiSSL_BIO_write(struct AmiSSLIFace *, BIO * b, const void * data, int len);
extern int                  VARARGS68K _AmiSSL_BIO_puts(struct AmiSSLIFace *, BIO * bp, const char * buf);
extern int                  VARARGS68K _AmiSSL_BIO_indent(struct AmiSSLIFace *, BIO * b, int indent, int max);
extern long                 VARARGS68K _AmiSSL_BIO_ctrl(struct AmiSSLIFace *, BIO * bp, int cmd, long larg, void * parg);
extern long                 VARARGS68K _AmiSSL_BIO_callback_ctrl(struct AmiSSLIFace *, BIO * b, int cmd, void (*fp)(struct bio_st *, int, const char *, int, long, long));
extern char *               VARARGS68K _AmiSSL_BIO_ptr_ctrl(struct AmiSSLIFace *, BIO * bp, int cmd, long larg);
extern long                 VARARGS68K _AmiSSL_BIO_int_ctrl(struct AmiSSLIFace *, BIO * bp, int cmd, long larg, int iarg);
extern BIO *                VARARGS68K _AmiSSL_BIO_push(struct AmiSSLIFace *, BIO * b, BIO * append);
extern BIO *                VARARGS68K _AmiSSL_BIO_pop(struct AmiSSLIFace *, BIO * b);
extern void                 VARARGS68K _AmiSSL_BIO_free_all(struct AmiSSLIFace *, BIO * a);
extern BIO *                VARARGS68K _AmiSSL_BIO_find_type(struct AmiSSLIFace *, BIO * b, int bio_type);
extern BIO *                VARARGS68K _AmiSSL_BIO_next(struct AmiSSLIFace *, BIO * b);
extern BIO *                VARARGS68K _AmiSSL_BIO_get_retry_BIO(struct AmiSSLIFace *, BIO * bio, int * reason);
extern int                  VARARGS68K _AmiSSL_BIO_get_retry_reason(struct AmiSSLIFace *, BIO * bio);
extern BIO *                VARARGS68K _AmiSSL_BIO_dup_chain(struct AmiSSLIFace *, BIO * in);
extern int                  VARARGS68K _AmiSSL_BIO_nread0(struct AmiSSLIFace *, BIO * bio, char ** buf);
extern int                  VARARGS68K _AmiSSL_BIO_nread(struct AmiSSLIFace *, BIO * bio, char ** buf, int num);
extern int                  VARARGS68K _AmiSSL_BIO_nwrite0(struct AmiSSLIFace *, BIO * bio, char ** buf);
extern int                  VARARGS68K _AmiSSL_BIO_nwrite(struct AmiSSLIFace *, BIO * bio, char ** buf, int num);
extern long                 VARARGS68K _AmiSSL_BIO_debug_callback(struct AmiSSLIFace *, BIO * bio, int cmd, const char * argp, int argi, long argl, long ret);
extern BIO_METHOD *         VARARGS68K _AmiSSL_BIO_s_mem(struct AmiSSLIFace *);
extern BIO *                VARARGS68K _AmiSSL_BIO_new_mem_buf(struct AmiSSLIFace *, void * buf, int len);
extern BIO_METHOD *         VARARGS68K _AmiSSL_BIO_s_socket(struct AmiSSLIFace *);
extern BIO_METHOD *         VARARGS68K _AmiSSL_BIO_s_connect(struct AmiSSLIFace *);
extern BIO_METHOD *         VARARGS68K _AmiSSL_BIO_s_accept(struct AmiSSLIFace *);
extern BIO_METHOD *         VARARGS68K _AmiSSL_BIO_s_fd(struct AmiSSLIFace *);
extern BIO_METHOD *         VARARGS68K _AmiSSL_BIO_s_log(struct AmiSSLIFace *);
extern BIO_METHOD *         VARARGS68K _AmiSSL_BIO_s_bio(struct AmiSSLIFace *);
extern BIO_METHOD *         VARARGS68K _AmiSSL_BIO_s_null(struct AmiSSLIFace *);
extern BIO_METHOD *         VARARGS68K _AmiSSL_BIO_f_null(struct AmiSSLIFace *);
extern BIO_METHOD *         VARARGS68K _AmiSSL_BIO_f_buffer(struct AmiSSLIFace *);
extern BIO_METHOD *         VARARGS68K _AmiSSL_BIO_f_nbio_test(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_BIO_sock_should_retry(struct AmiSSLIFace *, int i);
extern int                  VARARGS68K _AmiSSL_BIO_sock_non_fatal_error(struct AmiSSLIFace *, int error);
extern int                  VARARGS68K _AmiSSL_BIO_fd_should_retry(struct AmiSSLIFace *, int i);
extern int                  VARARGS68K _AmiSSL_BIO_fd_non_fatal_error(struct AmiSSLIFace *, int error);
extern int                  VARARGS68K _AmiSSL_BIO_dump(struct AmiSSLIFace *, BIO * b, const char * bytes, int len);
extern int                  VARARGS68K _AmiSSL_BIO_dump_indent(struct AmiSSLIFace *, BIO * b, const char * bytes, int len, int indent);
extern struct hostent *     VARARGS68K _AmiSSL_BIO_gethostbyname(struct AmiSSLIFace *, const char * name);
extern int                  VARARGS68K _AmiSSL_BIO_sock_error(struct AmiSSLIFace *, int sock);
extern int                  VARARGS68K _AmiSSL_BIO_socket_ioctl(struct AmiSSLIFace *, int fd, long type, void * arg);
extern int                  VARARGS68K _AmiSSL_BIO_socket_nbio(struct AmiSSLIFace *, int fd, int mode);
extern int                  VARARGS68K _AmiSSL_BIO_get_port(struct AmiSSLIFace *, const char * str, unsigned short * port_ptr);
extern int                  VARARGS68K _AmiSSL_BIO_get_host_ip(struct AmiSSLIFace *, const char * str, unsigned char * ip);
extern int                  VARARGS68K _AmiSSL_BIO_get_accept_socket(struct AmiSSLIFace *, char * host_port, int mode);
extern int                  VARARGS68K _AmiSSL_BIO_accept(struct AmiSSLIFace *, int sock, char ** ip_port);
extern int                  VARARGS68K _AmiSSL_BIO_sock_init(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_BIO_sock_cleanup(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_BIO_set_tcp_ndelay(struct AmiSSLIFace *, int sock, int turn_on);
extern BIO *                VARARGS68K _AmiSSL_BIO_new_socket(struct AmiSSLIFace *, int sock, int close_flag);
extern BIO *                VARARGS68K _AmiSSL_BIO_new_fd(struct AmiSSLIFace *, int fd, int close_flag);
extern BIO *                VARARGS68K _AmiSSL_BIO_new_connect(struct AmiSSLIFace *, char * host_port);
extern BIO *                VARARGS68K _AmiSSL_BIO_new_accept(struct AmiSSLIFace *, char * host_port);
extern int                  VARARGS68K _AmiSSL_BIO_new_bio_pair(struct AmiSSLIFace *, BIO ** bio1, size_t writebuf1, BIO ** bio2, size_t writebuf2);
extern void                 VARARGS68K _AmiSSL_BIO_copy_next_retry(struct AmiSSLIFace *, BIO * b);
extern int                  VARARGS68K _AmiSSL_BIO_vprintf(struct AmiSSLIFace *, BIO * bio, const char * format, VA_LIST args);
extern int                  VARARGS68K _AmiSSL_BIO_printf(struct AmiSSLIFace *, BIO * bio, const char * format, ...);
extern int                  VARARGS68K _AmiSSL_BIO_vsnprintf(struct AmiSSLIFace *, char * buf, size_t n, const char * format, VA_LIST args);
extern int                  VARARGS68K _AmiSSL_BIO_snprintf(struct AmiSSLIFace *, char * buf, size_t n, const char * format, ...);
extern void                 VARARGS68K _AmiSSL_ERR_load_BIO_strings(struct AmiSSLIFace *);
extern const BIGNUM *       VARARGS68K _AmiSSL_BN_value_one(struct AmiSSLIFace *);
extern char *               VARARGS68K _AmiSSL_BN_options(struct AmiSSLIFace *);
extern BN_CTX *             VARARGS68K _AmiSSL_BN_CTX_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_BN_CTX_init(struct AmiSSLIFace *, BN_CTX * c);
extern void                 VARARGS68K _AmiSSL_BN_CTX_free(struct AmiSSLIFace *, BN_CTX * c);
extern void                 VARARGS68K _AmiSSL_BN_CTX_start(struct AmiSSLIFace *, BN_CTX * ctx);
extern BIGNUM *             VARARGS68K _AmiSSL_BN_CTX_get(struct AmiSSLIFace *, BN_CTX * ctx);
extern void                 VARARGS68K _AmiSSL_BN_CTX_end(struct AmiSSLIFace *, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_rand(struct AmiSSLIFace *, BIGNUM * rnd, int bits, int top, int bottom);
extern int                  VARARGS68K _AmiSSL_BN_pseudo_rand(struct AmiSSLIFace *, BIGNUM * rnd, int bits, int top, int bottom);
extern int                  VARARGS68K _AmiSSL_BN_rand_range(struct AmiSSLIFace *, BIGNUM * rnd, BIGNUM * range);
extern int                  VARARGS68K _AmiSSL_BN_pseudo_rand_range(struct AmiSSLIFace *, BIGNUM * rnd, BIGNUM * range);
extern int                  VARARGS68K _AmiSSL_BN_num_bits(struct AmiSSLIFace *, const BIGNUM * a);
extern int                  VARARGS68K _AmiSSL_BN_num_bits_word(struct AmiSSLIFace *, BN_ULONG a);
extern BIGNUM *             VARARGS68K _AmiSSL_BN_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_BN_init(struct AmiSSLIFace *, BIGNUM * a);
extern void                 VARARGS68K _AmiSSL_BN_clear_free(struct AmiSSLIFace *, BIGNUM * a);
extern BIGNUM *             VARARGS68K _AmiSSL_BN_copy(struct AmiSSLIFace *, BIGNUM * a, const BIGNUM * b);
extern void                 VARARGS68K _AmiSSL_BN_swap(struct AmiSSLIFace *, BIGNUM * a, BIGNUM * b);
extern BIGNUM *             VARARGS68K _AmiSSL_BN_bin2bn(struct AmiSSLIFace *, const unsigned char * s, int len, BIGNUM * ret);
extern int                  VARARGS68K _AmiSSL_BN_bn2bin(struct AmiSSLIFace *, const BIGNUM * a, unsigned char * to);
extern BIGNUM *             VARARGS68K _AmiSSL_BN_mpi2bn(struct AmiSSLIFace *, const unsigned char * s, int len, BIGNUM * ret);
extern int                  VARARGS68K _AmiSSL_BN_bn2mpi(struct AmiSSLIFace *, const BIGNUM * a, unsigned char * to);
extern int                  VARARGS68K _AmiSSL_BN_sub(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * b);
extern int                  VARARGS68K _AmiSSL_BN_usub(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * b);
extern int                  VARARGS68K _AmiSSL_BN_uadd(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * b);
extern int                  VARARGS68K _AmiSSL_BN_add(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * b);
extern int                  VARARGS68K _AmiSSL_BN_mul(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * b, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_sqr(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_div(struct AmiSSLIFace *, BIGNUM * dv, BIGNUM * rem, const BIGNUM * m, const BIGNUM * d, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_nnmod(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * m, const BIGNUM * d, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_mod_add(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * m, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_mod_add_quick(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * m);
extern int                  VARARGS68K _AmiSSL_BN_mod_sub(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * m, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_mod_sub_quick(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * m);
extern int                  VARARGS68K _AmiSSL_BN_mod_mul(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * m, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_mod_sqr(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * m, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_mod_lshift1(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * m, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_mod_lshift1_quick(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * m);
extern int                  VARARGS68K _AmiSSL_BN_mod_lshift(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, int n, const BIGNUM * m, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_mod_lshift_quick(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, int n, const BIGNUM * m);
extern BN_ULONG             VARARGS68K _AmiSSL_BN_mod_word(struct AmiSSLIFace *, const BIGNUM * a, BN_ULONG w);
extern BN_ULONG             VARARGS68K _AmiSSL_BN_div_word(struct AmiSSLIFace *, BIGNUM * a, BN_ULONG w);
extern int                  VARARGS68K _AmiSSL_BN_mul_word(struct AmiSSLIFace *, BIGNUM * a, BN_ULONG w);
extern int                  VARARGS68K _AmiSSL_BN_add_word(struct AmiSSLIFace *, BIGNUM * a, BN_ULONG w);
extern int                  VARARGS68K _AmiSSL_BN_sub_word(struct AmiSSLIFace *, BIGNUM * a, BN_ULONG w);
extern int                  VARARGS68K _AmiSSL_BN_set_word(struct AmiSSLIFace *, BIGNUM * a, BN_ULONG w);
extern BN_ULONG             VARARGS68K _AmiSSL_BN_get_word(struct AmiSSLIFace *, const BIGNUM * a);
extern int                  VARARGS68K _AmiSSL_BN_cmp(struct AmiSSLIFace *, const BIGNUM * a, const BIGNUM * b);
extern void                 VARARGS68K _AmiSSL_BN_free(struct AmiSSLIFace *, BIGNUM * a);
extern int                  VARARGS68K _AmiSSL_BN_is_bit_set(struct AmiSSLIFace *, const BIGNUM * a, int n);
extern int                  VARARGS68K _AmiSSL_BN_lshift(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, int n);
extern int                  VARARGS68K _AmiSSL_BN_lshift1(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a);
extern int                  VARARGS68K _AmiSSL_BN_exp(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_mod_exp(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * p, const BIGNUM * m, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_mod_exp_mont(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * p, const BIGNUM * m, BN_CTX * ctx, BN_MONT_CTX * m_ctx);
extern int                  VARARGS68K _AmiSSL_BN_mod_exp_mont_word(struct AmiSSLIFace *, BIGNUM * r, BN_ULONG a, const BIGNUM * p, const BIGNUM * m, BN_CTX * ctx, BN_MONT_CTX * m_ctx);
extern int                  VARARGS68K _AmiSSL_BN_mod_exp2_mont(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a1, const BIGNUM * p1, const BIGNUM * a2, const BIGNUM * p2, const BIGNUM * m, BN_CTX * ctx, BN_MONT_CTX * m_ctx);
extern int                  VARARGS68K _AmiSSL_BN_mod_exp_simple(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * p, const BIGNUM * m, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_mask_bits(struct AmiSSLIFace *, BIGNUM * a, int n);
extern int                  VARARGS68K _AmiSSL_BN_print(struct AmiSSLIFace *, BIO * fp, const BIGNUM * a);
extern int                  VARARGS68K _AmiSSL_BN_reciprocal(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * m, int len, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_rshift(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, int n);
extern int                  VARARGS68K _AmiSSL_BN_rshift1(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a);
extern void                 VARARGS68K _AmiSSL_BN_clear(struct AmiSSLIFace *, BIGNUM * a);
extern BIGNUM *             VARARGS68K _AmiSSL_BN_dup(struct AmiSSLIFace *, const BIGNUM * a);
extern int                  VARARGS68K _AmiSSL_BN_ucmp(struct AmiSSLIFace *, const BIGNUM * a, const BIGNUM * b);
extern int                  VARARGS68K _AmiSSL_BN_set_bit(struct AmiSSLIFace *, BIGNUM * a, int n);
extern int                  VARARGS68K _AmiSSL_BN_clear_bit(struct AmiSSLIFace *, BIGNUM * a, int n);
extern char *               VARARGS68K _AmiSSL_BN_bn2hex(struct AmiSSLIFace *, const BIGNUM * a);
extern char *               VARARGS68K _AmiSSL_BN_bn2dec(struct AmiSSLIFace *, const BIGNUM * a);
extern int                  VARARGS68K _AmiSSL_BN_hex2bn(struct AmiSSLIFace *, BIGNUM ** a, const char * str);
extern int                  VARARGS68K _AmiSSL_BN_dec2bn(struct AmiSSLIFace *, BIGNUM ** a, const char * str);
extern int                  VARARGS68K _AmiSSL_BN_gcd(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * b, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_kronecker(struct AmiSSLIFace *, const BIGNUM * a, const BIGNUM * b, BN_CTX * ctx);
extern BIGNUM *             VARARGS68K _AmiSSL_BN_mod_inverse(struct AmiSSLIFace *, BIGNUM * ret, const BIGNUM * a, const BIGNUM * n, BN_CTX * ctx);
extern BIGNUM *             VARARGS68K _AmiSSL_BN_mod_sqrt(struct AmiSSLIFace *, BIGNUM * ret, const BIGNUM * a, const BIGNUM * n, BN_CTX * ctx);
extern BIGNUM *             VARARGS68K _AmiSSL_BN_generate_prime(struct AmiSSLIFace *, BIGNUM * ret, int bits, int safe, const BIGNUM * add, const BIGNUM * rem, void (*callback)(int, int, void *), void * cb_arg);
extern int                  VARARGS68K _AmiSSL_BN_is_prime(struct AmiSSLIFace *, const BIGNUM * p, int nchecks, void (*callback)(int, int, void *), BN_CTX * ctx, void * cb_arg);
extern int                  VARARGS68K _AmiSSL_BN_is_prime_fasttest(struct AmiSSLIFace *, const BIGNUM * p, int nchecks, void (*callback)(int, int, void *), BN_CTX * ctx, void * cb_arg, int do_trial_division);
extern BN_MONT_CTX *        VARARGS68K _AmiSSL_BN_MONT_CTX_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_BN_MONT_CTX_init(struct AmiSSLIFace *, BN_MONT_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_mod_mul_montgomery(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * b, BN_MONT_CTX * mont, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_from_montgomery(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, BN_MONT_CTX * mont, BN_CTX * ctx);
extern void                 VARARGS68K _AmiSSL_BN_MONT_CTX_free(struct AmiSSLIFace *, BN_MONT_CTX * mont);
extern int                  VARARGS68K _AmiSSL_BN_MONT_CTX_set(struct AmiSSLIFace *, BN_MONT_CTX * mont, const BIGNUM * mod, BN_CTX * ctx);
extern BN_MONT_CTX *        VARARGS68K _AmiSSL_BN_MONT_CTX_copy(struct AmiSSLIFace *, BN_MONT_CTX * to, BN_MONT_CTX * from);
extern BN_BLINDING *        VARARGS68K _AmiSSL_BN_BLINDING_new(struct AmiSSLIFace *, BIGNUM * A, BIGNUM * Ai, BIGNUM * mod);
extern void                 VARARGS68K _AmiSSL_BN_BLINDING_free(struct AmiSSLIFace *, BN_BLINDING * b);
extern int                  VARARGS68K _AmiSSL_BN_BLINDING_update(struct AmiSSLIFace *, BN_BLINDING * b, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_BLINDING_convert(struct AmiSSLIFace *, BIGNUM * n, BN_BLINDING * r, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_BLINDING_invert(struct AmiSSLIFace *, BIGNUM * n, BN_BLINDING * b, BN_CTX * ctx);
extern void                 VARARGS68K _AmiSSL_BN_set_params(struct AmiSSLIFace *, int mul, int high, int low, int mont);
extern int                  VARARGS68K _AmiSSL_BN_get_params(struct AmiSSLIFace *, int which);
extern void                 VARARGS68K _AmiSSL_BN_RECP_CTX_init(struct AmiSSLIFace *, BN_RECP_CTX * recp);
extern BN_RECP_CTX *        VARARGS68K _AmiSSL_BN_RECP_CTX_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_BN_RECP_CTX_free(struct AmiSSLIFace *, BN_RECP_CTX * recp);
extern int                  VARARGS68K _AmiSSL_BN_RECP_CTX_set(struct AmiSSLIFace *, BN_RECP_CTX * recp, const BIGNUM * rdiv, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_mod_mul_reciprocal(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * x, const BIGNUM * y, BN_RECP_CTX * recp, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_mod_exp_recp(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * p, const BIGNUM * m, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_div_recp(struct AmiSSLIFace *, BIGNUM * dv, BIGNUM * rem, const BIGNUM * m, BN_RECP_CTX * recp, BN_CTX * ctx);
extern BIGNUM *             VARARGS68K _AmiSSL_bn_expand2(struct AmiSSLIFace *, BIGNUM * a, int words);
extern BIGNUM *             VARARGS68K _AmiSSL_bn_dup_expand(struct AmiSSLIFace *, const BIGNUM * a, int words);
extern BN_ULONG             VARARGS68K _AmiSSL_bn_mul_add_words(struct AmiSSLIFace *, BN_ULONG * rp, const BN_ULONG * ap, int num, BN_ULONG w);
extern BN_ULONG             VARARGS68K _AmiSSL_bn_mul_words(struct AmiSSLIFace *, BN_ULONG * rp, const BN_ULONG * ap, int num, BN_ULONG w);
extern void                 VARARGS68K _AmiSSL_bn_sqr_words(struct AmiSSLIFace *, BN_ULONG * rp, const BN_ULONG * ap, int num);
extern BN_ULONG             VARARGS68K _AmiSSL_bn_div_words(struct AmiSSLIFace *, BN_ULONG h, BN_ULONG l, BN_ULONG d);
extern BN_ULONG             VARARGS68K _AmiSSL_bn_add_words(struct AmiSSLIFace *, BN_ULONG * rp, const BN_ULONG * ap, const BN_ULONG * bp, int num);
extern BN_ULONG             VARARGS68K _AmiSSL_bn_sub_words(struct AmiSSLIFace *, BN_ULONG * rp, const BN_ULONG * ap, const BN_ULONG * bp, int num);
extern int                  VARARGS68K _AmiSSL_BN_bntest_rand(struct AmiSSLIFace *, BIGNUM * rnd, int bits, int top, int bottom);
extern void                 VARARGS68K _AmiSSL_ERR_load_BN_strings(struct AmiSSLIFace *);
extern BUF_MEM *            VARARGS68K _AmiSSL_BUF_MEM_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_BUF_MEM_free(struct AmiSSLIFace *, BUF_MEM * a);
extern int                  VARARGS68K _AmiSSL_BUF_MEM_grow(struct AmiSSLIFace *, BUF_MEM * str, int len);
extern int                  VARARGS68K _AmiSSL_BUF_MEM_grow_clean(struct AmiSSLIFace *, BUF_MEM * str, int len);
extern char *               VARARGS68K _AmiSSL_BUF_strdup(struct AmiSSLIFace *, const char * str);
extern size_t               VARARGS68K _AmiSSL_BUF_strlcpy(struct AmiSSLIFace *, char * dst, const char * src, size_t siz);
extern size_t               VARARGS68K _AmiSSL_BUF_strlcat(struct AmiSSLIFace *, char * dst, const char * src, size_t siz);
extern void                 VARARGS68K _AmiSSL_ERR_load_BUF_strings(struct AmiSSLIFace *);
extern COMP_CTX *           VARARGS68K _AmiSSL_COMP_CTX_new(struct AmiSSLIFace *, COMP_METHOD * meth);
extern void                 VARARGS68K _AmiSSL_COMP_CTX_free(struct AmiSSLIFace *, COMP_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_COMP_compress_block(struct AmiSSLIFace *, COMP_CTX * ctx, unsigned char * out, int olen, unsigned char * in, int ilen);
extern int                  VARARGS68K _AmiSSL_COMP_expand_block(struct AmiSSLIFace *, COMP_CTX * ctx, unsigned char * out, int olen, unsigned char * in, int ilen);
extern COMP_METHOD *        VARARGS68K _AmiSSL_COMP_rle(struct AmiSSLIFace *);
extern COMP_METHOD *        VARARGS68K _AmiSSL_COMP_zlib(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ERR_load_COMP_strings(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_CONF_set_default_method(struct AmiSSLIFace *, CONF_METHOD * meth);
extern void                 VARARGS68K _AmiSSL_CONF_set_nconf(struct AmiSSLIFace *, CONF * conf, LHASH_OF(CONF_VALUE) * hash);
extern LHASH_OF(CONF_VALUE) * VARARGS68K _AmiSSL_CONF_load(struct AmiSSLIFace *, LHASH_OF(CONF_VALUE) * conf, const char * file, long * eline);
extern LHASH_OF(CONF_VALUE) * VARARGS68K _AmiSSL_CONF_load_bio(struct AmiSSLIFace *, LHASH_OF(CONF_VALUE) * conf, BIO * bp, long * eline);
extern STACK_OF(CONF_VALUE) * VARARGS68K _AmiSSL_CONF_get_section(struct AmiSSLIFace *, LHASH_OF(CONF_VALUE) * conf, const char * section);
extern char *               VARARGS68K _AmiSSL_CONF_get_string(struct AmiSSLIFace *, LHASH_OF(CONF_VALUE) * conf, const char * group, const char * name);
extern long                 VARARGS68K _AmiSSL_CONF_get_number(struct AmiSSLIFace *, LHASH_OF(CONF_VALUE) * conf, const char * group, const char * name);
extern void                 VARARGS68K _AmiSSL_CONF_free(struct AmiSSLIFace *, LHASH_OF(CONF_VALUE) * conf);
extern int                  VARARGS68K _AmiSSL_CONF_dump_bio(struct AmiSSLIFace *, LHASH_OF(CONF_VALUE) * conf, BIO * out);
extern void                 VARARGS68K _AmiSSL_OPENSSL_config(struct AmiSSLIFace *, const char * config_name);
extern void                 VARARGS68K _AmiSSL_OPENSSL_no_config(struct AmiSSLIFace *);
extern CONF *               VARARGS68K _AmiSSL_NCONF_new(struct AmiSSLIFace *, CONF_METHOD * meth);
extern CONF_METHOD *        VARARGS68K _AmiSSL_NCONF_default(struct AmiSSLIFace *);
extern CONF_METHOD *        VARARGS68K _AmiSSL_NCONF_WIN32(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_NCONF_free(struct AmiSSLIFace *, CONF * conf);
extern void                 VARARGS68K _AmiSSL_NCONF_free_data(struct AmiSSLIFace *, CONF * conf);
extern int                  VARARGS68K _AmiSSL_NCONF_load(struct AmiSSLIFace *, CONF * conf, const char * file, long * eline);
extern int                  VARARGS68K _AmiSSL_NCONF_load_bio(struct AmiSSLIFace *, CONF * conf, BIO * bp, long * eline);
extern STACK_OF(CONF_VALUE) * VARARGS68K _AmiSSL_NCONF_get_section(struct AmiSSLIFace *, const CONF * conf, const char * section);
extern char *               VARARGS68K _AmiSSL_NCONF_get_string(struct AmiSSLIFace *, const CONF * conf, const char * group, const char * name);
extern int                  VARARGS68K _AmiSSL_NCONF_get_number_e(struct AmiSSLIFace *, const CONF * conf, const char * group, const char * name, long * result);
extern int                  VARARGS68K _AmiSSL_NCONF_dump_bio(struct AmiSSLIFace *, const CONF * conf, BIO * out);
extern int                  VARARGS68K _AmiSSL_CONF_modules_load(struct AmiSSLIFace *, const CONF * cnf, const char * appname, unsigned long flags);
extern int                  VARARGS68K _AmiSSL_CONF_modules_load_file(struct AmiSSLIFace *, const char * filename, const char * appname, unsigned long flags);
extern void                 VARARGS68K _AmiSSL_CONF_modules_unload(struct AmiSSLIFace *, int all);
extern void                 VARARGS68K _AmiSSL_CONF_modules_finish(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_CONF_modules_free(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_CONF_module_add(struct AmiSSLIFace *, const char * name, conf_init_func * ifunc, conf_finish_func * ffunc);
extern const char *         VARARGS68K _AmiSSL_CONF_imodule_get_name(struct AmiSSLIFace *, const CONF_IMODULE * md);
extern const char *         VARARGS68K _AmiSSL_CONF_imodule_get_value(struct AmiSSLIFace *, const CONF_IMODULE * md);
extern void *               VARARGS68K _AmiSSL_CONF_imodule_get_usr_data(struct AmiSSLIFace *, const CONF_IMODULE * md);
extern void                 VARARGS68K _AmiSSL_CONF_imodule_set_usr_data(struct AmiSSLIFace *, CONF_IMODULE * md, void * usr_data);
extern CONF_MODULE *        VARARGS68K _AmiSSL_CONF_imodule_get_module(struct AmiSSLIFace *, const CONF_IMODULE * md);
extern unsigned long        VARARGS68K _AmiSSL_CONF_imodule_get_flags(struct AmiSSLIFace *, const CONF_IMODULE * md);
extern void                 VARARGS68K _AmiSSL_CONF_imodule_set_flags(struct AmiSSLIFace *, CONF_IMODULE * md, unsigned long flags);
extern void *               VARARGS68K _AmiSSL_CONF_module_get_usr_data(struct AmiSSLIFace *, CONF_MODULE * pmod);
extern void                 VARARGS68K _AmiSSL_CONF_module_set_usr_data(struct AmiSSLIFace *, CONF_MODULE * pmod, void * usr_data);
extern char *               VARARGS68K _AmiSSL_CONF_get1_default_config_file(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_CONF_parse_list(struct AmiSSLIFace *, const char * list, int sep, int nospc, int (*list_cb)(const char *elem, int len, void *usr), void * arg);
extern void                 VARARGS68K _AmiSSL_OPENSSL_load_builtin_modules(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ERR_load_CONF_strings(struct AmiSSLIFace *);
extern CONF_VALUE *         VARARGS68K _AmiSSL__CONF_new_section(struct AmiSSLIFace *, CONF * conf, const char * section);
extern CONF_VALUE *         VARARGS68K _AmiSSL__CONF_get_section(struct AmiSSLIFace *, const CONF * conf, const char * section);
extern STACK_OF(CONF_VALUE) * VARARGS68K _AmiSSL__CONF_get_section_values(struct AmiSSLIFace *, const CONF * conf, const char * section);
extern int                  VARARGS68K _AmiSSL__CONF_add_string(struct AmiSSLIFace *, CONF * conf, CONF_VALUE * section, CONF_VALUE * value);
extern char *               VARARGS68K _AmiSSL__CONF_get_string(struct AmiSSLIFace *, const CONF * conf, const char * section, const char * name);
extern int                  VARARGS68K _AmiSSL__CONF_new_data(struct AmiSSLIFace *, CONF * conf);
extern void                 VARARGS68K _AmiSSL__CONF_free_data(struct AmiSSLIFace *, CONF * conf);
extern int                  VARARGS68K _AmiSSL_CRYPTO_mem_ctrl(struct AmiSSLIFace *, int mode);
extern int                  VARARGS68K _AmiSSL_CRYPTO_is_mem_check_on(struct AmiSSLIFace *);
extern const char *         VARARGS68K _AmiSSL_SSLeay_version(struct AmiSSLIFace *, int type);
extern unsigned long        VARARGS68K _AmiSSL_SSLeay(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_OPENSSL_issetugid(struct AmiSSLIFace *);
extern const CRYPTO_EX_DATA_IMPL * VARARGS68K _AmiSSL_CRYPTO_get_ex_data_implementation(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_CRYPTO_set_ex_data_implementation(struct AmiSSLIFace *, const CRYPTO_EX_DATA_IMPL * i);
extern int                  VARARGS68K _AmiSSL_CRYPTO_ex_data_new_class(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_CRYPTO_get_ex_new_index(struct AmiSSLIFace *, int class_index, long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func);
extern int                  VARARGS68K _AmiSSL_CRYPTO_new_ex_data(struct AmiSSLIFace *, int class_index, void * obj, CRYPTO_EX_DATA * ad);
extern int                  VARARGS68K _AmiSSL_CRYPTO_dup_ex_data(struct AmiSSLIFace *, int class_index, CRYPTO_EX_DATA * to, CRYPTO_EX_DATA * from);
extern void                 VARARGS68K _AmiSSL_CRYPTO_free_ex_data(struct AmiSSLIFace *, int class_index, void * obj, CRYPTO_EX_DATA * ad);
extern int                  VARARGS68K _AmiSSL_CRYPTO_set_ex_data(struct AmiSSLIFace *, CRYPTO_EX_DATA * ad, int idx, void * val);
extern void *               VARARGS68K _AmiSSL_CRYPTO_get_ex_data(struct AmiSSLIFace *, const CRYPTO_EX_DATA * ad, int idx);
extern void                 VARARGS68K _AmiSSL_CRYPTO_cleanup_all_ex_data(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_CRYPTO_get_new_lockid(struct AmiSSLIFace *, char * name);
extern int                  VARARGS68K _AmiSSL_CRYPTO_num_locks(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_CRYPTO_lock(struct AmiSSLIFace *, int mode, int type, const char * file, int line);
extern void                 VARARGS68K _AmiSSL_CRYPTO_set_locking_callback(struct AmiSSLIFace *, void (*func)(int mode, int type, const char *file, int line));
extern void                 VARARGS68K (*_AmiSSL_CRYPTO_get_locking_callback(struct AmiSSLIFace *))(int mode, int type, const char *file, int line);
extern void                 VARARGS68K _AmiSSL_CRYPTO_set_add_lock_callback(struct AmiSSLIFace *, int (*func)(int *num, int mount, int type, const char *file, int line));
extern int                  VARARGS68K (*_AmiSSL_CRYPTO_get_add_lock_callback(struct AmiSSLIFace *))(int *num, int mount, int type, const char *file, int line);
extern void                 VARARGS68K _AmiSSL_CRYPTO_set_id_callback(struct AmiSSLIFace *, unsigned long (*func)(void));
extern unsigned long        VARARGS68K (*_AmiSSL_CRYPTO_get_id_callback(struct AmiSSLIFace *))(void);
extern unsigned long        VARARGS68K _AmiSSL_CRYPTO_thread_id(struct AmiSSLIFace *);
extern const char *         VARARGS68K _AmiSSL_CRYPTO_get_lock_name(struct AmiSSLIFace *, int type);
extern int                  VARARGS68K _AmiSSL_CRYPTO_add_lock(struct AmiSSLIFace *, int * pointer, int amount, int type, const char * file, int line);
extern int                  VARARGS68K _AmiSSL_CRYPTO_get_new_dynlockid(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_CRYPTO_destroy_dynlockid(struct AmiSSLIFace *, int i);
extern struct CRYPTO_dynlock_value * VARARGS68K _AmiSSL_CRYPTO_get_dynlock_value(struct AmiSSLIFace *, int i);
extern void                 VARARGS68K _AmiSSL_CRYPTO_set_dynlock_create_callback(struct AmiSSLIFace *, struct CRYPTO_dynlock_value * (*dyn_create_function)(const char *file, int line));
extern void                 VARARGS68K _AmiSSL_CRYPTO_set_dynlock_lock_callback(struct AmiSSLIFace *, void (*dyn_lock_function)(int mode, struct CRYPTO_dynlock_value *l, const char *file, int line));
extern void                 VARARGS68K _AmiSSL_CRYPTO_set_dynlock_destroy_callback(struct AmiSSLIFace *, void (*dyn_destroy_function)(struct CRYPTO_dynlock_value *l, const char *file, int line));
extern struct CRYPTO_dynlock_value *  VARARGS68K (*_AmiSSL_CRYPTO_get_dynlock_create_callback(struct AmiSSLIFace *))(const char *file, int line);
extern void                 VARARGS68K (*_AmiSSL_CRYPTO_get_dynlock_lock_callback(struct AmiSSLIFace *))(int mode, struct CRYPTO_dynlock_value *l, const char *file, int line);
extern void                 VARARGS68K (*_AmiSSL_CRYPTO_get_dynlock_destroy_callback(struct AmiSSLIFace *))(struct CRYPTO_dynlock_value *l, const char *file, int line);
extern int                  VARARGS68K _AmiSSL_CRYPTO_set_mem_functions(struct AmiSSLIFace *, void * (*m)(size_t), void * (*r)(void *, size_t), void (*f)(void *));
extern int                  VARARGS68K _AmiSSL_CRYPTO_set_locked_mem_functions(struct AmiSSLIFace *, void * (*m)(size_t), void (*free_func)(void *));
extern int                  VARARGS68K _AmiSSL_CRYPTO_set_mem_ex_functions(struct AmiSSLIFace *, void * (*m)(size_t, const char *, int), void * (*r)(void *, size_t, const char *, int), void (*f)(void *));
extern int                  VARARGS68K _AmiSSL_CRYPTO_set_locked_mem_ex_functions(struct AmiSSLIFace *, void * (*m)(size_t, const char *, int), void (*free_func)(void *));
extern int                  VARARGS68K _AmiSSL_CRYPTO_set_mem_debug_functions(struct AmiSSLIFace *, void (*m)(void *, int, const char *, int, int), void (*r)(void *, void *, int, const char *, int, int), void (*f)(void *, int), void (*so)(long), long (*go)(void));
extern void                 VARARGS68K _AmiSSL_CRYPTO_get_mem_functions(struct AmiSSLIFace *, void * (**m)(size_t), void * (**r)(void *, size_t), void (**f)(void *));
extern void                 VARARGS68K _AmiSSL_CRYPTO_get_locked_mem_functions(struct AmiSSLIFace *, void * (**m)(size_t), void (**f)(void *));
extern void                 VARARGS68K _AmiSSL_CRYPTO_get_mem_ex_functions(struct AmiSSLIFace *, void * (**m)(size_t, const char *, int), void * (**r)(void *, size_t, const char *, int), void (**f)(void *));
extern void                 VARARGS68K _AmiSSL_CRYPTO_get_locked_mem_ex_functions(struct AmiSSLIFace *, void * (**m)(size_t, const char *, int), void (**f)(void *));
extern void                 VARARGS68K _AmiSSL_CRYPTO_get_mem_debug_functions(struct AmiSSLIFace *, void (**m)(void *, int, const char *, int, int), void (**r)(void *, void *, int, const char *, int, int), void (**f)(void *, int), void (**so)(long), long (**go)(void));
extern void *               VARARGS68K _AmiSSL_CRYPTO_malloc_locked(struct AmiSSLIFace *, int num, const char * file, int line);
extern void                 VARARGS68K _AmiSSL_CRYPTO_free_locked(struct AmiSSLIFace *, void * a);
extern void *               VARARGS68K _AmiSSL_CRYPTO_malloc(struct AmiSSLIFace *, int num, const char * file, int line);
extern void                 VARARGS68K _AmiSSL_CRYPTO_free(struct AmiSSLIFace *, void * a);
extern void *               VARARGS68K _AmiSSL_CRYPTO_realloc(struct AmiSSLIFace *, void * addr, int num, const char * file, int line);
extern void *               VARARGS68K _AmiSSL_CRYPTO_realloc_clean(struct AmiSSLIFace *, void * addr, int old_num, int num, const char * file, int line);
extern void *               VARARGS68K _AmiSSL_CRYPTO_remalloc(struct AmiSSLIFace *, void * addr, int num, const char * file, int line);
extern void                 VARARGS68K _AmiSSL_OPENSSL_cleanse(struct AmiSSLIFace *, void * ptr, size_t len);
extern void                 VARARGS68K _AmiSSL_CRYPTO_set_mem_debug_options(struct AmiSSLIFace *, long bits);
extern long                 VARARGS68K _AmiSSL_CRYPTO_get_mem_debug_options(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_CRYPTO_push_info_(struct AmiSSLIFace *, const char * info, const char * file, int line);
extern int                  VARARGS68K _AmiSSL_CRYPTO_pop_info(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_CRYPTO_remove_all_info(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_CRYPTO_dbg_malloc(struct AmiSSLIFace *, void * addr, int num, const char * file, int line, int before_p);
extern void                 VARARGS68K _AmiSSL_CRYPTO_dbg_realloc(struct AmiSSLIFace *, void * addr1, void * addr2, int num, const char * file, int line, int before_p);
extern void                 VARARGS68K _AmiSSL_CRYPTO_dbg_free(struct AmiSSLIFace *, void * addr, int before_p);
extern void                 VARARGS68K _AmiSSL_CRYPTO_dbg_set_options(struct AmiSSLIFace *, long bits);
extern long                 VARARGS68K _AmiSSL_CRYPTO_dbg_get_options(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_CRYPTO_mem_leaks(struct AmiSSLIFace *, struct bio_st * bio);
extern void                 VARARGS68K _AmiSSL_CRYPTO_mem_leaks_cb(struct AmiSSLIFace *, CRYPTO_MEM_LEAK_CB * cb);
extern void                 VARARGS68K _AmiSSL_OpenSSLDie(struct AmiSSLIFace *, const char * file, int line, const char * assertion);
extern void                 VARARGS68K _AmiSSL_ERR_load_CRYPTO_strings(struct AmiSSLIFace *);
extern DSO *                VARARGS68K _AmiSSL_DSO_new(struct AmiSSLIFace *);
extern DSO *                VARARGS68K _AmiSSL_DSO_new_method(struct AmiSSLIFace *, DSO_METHOD * method);
extern int                  VARARGS68K _AmiSSL_DSO_free(struct AmiSSLIFace *, DSO * dso);
extern int                  VARARGS68K _AmiSSL_DSO_flags(struct AmiSSLIFace *, DSO * dso);
extern int                  VARARGS68K _AmiSSL_DSO_up_ref(struct AmiSSLIFace *, DSO * dso);
extern long                 VARARGS68K _AmiSSL_DSO_ctrl(struct AmiSSLIFace *, DSO * dso, int cmd, long larg, void * parg);
extern int                  VARARGS68K _AmiSSL_DSO_set_name_converter(struct AmiSSLIFace *, DSO * dso, DSO_NAME_CONVERTER_FUNC cb, DSO_NAME_CONVERTER_FUNC * oldcb);
extern const char *         VARARGS68K _AmiSSL_DSO_get_filename(struct AmiSSLIFace *, DSO * dso);
extern int                  VARARGS68K _AmiSSL_DSO_set_filename(struct AmiSSLIFace *, DSO * dso, const char * filename);
extern char *               VARARGS68K _AmiSSL_DSO_convert_filename(struct AmiSSLIFace *, DSO * dso, const char * filename);
extern const char *         VARARGS68K _AmiSSL_DSO_get_loaded_filename(struct AmiSSLIFace *, DSO * dso);
extern void                 VARARGS68K _AmiSSL_DSO_set_default_method(struct AmiSSLIFace *, DSO_METHOD * meth);
extern DSO_METHOD *         VARARGS68K _AmiSSL_DSO_get_default_method(struct AmiSSLIFace *);
extern DSO_METHOD *         VARARGS68K _AmiSSL_DSO_get_method(struct AmiSSLIFace *, DSO * dso);
extern DSO_METHOD *         VARARGS68K _AmiSSL_DSO_set_method(struct AmiSSLIFace *, DSO * dso, DSO_METHOD * meth);
extern DSO *                VARARGS68K _AmiSSL_DSO_load(struct AmiSSLIFace *, DSO * dso, const char * filename, DSO_METHOD * meth, int flags);
extern void *               VARARGS68K _AmiSSL_DSO_bind_var(struct AmiSSLIFace *, DSO * dso, const char * symname);
extern DSO_FUNC_TYPE        VARARGS68K _AmiSSL_DSO_bind_func(struct AmiSSLIFace *, DSO * dso, const char * symname);
extern DSO_METHOD *         VARARGS68K _AmiSSL_DSO_METHOD_openssl(struct AmiSSLIFace *);
extern DSO_METHOD *         VARARGS68K _AmiSSL_DSO_METHOD_null(struct AmiSSLIFace *);
extern DSO_METHOD *         VARARGS68K _AmiSSL_DSO_METHOD_dlfcn(struct AmiSSLIFace *);
extern DSO_METHOD *         VARARGS68K _AmiSSL_DSO_METHOD_dl(struct AmiSSLIFace *);
extern DSO_METHOD *         VARARGS68K _AmiSSL_DSO_METHOD_win32(struct AmiSSLIFace *);
extern DSO_METHOD *         VARARGS68K _AmiSSL_DSO_METHOD_vms(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ERR_load_DSO_strings(struct AmiSSLIFace *);
extern const EC_METHOD *    VARARGS68K _AmiSSL_EC_GFp_simple_method(struct AmiSSLIFace *);
extern const EC_METHOD *    VARARGS68K _AmiSSL_EC_GFp_mont_method(struct AmiSSLIFace *);
extern EC_GROUP *           VARARGS68K _AmiSSL_EC_GROUP_new(struct AmiSSLIFace *, const EC_METHOD * a);
extern void                 VARARGS68K _AmiSSL_EC_GROUP_free(struct AmiSSLIFace *, EC_GROUP * a);
extern void                 VARARGS68K _AmiSSL_EC_GROUP_clear_free(struct AmiSSLIFace *, EC_GROUP * a);
extern int                  VARARGS68K _AmiSSL_EC_GROUP_copy(struct AmiSSLIFace *, EC_GROUP * a, const EC_GROUP * b);
extern const EC_METHOD *    VARARGS68K _AmiSSL_EC_GROUP_method_of(struct AmiSSLIFace *, const EC_GROUP * a);
extern int                  VARARGS68K _AmiSSL_EC_GROUP_set_curve_GFp(struct AmiSSLIFace *, EC_GROUP * a1, const BIGNUM * p, const BIGNUM * a, const BIGNUM * b, BN_CTX * a2);
extern int                  VARARGS68K _AmiSSL_EC_GROUP_get_curve_GFp(struct AmiSSLIFace *, const EC_GROUP * a1, BIGNUM * p, BIGNUM * a, BIGNUM * b, BN_CTX * a2);
extern EC_GROUP *           VARARGS68K _AmiSSL_EC_GROUP_new_curve_GFp(struct AmiSSLIFace *, const BIGNUM * p, const BIGNUM * a, const BIGNUM * b, BN_CTX * a1);
extern int                  VARARGS68K _AmiSSL_EC_GROUP_set_generator(struct AmiSSLIFace *, EC_GROUP * a1, const EC_POINT * generator, const BIGNUM * order, const BIGNUM * cofactor);
extern const EC_POINT *     VARARGS68K _AmiSSL_EC_GROUP_get0_generator(struct AmiSSLIFace *, const EC_GROUP * a1);
extern int                  VARARGS68K _AmiSSL_EC_GROUP_get_order(struct AmiSSLIFace *, const EC_GROUP * a1, BIGNUM * order, BN_CTX * a2);
extern int                  VARARGS68K _AmiSSL_EC_GROUP_get_cofactor(struct AmiSSLIFace *, const EC_GROUP * a1, BIGNUM * cofactor, BN_CTX * a2);
extern EC_POINT *           VARARGS68K _AmiSSL_EC_POINT_new(struct AmiSSLIFace *, const EC_GROUP * a);
extern void                 VARARGS68K _AmiSSL_EC_POINT_free(struct AmiSSLIFace *, EC_POINT * a);
extern void                 VARARGS68K _AmiSSL_EC_POINT_clear_free(struct AmiSSLIFace *, EC_POINT * a);
extern int                  VARARGS68K _AmiSSL_EC_POINT_copy(struct AmiSSLIFace *, EC_POINT * a, const EC_POINT * b);
extern const EC_METHOD *    VARARGS68K _AmiSSL_EC_POINT_method_of(struct AmiSSLIFace *, const EC_POINT * a);
extern int                  VARARGS68K _AmiSSL_EC_POINT_set_to_infinity(struct AmiSSLIFace *, const EC_GROUP * a, EC_POINT * b);
extern int                  VARARGS68K _AmiSSL_EC_POINT_set_Jprojective_coordinates_GFp(struct AmiSSLIFace *, const EC_GROUP * a1, EC_POINT * a2, const BIGNUM * x, const BIGNUM * y, const BIGNUM * z, BN_CTX * a3);
extern int                  VARARGS68K _AmiSSL_EC_POINT_get_Jprojective_coordinates_GFp(struct AmiSSLIFace *, const EC_GROUP * a1, const EC_POINT * a2, BIGNUM * x, BIGNUM * y, BIGNUM * z, BN_CTX * a3);
extern int                  VARARGS68K _AmiSSL_EC_POINT_set_affine_coordinates_GFp(struct AmiSSLIFace *, const EC_GROUP * a1, EC_POINT * a2, const BIGNUM * x, const BIGNUM * y, BN_CTX * a3);
extern int                  VARARGS68K _AmiSSL_EC_POINT_get_affine_coordinates_GFp(struct AmiSSLIFace *, const EC_GROUP * a1, const EC_POINT * a2, BIGNUM * x, BIGNUM * y, BN_CTX * a3);
extern int                  VARARGS68K _AmiSSL_EC_POINT_set_compressed_coordinates_GFp(struct AmiSSLIFace *, const EC_GROUP * a1, EC_POINT * a2, const BIGNUM * x, int y_bit, BN_CTX * a3);
extern size_t               VARARGS68K _AmiSSL_EC_POINT_point2oct(struct AmiSSLIFace *, const EC_GROUP * a1, const EC_POINT * a2, point_conversion_form_t form, unsigned char * buf, size_t len, BN_CTX * a3);
extern int                  VARARGS68K _AmiSSL_EC_POINT_oct2point(struct AmiSSLIFace *, const EC_GROUP * a1, EC_POINT * a2, const unsigned char * buf, size_t len, BN_CTX * a3);
extern int                  VARARGS68K _AmiSSL_EC_POINT_add(struct AmiSSLIFace *, const EC_GROUP * a1, EC_POINT * r, const EC_POINT * a, const EC_POINT * b, BN_CTX * a2);
extern int                  VARARGS68K _AmiSSL_EC_POINT_dbl(struct AmiSSLIFace *, const EC_GROUP * a1, EC_POINT * r, const EC_POINT * a, BN_CTX * a2);
extern int                  VARARGS68K _AmiSSL_EC_POINT_invert(struct AmiSSLIFace *, const EC_GROUP * a1, EC_POINT * a2, BN_CTX * a3);
extern int                  VARARGS68K _AmiSSL_EC_POINT_is_at_infinity(struct AmiSSLIFace *, const EC_GROUP * a, const EC_POINT * b);
extern int                  VARARGS68K _AmiSSL_EC_POINT_is_on_curve(struct AmiSSLIFace *, const EC_GROUP * a, const EC_POINT * b, BN_CTX * c);
extern int                  VARARGS68K _AmiSSL_EC_POINT_cmp(struct AmiSSLIFace *, const EC_GROUP * a1, const EC_POINT * a, const EC_POINT * b, BN_CTX * a2);
extern int                  VARARGS68K _AmiSSL_EC_POINT_make_affine(struct AmiSSLIFace *, const EC_GROUP * a, EC_POINT * b, BN_CTX * c);
extern int                  VARARGS68K _AmiSSL_EC_POINTs_make_affine(struct AmiSSLIFace *, const EC_GROUP * a1, size_t num, EC_POINT ** a2, BN_CTX * a3);
extern int                  VARARGS68K _AmiSSL_EC_POINTs_mul(struct AmiSSLIFace *, const EC_GROUP * a1, EC_POINT * r, const BIGNUM * a2, size_t num, const EC_POINT ** a3, const BIGNUM ** a4, BN_CTX * a5);
extern int                  VARARGS68K _AmiSSL_EC_POINT_mul(struct AmiSSLIFace *, const EC_GROUP * a1, EC_POINT * r, const BIGNUM * a2, const EC_POINT * a3, const BIGNUM * a4, BN_CTX * a5);
extern int                  VARARGS68K _AmiSSL_EC_GROUP_precompute_mult(struct AmiSSLIFace *, EC_GROUP * a, BN_CTX * b);
extern void                 VARARGS68K _AmiSSL_ERR_load_EC_strings(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ERR_put_error(struct AmiSSLIFace *, int lib, int func, int reason, const char * file, int line);
extern void                 VARARGS68K _AmiSSL_ERR_set_error_data(struct AmiSSLIFace *, char * data, int flags);
extern unsigned long        VARARGS68K _AmiSSL_ERR_get_error(struct AmiSSLIFace *);
extern unsigned long        VARARGS68K _AmiSSL_ERR_get_error_line(struct AmiSSLIFace *, const char ** file, int * line);
extern unsigned long        VARARGS68K _AmiSSL_ERR_get_error_line_data(struct AmiSSLIFace *, const char ** file, int * line, const char ** data, int * flags);
extern unsigned long        VARARGS68K _AmiSSL_ERR_peek_error(struct AmiSSLIFace *);
extern unsigned long        VARARGS68K _AmiSSL_ERR_peek_error_line(struct AmiSSLIFace *, const char ** file, int * line);
extern unsigned long        VARARGS68K _AmiSSL_ERR_peek_error_line_data(struct AmiSSLIFace *, const char ** file, int * line, const char ** data, int * flags);
extern unsigned long        VARARGS68K _AmiSSL_ERR_peek_last_error(struct AmiSSLIFace *);
extern unsigned long        VARARGS68K _AmiSSL_ERR_peek_last_error_line(struct AmiSSLIFace *, const char ** file, int * line);
extern unsigned long        VARARGS68K _AmiSSL_ERR_peek_last_error_line_data(struct AmiSSLIFace *, const char ** file, int * line, const char ** data, int * flags);
extern void                 VARARGS68K _AmiSSL_ERR_clear_error(struct AmiSSLIFace *);
extern char *               VARARGS68K _AmiSSL_ERR_error_string(struct AmiSSLIFace *, unsigned long e, char * buf);
extern void                 VARARGS68K _AmiSSL_ERR_error_string_n(struct AmiSSLIFace *, unsigned long e, char * buf, size_t len);
extern const char *         VARARGS68K _AmiSSL_ERR_lib_error_string(struct AmiSSLIFace *, unsigned long e);
extern const char *         VARARGS68K _AmiSSL_ERR_func_error_string(struct AmiSSLIFace *, unsigned long e);
extern const char *         VARARGS68K _AmiSSL_ERR_reason_error_string(struct AmiSSLIFace *, unsigned long e);
extern void                 VARARGS68K _AmiSSL_ERR_print_errors_cb(struct AmiSSLIFace *, int (*cb)(const char *str, size_t len, void *u), void * u);
extern void                 VARARGS68K _AmiSSL_ERR_print_errors(struct AmiSSLIFace *, BIO * bp);
extern void                 VARARGS68K _AmiSSL_ERR_add_error_data(struct AmiSSLIFace *, int num, ...);
extern void                 VARARGS68K _AmiSSL_ERR_load_strings(struct AmiSSLIFace *, int lib, ERR_STRING_DATA * str);
extern void                 VARARGS68K _AmiSSL_ERR_unload_strings(struct AmiSSLIFace *, int lib, ERR_STRING_DATA * str);
extern void                 VARARGS68K _AmiSSL_ERR_load_ERR_strings(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ERR_load_crypto_strings(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ERR_free_strings(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ERR_remove_state(struct AmiSSLIFace *, unsigned long pid);
extern ERR_STATE *          VARARGS68K _AmiSSL_ERR_get_state(struct AmiSSLIFace *);
extern LHASH_OF(ERR_STRING_DATA) * VARARGS68K _AmiSSL_ERR_get_string_table(struct AmiSSLIFace *);
extern LHASH_OF(ERR_STATE) * VARARGS68K _AmiSSL_ERR_get_err_state_table(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ERR_release_err_state_table(struct AmiSSLIFace *, LHASH_OF(ERR_STATE) ** hash);
extern int                  VARARGS68K _AmiSSL_ERR_get_next_error_library(struct AmiSSLIFace *);
extern const ERR_FNS *      VARARGS68K _AmiSSL_ERR_get_implementation(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_ERR_set_implementation(struct AmiSSLIFace *, const ERR_FNS * fns);
extern void                 VARARGS68K _AmiSSL_EVP_MD_CTX_init(struct AmiSSLIFace *, EVP_MD_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_EVP_MD_CTX_cleanup(struct AmiSSLIFace *, EVP_MD_CTX * ctx);
extern EVP_MD_CTX *         VARARGS68K _AmiSSL_EVP_MD_CTX_create(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_EVP_MD_CTX_destroy(struct AmiSSLIFace *, EVP_MD_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_EVP_MD_CTX_copy_ex(struct AmiSSLIFace *, EVP_MD_CTX * out, const EVP_MD_CTX * in);
extern int                  VARARGS68K _AmiSSL_EVP_DigestInit_ex(struct AmiSSLIFace *, EVP_MD_CTX * ctx, const EVP_MD * type, ENGINE * impl);
extern int                  VARARGS68K _AmiSSL_EVP_DigestUpdate(struct AmiSSLIFace *, EVP_MD_CTX * ctx, const void * d, unsigned int cnt);
extern int                  VARARGS68K _AmiSSL_EVP_DigestFinal_ex(struct AmiSSLIFace *, EVP_MD_CTX * ctx, unsigned char * md, unsigned int * s);
extern int                  VARARGS68K _AmiSSL_EVP_Digest(struct AmiSSLIFace *, void * data, unsigned int count, unsigned char * md, unsigned int * size, const EVP_MD * type, ENGINE * impl);
extern int                  VARARGS68K _AmiSSL_EVP_MD_CTX_copy(struct AmiSSLIFace *, EVP_MD_CTX * out, const EVP_MD_CTX * in);
extern int                  VARARGS68K _AmiSSL_EVP_DigestInit(struct AmiSSLIFace *, EVP_MD_CTX * ctx, const EVP_MD * type);
extern int                  VARARGS68K _AmiSSL_EVP_DigestFinal(struct AmiSSLIFace *, EVP_MD_CTX * ctx, unsigned char * md, unsigned int * s);
extern int                  VARARGS68K _AmiSSL_EVP_read_pw_string(struct AmiSSLIFace *, char * buf, int length, const char * prompt, int verify);
extern void                 VARARGS68K _AmiSSL_EVP_set_pw_prompt(struct AmiSSLIFace *, char * prompt);
extern char *               VARARGS68K _AmiSSL_EVP_get_pw_prompt(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_EVP_BytesToKey(struct AmiSSLIFace *, const EVP_CIPHER * type, const EVP_MD * md, const unsigned char * salt, const unsigned char * data, int datal, int count, unsigned char * key, unsigned char * iv);
extern int                  VARARGS68K _AmiSSL_EVP_EncryptInit(struct AmiSSLIFace *, EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, const unsigned char * key, const unsigned char * iv);
extern int                  VARARGS68K _AmiSSL_EVP_EncryptInit_ex(struct AmiSSLIFace *, EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, ENGINE * impl, const unsigned char * key, const unsigned char * iv);
extern int                  VARARGS68K _AmiSSL_EVP_EncryptUpdate(struct AmiSSLIFace *, EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl, const unsigned char * in, int inl);
extern int                  VARARGS68K _AmiSSL_EVP_EncryptFinal_ex(struct AmiSSLIFace *, EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl);
extern int                  VARARGS68K _AmiSSL_EVP_EncryptFinal(struct AmiSSLIFace *, EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl);
extern int                  VARARGS68K _AmiSSL_EVP_DecryptInit(struct AmiSSLIFace *, EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, const unsigned char * key, const unsigned char * iv);
extern int                  VARARGS68K _AmiSSL_EVP_DecryptInit_ex(struct AmiSSLIFace *, EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, ENGINE * impl, const unsigned char * key, const unsigned char * iv);
extern int                  VARARGS68K _AmiSSL_EVP_DecryptUpdate(struct AmiSSLIFace *, EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl, const unsigned char * in, int inl);
extern int                  VARARGS68K _AmiSSL_EVP_DecryptFinal(struct AmiSSLIFace *, EVP_CIPHER_CTX * ctx, unsigned char * outm, int * outl);
extern int                  VARARGS68K _AmiSSL_EVP_DecryptFinal_ex(struct AmiSSLIFace *, EVP_CIPHER_CTX * ctx, unsigned char * outm, int * outl);
extern int                  VARARGS68K _AmiSSL_EVP_CipherInit(struct AmiSSLIFace *, EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, const unsigned char * key, const unsigned char * iv, int enc);
extern int                  VARARGS68K _AmiSSL_EVP_CipherInit_ex(struct AmiSSLIFace *, EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, ENGINE * impl, const unsigned char * key, const unsigned char * iv, int enc);
extern int                  VARARGS68K _AmiSSL_EVP_CipherUpdate(struct AmiSSLIFace *, EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl, const unsigned char * in, int inl);
extern int                  VARARGS68K _AmiSSL_EVP_CipherFinal(struct AmiSSLIFace *, EVP_CIPHER_CTX * ctx, unsigned char * outm, int * outl);
extern int                  VARARGS68K _AmiSSL_EVP_CipherFinal_ex(struct AmiSSLIFace *, EVP_CIPHER_CTX * ctx, unsigned char * outm, int * outl);
extern int                  VARARGS68K _AmiSSL_EVP_SignFinal(struct AmiSSLIFace *, EVP_MD_CTX * ctx, unsigned char * md, unsigned int * s, EVP_PKEY * pkey);
extern int                  VARARGS68K _AmiSSL_EVP_VerifyFinal(struct AmiSSLIFace *, EVP_MD_CTX * ctx, unsigned char * sigbuf, unsigned int siglen, EVP_PKEY * pkey);
extern int                  VARARGS68K _AmiSSL_EVP_OpenInit(struct AmiSSLIFace *, EVP_CIPHER_CTX * ctx, const EVP_CIPHER * type, unsigned char * ek, int ekl, unsigned char * iv, EVP_PKEY * priv);
extern int                  VARARGS68K _AmiSSL_EVP_OpenFinal(struct AmiSSLIFace *, EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl);
extern int                  VARARGS68K _AmiSSL_EVP_SealInit(struct AmiSSLIFace *, EVP_CIPHER_CTX * ctx, const EVP_CIPHER * type, unsigned char ** ek, int * ekl, unsigned char * iv, EVP_PKEY ** pubk, int npubk);
extern int                  VARARGS68K _AmiSSL_EVP_SealFinal(struct AmiSSLIFace *, EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl);
extern void                 VARARGS68K _AmiSSL_EVP_EncodeInit(struct AmiSSLIFace *, EVP_ENCODE_CTX * ctx);
extern void                 VARARGS68K _AmiSSL_EVP_EncodeUpdate(struct AmiSSLIFace *, EVP_ENCODE_CTX * ctx, unsigned char * out, int * outl, unsigned char * in, int inl);
extern void                 VARARGS68K _AmiSSL_EVP_EncodeFinal(struct AmiSSLIFace *, EVP_ENCODE_CTX * ctx, unsigned char * out, int * outl);
extern int                  VARARGS68K _AmiSSL_EVP_EncodeBlock(struct AmiSSLIFace *, unsigned char * t, const unsigned char * f, int n);
extern void                 VARARGS68K _AmiSSL_EVP_DecodeInit(struct AmiSSLIFace *, EVP_ENCODE_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_EVP_DecodeUpdate(struct AmiSSLIFace *, EVP_ENCODE_CTX * ctx, unsigned char * out, int * outl, unsigned char * in, int inl);
extern int                  VARARGS68K _AmiSSL_EVP_DecodeFinal(struct AmiSSLIFace *, EVP_ENCODE_CTX * ctx, unsigned char * out, int * outl);
extern int                  VARARGS68K _AmiSSL_EVP_DecodeBlock(struct AmiSSLIFace *, unsigned char * t, const unsigned char * f, int n);
extern void                 VARARGS68K _AmiSSL_EVP_CIPHER_CTX_init(struct AmiSSLIFace *, EVP_CIPHER_CTX * a);
extern int                  VARARGS68K _AmiSSL_EVP_CIPHER_CTX_cleanup(struct AmiSSLIFace *, EVP_CIPHER_CTX * a);
extern int                  VARARGS68K _AmiSSL_EVP_CIPHER_CTX_set_key_length(struct AmiSSLIFace *, EVP_CIPHER_CTX * x, int keylen);
extern int                  VARARGS68K _AmiSSL_EVP_CIPHER_CTX_set_padding(struct AmiSSLIFace *, EVP_CIPHER_CTX * c, int pad);
extern int                  VARARGS68K _AmiSSL_EVP_CIPHER_CTX_ctrl(struct AmiSSLIFace *, EVP_CIPHER_CTX * ctx, int type, int arg, void * ptr);
extern BIO_METHOD *         VARARGS68K _AmiSSL_BIO_f_md(struct AmiSSLIFace *);
extern BIO_METHOD *         VARARGS68K _AmiSSL_BIO_f_base64(struct AmiSSLIFace *);
extern BIO_METHOD *         VARARGS68K _AmiSSL_BIO_f_cipher(struct AmiSSLIFace *);
extern BIO_METHOD *         VARARGS68K _AmiSSL_BIO_f_reliable(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_BIO_set_cipher(struct AmiSSLIFace *, BIO * b, const EVP_CIPHER * c, unsigned char * k, unsigned char * i, int enc);
extern const EVP_MD *       VARARGS68K _AmiSSL_EVP_md_null(struct AmiSSLIFace *);
extern const EVP_MD *       VARARGS68K _AmiSSL_EVP_md2(struct AmiSSLIFace *);
extern const EVP_MD *       VARARGS68K _AmiSSL_EVP_md4(struct AmiSSLIFace *);
extern const EVP_MD *       VARARGS68K _AmiSSL_EVP_md5(struct AmiSSLIFace *);
extern const EVP_MD *       VARARGS68K _AmiSSL_EVP_sha(struct AmiSSLIFace *);
extern const EVP_MD *       VARARGS68K _AmiSSL_EVP_sha1(struct AmiSSLIFace *);
extern const EVP_MD *       VARARGS68K _AmiSSL_EVP_dss(struct AmiSSLIFace *);
extern const EVP_MD *       VARARGS68K _AmiSSL_EVP_dss1(struct AmiSSLIFace *);
extern const EVP_MD *       VARARGS68K _AmiSSL_EVP_mdc2(struct AmiSSLIFace *);
extern const EVP_MD *       VARARGS68K _AmiSSL_EVP_ripemd160(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_enc_null(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_des_ecb(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_des_ede(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_des_ede3(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_des_ede_ecb(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_des_ede3_ecb(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_des_cfb64(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_des_cfb1(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_des_cfb8(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_des_ede_cfb64(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_des_ede3_cfb64(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_des_ede3_cfb1(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_des_ede3_cfb8(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_des_ofb(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_des_ede_ofb(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_des_ede3_ofb(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_des_cbc(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_des_ede_cbc(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_des_ede3_cbc(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_desx_cbc(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_rc4(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_rc4_40(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_idea_ecb(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_idea_cfb64(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_idea_ofb(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_idea_cbc(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_rc2_ecb(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_rc2_cbc(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_rc2_40_cbc(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_rc2_64_cbc(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_rc2_cfb64(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_rc2_ofb(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_bf_ecb(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_bf_cbc(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_bf_cfb64(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_bf_ofb(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_cast5_ecb(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_cast5_cbc(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_cast5_cfb64(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_cast5_ofb(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_rc5_32_12_16_cbc(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_rc5_32_12_16_ecb(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_rc5_32_12_16_cfb64(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_rc5_32_12_16_ofb(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_128_ecb(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_128_cbc(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_128_cfb1(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_128_cfb8(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_128_cfb128(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_128_ofb(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_192_ecb(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_192_cbc(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_192_cfb1(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_192_cfb8(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_192_cfb128(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_192_ofb(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_256_ecb(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_256_cbc(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_256_cfb1(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_256_cfb8(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_256_cfb128(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_256_ofb(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_OPENSSL_add_all_algorithms_noconf(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_OPENSSL_add_all_algorithms_conf(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_OpenSSL_add_all_ciphers(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_OpenSSL_add_all_digests(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_EVP_add_cipher(struct AmiSSLIFace *, const EVP_CIPHER * cipher);
extern int                  VARARGS68K _AmiSSL_EVP_add_digest(struct AmiSSLIFace *, const EVP_MD * digest);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_get_cipherbyname(struct AmiSSLIFace *, const char * name);
extern const EVP_MD *       VARARGS68K _AmiSSL_EVP_get_digestbyname(struct AmiSSLIFace *, const char * name);
extern void                 VARARGS68K _AmiSSL_EVP_cleanup(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_decrypt(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx, unsigned char * out, size_t * outlen, const unsigned char * in, size_t inlen);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_encrypt(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx, unsigned char * out, size_t * outlen, const unsigned char * in, size_t inlen);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_type(struct AmiSSLIFace *, int type);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_bits(struct AmiSSLIFace *, EVP_PKEY * pkey);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_size(struct AmiSSLIFace *, EVP_PKEY * pkey);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_assign(struct AmiSSLIFace *, EVP_PKEY * pkey, int type, char * key);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_set1_RSA(struct AmiSSLIFace *, EVP_PKEY * pkey, struct rsa_st * key);
extern struct rsa_st *      VARARGS68K _AmiSSL_EVP_PKEY_get1_RSA(struct AmiSSLIFace *, EVP_PKEY * pkey);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_set1_DSA(struct AmiSSLIFace *, EVP_PKEY * pkey, struct dsa_st * key);
extern struct dsa_st *      VARARGS68K _AmiSSL_EVP_PKEY_get1_DSA(struct AmiSSLIFace *, EVP_PKEY * pkey);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_set1_DH(struct AmiSSLIFace *, EVP_PKEY * pkey, struct dh_st * key);
extern struct dh_st *       VARARGS68K _AmiSSL_EVP_PKEY_get1_DH(struct AmiSSLIFace *, EVP_PKEY * pkey);
extern EVP_PKEY *           VARARGS68K _AmiSSL_EVP_PKEY_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_free(struct AmiSSLIFace *, EVP_PKEY * pkey);
extern EVP_PKEY *           VARARGS68K _AmiSSL_d2i_PublicKey(struct AmiSSLIFace *, int type, EVP_PKEY ** a, const unsigned char ** pp, long length);
extern int                  VARARGS68K _AmiSSL_i2d_PublicKey(struct AmiSSLIFace *, EVP_PKEY * a, unsigned char ** pp);
extern EVP_PKEY *           VARARGS68K _AmiSSL_d2i_PrivateKey(struct AmiSSLIFace *, int type, EVP_PKEY ** a, const unsigned char ** pp, long length);
extern EVP_PKEY *           VARARGS68K _AmiSSL_d2i_AutoPrivateKey(struct AmiSSLIFace *, EVP_PKEY ** a, const unsigned char ** pp, long length);
extern int                  VARARGS68K _AmiSSL_i2d_PrivateKey(struct AmiSSLIFace *, EVP_PKEY * a, unsigned char ** pp);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_copy_parameters(struct AmiSSLIFace *, EVP_PKEY * to, EVP_PKEY * from);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_missing_parameters(struct AmiSSLIFace *, EVP_PKEY * pkey);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_save_parameters(struct AmiSSLIFace *, EVP_PKEY * pkey, int mode);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_cmp_parameters(struct AmiSSLIFace *, EVP_PKEY * a, EVP_PKEY * b);
extern int                  VARARGS68K _AmiSSL_EVP_CIPHER_type(struct AmiSSLIFace *, const EVP_CIPHER * ctx);
extern int                  VARARGS68K _AmiSSL_EVP_CIPHER_param_to_asn1(struct AmiSSLIFace *, EVP_CIPHER_CTX * c, ASN1_TYPE * type);
extern int                  VARARGS68K _AmiSSL_EVP_CIPHER_asn1_to_param(struct AmiSSLIFace *, EVP_CIPHER_CTX * c, ASN1_TYPE * type);
extern int                  VARARGS68K _AmiSSL_EVP_CIPHER_set_asn1_iv(struct AmiSSLIFace *, EVP_CIPHER_CTX * c, ASN1_TYPE * type);
extern int                  VARARGS68K _AmiSSL_EVP_CIPHER_get_asn1_iv(struct AmiSSLIFace *, EVP_CIPHER_CTX * c, ASN1_TYPE * type);
extern int                  VARARGS68K _AmiSSL_PKCS5_PBE_keyivgen(struct AmiSSLIFace *, EVP_CIPHER_CTX * ctx, const char * pass, int passlen, ASN1_TYPE * param, const EVP_CIPHER * cipher, const EVP_MD * md, int en_de);
extern int                  VARARGS68K _AmiSSL_PKCS5_PBKDF2_HMAC_SHA1(struct AmiSSLIFace *, const char * pass, int passlen, unsigned char * salt, int saltlen, int iter, int keylen, unsigned char * out);
extern int                  VARARGS68K _AmiSSL_PKCS5_v2_PBE_keyivgen(struct AmiSSLIFace *, EVP_CIPHER_CTX * ctx, const char * pass, int passlen, ASN1_TYPE * param, const EVP_CIPHER * cipher, const EVP_MD * md, int en_de);
extern void                 VARARGS68K _AmiSSL_PKCS5_PBE_add(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_EVP_PBE_CipherInit(struct AmiSSLIFace *, ASN1_OBJECT * pbe_obj, const char * pass, int passlen, ASN1_TYPE * param, EVP_CIPHER_CTX * ctx, int en_de);
extern int                  VARARGS68K _AmiSSL_EVP_PBE_alg_add(struct AmiSSLIFace *, int nid, const EVP_CIPHER * cipher, const EVP_MD * md, EVP_PBE_KEYGEN * keygen);
extern void                 VARARGS68K _AmiSSL_EVP_PBE_cleanup(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ERR_load_EVP_strings(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_HMAC_CTX_init(struct AmiSSLIFace *, HMAC_CTX * ctx);
extern void                 VARARGS68K _AmiSSL_HMAC_CTX_cleanup(struct AmiSSLIFace *, HMAC_CTX * ctx);
extern void                 VARARGS68K _AmiSSL_HMAC_Init(struct AmiSSLIFace *, HMAC_CTX * ctx, const void * key, int len, const EVP_MD * md);
extern void                 VARARGS68K _AmiSSL_HMAC_Init_ex(struct AmiSSLIFace *, HMAC_CTX * ctx, const void * key, int len, const EVP_MD * md, ENGINE * impl);
extern void                 VARARGS68K _AmiSSL_HMAC_Update(struct AmiSSLIFace *, HMAC_CTX * ctx, const unsigned char * data, int len);
extern void                 VARARGS68K _AmiSSL_HMAC_Final(struct AmiSSLIFace *, HMAC_CTX * ctx, unsigned char * md, unsigned int * len);
extern unsigned char *      VARARGS68K _AmiSSL_HMAC(struct AmiSSLIFace *, const EVP_MD * evp_md, const void * key, int key_len, const unsigned char * d, int n, unsigned char * md, unsigned int * md_len);
extern KRB5_ENCDATA *       VARARGS68K _AmiSSL_KRB5_ENCDATA_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_KRB5_ENCDATA_free(struct AmiSSLIFace *, KRB5_ENCDATA * a);
extern KRB5_ENCDATA *       VARARGS68K _AmiSSL_d2i_KRB5_ENCDATA(struct AmiSSLIFace *, KRB5_ENCDATA ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_KRB5_ENCDATA(struct AmiSSLIFace *, KRB5_ENCDATA * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_KRB5_ENCDATA_it(struct AmiSSLIFace *);
extern KRB5_PRINCNAME *     VARARGS68K _AmiSSL_KRB5_PRINCNAME_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_KRB5_PRINCNAME_free(struct AmiSSLIFace *, KRB5_PRINCNAME * a);
extern KRB5_PRINCNAME *     VARARGS68K _AmiSSL_d2i_KRB5_PRINCNAME(struct AmiSSLIFace *, KRB5_PRINCNAME ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_KRB5_PRINCNAME(struct AmiSSLIFace *, KRB5_PRINCNAME * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_KRB5_PRINCNAME_it(struct AmiSSLIFace *);
extern KRB5_TKTBODY *       VARARGS68K _AmiSSL_KRB5_TKTBODY_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_KRB5_TKTBODY_free(struct AmiSSLIFace *, KRB5_TKTBODY * a);
extern KRB5_TKTBODY *       VARARGS68K _AmiSSL_d2i_KRB5_TKTBODY(struct AmiSSLIFace *, KRB5_TKTBODY ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_KRB5_TKTBODY(struct AmiSSLIFace *, KRB5_TKTBODY * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_KRB5_TKTBODY_it(struct AmiSSLIFace *);
extern KRB5_APREQBODY *     VARARGS68K _AmiSSL_KRB5_APREQBODY_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_KRB5_APREQBODY_free(struct AmiSSLIFace *, KRB5_APREQBODY * a);
extern KRB5_APREQBODY *     VARARGS68K _AmiSSL_d2i_KRB5_APREQBODY(struct AmiSSLIFace *, KRB5_APREQBODY ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_KRB5_APREQBODY(struct AmiSSLIFace *, KRB5_APREQBODY * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_KRB5_APREQBODY_it(struct AmiSSLIFace *);
extern KRB5_TICKET *        VARARGS68K _AmiSSL_KRB5_TICKET_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_KRB5_TICKET_free(struct AmiSSLIFace *, KRB5_TICKET * a);
extern KRB5_TICKET *        VARARGS68K _AmiSSL_d2i_KRB5_TICKET(struct AmiSSLIFace *, KRB5_TICKET ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_KRB5_TICKET(struct AmiSSLIFace *, KRB5_TICKET * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_KRB5_TICKET_it(struct AmiSSLIFace *);
extern KRB5_APREQ *         VARARGS68K _AmiSSL_KRB5_APREQ_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_KRB5_APREQ_free(struct AmiSSLIFace *, KRB5_APREQ * a);
extern KRB5_APREQ *         VARARGS68K _AmiSSL_d2i_KRB5_APREQ(struct AmiSSLIFace *, KRB5_APREQ ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_KRB5_APREQ(struct AmiSSLIFace *, KRB5_APREQ * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_KRB5_APREQ_it(struct AmiSSLIFace *);
extern KRB5_CHECKSUM *      VARARGS68K _AmiSSL_KRB5_CHECKSUM_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_KRB5_CHECKSUM_free(struct AmiSSLIFace *, KRB5_CHECKSUM * a);
extern KRB5_CHECKSUM *      VARARGS68K _AmiSSL_d2i_KRB5_CHECKSUM(struct AmiSSLIFace *, KRB5_CHECKSUM ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_KRB5_CHECKSUM(struct AmiSSLIFace *, KRB5_CHECKSUM * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_KRB5_CHECKSUM_it(struct AmiSSLIFace *);
extern KRB5_ENCKEY *        VARARGS68K _AmiSSL_KRB5_ENCKEY_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_KRB5_ENCKEY_free(struct AmiSSLIFace *, KRB5_ENCKEY * a);
extern KRB5_ENCKEY *        VARARGS68K _AmiSSL_d2i_KRB5_ENCKEY(struct AmiSSLIFace *, KRB5_ENCKEY ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_KRB5_ENCKEY(struct AmiSSLIFace *, KRB5_ENCKEY * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_KRB5_ENCKEY_it(struct AmiSSLIFace *);
extern KRB5_AUTHDATA *      VARARGS68K _AmiSSL_KRB5_AUTHDATA_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_KRB5_AUTHDATA_free(struct AmiSSLIFace *, KRB5_AUTHDATA * a);
extern KRB5_AUTHDATA *      VARARGS68K _AmiSSL_d2i_KRB5_AUTHDATA(struct AmiSSLIFace *, KRB5_AUTHDATA ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_KRB5_AUTHDATA(struct AmiSSLIFace *, KRB5_AUTHDATA * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_KRB5_AUTHDATA_it(struct AmiSSLIFace *);
extern KRB5_AUTHENTBODY *   VARARGS68K _AmiSSL_KRB5_AUTHENTBODY_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_KRB5_AUTHENTBODY_free(struct AmiSSLIFace *, KRB5_AUTHENTBODY * a);
extern KRB5_AUTHENTBODY *   VARARGS68K _AmiSSL_d2i_KRB5_AUTHENTBODY(struct AmiSSLIFace *, KRB5_AUTHENTBODY ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_KRB5_AUTHENTBODY(struct AmiSSLIFace *, KRB5_AUTHENTBODY * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_KRB5_AUTHENTBODY_it(struct AmiSSLIFace *);
extern KRB5_AUTHENT *       VARARGS68K _AmiSSL_KRB5_AUTHENT_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_KRB5_AUTHENT_free(struct AmiSSLIFace *, KRB5_AUTHENT * a);
extern KRB5_AUTHENT *       VARARGS68K _AmiSSL_d2i_KRB5_AUTHENT(struct AmiSSLIFace *, KRB5_AUTHENT ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_KRB5_AUTHENT(struct AmiSSLIFace *, KRB5_AUTHENT * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_KRB5_AUTHENT_it(struct AmiSSLIFace *);
extern _LHASH *             VARARGS68K _AmiSSL_lh_new(struct AmiSSLIFace *, LHASH_HASH_FN_TYPE h, LHASH_COMP_FN_TYPE c);
extern void                 VARARGS68K _AmiSSL_lh_free(struct AmiSSLIFace *, _LHASH * lh);
extern void *               VARARGS68K _AmiSSL_lh_insert(struct AmiSSLIFace *, _LHASH * lh, void * data);
extern void *               VARARGS68K _AmiSSL_lh_delete(struct AmiSSLIFace *, _LHASH * lh, const void * data);
extern void *               VARARGS68K _AmiSSL_lh_retrieve(struct AmiSSLIFace *, _LHASH * lh, const void * data);
extern void                 VARARGS68K _AmiSSL_lh_doall(struct AmiSSLIFace *, _LHASH * lh, LHASH_DOALL_FN_TYPE func);
extern void                 VARARGS68K _AmiSSL_lh_doall_arg(struct AmiSSLIFace *, _LHASH * lh, LHASH_DOALL_ARG_FN_TYPE func, void * arg);
extern unsigned long        VARARGS68K _AmiSSL_lh_strhash(struct AmiSSLIFace *, const char * c);
extern unsigned long        VARARGS68K _AmiSSL_lh_num_items(struct AmiSSLIFace *, const _LHASH * lh);
extern void                 VARARGS68K _AmiSSL_lh_stats_bio(struct AmiSSLIFace *, const _LHASH * lh, BIO * out);
extern void                 VARARGS68K _AmiSSL_lh_node_stats_bio(struct AmiSSLIFace *, const _LHASH * lh, BIO * out);
extern void                 VARARGS68K _AmiSSL_lh_node_usage_stats_bio(struct AmiSSLIFace *, const _LHASH * lh, BIO * out);
extern int                  VARARGS68K _AmiSSL_OBJ_NAME_init(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_OBJ_NAME_new_index(struct AmiSSLIFace *, unsigned long (*hash_func)(const char *), int (*cmp_func)(const char *, const char *), void (*free_func)(const char *, int, const char *));
extern const char *         VARARGS68K _AmiSSL_OBJ_NAME_get(struct AmiSSLIFace *, const char * name, int type);
extern int                  VARARGS68K _AmiSSL_OBJ_NAME_add(struct AmiSSLIFace *, const char * name, int type, const char * data);
extern int                  VARARGS68K _AmiSSL_OBJ_NAME_remove(struct AmiSSLIFace *, const char * name, int type);
extern void                 VARARGS68K _AmiSSL_OBJ_NAME_cleanup(struct AmiSSLIFace *, int type);
extern void                 VARARGS68K _AmiSSL_OBJ_NAME_do_all(struct AmiSSLIFace *, int type, void (*fn)(const OBJ_NAME *, void *arg), void * arg);
extern void                 VARARGS68K _AmiSSL_OBJ_NAME_do_all_sorted(struct AmiSSLIFace *, int type, void (*fn)(const OBJ_NAME *, void *arg), void * arg);
extern ASN1_OBJECT *        VARARGS68K _AmiSSL_OBJ_dup(struct AmiSSLIFace *, const ASN1_OBJECT * o);
extern ASN1_OBJECT *        VARARGS68K _AmiSSL_OBJ_nid2obj(struct AmiSSLIFace *, int n);
extern const char *         VARARGS68K _AmiSSL_OBJ_nid2ln(struct AmiSSLIFace *, int n);
extern const char *         VARARGS68K _AmiSSL_OBJ_nid2sn(struct AmiSSLIFace *, int n);
extern int                  VARARGS68K _AmiSSL_OBJ_obj2nid(struct AmiSSLIFace *, const ASN1_OBJECT * o);
extern ASN1_OBJECT *        VARARGS68K _AmiSSL_OBJ_txt2obj(struct AmiSSLIFace *, const char * s, int no_name);
extern int                  VARARGS68K _AmiSSL_OBJ_obj2txt(struct AmiSSLIFace *, char * buf, int buf_len, const ASN1_OBJECT * a, int no_name);
extern int                  VARARGS68K _AmiSSL_OBJ_txt2nid(struct AmiSSLIFace *, const char * s);
extern int                  VARARGS68K _AmiSSL_OBJ_ln2nid(struct AmiSSLIFace *, const char * s);
extern int                  VARARGS68K _AmiSSL_OBJ_sn2nid(struct AmiSSLIFace *, const char * s);
extern int                  VARARGS68K _AmiSSL_OBJ_cmp(struct AmiSSLIFace *, const ASN1_OBJECT * a, const ASN1_OBJECT * b);
extern int                  VARARGS68K _AmiSSL_OBJ_new_nid(struct AmiSSLIFace *, int num);
extern int                  VARARGS68K _AmiSSL_OBJ_add_object(struct AmiSSLIFace *, const ASN1_OBJECT * obj);
extern int                  VARARGS68K _AmiSSL_OBJ_create(struct AmiSSLIFace *, const char * oid, const char * sn, const char * ln);
extern void                 VARARGS68K _AmiSSL_OBJ_cleanup(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_OBJ_create_objects(struct AmiSSLIFace *, BIO * in);
extern void                 VARARGS68K _AmiSSL_ERR_load_OBJ_strings(struct AmiSSLIFace *);
extern OCSP_RESPONSE *      VARARGS68K _AmiSSL_OCSP_sendreq_bio(struct AmiSSLIFace *, BIO * b, char * path, OCSP_REQUEST * req);
extern OCSP_CERTID *        VARARGS68K _AmiSSL_OCSP_cert_to_id(struct AmiSSLIFace *, const EVP_MD * dgst, X509 * subject, X509 * issuer);
extern OCSP_CERTID *        VARARGS68K _AmiSSL_OCSP_cert_id_new(struct AmiSSLIFace *, const EVP_MD * dgst, X509_NAME * issuerName, ASN1_BIT_STRING * issuerKey, ASN1_INTEGER * serialNumber);
extern OCSP_ONEREQ *        VARARGS68K _AmiSSL_OCSP_request_add0_id(struct AmiSSLIFace *, OCSP_REQUEST * req, OCSP_CERTID * cid);
extern int                  VARARGS68K _AmiSSL_OCSP_request_add1_nonce(struct AmiSSLIFace *, OCSP_REQUEST * req, unsigned char * val, int len);
extern int                  VARARGS68K _AmiSSL_OCSP_basic_add1_nonce(struct AmiSSLIFace *, OCSP_BASICRESP * resp, unsigned char * val, int len);
extern int                  VARARGS68K _AmiSSL_OCSP_check_nonce(struct AmiSSLIFace *, OCSP_REQUEST * req, OCSP_BASICRESP * bs);
extern int                  VARARGS68K _AmiSSL_OCSP_copy_nonce(struct AmiSSLIFace *, OCSP_BASICRESP * resp, OCSP_REQUEST * req);
extern int                  VARARGS68K _AmiSSL_OCSP_request_set1_name(struct AmiSSLIFace *, OCSP_REQUEST * req, X509_NAME * nm);
extern int                  VARARGS68K _AmiSSL_OCSP_request_add1_cert(struct AmiSSLIFace *, OCSP_REQUEST * req, X509 * cert);
extern int                  VARARGS68K _AmiSSL_OCSP_request_sign(struct AmiSSLIFace *, OCSP_REQUEST * req, X509 * signer, EVP_PKEY * key, const EVP_MD * dgst, STACK_OF(X509) * certs, unsigned long flags);
extern int                  VARARGS68K _AmiSSL_OCSP_response_status(struct AmiSSLIFace *, OCSP_RESPONSE * resp);
extern OCSP_BASICRESP *     VARARGS68K _AmiSSL_OCSP_response_get1_basic(struct AmiSSLIFace *, OCSP_RESPONSE * resp);
extern int                  VARARGS68K _AmiSSL_OCSP_resp_count(struct AmiSSLIFace *, OCSP_BASICRESP * bs);
extern OCSP_SINGLERESP *    VARARGS68K _AmiSSL_OCSP_resp_get0(struct AmiSSLIFace *, OCSP_BASICRESP * bs, int idx);
extern int                  VARARGS68K _AmiSSL_OCSP_resp_find(struct AmiSSLIFace *, OCSP_BASICRESP * bs, OCSP_CERTID * id, int last);
extern int                  VARARGS68K _AmiSSL_OCSP_single_get0_status(struct AmiSSLIFace *, OCSP_SINGLERESP * single, int * reason, ASN1_GENERALIZEDTIME ** revtime, ASN1_GENERALIZEDTIME ** thisupd, ASN1_GENERALIZEDTIME ** nextupd);
extern int                  VARARGS68K _AmiSSL_OCSP_resp_find_status(struct AmiSSLIFace *, OCSP_BASICRESP * bs, OCSP_CERTID * id, int * status, int * reason, ASN1_GENERALIZEDTIME ** revtime, ASN1_GENERALIZEDTIME ** thisupd, ASN1_GENERALIZEDTIME ** nextupd);
extern int                  VARARGS68K _AmiSSL_OCSP_check_validity(struct AmiSSLIFace *, ASN1_GENERALIZEDTIME * thisupd, ASN1_GENERALIZEDTIME * nextupd, long sec, long maxsec);
extern int                  VARARGS68K _AmiSSL_OCSP_request_verify(struct AmiSSLIFace *, OCSP_REQUEST * req, STACK_OF(X509) * certs, X509_STORE * store, unsigned long flags);
extern int                  VARARGS68K _AmiSSL_OCSP_parse_url(struct AmiSSLIFace *, char * url, char ** phost, char ** pport, char ** ppath, int * pssl);
extern int                  VARARGS68K _AmiSSL_OCSP_id_issuer_cmp(struct AmiSSLIFace *, OCSP_CERTID * a, OCSP_CERTID * b);
extern int                  VARARGS68K _AmiSSL_OCSP_id_cmp(struct AmiSSLIFace *, OCSP_CERTID * a, OCSP_CERTID * b);
extern int                  VARARGS68K _AmiSSL_OCSP_request_onereq_count(struct AmiSSLIFace *, OCSP_REQUEST * req);
extern OCSP_ONEREQ *        VARARGS68K _AmiSSL_OCSP_request_onereq_get0(struct AmiSSLIFace *, OCSP_REQUEST * req, int i);
extern OCSP_CERTID *        VARARGS68K _AmiSSL_OCSP_onereq_get0_id(struct AmiSSLIFace *, OCSP_ONEREQ * one);
extern int                  VARARGS68K _AmiSSL_OCSP_id_get0_info(struct AmiSSLIFace *, ASN1_OCTET_STRING ** piNameHash, ASN1_OBJECT ** pmd, ASN1_OCTET_STRING ** pikeyHash, ASN1_INTEGER ** pserial, OCSP_CERTID * cid);
extern int                  VARARGS68K _AmiSSL_OCSP_request_is_signed(struct AmiSSLIFace *, OCSP_REQUEST * req);
extern OCSP_RESPONSE *      VARARGS68K _AmiSSL_OCSP_response_create(struct AmiSSLIFace *, int status, OCSP_BASICRESP * bs);
extern OCSP_SINGLERESP *    VARARGS68K _AmiSSL_OCSP_basic_add1_status(struct AmiSSLIFace *, OCSP_BASICRESP * rsp, OCSP_CERTID * cid, int status, int reason, ASN1_TIME * revtime, ASN1_TIME * thisupd, ASN1_TIME * nextupd);
extern int                  VARARGS68K _AmiSSL_OCSP_basic_add1_cert(struct AmiSSLIFace *, OCSP_BASICRESP * resp, X509 * cert);
extern int                  VARARGS68K _AmiSSL_OCSP_basic_sign(struct AmiSSLIFace *, OCSP_BASICRESP * brsp, X509 * signer, EVP_PKEY * key, const EVP_MD * dgst, STACK_OF(X509) * certs, unsigned long flags);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_OCSP_crlID_new(struct AmiSSLIFace *, char * url, long * n, char * tim);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_OCSP_accept_responses_new(struct AmiSSLIFace *, char ** oids);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_OCSP_archive_cutoff_new(struct AmiSSLIFace *, char * tim);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_OCSP_url_svcloc_new(struct AmiSSLIFace *, X509_NAME * issuer, char ** urls);
extern int                  VARARGS68K _AmiSSL_OCSP_REQUEST_get_ext_count(struct AmiSSLIFace *, OCSP_REQUEST * x);
extern int                  VARARGS68K _AmiSSL_OCSP_REQUEST_get_ext_by_NID(struct AmiSSLIFace *, OCSP_REQUEST * x, int nid, int lastpos);
extern int                  VARARGS68K _AmiSSL_OCSP_REQUEST_get_ext_by_OBJ(struct AmiSSLIFace *, OCSP_REQUEST * x, ASN1_OBJECT * obj, int lastpos);
extern int                  VARARGS68K _AmiSSL_OCSP_REQUEST_get_ext_by_critical(struct AmiSSLIFace *, OCSP_REQUEST * x, int crit, int lastpos);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_OCSP_REQUEST_get_ext(struct AmiSSLIFace *, OCSP_REQUEST * x, int loc);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_OCSP_REQUEST_delete_ext(struct AmiSSLIFace *, OCSP_REQUEST * x, int loc);
extern void *               VARARGS68K _AmiSSL_OCSP_REQUEST_get1_ext_d2i(struct AmiSSLIFace *, OCSP_REQUEST * x, int nid, int * crit, int * idx);
extern int                  VARARGS68K _AmiSSL_OCSP_REQUEST_add1_ext_i2d(struct AmiSSLIFace *, OCSP_REQUEST * x, int nid, void * value, int crit, unsigned long flags);
extern int                  VARARGS68K _AmiSSL_OCSP_REQUEST_add_ext(struct AmiSSLIFace *, OCSP_REQUEST * x, X509_EXTENSION * ex, int loc);
extern int                  VARARGS68K _AmiSSL_OCSP_ONEREQ_get_ext_count(struct AmiSSLIFace *, OCSP_ONEREQ * x);
extern int                  VARARGS68K _AmiSSL_OCSP_ONEREQ_get_ext_by_NID(struct AmiSSLIFace *, OCSP_ONEREQ * x, int nid, int lastpos);
extern int                  VARARGS68K _AmiSSL_OCSP_ONEREQ_get_ext_by_OBJ(struct AmiSSLIFace *, OCSP_ONEREQ * x, ASN1_OBJECT * obj, int lastpos);
extern int                  VARARGS68K _AmiSSL_OCSP_ONEREQ_get_ext_by_critical(struct AmiSSLIFace *, OCSP_ONEREQ * x, int crit, int lastpos);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_OCSP_ONEREQ_get_ext(struct AmiSSLIFace *, OCSP_ONEREQ * x, int loc);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_OCSP_ONEREQ_delete_ext(struct AmiSSLIFace *, OCSP_ONEREQ * x, int loc);
extern void *               VARARGS68K _AmiSSL_OCSP_ONEREQ_get1_ext_d2i(struct AmiSSLIFace *, OCSP_ONEREQ * x, int nid, int * crit, int * idx);
extern int                  VARARGS68K _AmiSSL_OCSP_ONEREQ_add1_ext_i2d(struct AmiSSLIFace *, OCSP_ONEREQ * x, int nid, void * value, int crit, unsigned long flags);
extern int                  VARARGS68K _AmiSSL_OCSP_ONEREQ_add_ext(struct AmiSSLIFace *, OCSP_ONEREQ * x, X509_EXTENSION * ex, int loc);
extern int                  VARARGS68K _AmiSSL_OCSP_BASICRESP_get_ext_count(struct AmiSSLIFace *, OCSP_BASICRESP * x);
extern int                  VARARGS68K _AmiSSL_OCSP_BASICRESP_get_ext_by_NID(struct AmiSSLIFace *, OCSP_BASICRESP * x, int nid, int lastpos);
extern int                  VARARGS68K _AmiSSL_OCSP_BASICRESP_get_ext_by_OBJ(struct AmiSSLIFace *, OCSP_BASICRESP * x, ASN1_OBJECT * obj, int lastpos);
extern int                  VARARGS68K _AmiSSL_OCSP_BASICRESP_get_ext_by_critical(struct AmiSSLIFace *, OCSP_BASICRESP * x, int crit, int lastpos);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_OCSP_BASICRESP_get_ext(struct AmiSSLIFace *, OCSP_BASICRESP * x, int loc);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_OCSP_BASICRESP_delete_ext(struct AmiSSLIFace *, OCSP_BASICRESP * x, int loc);
extern void *               VARARGS68K _AmiSSL_OCSP_BASICRESP_get1_ext_d2i(struct AmiSSLIFace *, OCSP_BASICRESP * x, int nid, int * crit, int * idx);
extern int                  VARARGS68K _AmiSSL_OCSP_BASICRESP_add1_ext_i2d(struct AmiSSLIFace *, OCSP_BASICRESP * x, int nid, void * value, int crit, unsigned long flags);
extern int                  VARARGS68K _AmiSSL_OCSP_BASICRESP_add_ext(struct AmiSSLIFace *, OCSP_BASICRESP * x, X509_EXTENSION * ex, int loc);
extern int                  VARARGS68K _AmiSSL_OCSP_SINGLERESP_get_ext_count(struct AmiSSLIFace *, OCSP_SINGLERESP * x);
extern int                  VARARGS68K _AmiSSL_OCSP_SINGLERESP_get_ext_by_NID(struct AmiSSLIFace *, OCSP_SINGLERESP * x, int nid, int lastpos);
extern int                  VARARGS68K _AmiSSL_OCSP_SINGLERESP_get_ext_by_OBJ(struct AmiSSLIFace *, OCSP_SINGLERESP * x, ASN1_OBJECT * obj, int lastpos);
extern int                  VARARGS68K _AmiSSL_OCSP_SINGLERESP_get_ext_by_critical(struct AmiSSLIFace *, OCSP_SINGLERESP * x, int crit, int lastpos);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_OCSP_SINGLERESP_get_ext(struct AmiSSLIFace *, OCSP_SINGLERESP * x, int loc);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_OCSP_SINGLERESP_delete_ext(struct AmiSSLIFace *, OCSP_SINGLERESP * x, int loc);
extern void *               VARARGS68K _AmiSSL_OCSP_SINGLERESP_get1_ext_d2i(struct AmiSSLIFace *, OCSP_SINGLERESP * x, int nid, int * crit, int * idx);
extern int                  VARARGS68K _AmiSSL_OCSP_SINGLERESP_add1_ext_i2d(struct AmiSSLIFace *, OCSP_SINGLERESP * x, int nid, void * value, int crit, unsigned long flags);
extern int                  VARARGS68K _AmiSSL_OCSP_SINGLERESP_add_ext(struct AmiSSLIFace *, OCSP_SINGLERESP * x, X509_EXTENSION * ex, int loc);
extern OCSP_SINGLERESP *    VARARGS68K _AmiSSL_OCSP_SINGLERESP_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_OCSP_SINGLERESP_free(struct AmiSSLIFace *, OCSP_SINGLERESP * a);
extern OCSP_SINGLERESP *    VARARGS68K _AmiSSL_d2i_OCSP_SINGLERESP(struct AmiSSLIFace *, OCSP_SINGLERESP ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_OCSP_SINGLERESP(struct AmiSSLIFace *, OCSP_SINGLERESP * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_OCSP_SINGLERESP_it(struct AmiSSLIFace *);
extern OCSP_CERTSTATUS *    VARARGS68K _AmiSSL_OCSP_CERTSTATUS_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_OCSP_CERTSTATUS_free(struct AmiSSLIFace *, OCSP_CERTSTATUS * a);
extern OCSP_CERTSTATUS *    VARARGS68K _AmiSSL_d2i_OCSP_CERTSTATUS(struct AmiSSLIFace *, OCSP_CERTSTATUS ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_OCSP_CERTSTATUS(struct AmiSSLIFace *, OCSP_CERTSTATUS * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_OCSP_CERTSTATUS_it(struct AmiSSLIFace *);
extern OCSP_REVOKEDINFO *   VARARGS68K _AmiSSL_OCSP_REVOKEDINFO_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_OCSP_REVOKEDINFO_free(struct AmiSSLIFace *, OCSP_REVOKEDINFO * a);
extern OCSP_REVOKEDINFO *   VARARGS68K _AmiSSL_d2i_OCSP_REVOKEDINFO(struct AmiSSLIFace *, OCSP_REVOKEDINFO ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_OCSP_REVOKEDINFO(struct AmiSSLIFace *, OCSP_REVOKEDINFO * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_OCSP_REVOKEDINFO_it(struct AmiSSLIFace *);
extern OCSP_BASICRESP *     VARARGS68K _AmiSSL_OCSP_BASICRESP_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_OCSP_BASICRESP_free(struct AmiSSLIFace *, OCSP_BASICRESP * a);
extern OCSP_BASICRESP *     VARARGS68K _AmiSSL_d2i_OCSP_BASICRESP(struct AmiSSLIFace *, OCSP_BASICRESP ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_OCSP_BASICRESP(struct AmiSSLIFace *, OCSP_BASICRESP * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_OCSP_BASICRESP_it(struct AmiSSLIFace *);
extern OCSP_RESPDATA *      VARARGS68K _AmiSSL_OCSP_RESPDATA_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_OCSP_RESPDATA_free(struct AmiSSLIFace *, OCSP_RESPDATA * a);
extern OCSP_RESPDATA *      VARARGS68K _AmiSSL_d2i_OCSP_RESPDATA(struct AmiSSLIFace *, OCSP_RESPDATA ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_OCSP_RESPDATA(struct AmiSSLIFace *, OCSP_RESPDATA * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_OCSP_RESPDATA_it(struct AmiSSLIFace *);
extern OCSP_RESPID *        VARARGS68K _AmiSSL_OCSP_RESPID_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_OCSP_RESPID_free(struct AmiSSLIFace *, OCSP_RESPID * a);
extern OCSP_RESPID *        VARARGS68K _AmiSSL_d2i_OCSP_RESPID(struct AmiSSLIFace *, OCSP_RESPID ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_OCSP_RESPID(struct AmiSSLIFace *, OCSP_RESPID * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_OCSP_RESPID_it(struct AmiSSLIFace *);
extern OCSP_RESPONSE *      VARARGS68K _AmiSSL_OCSP_RESPONSE_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_OCSP_RESPONSE_free(struct AmiSSLIFace *, OCSP_RESPONSE * a);
extern OCSP_RESPONSE *      VARARGS68K _AmiSSL_d2i_OCSP_RESPONSE(struct AmiSSLIFace *, OCSP_RESPONSE ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_OCSP_RESPONSE(struct AmiSSLIFace *, OCSP_RESPONSE * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_OCSP_RESPONSE_it(struct AmiSSLIFace *);
extern OCSP_RESPBYTES *     VARARGS68K _AmiSSL_OCSP_RESPBYTES_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_OCSP_RESPBYTES_free(struct AmiSSLIFace *, OCSP_RESPBYTES * a);
extern OCSP_RESPBYTES *     VARARGS68K _AmiSSL_d2i_OCSP_RESPBYTES(struct AmiSSLIFace *, OCSP_RESPBYTES ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_OCSP_RESPBYTES(struct AmiSSLIFace *, OCSP_RESPBYTES * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_OCSP_RESPBYTES_it(struct AmiSSLIFace *);
extern OCSP_ONEREQ *        VARARGS68K _AmiSSL_OCSP_ONEREQ_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_OCSP_ONEREQ_free(struct AmiSSLIFace *, OCSP_ONEREQ * a);
extern OCSP_ONEREQ *        VARARGS68K _AmiSSL_d2i_OCSP_ONEREQ(struct AmiSSLIFace *, OCSP_ONEREQ ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_OCSP_ONEREQ(struct AmiSSLIFace *, OCSP_ONEREQ * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_OCSP_ONEREQ_it(struct AmiSSLIFace *);
extern OCSP_CERTID *        VARARGS68K _AmiSSL_OCSP_CERTID_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_OCSP_CERTID_free(struct AmiSSLIFace *, OCSP_CERTID * a);
extern OCSP_CERTID *        VARARGS68K _AmiSSL_d2i_OCSP_CERTID(struct AmiSSLIFace *, OCSP_CERTID ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_OCSP_CERTID(struct AmiSSLIFace *, OCSP_CERTID * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_OCSP_CERTID_it(struct AmiSSLIFace *);
extern OCSP_REQUEST *       VARARGS68K _AmiSSL_OCSP_REQUEST_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_OCSP_REQUEST_free(struct AmiSSLIFace *, OCSP_REQUEST * a);
extern OCSP_REQUEST *       VARARGS68K _AmiSSL_d2i_OCSP_REQUEST(struct AmiSSLIFace *, OCSP_REQUEST ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_OCSP_REQUEST(struct AmiSSLIFace *, OCSP_REQUEST * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_OCSP_REQUEST_it(struct AmiSSLIFace *);
extern OCSP_SIGNATURE *     VARARGS68K _AmiSSL_OCSP_SIGNATURE_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_OCSP_SIGNATURE_free(struct AmiSSLIFace *, OCSP_SIGNATURE * a);
extern OCSP_SIGNATURE *     VARARGS68K _AmiSSL_d2i_OCSP_SIGNATURE(struct AmiSSLIFace *, OCSP_SIGNATURE ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_OCSP_SIGNATURE(struct AmiSSLIFace *, OCSP_SIGNATURE * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_OCSP_SIGNATURE_it(struct AmiSSLIFace *);
extern OCSP_REQINFO *       VARARGS68K _AmiSSL_OCSP_REQINFO_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_OCSP_REQINFO_free(struct AmiSSLIFace *, OCSP_REQINFO * a);
extern OCSP_REQINFO *       VARARGS68K _AmiSSL_d2i_OCSP_REQINFO(struct AmiSSLIFace *, OCSP_REQINFO ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_OCSP_REQINFO(struct AmiSSLIFace *, OCSP_REQINFO * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_OCSP_REQINFO_it(struct AmiSSLIFace *);
extern OCSP_CRLID *         VARARGS68K _AmiSSL_OCSP_CRLID_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_OCSP_CRLID_free(struct AmiSSLIFace *, OCSP_CRLID * a);
extern OCSP_CRLID *         VARARGS68K _AmiSSL_d2i_OCSP_CRLID(struct AmiSSLIFace *, OCSP_CRLID ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_OCSP_CRLID(struct AmiSSLIFace *, OCSP_CRLID * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_OCSP_CRLID_it(struct AmiSSLIFace *);
extern OCSP_SERVICELOC *    VARARGS68K _AmiSSL_OCSP_SERVICELOC_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_OCSP_SERVICELOC_free(struct AmiSSLIFace *, OCSP_SERVICELOC * a);
extern OCSP_SERVICELOC *    VARARGS68K _AmiSSL_d2i_OCSP_SERVICELOC(struct AmiSSLIFace *, OCSP_SERVICELOC ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_OCSP_SERVICELOC(struct AmiSSLIFace *, OCSP_SERVICELOC * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_OCSP_SERVICELOC_it(struct AmiSSLIFace *);
extern const char *         VARARGS68K _AmiSSL_OCSP_response_status_str(struct AmiSSLIFace *, long s);
extern const char *         VARARGS68K _AmiSSL_OCSP_cert_status_str(struct AmiSSLIFace *, long s);
extern const char *         VARARGS68K _AmiSSL_OCSP_crl_reason_str(struct AmiSSLIFace *, long s);
extern int                  VARARGS68K _AmiSSL_OCSP_REQUEST_print(struct AmiSSLIFace *, BIO * bp, OCSP_REQUEST * a, unsigned long flags);
extern int                  VARARGS68K _AmiSSL_OCSP_RESPONSE_print(struct AmiSSLIFace *, BIO * bp, OCSP_RESPONSE * o, unsigned long flags);
extern int                  VARARGS68K _AmiSSL_OCSP_basic_verify(struct AmiSSLIFace *, OCSP_BASICRESP * bs, STACK_OF(X509) * certs, X509_STORE * st, unsigned long flags);
extern void                 VARARGS68K _AmiSSL_ERR_load_OCSP_strings(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_PEM_get_EVP_CIPHER_INFO(struct AmiSSLIFace *, char * header, EVP_CIPHER_INFO * cipher);
extern int                  VARARGS68K _AmiSSL_PEM_do_header(struct AmiSSLIFace *, EVP_CIPHER_INFO * cipher, unsigned char * data, long * len, pem_password_cb * callback, void * u);
extern int                  VARARGS68K _AmiSSL_PEM_read_bio(struct AmiSSLIFace *, BIO * bp, char ** name, char ** header, unsigned char ** data, long * len);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio(struct AmiSSLIFace *, BIO * bp, const char * name, char * hdr, unsigned char * data, long len);
extern int                  VARARGS68K _AmiSSL_PEM_bytes_read_bio(struct AmiSSLIFace *, unsigned char ** pdata, long * plen, char ** pnm, const char * name, BIO * bp, pem_password_cb * cb, void * u);
extern void *               VARARGS68K _AmiSSL_PEM_ASN1_read_bio(struct AmiSSLIFace *, d2i_of_void * d2i, const char * name, BIO * bp, void ** x, pem_password_cb * cb, void * u);
extern int                  VARARGS68K _AmiSSL_PEM_ASN1_write_bio(struct AmiSSLIFace *, i2d_of_void * i2d, const char * name, BIO * bp, char * x, const EVP_CIPHER * enc, unsigned char * kstr, int klen, pem_password_cb * cb, void * u);
extern STACK_OF(X509_INFO) * VARARGS68K _AmiSSL_PEM_X509_INFO_read_bio(struct AmiSSLIFace *, BIO * bp, STACK_OF(X509_INFO) * sk, pem_password_cb * cb, void * u);
extern int                  VARARGS68K _AmiSSL_PEM_X509_INFO_write_bio(struct AmiSSLIFace *, BIO * bp, X509_INFO * xi, EVP_CIPHER * enc, unsigned char * kstr, int klen, pem_password_cb * cd, void * u);
extern int                  VARARGS68K _AmiSSL_PEM_SealInit(struct AmiSSLIFace *, PEM_ENCODE_SEAL_CTX * ctx, EVP_CIPHER * type, EVP_MD * md_type, unsigned char ** ek, int * ekl, unsigned char * iv, EVP_PKEY ** pubk, int npubk);
extern void                 VARARGS68K _AmiSSL_PEM_SealUpdate(struct AmiSSLIFace *, PEM_ENCODE_SEAL_CTX * ctx, unsigned char * out, int * outl, unsigned char * in, int inl);
extern int                  VARARGS68K _AmiSSL_PEM_SealFinal(struct AmiSSLIFace *, PEM_ENCODE_SEAL_CTX * ctx, unsigned char * sig, int * sigl, unsigned char * out, int * outl, EVP_PKEY * priv);
extern void                 VARARGS68K _AmiSSL_PEM_SignInit(struct AmiSSLIFace *, EVP_MD_CTX * ctx, EVP_MD * type);
extern void                 VARARGS68K _AmiSSL_PEM_SignUpdate(struct AmiSSLIFace *, EVP_MD_CTX * ctx, unsigned char * d, unsigned int cnt);
extern int                  VARARGS68K _AmiSSL_PEM_SignFinal(struct AmiSSLIFace *, EVP_MD_CTX * ctx, unsigned char * sigret, unsigned int * siglen, EVP_PKEY * pkey);
extern int                  VARARGS68K _AmiSSL_PEM_def_callback(struct AmiSSLIFace *, char * buf, int num, int w, void * key);
extern void                 VARARGS68K _AmiSSL_PEM_proc_type(struct AmiSSLIFace *, char * buf, int type);
extern void                 VARARGS68K _AmiSSL_PEM_dek_info(struct AmiSSLIFace *, char * buf, const char * type, int len, char * str);
extern X509 *               VARARGS68K _AmiSSL_PEM_read_bio_X509(struct AmiSSLIFace *, BIO * bp, X509 ** x, pem_password_cb * cb, void * u);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_X509(struct AmiSSLIFace *, BIO * bp, X509 * x);
extern X509 *               VARARGS68K _AmiSSL_PEM_read_bio_X509_AUX(struct AmiSSLIFace *, BIO * bp, X509 ** x, pem_password_cb * cb, void * u);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_X509_AUX(struct AmiSSLIFace *, BIO * bp, X509 * x);
extern X509_REQ *           VARARGS68K _AmiSSL_PEM_read_bio_X509_REQ(struct AmiSSLIFace *, BIO * bp, X509_REQ ** x, pem_password_cb * cb, void * u);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_X509_REQ(struct AmiSSLIFace *, BIO * bp, X509_REQ * x);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_X509_REQ_NEW(struct AmiSSLIFace *, BIO * bp, X509_REQ * x);
extern X509_CRL *           VARARGS68K _AmiSSL_PEM_read_bio_X509_CRL(struct AmiSSLIFace *, BIO * bp, X509_CRL ** x, pem_password_cb * cb, void * u);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_X509_CRL(struct AmiSSLIFace *, BIO * bp, X509_CRL * x);
extern PKCS7 *              VARARGS68K _AmiSSL_PEM_read_bio_PKCS7(struct AmiSSLIFace *, BIO * bp, PKCS7 ** x, pem_password_cb * cb, void * u);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_PKCS7(struct AmiSSLIFace *, BIO * bp, PKCS7 * x);
extern NETSCAPE_CERT_SEQUENCE * VARARGS68K _AmiSSL_PEM_read_bio_NETSCAPE_CERT_SEQUENCE(struct AmiSSLIFace *, BIO * bp, NETSCAPE_CERT_SEQUENCE ** x, pem_password_cb * cb, void * u);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_NETSCAPE_CERT_SEQUENCE(struct AmiSSLIFace *, BIO * bp, NETSCAPE_CERT_SEQUENCE * x);
extern X509_SIG *           VARARGS68K _AmiSSL_PEM_read_bio_PKCS8(struct AmiSSLIFace *, BIO * bp, X509_SIG ** x, pem_password_cb * cb, void * u);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_PKCS8(struct AmiSSLIFace *, BIO * bp, X509_SIG * x);
extern PKCS8_PRIV_KEY_INFO * VARARGS68K _AmiSSL_PEM_read_bio_PKCS8_PRIV_KEY_INFO(struct AmiSSLIFace *, BIO * bp, PKCS8_PRIV_KEY_INFO ** x, pem_password_cb * cb, void * u);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_PKCS8_PRIV_KEY_INFO(struct AmiSSLIFace *, BIO * bp, PKCS8_PRIV_KEY_INFO * x);
extern RSA *                VARARGS68K _AmiSSL_PEM_read_bio_RSAPrivateKey(struct AmiSSLIFace *, BIO * bp, RSA ** x, pem_password_cb * cb, void * u);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_RSAPrivateKey(struct AmiSSLIFace *, BIO * bp, RSA * x, const EVP_CIPHER * enc, unsigned char * kstr, int klen, pem_password_cb * cb, void * u);
extern RSA *                VARARGS68K _AmiSSL_PEM_read_bio_RSAPublicKey(struct AmiSSLIFace *, BIO * bp, RSA ** x, pem_password_cb * cb, void * u);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_RSAPublicKey(struct AmiSSLIFace *, BIO * bp, RSA * x);
extern RSA *                VARARGS68K _AmiSSL_PEM_read_bio_RSA_PUBKEY(struct AmiSSLIFace *, BIO * bp, RSA ** x, pem_password_cb * cb, void * u);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_RSA_PUBKEY(struct AmiSSLIFace *, BIO * bp, RSA * x);
extern DSA *                VARARGS68K _AmiSSL_PEM_read_bio_DSAPrivateKey(struct AmiSSLIFace *, BIO * bp, DSA ** x, pem_password_cb * cb, void * u);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_DSAPrivateKey(struct AmiSSLIFace *, BIO * bp, DSA * x, const EVP_CIPHER * enc, unsigned char * kstr, int klen, pem_password_cb * cb, void * u);
extern DSA *                VARARGS68K _AmiSSL_PEM_read_bio_DSA_PUBKEY(struct AmiSSLIFace *, BIO * bp, DSA ** x, pem_password_cb * cb, void * u);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_DSA_PUBKEY(struct AmiSSLIFace *, BIO * bp, DSA * x);
extern DSA *                VARARGS68K _AmiSSL_PEM_read_bio_DSAparams(struct AmiSSLIFace *, BIO * bp, DSA ** x, pem_password_cb * cb, void * u);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_DSAparams(struct AmiSSLIFace *, BIO * bp, DSA * x);
extern DH *                 VARARGS68K _AmiSSL_PEM_read_bio_DHparams(struct AmiSSLIFace *, BIO * bp, DH ** x, pem_password_cb * cb, void * u);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_DHparams(struct AmiSSLIFace *, BIO * bp, DH * x);
extern EVP_PKEY *           VARARGS68K _AmiSSL_PEM_read_bio_PrivateKey(struct AmiSSLIFace *, BIO * bp, EVP_PKEY ** x, pem_password_cb * cb, void * u);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_PrivateKey(struct AmiSSLIFace *, BIO * bp, EVP_PKEY * x, const EVP_CIPHER * enc, unsigned char * kstr, int klen, pem_password_cb * cb, void * u);
extern EVP_PKEY *           VARARGS68K _AmiSSL_PEM_read_bio_PUBKEY(struct AmiSSLIFace *, BIO * bp, EVP_PKEY ** x, pem_password_cb * cb, void * u);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_PUBKEY(struct AmiSSLIFace *, BIO * bp, EVP_PKEY * x);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_PKCS8PrivateKey_nid(struct AmiSSLIFace *, BIO * bp, EVP_PKEY * x, int nid, char * kstr, int klen, pem_password_cb * cb, void * u);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_PKCS8PrivateKey(struct AmiSSLIFace *, BIO * a, EVP_PKEY * b, const EVP_CIPHER * c, char * d, int a1, pem_password_cb * e, void * f);
extern int                  VARARGS68K _AmiSSL_i2d_PKCS8PrivateKey_bio(struct AmiSSLIFace *, BIO * bp, EVP_PKEY * x, const EVP_CIPHER * enc, char * kstr, int klen, pem_password_cb * cb, void * u);
extern int                  VARARGS68K _AmiSSL_i2d_PKCS8PrivateKey_nid_bio(struct AmiSSLIFace *, BIO * bp, EVP_PKEY * x, int nid, char * kstr, int klen, pem_password_cb * cb, void * u);
extern EVP_PKEY *           VARARGS68K _AmiSSL_d2i_PKCS8PrivateKey_bio(struct AmiSSLIFace *, BIO * bp, EVP_PKEY ** x, pem_password_cb * cb, void * u);
extern void                 VARARGS68K _AmiSSL_ERR_load_PEM_strings(struct AmiSSLIFace *);
extern PKCS12_SAFEBAG *     VARARGS68K _AmiSSL_PKCS12_x5092certbag(struct AmiSSLIFace *, X509 * x509);
extern PKCS12_SAFEBAG *     VARARGS68K _AmiSSL_PKCS12_x509crl2certbag(struct AmiSSLIFace *, X509_CRL * crl);
extern X509 *               VARARGS68K _AmiSSL_PKCS12_certbag2x509(struct AmiSSLIFace *, PKCS12_SAFEBAG * bag);
extern X509_CRL *           VARARGS68K _AmiSSL_PKCS12_certbag2x509crl(struct AmiSSLIFace *, PKCS12_SAFEBAG * bag);
extern PKCS12_SAFEBAG *     VARARGS68K _AmiSSL_PKCS12_item_pack_safebag(struct AmiSSLIFace *, void * obj, const ASN1_ITEM * it, int nid1, int nid2);
extern PKCS12_SAFEBAG *     VARARGS68K _AmiSSL_PKCS12_MAKE_KEYBAG(struct AmiSSLIFace *, PKCS8_PRIV_KEY_INFO * p8);
extern PKCS8_PRIV_KEY_INFO * VARARGS68K _AmiSSL_PKCS8_decrypt(struct AmiSSLIFace *, X509_SIG * p8, const char * pass, int passlen);
extern PKCS8_PRIV_KEY_INFO * VARARGS68K _AmiSSL_PKCS12_decrypt_skey(struct AmiSSLIFace *, PKCS12_SAFEBAG * bag, const char * pass, int passlen);
extern X509_SIG *           VARARGS68K _AmiSSL_PKCS8_encrypt(struct AmiSSLIFace *, int pbe_nid, const EVP_CIPHER * cipher, const char * pass, int passlen, unsigned char * salt, int saltlen, int iter, PKCS8_PRIV_KEY_INFO * p8);
extern PKCS12_SAFEBAG *     VARARGS68K _AmiSSL_PKCS12_MAKE_SHKEYBAG(struct AmiSSLIFace *, int pbe_nid, const char * pass, int passlen, unsigned char * salt, int saltlen, int iter, PKCS8_PRIV_KEY_INFO * p8);
extern PKCS7 *              VARARGS68K _AmiSSL_PKCS12_pack_p7data(struct AmiSSLIFace *, STACK_OF(PKCS12_SAFEBAG) * sk);
extern STACK_OF(PKCS12_SAFEBAG) * VARARGS68K _AmiSSL_PKCS12_unpack_p7data(struct AmiSSLIFace *, PKCS7 * p7);
extern PKCS7 *              VARARGS68K _AmiSSL_PKCS12_pack_p7encdata(struct AmiSSLIFace *, int pbe_nid, const char * pass, int passlen, unsigned char * salt, int saltlen, int iter, STACK_OF(PKCS12_SAFEBAG) * bags);
extern STACK_OF(PKCS12_SAFEBAG) * VARARGS68K _AmiSSL_PKCS12_unpack_p7encdata(struct AmiSSLIFace *, PKCS7 * p7, const char * pass, int passlen);
extern int                  VARARGS68K _AmiSSL_PKCS12_pack_authsafes(struct AmiSSLIFace *, PKCS12 * p12, STACK_OF(PKCS7) * safes);
extern STACK_OF(PKCS7) *    VARARGS68K _AmiSSL_PKCS12_unpack_authsafes(struct AmiSSLIFace *, PKCS12 * p12);
extern int                  VARARGS68K _AmiSSL_PKCS12_add_localkeyid(struct AmiSSLIFace *, PKCS12_SAFEBAG * bag, unsigned char * name, int namelen);
extern int                  VARARGS68K _AmiSSL_PKCS12_add_friendlyname_asc(struct AmiSSLIFace *, PKCS12_SAFEBAG * bag, const char * name, int namelen);
extern int                  VARARGS68K _AmiSSL_PKCS12_add_CSPName_asc(struct AmiSSLIFace *, PKCS12_SAFEBAG * bag, const char * name, int namelen);
extern int                  VARARGS68K _AmiSSL_PKCS12_add_friendlyname_uni(struct AmiSSLIFace *, PKCS12_SAFEBAG * bag, const unsigned char * name, int namelen);
extern int                  VARARGS68K _AmiSSL_PKCS8_add_keyusage(struct AmiSSLIFace *, PKCS8_PRIV_KEY_INFO * p8, int usage);
extern ASN1_TYPE *          VARARGS68K _AmiSSL_PKCS12_get_attr_gen(struct AmiSSLIFace *, STACK_OF(X509_ATTRIBUTE) * attrs, int attr_nid);
extern char *               VARARGS68K _AmiSSL_PKCS12_get_friendlyname(struct AmiSSLIFace *, PKCS12_SAFEBAG * bag);
extern unsigned char *      VARARGS68K _AmiSSL_PKCS12_pbe_crypt(struct AmiSSLIFace *, X509_ALGOR * algor, const char * pass, int passlen, unsigned char * in, int inlen, unsigned char ** data, int * datalen, int en_de);
extern void *               VARARGS68K _AmiSSL_PKCS12_item_decrypt_d2i(struct AmiSSLIFace *, X509_ALGOR * algor, const ASN1_ITEM * it, const char * pass, int passlen, ASN1_OCTET_STRING * oct, int zbuf);
extern ASN1_OCTET_STRING *  VARARGS68K _AmiSSL_PKCS12_item_i2d_encrypt(struct AmiSSLIFace *, X509_ALGOR * algor, const ASN1_ITEM * it, const char * pass, int passlen, void * obj, int zbuf);
extern PKCS12 *             VARARGS68K _AmiSSL_PKCS12_init(struct AmiSSLIFace *, int mode);
extern int                  VARARGS68K _AmiSSL_PKCS12_key_gen_asc(struct AmiSSLIFace *, const char * pass, int passlen, unsigned char * salt, int saltlen, int id, int iter, int n, unsigned char * out, const EVP_MD * md_type);
extern int                  VARARGS68K _AmiSSL_PKCS12_key_gen_uni(struct AmiSSLIFace *, unsigned char * pass, int passlen, unsigned char * salt, int saltlen, int id, int iter, int n, unsigned char * out, const EVP_MD * md_type);
extern int                  VARARGS68K _AmiSSL_PKCS12_PBE_keyivgen(struct AmiSSLIFace *, EVP_CIPHER_CTX * ctx, const char * pass, int passlen, ASN1_TYPE * param, const EVP_CIPHER * cipher, const EVP_MD * md_type, int en_de);
extern int                  VARARGS68K _AmiSSL_PKCS12_gen_mac(struct AmiSSLIFace *, PKCS12 * p12, const char * pass, int passlen, unsigned char * mac, unsigned int * maclen);
extern int                  VARARGS68K _AmiSSL_PKCS12_verify_mac(struct AmiSSLIFace *, PKCS12 * p12, const char * pass, int passlen);
extern int                  VARARGS68K _AmiSSL_PKCS12_set_mac(struct AmiSSLIFace *, PKCS12 * p12, const char * pass, int passlen, unsigned char * salt, int saltlen, int iter, const EVP_MD * md_type);
extern int                  VARARGS68K _AmiSSL_PKCS12_setup_mac(struct AmiSSLIFace *, PKCS12 * p12, int iter, unsigned char * salt, int saltlen, const EVP_MD * md_type);
extern unsigned char *      VARARGS68K _AmiSSL_OPENSSL_asc2uni(struct AmiSSLIFace *, const char * asc, int asclen, unsigned char ** uni, int * unilen);
extern char *               VARARGS68K _AmiSSL_OPENSSL_uni2asc(struct AmiSSLIFace *, unsigned char * uni, int unilen);
extern PKCS12 *             VARARGS68K _AmiSSL_PKCS12_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_PKCS12_free(struct AmiSSLIFace *, PKCS12 * a);
extern PKCS12 *             VARARGS68K _AmiSSL_d2i_PKCS12(struct AmiSSLIFace *, PKCS12 ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_PKCS12(struct AmiSSLIFace *, PKCS12 * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_PKCS12_it(struct AmiSSLIFace *);
extern PKCS12_MAC_DATA *    VARARGS68K _AmiSSL_PKCS12_MAC_DATA_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_PKCS12_MAC_DATA_free(struct AmiSSLIFace *, PKCS12_MAC_DATA * a);
extern PKCS12_MAC_DATA *    VARARGS68K _AmiSSL_d2i_PKCS12_MAC_DATA(struct AmiSSLIFace *, PKCS12_MAC_DATA ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_PKCS12_MAC_DATA(struct AmiSSLIFace *, PKCS12_MAC_DATA * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_PKCS12_MAC_DATA_it(struct AmiSSLIFace *);
extern PKCS12_SAFEBAG *     VARARGS68K _AmiSSL_PKCS12_SAFEBAG_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_PKCS12_SAFEBAG_free(struct AmiSSLIFace *, PKCS12_SAFEBAG * a);
extern PKCS12_SAFEBAG *     VARARGS68K _AmiSSL_d2i_PKCS12_SAFEBAG(struct AmiSSLIFace *, PKCS12_SAFEBAG ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_PKCS12_SAFEBAG(struct AmiSSLIFace *, PKCS12_SAFEBAG * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_PKCS12_SAFEBAG_it(struct AmiSSLIFace *);
extern PKCS12_BAGS *        VARARGS68K _AmiSSL_PKCS12_BAGS_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_PKCS12_BAGS_free(struct AmiSSLIFace *, PKCS12_BAGS * a);
extern PKCS12_BAGS *        VARARGS68K _AmiSSL_d2i_PKCS12_BAGS(struct AmiSSLIFace *, PKCS12_BAGS ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_PKCS12_BAGS(struct AmiSSLIFace *, PKCS12_BAGS * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_PKCS12_BAGS_it(struct AmiSSLIFace *);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_PKCS12_SAFEBAGS_it(struct AmiSSLIFace *);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_PKCS12_AUTHSAFES_it(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_PKCS12_PBE_add(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_PKCS12_parse(struct AmiSSLIFace *, PKCS12 * p12, const char * pass, EVP_PKEY ** pkey, X509 ** cert, STACK_OF(X509) ** ca);
extern PKCS12 *             VARARGS68K _AmiSSL_PKCS12_create(struct AmiSSLIFace *, char * pass, char * name, EVP_PKEY * pkey, X509 * cert, STACK_OF(X509) * ca, int nid_key, int nid_cert, int iter, int mac_iter, int keytype);
extern int                  VARARGS68K _AmiSSL_i2d_PKCS12_bio(struct AmiSSLIFace *, BIO * bp, PKCS12 * p12);
extern PKCS12 *             VARARGS68K _AmiSSL_d2i_PKCS12_bio(struct AmiSSLIFace *, BIO * bp, PKCS12 ** p12);
extern int                  VARARGS68K _AmiSSL_PKCS12_newpass(struct AmiSSLIFace *, PKCS12 * p12, char * oldpass, char * newpass);
extern void                 VARARGS68K _AmiSSL_ERR_load_PKCS12_strings(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_PKCS7_ISSUER_AND_SERIAL_digest(struct AmiSSLIFace *, PKCS7_ISSUER_AND_SERIAL * data, const EVP_MD * type, unsigned char * md, unsigned int * len);
extern PKCS7 *              VARARGS68K _AmiSSL_PKCS7_dup(struct AmiSSLIFace *, PKCS7 * p7);
extern PKCS7 *              VARARGS68K _AmiSSL_d2i_PKCS7_bio(struct AmiSSLIFace *, BIO * bp, PKCS7 ** p7);
extern int                  VARARGS68K _AmiSSL_i2d_PKCS7_bio(struct AmiSSLIFace *, BIO * bp, PKCS7 * p7);
extern PKCS7_ISSUER_AND_SERIAL * VARARGS68K _AmiSSL_PKCS7_ISSUER_AND_SERIAL_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_PKCS7_ISSUER_AND_SERIAL_free(struct AmiSSLIFace *, PKCS7_ISSUER_AND_SERIAL * a);
extern PKCS7_ISSUER_AND_SERIAL * VARARGS68K _AmiSSL_d2i_PKCS7_ISSUER_AND_SERIAL(struct AmiSSLIFace *, PKCS7_ISSUER_AND_SERIAL ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_PKCS7_ISSUER_AND_SERIAL(struct AmiSSLIFace *, PKCS7_ISSUER_AND_SERIAL * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_PKCS7_ISSUER_AND_SERIAL_it(struct AmiSSLIFace *);
extern PKCS7_SIGNER_INFO *  VARARGS68K _AmiSSL_PKCS7_SIGNER_INFO_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_PKCS7_SIGNER_INFO_free(struct AmiSSLIFace *, PKCS7_SIGNER_INFO * a);
extern PKCS7_SIGNER_INFO *  VARARGS68K _AmiSSL_d2i_PKCS7_SIGNER_INFO(struct AmiSSLIFace *, PKCS7_SIGNER_INFO ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_PKCS7_SIGNER_INFO(struct AmiSSLIFace *, PKCS7_SIGNER_INFO * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_PKCS7_SIGNER_INFO_it(struct AmiSSLIFace *);
extern PKCS7_RECIP_INFO *   VARARGS68K _AmiSSL_PKCS7_RECIP_INFO_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_PKCS7_RECIP_INFO_free(struct AmiSSLIFace *, PKCS7_RECIP_INFO * a);
extern PKCS7_RECIP_INFO *   VARARGS68K _AmiSSL_d2i_PKCS7_RECIP_INFO(struct AmiSSLIFace *, PKCS7_RECIP_INFO ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_PKCS7_RECIP_INFO(struct AmiSSLIFace *, PKCS7_RECIP_INFO * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_PKCS7_RECIP_INFO_it(struct AmiSSLIFace *);
extern PKCS7_SIGNED *       VARARGS68K _AmiSSL_PKCS7_SIGNED_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_PKCS7_SIGNED_free(struct AmiSSLIFace *, PKCS7_SIGNED * a);
extern PKCS7_SIGNED *       VARARGS68K _AmiSSL_d2i_PKCS7_SIGNED(struct AmiSSLIFace *, PKCS7_SIGNED ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_PKCS7_SIGNED(struct AmiSSLIFace *, PKCS7_SIGNED * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_PKCS7_SIGNED_it(struct AmiSSLIFace *);
extern PKCS7_ENC_CONTENT *  VARARGS68K _AmiSSL_PKCS7_ENC_CONTENT_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_PKCS7_ENC_CONTENT_free(struct AmiSSLIFace *, PKCS7_ENC_CONTENT * a);
extern PKCS7_ENC_CONTENT *  VARARGS68K _AmiSSL_d2i_PKCS7_ENC_CONTENT(struct AmiSSLIFace *, PKCS7_ENC_CONTENT ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_PKCS7_ENC_CONTENT(struct AmiSSLIFace *, PKCS7_ENC_CONTENT * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_PKCS7_ENC_CONTENT_it(struct AmiSSLIFace *);
extern PKCS7_ENVELOPE *     VARARGS68K _AmiSSL_PKCS7_ENVELOPE_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_PKCS7_ENVELOPE_free(struct AmiSSLIFace *, PKCS7_ENVELOPE * a);
extern PKCS7_ENVELOPE *     VARARGS68K _AmiSSL_d2i_PKCS7_ENVELOPE(struct AmiSSLIFace *, PKCS7_ENVELOPE ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_PKCS7_ENVELOPE(struct AmiSSLIFace *, PKCS7_ENVELOPE * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_PKCS7_ENVELOPE_it(struct AmiSSLIFace *);
extern PKCS7_SIGN_ENVELOPE * VARARGS68K _AmiSSL_PKCS7_SIGN_ENVELOPE_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_PKCS7_SIGN_ENVELOPE_free(struct AmiSSLIFace *, PKCS7_SIGN_ENVELOPE * a);
extern PKCS7_SIGN_ENVELOPE * VARARGS68K _AmiSSL_d2i_PKCS7_SIGN_ENVELOPE(struct AmiSSLIFace *, PKCS7_SIGN_ENVELOPE ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_PKCS7_SIGN_ENVELOPE(struct AmiSSLIFace *, PKCS7_SIGN_ENVELOPE * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_PKCS7_SIGN_ENVELOPE_it(struct AmiSSLIFace *);
extern PKCS7_DIGEST *       VARARGS68K _AmiSSL_PKCS7_DIGEST_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_PKCS7_DIGEST_free(struct AmiSSLIFace *, PKCS7_DIGEST * a);
extern PKCS7_DIGEST *       VARARGS68K _AmiSSL_d2i_PKCS7_DIGEST(struct AmiSSLIFace *, PKCS7_DIGEST ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_PKCS7_DIGEST(struct AmiSSLIFace *, PKCS7_DIGEST * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_PKCS7_DIGEST_it(struct AmiSSLIFace *);
extern PKCS7_ENCRYPT *      VARARGS68K _AmiSSL_PKCS7_ENCRYPT_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_PKCS7_ENCRYPT_free(struct AmiSSLIFace *, PKCS7_ENCRYPT * a);
extern PKCS7_ENCRYPT *      VARARGS68K _AmiSSL_d2i_PKCS7_ENCRYPT(struct AmiSSLIFace *, PKCS7_ENCRYPT ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_PKCS7_ENCRYPT(struct AmiSSLIFace *, PKCS7_ENCRYPT * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_PKCS7_ENCRYPT_it(struct AmiSSLIFace *);
extern PKCS7 *              VARARGS68K _AmiSSL_PKCS7_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_PKCS7_free(struct AmiSSLIFace *, PKCS7 * a);
extern PKCS7 *              VARARGS68K _AmiSSL_d2i_PKCS7(struct AmiSSLIFace *, PKCS7 ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_PKCS7(struct AmiSSLIFace *, PKCS7 * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_PKCS7_it(struct AmiSSLIFace *);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_PKCS7_ATTR_SIGN_it(struct AmiSSLIFace *);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_PKCS7_ATTR_VERIFY_it(struct AmiSSLIFace *);
extern long                 VARARGS68K _AmiSSL_PKCS7_ctrl(struct AmiSSLIFace *, PKCS7 * p7, int cmd, long larg, char * parg);
extern int                  VARARGS68K _AmiSSL_PKCS7_set_type(struct AmiSSLIFace *, PKCS7 * p7, int type);
extern int                  VARARGS68K _AmiSSL_PKCS7_set_content(struct AmiSSLIFace *, PKCS7 * p7, PKCS7 * p7_data);
extern int                  VARARGS68K _AmiSSL_PKCS7_SIGNER_INFO_set(struct AmiSSLIFace *, PKCS7_SIGNER_INFO * p7i, X509 * x509, EVP_PKEY * pkey, const EVP_MD * dgst);
extern int                  VARARGS68K _AmiSSL_PKCS7_add_signer(struct AmiSSLIFace *, PKCS7 * p7, PKCS7_SIGNER_INFO * p7i);
extern int                  VARARGS68K _AmiSSL_PKCS7_add_certificate(struct AmiSSLIFace *, PKCS7 * p7, X509 * x509);
extern int                  VARARGS68K _AmiSSL_PKCS7_add_crl(struct AmiSSLIFace *, PKCS7 * p7, X509_CRL * x509);
extern int                  VARARGS68K _AmiSSL_PKCS7_content_new(struct AmiSSLIFace *, PKCS7 * p7, int nid);
extern int                  VARARGS68K _AmiSSL_PKCS7_dataVerify(struct AmiSSLIFace *, X509_STORE * cert_store, X509_STORE_CTX * ctx, BIO * bio, PKCS7 * p7, PKCS7_SIGNER_INFO * si);
extern int                  VARARGS68K _AmiSSL_PKCS7_signatureVerify(struct AmiSSLIFace *, BIO * bio, PKCS7 * p7, PKCS7_SIGNER_INFO * si, X509 * x509);
extern BIO *                VARARGS68K _AmiSSL_PKCS7_dataInit(struct AmiSSLIFace *, PKCS7 * p7, BIO * bio);
extern int                  VARARGS68K _AmiSSL_PKCS7_dataFinal(struct AmiSSLIFace *, PKCS7 * p7, BIO * bio);
extern BIO *                VARARGS68K _AmiSSL_PKCS7_dataDecode(struct AmiSSLIFace *, PKCS7 * p7, EVP_PKEY * pkey, BIO * in_bio, X509 * pcert);
extern PKCS7_SIGNER_INFO *  VARARGS68K _AmiSSL_PKCS7_add_signature(struct AmiSSLIFace *, PKCS7 * p7, X509 * x509, EVP_PKEY * pkey, const EVP_MD * dgst);
extern X509 *               VARARGS68K _AmiSSL_PKCS7_cert_from_signer_info(struct AmiSSLIFace *, PKCS7 * p7, PKCS7_SIGNER_INFO * si);
extern STACK_OF(PKCS7_SIGNER_INFO) * VARARGS68K _AmiSSL_PKCS7_get_signer_info(struct AmiSSLIFace *, PKCS7 * p7);
extern PKCS7_RECIP_INFO *   VARARGS68K _AmiSSL_PKCS7_add_recipient(struct AmiSSLIFace *, PKCS7 * p7, X509 * x509);
extern int                  VARARGS68K _AmiSSL_PKCS7_add_recipient_info(struct AmiSSLIFace *, PKCS7 * p7, PKCS7_RECIP_INFO * ri);
extern int                  VARARGS68K _AmiSSL_PKCS7_RECIP_INFO_set(struct AmiSSLIFace *, PKCS7_RECIP_INFO * p7i, X509 * x509);
extern int                  VARARGS68K _AmiSSL_PKCS7_set_cipher(struct AmiSSLIFace *, PKCS7 * p7, const EVP_CIPHER * cipher);
extern PKCS7_ISSUER_AND_SERIAL * VARARGS68K _AmiSSL_PKCS7_get_issuer_and_serial(struct AmiSSLIFace *, PKCS7 * p7, int idx);
extern ASN1_OCTET_STRING *  VARARGS68K _AmiSSL_PKCS7_digest_from_attributes(struct AmiSSLIFace *, STACK_OF(X509_ATTRIBUTE) * sk);
extern int                  VARARGS68K _AmiSSL_PKCS7_add_signed_attribute(struct AmiSSLIFace *, PKCS7_SIGNER_INFO * p7si, int nid, int type, void * data);
extern int                  VARARGS68K _AmiSSL_PKCS7_add_attribute(struct AmiSSLIFace *, PKCS7_SIGNER_INFO * p7si, int nid, int atrtype, void * value);
extern ASN1_TYPE *          VARARGS68K _AmiSSL_PKCS7_get_attribute(struct AmiSSLIFace *, PKCS7_SIGNER_INFO * si, int nid);
extern ASN1_TYPE *          VARARGS68K _AmiSSL_PKCS7_get_signed_attribute(struct AmiSSLIFace *, PKCS7_SIGNER_INFO * si, int nid);
extern int                  VARARGS68K _AmiSSL_PKCS7_set_signed_attributes(struct AmiSSLIFace *, PKCS7_SIGNER_INFO * p7si, STACK_OF(X509_ATTRIBUTE) * sk);
extern int                  VARARGS68K _AmiSSL_PKCS7_set_attributes(struct AmiSSLIFace *, PKCS7_SIGNER_INFO * p7si, STACK_OF(X509_ATTRIBUTE) * sk);
extern PKCS7 *              VARARGS68K _AmiSSL_PKCS7_sign(struct AmiSSLIFace *, X509 * signcert, EVP_PKEY * pkey, STACK_OF(X509) * certs, BIO * data, int flags);
extern int                  VARARGS68K _AmiSSL_PKCS7_verify(struct AmiSSLIFace *, PKCS7 * p7, STACK_OF(X509) * certs, X509_STORE * store, BIO * indata, BIO * out, int flags);
extern STACK_OF(X509) *     VARARGS68K _AmiSSL_PKCS7_get0_signers(struct AmiSSLIFace *, PKCS7 * p7, STACK_OF(X509) * certs, int flags);
extern PKCS7 *              VARARGS68K _AmiSSL_PKCS7_encrypt(struct AmiSSLIFace *, STACK_OF(X509) * certs, BIO * in, const EVP_CIPHER * cipher, int flags);
extern int                  VARARGS68K _AmiSSL_PKCS7_decrypt(struct AmiSSLIFace *, PKCS7 * p7, EVP_PKEY * pkey, X509 * cert, BIO * data, int flags);
extern int                  VARARGS68K _AmiSSL_PKCS7_add_attrib_smimecap(struct AmiSSLIFace *, PKCS7_SIGNER_INFO * si, STACK_OF(X509_ALGOR) * cap);
extern STACK_OF(X509_ALGOR) * VARARGS68K _AmiSSL_PKCS7_get_smimecap(struct AmiSSLIFace *, PKCS7_SIGNER_INFO * si);
extern int                  VARARGS68K _AmiSSL_PKCS7_simple_smimecap(struct AmiSSLIFace *, STACK_OF(X509_ALGOR) * sk, int nid, int arg);
extern int                  VARARGS68K _AmiSSL_SMIME_write_PKCS7(struct AmiSSLIFace *, BIO * bio, PKCS7 * p7, BIO * data, int flags);
extern PKCS7 *              VARARGS68K _AmiSSL_SMIME_read_PKCS7(struct AmiSSLIFace *, BIO * bio, BIO ** bcont);
extern int                  VARARGS68K _AmiSSL_SMIME_crlf_copy(struct AmiSSLIFace *, BIO * in, BIO * out, int flags);
extern int                  VARARGS68K _AmiSSL_SMIME_text(struct AmiSSLIFace *, BIO * in, BIO * out);
extern void                 VARARGS68K _AmiSSL_ERR_load_PKCS7_strings(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_RAND_set_rand_method(struct AmiSSLIFace *, const RAND_METHOD * meth);
extern const RAND_METHOD *  VARARGS68K _AmiSSL_RAND_get_rand_method(struct AmiSSLIFace *);
extern RAND_METHOD *        VARARGS68K _AmiSSL_RAND_SSLeay(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_RAND_cleanup(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_RAND_bytes(struct AmiSSLIFace *, unsigned char * buf, int num);
extern int                  VARARGS68K _AmiSSL_RAND_pseudo_bytes(struct AmiSSLIFace *, unsigned char * buf, int num);
extern void                 VARARGS68K _AmiSSL_RAND_seed(struct AmiSSLIFace *, const void * buf, int num);
extern void                 VARARGS68K _AmiSSL_RAND_add(struct AmiSSLIFace *, const void * buf, int num, double entropy);
extern int                  VARARGS68K _AmiSSL_RAND_load_file(struct AmiSSLIFace *, const char * file, long max_bytes);
extern int                  VARARGS68K _AmiSSL_RAND_write_file(struct AmiSSLIFace *, const char * file);
extern const char *         VARARGS68K _AmiSSL_RAND_file_name(struct AmiSSLIFace *, char * file, size_t num);
extern int                  VARARGS68K _AmiSSL_RAND_status(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_RAND_query_egd_bytes(struct AmiSSLIFace *, const char * path, unsigned char * buf, int bytes);
extern int                  VARARGS68K _AmiSSL_RAND_egd(struct AmiSSLIFace *, const char * path);
extern int                  VARARGS68K _AmiSSL_RAND_egd_bytes(struct AmiSSLIFace *, const char * path, int bytes);
extern int                  VARARGS68K _AmiSSL_RAND_poll(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ERR_load_RAND_strings(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_SSL_CTX_set_msg_callback(struct AmiSSLIFace *, SSL_CTX * ctx, void (*cb)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg));
extern void                 VARARGS68K _AmiSSL_SSL_set_msg_callback(struct AmiSSLIFace *, SSL * ssl, void (*cb)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg));
extern LHASH_OF(SSL_SESSION) * VARARGS68K _AmiSSL_SSL_CTX_sessions(struct AmiSSLIFace *, SSL_CTX * ctx);
extern size_t               VARARGS68K _AmiSSL_SSL_get_finished(struct AmiSSLIFace *, const SSL * s, void * buf, size_t count);
extern size_t               VARARGS68K _AmiSSL_SSL_get_peer_finished(struct AmiSSLIFace *, const SSL * s, void * buf, size_t count);
extern BIO_METHOD *         VARARGS68K _AmiSSL_BIO_f_ssl(struct AmiSSLIFace *);
extern BIO *                VARARGS68K _AmiSSL_BIO_new_ssl(struct AmiSSLIFace *, SSL_CTX * ctx, int client);
extern BIO *                VARARGS68K _AmiSSL_BIO_new_ssl_connect(struct AmiSSLIFace *, SSL_CTX * ctx);
extern BIO *                VARARGS68K _AmiSSL_BIO_new_buffer_ssl_connect(struct AmiSSLIFace *, SSL_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BIO_ssl_copy_session_id(struct AmiSSLIFace *, BIO * to, BIO * from);
extern void                 VARARGS68K _AmiSSL_BIO_ssl_shutdown(struct AmiSSLIFace *, BIO * ssl_bio);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_set_cipher_list(struct AmiSSLIFace *, SSL_CTX * a, const char * str);
extern SSL_CTX *            VARARGS68K _AmiSSL_SSL_CTX_new(struct AmiSSLIFace *, const SSL_METHOD * meth);
extern void                 VARARGS68K _AmiSSL_SSL_CTX_free(struct AmiSSLIFace *, SSL_CTX * a);
extern long                 VARARGS68K _AmiSSL_SSL_CTX_set_timeout(struct AmiSSLIFace *, SSL_CTX * ctx, long t);
extern long                 VARARGS68K _AmiSSL_SSL_CTX_get_timeout(struct AmiSSLIFace *, const SSL_CTX * ctx);
extern X509_STORE *         VARARGS68K _AmiSSL_SSL_CTX_get_cert_store(struct AmiSSLIFace *, const SSL_CTX * a);
extern void                 VARARGS68K _AmiSSL_SSL_CTX_set_cert_store(struct AmiSSLIFace *, SSL_CTX * a, X509_STORE * b);
extern int                  VARARGS68K _AmiSSL_SSL_want(struct AmiSSLIFace *, const SSL * s);
extern int                  VARARGS68K _AmiSSL_SSL_clear(struct AmiSSLIFace *, SSL * s);
extern void                 VARARGS68K _AmiSSL_SSL_CTX_flush_sessions(struct AmiSSLIFace *, SSL_CTX * ctx, long tm);
extern const SSL_CIPHER *   VARARGS68K _AmiSSL_SSL_get_current_cipher(struct AmiSSLIFace *, const SSL * s);
extern int                  VARARGS68K _AmiSSL_SSL_CIPHER_get_bits(struct AmiSSLIFace *, const SSL_CIPHER * c, int * alg_bits);
extern char *               VARARGS68K _AmiSSL_SSL_CIPHER_get_version(struct AmiSSLIFace *, const SSL_CIPHER * c);
extern const char *         VARARGS68K _AmiSSL_SSL_CIPHER_get_name(struct AmiSSLIFace *, const SSL_CIPHER * c);
extern const char *         VARARGS68K _AmiSSL_SSL_CIPHER_get_mac(struct AmiSSLIFace *, const SSL_CIPHER * cipher);
extern const char *         VARARGS68K _AmiSSL_SSL_CIPHER_get_encryption(struct AmiSSLIFace *, const SSL_CIPHER * cipher);
extern const char *         VARARGS68K _AmiSSL_SSL_CIPHER_get_authentication(struct AmiSSLIFace *, const SSL_CIPHER * cipher);
extern const char *         VARARGS68K _AmiSSL_SSL_CIPHER_get_key_exchange(struct AmiSSLIFace *, const SSL_CIPHER * cipher);
extern const char *         VARARGS68K _AmiSSL_SSL_CIPHER_get_export(struct AmiSSLIFace *, const SSL_CIPHER * cipher);
extern int                  VARARGS68K _AmiSSL_SSL_get_fd(struct AmiSSLIFace *, const SSL * s);
extern int                  VARARGS68K _AmiSSL_SSL_get_rfd(struct AmiSSLIFace *, const SSL * s);
extern int                  VARARGS68K _AmiSSL_SSL_get_wfd(struct AmiSSLIFace *, const SSL * s);
extern const char *         VARARGS68K _AmiSSL_SSL_get_cipher_list(struct AmiSSLIFace *, const SSL * s, int n);
extern char *               VARARGS68K _AmiSSL_SSL_get_shared_ciphers(struct AmiSSLIFace *, const SSL * s, char * buf, int len);
extern int                  VARARGS68K _AmiSSL_SSL_get_read_ahead(struct AmiSSLIFace *, const SSL * s);
extern int                  VARARGS68K _AmiSSL_SSL_pending(struct AmiSSLIFace *, const SSL * s);
extern int                  VARARGS68K _AmiSSL_SSL_set_fd(struct AmiSSLIFace *, SSL * s, int fd);
extern int                  VARARGS68K _AmiSSL_SSL_set_rfd(struct AmiSSLIFace *, SSL * s, int fd);
extern int                  VARARGS68K _AmiSSL_SSL_set_wfd(struct AmiSSLIFace *, SSL * s, int fd);
extern void                 VARARGS68K _AmiSSL_SSL_set_bio(struct AmiSSLIFace *, SSL * s, BIO * rbio, BIO * wbio);
extern BIO *                VARARGS68K _AmiSSL_SSL_get_rbio(struct AmiSSLIFace *, const SSL * s);
extern BIO *                VARARGS68K _AmiSSL_SSL_get_wbio(struct AmiSSLIFace *, const SSL * s);
extern int                  VARARGS68K _AmiSSL_SSL_set_cipher_list(struct AmiSSLIFace *, SSL * s, const char * str);
extern void                 VARARGS68K _AmiSSL_SSL_set_read_ahead(struct AmiSSLIFace *, SSL * s, int yes);
extern int                  VARARGS68K _AmiSSL_SSL_get_verify_mode(struct AmiSSLIFace *, const SSL * s);
extern int                  VARARGS68K _AmiSSL_SSL_get_verify_depth(struct AmiSSLIFace *, const SSL * s);
extern int                  VARARGS68K (*_AmiSSL_SSL_get_verify_callback(struct AmiSSLIFace *, const SSL * s))(int, X509_STORE_CTX *);
extern void                 VARARGS68K _AmiSSL_SSL_set_verify(struct AmiSSLIFace *, SSL * s, int mode, int (*callback)(int ok, X509_STORE_CTX *ctx));
extern void                 VARARGS68K _AmiSSL_SSL_set_verify_depth(struct AmiSSLIFace *, SSL * s, int depth);
extern int                  VARARGS68K _AmiSSL_SSL_use_RSAPrivateKey(struct AmiSSLIFace *, SSL * ssl, RSA * rsa);
extern int                  VARARGS68K _AmiSSL_SSL_use_RSAPrivateKey_ASN1(struct AmiSSLIFace *, SSL * ssl, unsigned char * d, long len);
extern int                  VARARGS68K _AmiSSL_SSL_use_PrivateKey(struct AmiSSLIFace *, SSL * ssl, EVP_PKEY * pkey);
extern int                  VARARGS68K _AmiSSL_SSL_use_PrivateKey_ASN1(struct AmiSSLIFace *, int pk, SSL * ssl, unsigned char * d, long len);
extern int                  VARARGS68K _AmiSSL_SSL_use_certificate(struct AmiSSLIFace *, SSL * ssl, X509 * x);
extern int                  VARARGS68K _AmiSSL_SSL_use_certificate_ASN1(struct AmiSSLIFace *, SSL * ssl, unsigned char * d, int len);
extern int                  VARARGS68K _AmiSSL_SSL_use_RSAPrivateKey_file(struct AmiSSLIFace *, SSL * ssl, const char * file, int type);
extern int                  VARARGS68K _AmiSSL_SSL_use_PrivateKey_file(struct AmiSSLIFace *, SSL * ssl, const char * file, int type);
extern int                  VARARGS68K _AmiSSL_SSL_use_certificate_file(struct AmiSSLIFace *, SSL * ssl, const char * file, int type);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_use_RSAPrivateKey_file(struct AmiSSLIFace *, SSL_CTX * ctx, const char * file, int type);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_use_PrivateKey_file(struct AmiSSLIFace *, SSL_CTX * ctx, const char * file, int type);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_use_certificate_file(struct AmiSSLIFace *, SSL_CTX * ctx, const char * file, int type);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_use_certificate_chain_file(struct AmiSSLIFace *, SSL_CTX * ctx, const char * file);
extern STACK_OF(X509_NAME) * VARARGS68K _AmiSSL_SSL_load_client_CA_file(struct AmiSSLIFace *, const char * file);
extern int                  VARARGS68K _AmiSSL_SSL_add_file_cert_subjects_to_stack(struct AmiSSLIFace *, STACK_OF(X509_NAME) * stackCAs, const char * file);
extern int                  VARARGS68K _AmiSSL_SSL_add_dir_cert_subjects_to_stack(struct AmiSSLIFace *, STACK_OF(X509_NAME) * stackCAs, const char * dir);
extern void                 VARARGS68K _AmiSSL_SSL_load_error_strings(struct AmiSSLIFace *);
extern const char *         VARARGS68K _AmiSSL_SSL_state_string(struct AmiSSLIFace *, const SSL * s);
extern const char *         VARARGS68K _AmiSSL_SSL_rstate_string(struct AmiSSLIFace *, const SSL * s);
extern const char *         VARARGS68K _AmiSSL_SSL_state_string_long(struct AmiSSLIFace *, const SSL * s);
extern const char *         VARARGS68K _AmiSSL_SSL_rstate_string_long(struct AmiSSLIFace *, const SSL * s);
extern long                 VARARGS68K _AmiSSL_SSL_SESSION_get_time(struct AmiSSLIFace *, const SSL_SESSION * s);
extern long                 VARARGS68K _AmiSSL_SSL_SESSION_set_time(struct AmiSSLIFace *, SSL_SESSION * s, long t);
extern long                 VARARGS68K _AmiSSL_SSL_SESSION_get_timeout(struct AmiSSLIFace *, const SSL_SESSION * s);
extern long                 VARARGS68K _AmiSSL_SSL_SESSION_set_timeout(struct AmiSSLIFace *, SSL_SESSION * s, long t);
extern void                 VARARGS68K _AmiSSL_SSL_copy_session_id(struct AmiSSLIFace *, SSL * to, const SSL * from);
extern SSL_SESSION *        VARARGS68K _AmiSSL_SSL_SESSION_new(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_SSL_SESSION_print(struct AmiSSLIFace *, BIO * fp, const SSL_SESSION * ses);
extern void                 VARARGS68K _AmiSSL_SSL_SESSION_free(struct AmiSSLIFace *, SSL_SESSION * ses);
extern int                  VARARGS68K _AmiSSL_i2d_SSL_SESSION(struct AmiSSLIFace *, SSL_SESSION * in, unsigned char ** pp);
extern int                  VARARGS68K _AmiSSL_SSL_set_session(struct AmiSSLIFace *, SSL * to, SSL_SESSION * session);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_add_session(struct AmiSSLIFace *, SSL_CTX * s, SSL_SESSION * c);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_remove_session(struct AmiSSLIFace *, SSL_CTX * a1, SSL_SESSION * c);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_set_generate_session_id(struct AmiSSLIFace *, SSL_CTX * a, GEN_SESSION_CB b);
extern int                  VARARGS68K _AmiSSL_SSL_set_generate_session_id(struct AmiSSLIFace *, SSL * a, GEN_SESSION_CB b);
extern int                  VARARGS68K _AmiSSL_SSL_has_matching_session_id(struct AmiSSLIFace *, const SSL * ssl, const unsigned char * id, unsigned int id_len);
extern SSL_SESSION *        VARARGS68K _AmiSSL_d2i_SSL_SESSION(struct AmiSSLIFace *, SSL_SESSION ** a, const unsigned char ** pp, long length);
extern X509 *               VARARGS68K _AmiSSL_SSL_get_peer_certificate(struct AmiSSLIFace *, const SSL * s);
extern STACK_OF(X509) *     VARARGS68K _AmiSSL_SSL_get_peer_cert_chain(struct AmiSSLIFace *, const SSL * s);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_get_verify_mode(struct AmiSSLIFace *, const SSL_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_get_verify_depth(struct AmiSSLIFace *, const SSL_CTX * ctx);
extern int                  VARARGS68K (*_AmiSSL_SSL_CTX_get_verify_callback(struct AmiSSLIFace *, const SSL_CTX * ctx))(int, X509_STORE_CTX *);
extern void                 VARARGS68K _AmiSSL_SSL_CTX_set_verify(struct AmiSSLIFace *, SSL_CTX * ctx, int mode, int (*callback)(int, X509_STORE_CTX *));
extern void                 VARARGS68K _AmiSSL_SSL_CTX_set_verify_depth(struct AmiSSLIFace *, SSL_CTX * ctx, int depth);
extern void                 VARARGS68K _AmiSSL_SSL_CTX_set_cert_verify_callback(struct AmiSSLIFace *, SSL_CTX * ctx, int (*cb)(X509_STORE_CTX *, void *), void * arg);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_use_RSAPrivateKey(struct AmiSSLIFace *, SSL_CTX * ctx, RSA * rsa);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_use_RSAPrivateKey_ASN1(struct AmiSSLIFace *, SSL_CTX * ctx, unsigned char * d, long len);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_use_PrivateKey(struct AmiSSLIFace *, SSL_CTX * ctx, EVP_PKEY * pkey);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_use_PrivateKey_ASN1(struct AmiSSLIFace *, int pk, SSL_CTX * ctx, unsigned char * d, long len);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_use_certificate(struct AmiSSLIFace *, SSL_CTX * ctx, X509 * x);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_use_certificate_ASN1(struct AmiSSLIFace *, SSL_CTX * ctx, int len, unsigned char * d);
extern void                 VARARGS68K _AmiSSL_SSL_CTX_set_default_passwd_cb(struct AmiSSLIFace *, SSL_CTX * ctx, pem_password_cb * cb);
extern void                 VARARGS68K _AmiSSL_SSL_CTX_set_default_passwd_cb_userdata(struct AmiSSLIFace *, SSL_CTX * ctx, void * u);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_check_private_key(struct AmiSSLIFace *, const SSL_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_SSL_check_private_key(struct AmiSSLIFace *, const SSL * ctx);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_set_session_id_context(struct AmiSSLIFace *, SSL_CTX * ctx, const unsigned char * sid_ctx, unsigned int sid_ctx_len);
extern SSL *                VARARGS68K _AmiSSL_SSL_new(struct AmiSSLIFace *, SSL_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_SSL_set_session_id_context(struct AmiSSLIFace *, SSL * ssl, const unsigned char * sid_ctx, unsigned int sid_ctx_len);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_set_purpose(struct AmiSSLIFace *, SSL_CTX * s, int purpose);
extern int                  VARARGS68K _AmiSSL_SSL_set_purpose(struct AmiSSLIFace *, SSL * s, int purpose);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_set_trust(struct AmiSSLIFace *, SSL_CTX * s, int trust);
extern int                  VARARGS68K _AmiSSL_SSL_set_trust(struct AmiSSLIFace *, SSL * s, int trust);
extern void                 VARARGS68K _AmiSSL_SSL_free(struct AmiSSLIFace *, SSL * ssl);
extern int                  VARARGS68K _AmiSSL_SSL_accept(struct AmiSSLIFace *, SSL * ssl);
extern int                  VARARGS68K _AmiSSL_SSL_connect(struct AmiSSLIFace *, SSL * ssl);
extern int                  VARARGS68K _AmiSSL_SSL_read(struct AmiSSLIFace *, SSL * ssl, void * buf, int num);
extern int                  VARARGS68K _AmiSSL_SSL_peek(struct AmiSSLIFace *, SSL * ssl, void * buf, int num);
extern int                  VARARGS68K _AmiSSL_SSL_write(struct AmiSSLIFace *, SSL * ssl, const void * buf, int num);
extern long                 VARARGS68K _AmiSSL_SSL_ctrl(struct AmiSSLIFace *, SSL * ssl, int cmd, long larg, void * parg);
extern long                 VARARGS68K _AmiSSL_SSL_callback_ctrl(struct AmiSSLIFace *, SSL * a, int a1, void (*b)());
extern long                 VARARGS68K _AmiSSL_SSL_CTX_ctrl(struct AmiSSLIFace *, SSL_CTX * ctx, int cmd, long larg, void * parg);
extern long                 VARARGS68K _AmiSSL_SSL_CTX_callback_ctrl(struct AmiSSLIFace *, SSL_CTX * a1, int a2, void (*a3)(void));
extern int                  VARARGS68K _AmiSSL_SSL_get_error(struct AmiSSLIFace *, const SSL * s, int ret_code);
extern const char *         VARARGS68K _AmiSSL_SSL_get_version(struct AmiSSLIFace *, const SSL * s);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_set_ssl_version(struct AmiSSLIFace *, SSL_CTX * ctx, const SSL_METHOD * meth);
extern const SSL_METHOD *   VARARGS68K _AmiSSL_SSLv2_method(struct AmiSSLIFace *);
extern const SSL_METHOD *   VARARGS68K _AmiSSL_SSLv2_server_method(struct AmiSSLIFace *);
extern const SSL_METHOD *   VARARGS68K _AmiSSL_SSLv2_client_method(struct AmiSSLIFace *);
extern const SSL_METHOD *   VARARGS68K _AmiSSL_SSLv3_method(struct AmiSSLIFace *);
extern const SSL_METHOD *   VARARGS68K _AmiSSL_SSLv3_server_method(struct AmiSSLIFace *);
extern const SSL_METHOD *   VARARGS68K _AmiSSL_SSLv3_client_method(struct AmiSSLIFace *);
extern const SSL_METHOD *   VARARGS68K _AmiSSL_SSLv23_method(struct AmiSSLIFace *);
extern const SSL_METHOD *   VARARGS68K _AmiSSL_SSLv23_server_method(struct AmiSSLIFace *);
extern const SSL_METHOD *   VARARGS68K _AmiSSL_SSLv23_client_method(struct AmiSSLIFace *);
extern const SSL_METHOD *   VARARGS68K _AmiSSL_TLSv1_method(struct AmiSSLIFace *);
extern const SSL_METHOD *   VARARGS68K _AmiSSL_TLSv1_server_method(struct AmiSSLIFace *);
extern const SSL_METHOD *   VARARGS68K _AmiSSL_TLSv1_client_method(struct AmiSSLIFace *);
extern STACK_OF(SSL_CIPHER) * VARARGS68K _AmiSSL_SSL_get_ciphers(struct AmiSSLIFace *, const SSL * s);
extern int                  VARARGS68K _AmiSSL_SSL_do_handshake(struct AmiSSLIFace *, SSL * s);
extern int                  VARARGS68K _AmiSSL_SSL_renegotiate(struct AmiSSLIFace *, SSL * s);
extern int                  VARARGS68K _AmiSSL_SSL_renegotiate_pending(struct AmiSSLIFace *, SSL * s);
extern int                  VARARGS68K _AmiSSL_SSL_shutdown(struct AmiSSLIFace *, SSL * s);
extern const SSL_METHOD *   VARARGS68K _AmiSSL_SSL_get_ssl_method(struct AmiSSLIFace *, SSL * s);
extern int                  VARARGS68K _AmiSSL_SSL_set_ssl_method(struct AmiSSLIFace *, SSL * s, SSL_METHOD * method);
extern const char *         VARARGS68K _AmiSSL_SSL_alert_type_string_long(struct AmiSSLIFace *, int value);
extern const char *         VARARGS68K _AmiSSL_SSL_alert_type_string(struct AmiSSLIFace *, int value);
extern const char *         VARARGS68K _AmiSSL_SSL_alert_desc_string_long(struct AmiSSLIFace *, int value);
extern const char *         VARARGS68K _AmiSSL_SSL_alert_desc_string(struct AmiSSLIFace *, int value);
extern void                 VARARGS68K _AmiSSL_SSL_set_client_CA_list(struct AmiSSLIFace *, SSL * s, STACK_OF(X509_NAME) * name_list);
extern void                 VARARGS68K _AmiSSL_SSL_CTX_set_client_CA_list(struct AmiSSLIFace *, SSL_CTX * ctx, STACK_OF(X509_NAME) * name_list);
extern STACK_OF(X509_NAME) * VARARGS68K _AmiSSL_SSL_get_client_CA_list(struct AmiSSLIFace *, const SSL * s);
extern STACK_OF(X509_NAME) * VARARGS68K _AmiSSL_SSL_CTX_get_client_CA_list(struct AmiSSLIFace *, const SSL_CTX * s);
extern int                  VARARGS68K _AmiSSL_SSL_add_client_CA(struct AmiSSLIFace *, SSL * ssl, X509 * x);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_add_client_CA(struct AmiSSLIFace *, SSL_CTX * ctx, X509 * x);
extern void                 VARARGS68K _AmiSSL_SSL_set_connect_state(struct AmiSSLIFace *, SSL * s);
extern void                 VARARGS68K _AmiSSL_SSL_set_accept_state(struct AmiSSLIFace *, SSL * s);
extern long                 VARARGS68K _AmiSSL_SSL_get_default_timeout(struct AmiSSLIFace *, const SSL * s);
extern int                  VARARGS68K _AmiSSL_SSL_library_init(struct AmiSSLIFace *);
extern char *               VARARGS68K _AmiSSL_SSL_CIPHER_description(struct AmiSSLIFace *, SSL_CIPHER * a1, char * buf, int size);
extern STACK_OF(X509_NAME) * VARARGS68K _AmiSSL_SSL_dup_CA_list(struct AmiSSLIFace *, STACK_OF(X509_NAME) * sk);
extern SSL *                VARARGS68K _AmiSSL_SSL_dup(struct AmiSSLIFace *, SSL * ssl);
extern X509 *               VARARGS68K _AmiSSL_SSL_get_certificate(struct AmiSSLIFace *, const SSL * ssl);
extern struct evp_pkey_st * VARARGS68K _AmiSSL_SSL_get_privatekey(struct AmiSSLIFace *, SSL * ssl);
extern void                 VARARGS68K _AmiSSL_SSL_CTX_set_quiet_shutdown(struct AmiSSLIFace *, SSL_CTX * ctx, int mode);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_get_quiet_shutdown(struct AmiSSLIFace *, const SSL_CTX * ctx);
extern void                 VARARGS68K _AmiSSL_SSL_set_quiet_shutdown(struct AmiSSLIFace *, SSL * ssl, int mode);
extern int                  VARARGS68K _AmiSSL_SSL_get_quiet_shutdown(struct AmiSSLIFace *, const SSL * ssl);
extern void                 VARARGS68K _AmiSSL_SSL_set_shutdown(struct AmiSSLIFace *, SSL * ssl, int mode);
extern int                  VARARGS68K _AmiSSL_SSL_get_shutdown(struct AmiSSLIFace *, const SSL * ssl);
extern int                  VARARGS68K _AmiSSL_SSL_version(struct AmiSSLIFace *, const SSL * ssl);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_set_default_verify_paths(struct AmiSSLIFace *, SSL_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_load_verify_locations(struct AmiSSLIFace *, SSL_CTX * ctx, const char * CAfile, const char * CApath);
extern SSL_SESSION *        VARARGS68K _AmiSSL_SSL_get_session(struct AmiSSLIFace *, const SSL * ssl);
extern SSL_SESSION *        VARARGS68K _AmiSSL_SSL_get1_session(struct AmiSSLIFace *, SSL * ssl);
extern SSL_CTX *            VARARGS68K _AmiSSL_SSL_get_SSL_CTX(struct AmiSSLIFace *, const SSL * ssl);
extern void                 VARARGS68K _AmiSSL_SSL_set_info_callback(struct AmiSSLIFace *, SSL * ssl, void (*cb)(const SSL *ssl, int type, int val));
extern void                 VARARGS68K (*_AmiSSL_SSL_get_info_callback(struct AmiSSLIFace *, const SSL * ssl))(const SSL *ssl, int type, int val);
extern int                  VARARGS68K _AmiSSL_SSL_state(struct AmiSSLIFace *, const SSL * ssl);
extern void                 VARARGS68K _AmiSSL_SSL_set_verify_result(struct AmiSSLIFace *, SSL * ssl, long v);
extern long                 VARARGS68K _AmiSSL_SSL_get_verify_result(struct AmiSSLIFace *, const SSL * ssl);
extern int                  VARARGS68K _AmiSSL_SSL_set_ex_data(struct AmiSSLIFace *, SSL * ssl, int idx, void * data);
extern void *               VARARGS68K _AmiSSL_SSL_get_ex_data(struct AmiSSLIFace *, const SSL * ssl, int idx);
extern int                  VARARGS68K _AmiSSL_SSL_get_ex_new_index(struct AmiSSLIFace *, long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func);
extern int                  VARARGS68K _AmiSSL_SSL_SESSION_set_ex_data(struct AmiSSLIFace *, SSL_SESSION * ss, int idx, void * data);
extern void *               VARARGS68K _AmiSSL_SSL_SESSION_get_ex_data(struct AmiSSLIFace *, const SSL_SESSION * ss, int idx);
extern int                  VARARGS68K _AmiSSL_SSL_SESSION_get_ex_new_index(struct AmiSSLIFace *, long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_set_ex_data(struct AmiSSLIFace *, SSL_CTX * ssl, int idx, void * data);
extern void *               VARARGS68K _AmiSSL_SSL_CTX_get_ex_data(struct AmiSSLIFace *, const SSL_CTX * ssl, int idx);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_get_ex_new_index(struct AmiSSLIFace *, long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func);
extern int                  VARARGS68K _AmiSSL_SSL_get_ex_data_X509_STORE_CTX_idx(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_SSL_CTX_set_tmp_rsa_callback(struct AmiSSLIFace *, SSL_CTX * ctx, RSA * (*cb)(SSL *ssl, int is_export, int keylength));
extern void                 VARARGS68K _AmiSSL_SSL_set_tmp_rsa_callback(struct AmiSSLIFace *, SSL * ssl, RSA * (*cb)(SSL *ssl, int is_export, int keylength));
extern void                 VARARGS68K _AmiSSL_SSL_CTX_set_tmp_dh_callback(struct AmiSSLIFace *, SSL_CTX * ctx, DH * (*dh)(SSL *ssl, int is_export, int keylength));
extern void                 VARARGS68K _AmiSSL_SSL_set_tmp_dh_callback(struct AmiSSLIFace *, SSL * ssl, DH * (*dh)(SSL *ssl, int is_export, int keylength));
extern int                  VARARGS68K _AmiSSL_SSL_COMP_add_compression_method(struct AmiSSLIFace *, int id, COMP_METHOD * cm);
extern void                 VARARGS68K _AmiSSL_ERR_load_SSL_strings(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_sk_num(struct AmiSSLIFace *, const _STACK * a);
extern char *               VARARGS68K _AmiSSL_sk_value(struct AmiSSLIFace *, const _STACK * a, int b);
extern char *               VARARGS68K _AmiSSL_sk_set(struct AmiSSLIFace *, _STACK * a, int b, char * c);
extern _STACK *             VARARGS68K _AmiSSL_sk_new(struct AmiSSLIFace *, int (*cmp)(const void *, const void *));
extern _STACK *             VARARGS68K _AmiSSL_sk_new_null(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_sk_free(struct AmiSSLIFace *, _STACK * a);
extern void                 VARARGS68K _AmiSSL_sk_pop_free(struct AmiSSLIFace *, _STACK * st, void (*func)(void *));
extern int                  VARARGS68K _AmiSSL_sk_insert(struct AmiSSLIFace *, _STACK * sk, char * data, int where);
extern char *               VARARGS68K _AmiSSL_sk_delete(struct AmiSSLIFace *, _STACK * st, int loc);
extern char *               VARARGS68K _AmiSSL_sk_delete_ptr(struct AmiSSLIFace *, _STACK * st, char * p);
extern int                  VARARGS68K _AmiSSL_sk_find(struct AmiSSLIFace *, _STACK * st, char * data);
extern int                  VARARGS68K _AmiSSL_sk_push(struct AmiSSLIFace *, _STACK * st, char * data);
extern int                  VARARGS68K _AmiSSL_sk_unshift(struct AmiSSLIFace *, _STACK * st, char * data);
extern char *               VARARGS68K _AmiSSL_sk_shift(struct AmiSSLIFace *, _STACK * st);
extern char *               VARARGS68K _AmiSSL_sk_pop(struct AmiSSLIFace *, _STACK * st);
extern void                 VARARGS68K _AmiSSL_sk_zero(struct AmiSSLIFace *, _STACK * st);
extern int                  VARARGS68K (*_AmiSSL_sk_set_cmp_func(struct AmiSSLIFace *, _STACK * sk, int (*c)(const void *, const void *)))(const void *, const void *);
extern _STACK *             VARARGS68K _AmiSSL_sk_dup(struct AmiSSLIFace *, _STACK * st);
extern void                 VARARGS68K _AmiSSL_sk_sort(struct AmiSSLIFace *, _STACK * st);
extern int                  VARARGS68K _AmiSSL_FIPS_mode(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_sk_is_sorted(struct AmiSSLIFace *, const _STACK * st);
extern TXT_DB *             VARARGS68K _AmiSSL_TXT_DB_read(struct AmiSSLIFace *, BIO * in, int num);
extern long                 VARARGS68K _AmiSSL_TXT_DB_write(struct AmiSSLIFace *, BIO * out, TXT_DB * db);
extern int                  VARARGS68K _AmiSSL_TXT_DB_create_index(struct AmiSSLIFace *, TXT_DB * db, int field, int (*qual)(), LHASH_HASH_FN_TYPE hash, LHASH_COMP_FN_TYPE cmp);
extern void                 VARARGS68K _AmiSSL_TXT_DB_free(struct AmiSSLIFace *, TXT_DB * db);
extern char **              VARARGS68K _AmiSSL_TXT_DB_get_by_index(struct AmiSSLIFace *, TXT_DB * db, int idx, char ** value);
extern int                  VARARGS68K _AmiSSL_TXT_DB_insert(struct AmiSSLIFace *, TXT_DB * db, char ** value);
extern UI *                 VARARGS68K _AmiSSL_UI_new(struct AmiSSLIFace *);
extern UI *                 VARARGS68K _AmiSSL_UI_new_method(struct AmiSSLIFace *, const UI_METHOD * method);
extern void                 VARARGS68K _AmiSSL_UI_free(struct AmiSSLIFace *, UI * ui);
extern int                  VARARGS68K _AmiSSL_UI_add_input_string(struct AmiSSLIFace *, UI * ui, const char * prompt, int flags, char * result_buf, int minsize, int maxsize);
extern int                  VARARGS68K _AmiSSL_UI_dup_input_string(struct AmiSSLIFace *, UI * ui, const char * prompt, int flags, char * result_buf, int minsize, int maxsize);
extern int                  VARARGS68K _AmiSSL_UI_add_verify_string(struct AmiSSLIFace *, UI * ui, const char * prompt, int flags, char * result_buf, int minsize, int maxsize, const char * test_buf);
extern int                  VARARGS68K _AmiSSL_UI_dup_verify_string(struct AmiSSLIFace *, UI * ui, const char * prompt, int flags, char * result_buf, int minsize, int maxsize, const char * test_buf);
extern int                  VARARGS68K _AmiSSL_UI_add_input_boolean(struct AmiSSLIFace *, UI * ui, const char * prompt, const char * action_desc, const char * ok_chars, const char * cancel_chars, int flags, char * result_buf);
extern int                  VARARGS68K _AmiSSL_UI_dup_input_boolean(struct AmiSSLIFace *, UI * ui, const char * prompt, const char * action_desc, const char * ok_chars, const char * cancel_chars, int flags, char * result_buf);
extern int                  VARARGS68K _AmiSSL_UI_add_info_string(struct AmiSSLIFace *, UI * ui, const char * text);
extern int                  VARARGS68K _AmiSSL_UI_dup_info_string(struct AmiSSLIFace *, UI * ui, const char * text);
extern int                  VARARGS68K _AmiSSL_UI_add_error_string(struct AmiSSLIFace *, UI * ui, const char * text);
extern int                  VARARGS68K _AmiSSL_UI_dup_error_string(struct AmiSSLIFace *, UI * ui, const char * text);
extern char *               VARARGS68K _AmiSSL_UI_construct_prompt(struct AmiSSLIFace *, UI * ui_method, const char * object_desc, const char * object_name);
extern void *               VARARGS68K _AmiSSL_UI_add_user_data(struct AmiSSLIFace *, UI * ui, void * user_data);
extern void *               VARARGS68K _AmiSSL_UI_get0_user_data(struct AmiSSLIFace *, UI * ui);
extern const char *         VARARGS68K _AmiSSL_UI_get0_result(struct AmiSSLIFace *, UI * ui, int i);
extern int                  VARARGS68K _AmiSSL_UI_process(struct AmiSSLIFace *, UI * ui);
extern int                  VARARGS68K _AmiSSL_UI_ctrl(struct AmiSSLIFace *, UI * ui, int cmd, long i, void * p, void (*f)());
extern int                  VARARGS68K _AmiSSL_UI_get_ex_new_index(struct AmiSSLIFace *, long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func);
extern int                  VARARGS68K _AmiSSL_UI_set_ex_data(struct AmiSSLIFace *, UI * r, int idx, void * arg);
extern void *               VARARGS68K _AmiSSL_UI_get_ex_data(struct AmiSSLIFace *, UI * r, int idx);
extern void                 VARARGS68K _AmiSSL_UI_set_default_method(struct AmiSSLIFace *, const UI_METHOD * meth);
extern const UI_METHOD *    VARARGS68K _AmiSSL_UI_get_default_method(struct AmiSSLIFace *);
extern const UI_METHOD *    VARARGS68K _AmiSSL_UI_get_method(struct AmiSSLIFace *, UI * ui);
extern const UI_METHOD *    VARARGS68K _AmiSSL_UI_set_method(struct AmiSSLIFace *, UI * ui, const UI_METHOD * meth);
extern UI_METHOD *          VARARGS68K _AmiSSL_UI_OpenSSL(struct AmiSSLIFace *);
extern UI_METHOD *          VARARGS68K _AmiSSL_UI_create_method(struct AmiSSLIFace *, char * name);
extern void                 VARARGS68K _AmiSSL_UI_destroy_method(struct AmiSSLIFace *, UI_METHOD * ui_method);
extern int                  VARARGS68K _AmiSSL_UI_method_set_opener(struct AmiSSLIFace *, UI_METHOD * method, int (*opener)(UI *ui));
extern int                  VARARGS68K _AmiSSL_UI_method_set_writer(struct AmiSSLIFace *, UI_METHOD * method, int (*writer)(UI *ui, UI_STRING *uis));
extern int                  VARARGS68K _AmiSSL_UI_method_set_flusher(struct AmiSSLIFace *, UI_METHOD * method, int (*flusher)(UI *ui));
extern int                  VARARGS68K _AmiSSL_UI_method_set_reader(struct AmiSSLIFace *, UI_METHOD * method, int (*reader)(UI *ui, UI_STRING *uis));
extern int                  VARARGS68K _AmiSSL_UI_method_set_closer(struct AmiSSLIFace *, UI_METHOD * method, int (*closer)(UI *ui));
extern int                  VARARGS68K (*_AmiSSL_UI_method_get_opener(struct AmiSSLIFace *, UI_METHOD * method))(UI *);
extern int                  VARARGS68K (*_AmiSSL_UI_method_get_writer(struct AmiSSLIFace *, UI_METHOD * method))(UI *, UI_STRING *);
extern int                  VARARGS68K (*_AmiSSL_UI_method_get_flusher(struct AmiSSLIFace *, UI_METHOD * method))(UI *);
extern int                  VARARGS68K (*_AmiSSL_UI_method_get_reader(struct AmiSSLIFace *, UI_METHOD * method))(UI *, UI_STRING *);
extern int                  VARARGS68K (*_AmiSSL_UI_method_get_closer(struct AmiSSLIFace *, UI_METHOD * method))(UI *);
extern enum UI_string_types VARARGS68K _AmiSSL_UI_get_string_type(struct AmiSSLIFace *, UI_STRING * uis);
extern int                  VARARGS68K _AmiSSL_UI_get_input_flags(struct AmiSSLIFace *, UI_STRING * uis);
extern const char *         VARARGS68K _AmiSSL_UI_get0_output_string(struct AmiSSLIFace *, UI_STRING * uis);
extern const char *         VARARGS68K _AmiSSL_UI_get0_action_string(struct AmiSSLIFace *, UI_STRING * uis);
extern const char *         VARARGS68K _AmiSSL_UI_get0_result_string(struct AmiSSLIFace *, UI_STRING * uis);
extern const char *         VARARGS68K _AmiSSL_UI_get0_test_string(struct AmiSSLIFace *, UI_STRING * uis);
extern int                  VARARGS68K _AmiSSL_UI_get_result_minsize(struct AmiSSLIFace *, UI_STRING * uis);
extern int                  VARARGS68K _AmiSSL_UI_get_result_maxsize(struct AmiSSLIFace *, UI_STRING * uis);
extern int                  VARARGS68K _AmiSSL_UI_set_result(struct AmiSSLIFace *, UI * ui, UI_STRING * uis, const char * result);
extern int                  VARARGS68K _AmiSSL_UI_UTIL_read_pw_string(struct AmiSSLIFace *, char * buf, int length, const char * prompt, int verify);
extern int                  VARARGS68K _AmiSSL_UI_UTIL_read_pw(struct AmiSSLIFace *, char * buf, char * buff, int size, const char * prompt, int verify);
extern void                 VARARGS68K _AmiSSL_ERR_load_UI_strings(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL__ossl_old_des_read_pw_string(struct AmiSSLIFace *, char * buf, int length, const char * prompt, int verify);
extern int                  VARARGS68K _AmiSSL__ossl_old_des_read_pw(struct AmiSSLIFace *, char * buf, char * buff, int size, const char * prompt, int verify);
extern const char *         VARARGS68K _AmiSSL_X509_verify_cert_error_string(struct AmiSSLIFace *, long n);
extern int                  VARARGS68K _AmiSSL_X509_verify(struct AmiSSLIFace *, X509 * a, EVP_PKEY * r);
extern int                  VARARGS68K _AmiSSL_X509_REQ_verify(struct AmiSSLIFace *, X509_REQ * a, EVP_PKEY * r);
extern int                  VARARGS68K _AmiSSL_X509_CRL_verify(struct AmiSSLIFace *, X509_CRL * a, EVP_PKEY * r);
extern int                  VARARGS68K _AmiSSL_NETSCAPE_SPKI_verify(struct AmiSSLIFace *, NETSCAPE_SPKI * a, EVP_PKEY * r);
extern NETSCAPE_SPKI *      VARARGS68K _AmiSSL_NETSCAPE_SPKI_b64_decode(struct AmiSSLIFace *, const char * str, int len);
extern char *               VARARGS68K _AmiSSL_NETSCAPE_SPKI_b64_encode(struct AmiSSLIFace *, NETSCAPE_SPKI * x);
extern EVP_PKEY *           VARARGS68K _AmiSSL_NETSCAPE_SPKI_get_pubkey(struct AmiSSLIFace *, NETSCAPE_SPKI * x);
extern int                  VARARGS68K _AmiSSL_NETSCAPE_SPKI_set_pubkey(struct AmiSSLIFace *, NETSCAPE_SPKI * x, EVP_PKEY * pkey);
extern int                  VARARGS68K _AmiSSL_NETSCAPE_SPKI_print(struct AmiSSLIFace *, BIO * out, NETSCAPE_SPKI * spki);
extern int                  VARARGS68K _AmiSSL_X509_signature_print(struct AmiSSLIFace *, BIO * bp, X509_ALGOR * alg, ASN1_STRING * sig);
extern int                  VARARGS68K _AmiSSL_X509_sign(struct AmiSSLIFace *, X509 * x, EVP_PKEY * pkey, const EVP_MD * md);
extern int                  VARARGS68K _AmiSSL_X509_REQ_sign(struct AmiSSLIFace *, X509_REQ * x, EVP_PKEY * pkey, const EVP_MD * md);
extern int                  VARARGS68K _AmiSSL_X509_CRL_sign(struct AmiSSLIFace *, X509_CRL * x, EVP_PKEY * pkey, const EVP_MD * md);
extern int                  VARARGS68K _AmiSSL_NETSCAPE_SPKI_sign(struct AmiSSLIFace *, NETSCAPE_SPKI * x, EVP_PKEY * pkey, const EVP_MD * md);
extern int                  VARARGS68K _AmiSSL_X509_pubkey_digest(struct AmiSSLIFace *, const X509 * data, const EVP_MD * type, unsigned char * md, unsigned int * len);
extern int                  VARARGS68K _AmiSSL_X509_digest(struct AmiSSLIFace *, const X509 * data, const EVP_MD * type, unsigned char * md, unsigned int * len);
extern int                  VARARGS68K _AmiSSL_X509_CRL_digest(struct AmiSSLIFace *, const X509_CRL * data, const EVP_MD * type, unsigned char * md, unsigned int * len);
extern int                  VARARGS68K _AmiSSL_X509_REQ_digest(struct AmiSSLIFace *, const X509_REQ * data, const EVP_MD * type, unsigned char * md, unsigned int * len);
extern int                  VARARGS68K _AmiSSL_X509_NAME_digest(struct AmiSSLIFace *, const X509_NAME * data, const EVP_MD * type, unsigned char * md, unsigned int * len);
extern X509 *               VARARGS68K _AmiSSL_d2i_X509_bio(struct AmiSSLIFace *, BIO * bp, X509 ** x509);
extern int                  VARARGS68K _AmiSSL_i2d_X509_bio(struct AmiSSLIFace *, BIO * bp, X509 * x509);
extern X509_CRL *           VARARGS68K _AmiSSL_d2i_X509_CRL_bio(struct AmiSSLIFace *, BIO * bp, X509_CRL ** crl);
extern int                  VARARGS68K _AmiSSL_i2d_X509_CRL_bio(struct AmiSSLIFace *, BIO * bp, X509_CRL * crl);
extern X509_REQ *           VARARGS68K _AmiSSL_d2i_X509_REQ_bio(struct AmiSSLIFace *, BIO * bp, X509_REQ ** req);
extern int                  VARARGS68K _AmiSSL_i2d_X509_REQ_bio(struct AmiSSLIFace *, BIO * bp, X509_REQ * req);
extern RSA *                VARARGS68K _AmiSSL_d2i_RSAPrivateKey_bio(struct AmiSSLIFace *, BIO * bp, RSA ** rsa);
extern int                  VARARGS68K _AmiSSL_i2d_RSAPrivateKey_bio(struct AmiSSLIFace *, BIO * bp, RSA * rsa);
extern RSA *                VARARGS68K _AmiSSL_d2i_RSAPublicKey_bio(struct AmiSSLIFace *, BIO * bp, RSA ** rsa);
extern int                  VARARGS68K _AmiSSL_i2d_RSAPublicKey_bio(struct AmiSSLIFace *, BIO * bp, RSA * rsa);
extern RSA *                VARARGS68K _AmiSSL_d2i_RSA_PUBKEY_bio(struct AmiSSLIFace *, BIO * bp, RSA ** rsa);
extern int                  VARARGS68K _AmiSSL_i2d_RSA_PUBKEY_bio(struct AmiSSLIFace *, BIO * bp, RSA * rsa);
extern DSA *                VARARGS68K _AmiSSL_d2i_DSA_PUBKEY_bio(struct AmiSSLIFace *, BIO * bp, DSA ** dsa);
extern int                  VARARGS68K _AmiSSL_i2d_DSA_PUBKEY_bio(struct AmiSSLIFace *, BIO * bp, DSA * dsa);
extern DSA *                VARARGS68K _AmiSSL_d2i_DSAPrivateKey_bio(struct AmiSSLIFace *, BIO * bp, DSA ** dsa);
extern int                  VARARGS68K _AmiSSL_i2d_DSAPrivateKey_bio(struct AmiSSLIFace *, BIO * bp, DSA * dsa);
extern X509_SIG *           VARARGS68K _AmiSSL_d2i_PKCS8_bio(struct AmiSSLIFace *, BIO * bp, X509_SIG ** p8);
extern int                  VARARGS68K _AmiSSL_i2d_PKCS8_bio(struct AmiSSLIFace *, BIO * bp, X509_SIG * p8);
extern PKCS8_PRIV_KEY_INFO * VARARGS68K _AmiSSL_d2i_PKCS8_PRIV_KEY_INFO_bio(struct AmiSSLIFace *, BIO * bp, PKCS8_PRIV_KEY_INFO ** p8inf);
extern int                  VARARGS68K _AmiSSL_i2d_PKCS8_PRIV_KEY_INFO_bio(struct AmiSSLIFace *, BIO * bp, PKCS8_PRIV_KEY_INFO * p8inf);
extern int                  VARARGS68K _AmiSSL_i2d_PKCS8PrivateKeyInfo_bio(struct AmiSSLIFace *, BIO * bp, EVP_PKEY * key);
extern int                  VARARGS68K _AmiSSL_i2d_PrivateKey_bio(struct AmiSSLIFace *, BIO * bp, EVP_PKEY * pkey);
extern EVP_PKEY *           VARARGS68K _AmiSSL_d2i_PrivateKey_bio(struct AmiSSLIFace *, BIO * bp, EVP_PKEY ** a);
extern int                  VARARGS68K _AmiSSL_i2d_PUBKEY_bio(struct AmiSSLIFace *, BIO * bp, EVP_PKEY * pkey);
extern EVP_PKEY *           VARARGS68K _AmiSSL_d2i_PUBKEY_bio(struct AmiSSLIFace *, BIO * bp, EVP_PKEY ** a);
extern X509 *               VARARGS68K _AmiSSL_X509_dup(struct AmiSSLIFace *, X509 * x509);
extern X509_ATTRIBUTE *     VARARGS68K _AmiSSL_X509_ATTRIBUTE_dup(struct AmiSSLIFace *, X509_ATTRIBUTE * xa);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_X509_EXTENSION_dup(struct AmiSSLIFace *, X509_EXTENSION * ex);
extern X509_CRL *           VARARGS68K _AmiSSL_X509_CRL_dup(struct AmiSSLIFace *, X509_CRL * crl);
extern X509_REQ *           VARARGS68K _AmiSSL_X509_REQ_dup(struct AmiSSLIFace *, X509_REQ * req);
extern X509_ALGOR *         VARARGS68K _AmiSSL_X509_ALGOR_dup(struct AmiSSLIFace *, X509_ALGOR * xn);
extern X509_NAME *          VARARGS68K _AmiSSL_X509_NAME_dup(struct AmiSSLIFace *, X509_NAME * xn);
extern X509_NAME_ENTRY *    VARARGS68K _AmiSSL_X509_NAME_ENTRY_dup(struct AmiSSLIFace *, X509_NAME_ENTRY * ne);
extern int                  VARARGS68K _AmiSSL_X509_cmp_time(struct AmiSSLIFace *, ASN1_TIME * s, time_t * t);
extern int                  VARARGS68K _AmiSSL_X509_cmp_current_time(struct AmiSSLIFace *, ASN1_TIME * s);
extern ASN1_TIME *          VARARGS68K _AmiSSL_X509_time_adj(struct AmiSSLIFace *, ASN1_TIME * s, long adj, time_t * t);
extern ASN1_TIME *          VARARGS68K _AmiSSL_X509_gmtime_adj(struct AmiSSLIFace *, ASN1_TIME * s, long adj);
extern const char *         VARARGS68K _AmiSSL_X509_get_default_cert_area(struct AmiSSLIFace *);
extern const char *         VARARGS68K _AmiSSL_X509_get_default_cert_dir(struct AmiSSLIFace *);
extern const char *         VARARGS68K _AmiSSL_X509_get_default_cert_file(struct AmiSSLIFace *);
extern const char *         VARARGS68K _AmiSSL_X509_get_default_cert_dir_env(struct AmiSSLIFace *);
extern const char *         VARARGS68K _AmiSSL_X509_get_default_cert_file_env(struct AmiSSLIFace *);
extern const char *         VARARGS68K _AmiSSL_X509_get_default_private_dir(struct AmiSSLIFace *);
extern X509_REQ *           VARARGS68K _AmiSSL_X509_to_X509_REQ(struct AmiSSLIFace *, X509 * x, EVP_PKEY * pkey, const EVP_MD * md);
extern X509 *               VARARGS68K _AmiSSL_X509_REQ_to_X509(struct AmiSSLIFace *, X509_REQ * r, int days, EVP_PKEY * pkey);
extern X509_ALGOR *         VARARGS68K _AmiSSL_X509_ALGOR_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_X509_ALGOR_free(struct AmiSSLIFace *, X509_ALGOR * a);
extern X509_ALGOR *         VARARGS68K _AmiSSL_d2i_X509_ALGOR(struct AmiSSLIFace *, X509_ALGOR ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_X509_ALGOR(struct AmiSSLIFace *, X509_ALGOR * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_X509_ALGOR_it(struct AmiSSLIFace *);
extern X509_VAL *           VARARGS68K _AmiSSL_X509_VAL_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_X509_VAL_free(struct AmiSSLIFace *, X509_VAL * a);
extern X509_VAL *           VARARGS68K _AmiSSL_d2i_X509_VAL(struct AmiSSLIFace *, X509_VAL ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_X509_VAL(struct AmiSSLIFace *, X509_VAL * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_X509_VAL_it(struct AmiSSLIFace *);
extern X509_PUBKEY *        VARARGS68K _AmiSSL_X509_PUBKEY_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_X509_PUBKEY_free(struct AmiSSLIFace *, X509_PUBKEY * a);
extern X509_PUBKEY *        VARARGS68K _AmiSSL_d2i_X509_PUBKEY(struct AmiSSLIFace *, X509_PUBKEY ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_X509_PUBKEY(struct AmiSSLIFace *, X509_PUBKEY * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_X509_PUBKEY_it(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_X509_PUBKEY_set(struct AmiSSLIFace *, X509_PUBKEY ** x, EVP_PKEY * pkey);
extern EVP_PKEY *           VARARGS68K _AmiSSL_X509_PUBKEY_get(struct AmiSSLIFace *, X509_PUBKEY * key);
extern int                  VARARGS68K _AmiSSL_X509_get_pubkey_parameters(struct AmiSSLIFace *, EVP_PKEY * pkey, STACK_OF(X509) * chain);
extern int                  VARARGS68K _AmiSSL_i2d_PUBKEY(struct AmiSSLIFace *, EVP_PKEY * a, unsigned char ** pp);
extern EVP_PKEY *           VARARGS68K _AmiSSL_d2i_PUBKEY(struct AmiSSLIFace *, EVP_PKEY ** a, const unsigned char ** pp, long length);
extern int                  VARARGS68K _AmiSSL_i2d_RSA_PUBKEY(struct AmiSSLIFace *, RSA * a, unsigned char ** pp);
extern RSA *                VARARGS68K _AmiSSL_d2i_RSA_PUBKEY(struct AmiSSLIFace *, RSA ** a, const unsigned char ** pp, long length);
extern int                  VARARGS68K _AmiSSL_i2d_DSA_PUBKEY(struct AmiSSLIFace *, DSA * a, unsigned char ** pp);
extern DSA *                VARARGS68K _AmiSSL_d2i_DSA_PUBKEY(struct AmiSSLIFace *, DSA ** a, const unsigned char ** pp, long length);
extern X509_SIG *           VARARGS68K _AmiSSL_X509_SIG_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_X509_SIG_free(struct AmiSSLIFace *, X509_SIG * a);
extern X509_SIG *           VARARGS68K _AmiSSL_d2i_X509_SIG(struct AmiSSLIFace *, X509_SIG ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_X509_SIG(struct AmiSSLIFace *, X509_SIG * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_X509_SIG_it(struct AmiSSLIFace *);
extern X509_REQ_INFO *      VARARGS68K _AmiSSL_X509_REQ_INFO_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_X509_REQ_INFO_free(struct AmiSSLIFace *, X509_REQ_INFO * a);
extern X509_REQ_INFO *      VARARGS68K _AmiSSL_d2i_X509_REQ_INFO(struct AmiSSLIFace *, X509_REQ_INFO ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_X509_REQ_INFO(struct AmiSSLIFace *, X509_REQ_INFO * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_X509_REQ_INFO_it(struct AmiSSLIFace *);
extern X509_REQ *           VARARGS68K _AmiSSL_X509_REQ_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_X509_REQ_free(struct AmiSSLIFace *, X509_REQ * a);
extern X509_REQ *           VARARGS68K _AmiSSL_d2i_X509_REQ(struct AmiSSLIFace *, X509_REQ ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_X509_REQ(struct AmiSSLIFace *, X509_REQ * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_X509_REQ_it(struct AmiSSLIFace *);
extern X509_ATTRIBUTE *     VARARGS68K _AmiSSL_X509_ATTRIBUTE_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_X509_ATTRIBUTE_free(struct AmiSSLIFace *, X509_ATTRIBUTE * a);
extern X509_ATTRIBUTE *     VARARGS68K _AmiSSL_d2i_X509_ATTRIBUTE(struct AmiSSLIFace *, X509_ATTRIBUTE ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_X509_ATTRIBUTE(struct AmiSSLIFace *, X509_ATTRIBUTE * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_X509_ATTRIBUTE_it(struct AmiSSLIFace *);
extern X509_ATTRIBUTE *     VARARGS68K _AmiSSL_X509_ATTRIBUTE_create(struct AmiSSLIFace *, int nid, int atrtype, void * value);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_X509_EXTENSION_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_X509_EXTENSION_free(struct AmiSSLIFace *, X509_EXTENSION * a);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_d2i_X509_EXTENSION(struct AmiSSLIFace *, X509_EXTENSION ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_X509_EXTENSION(struct AmiSSLIFace *, X509_EXTENSION * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_X509_EXTENSION_it(struct AmiSSLIFace *);
extern X509_NAME_ENTRY *    VARARGS68K _AmiSSL_X509_NAME_ENTRY_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_X509_NAME_ENTRY_free(struct AmiSSLIFace *, X509_NAME_ENTRY * a);
extern X509_NAME_ENTRY *    VARARGS68K _AmiSSL_d2i_X509_NAME_ENTRY(struct AmiSSLIFace *, X509_NAME_ENTRY ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_X509_NAME_ENTRY(struct AmiSSLIFace *, X509_NAME_ENTRY * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_X509_NAME_ENTRY_it(struct AmiSSLIFace *);
extern X509_NAME *          VARARGS68K _AmiSSL_X509_NAME_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_X509_NAME_free(struct AmiSSLIFace *, X509_NAME * a);
extern X509_NAME *          VARARGS68K _AmiSSL_d2i_X509_NAME(struct AmiSSLIFace *, X509_NAME ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_X509_NAME(struct AmiSSLIFace *, X509_NAME * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_X509_NAME_it(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_X509_NAME_set(struct AmiSSLIFace *, X509_NAME ** xn, X509_NAME * name);
extern X509_CINF *          VARARGS68K _AmiSSL_X509_CINF_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_X509_CINF_free(struct AmiSSLIFace *, X509_CINF * a);
extern X509_CINF *          VARARGS68K _AmiSSL_d2i_X509_CINF(struct AmiSSLIFace *, X509_CINF ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_X509_CINF(struct AmiSSLIFace *, X509_CINF * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_X509_CINF_it(struct AmiSSLIFace *);
extern X509 *               VARARGS68K _AmiSSL_X509_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_X509_free(struct AmiSSLIFace *, X509 * a);
extern X509 *               VARARGS68K _AmiSSL_d2i_X509(struct AmiSSLIFace *, X509 ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_X509(struct AmiSSLIFace *, X509 * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_X509_it(struct AmiSSLIFace *);
extern X509_CERT_AUX *      VARARGS68K _AmiSSL_X509_CERT_AUX_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_X509_CERT_AUX_free(struct AmiSSLIFace *, X509_CERT_AUX * a);
extern X509_CERT_AUX *      VARARGS68K _AmiSSL_d2i_X509_CERT_AUX(struct AmiSSLIFace *, X509_CERT_AUX ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_X509_CERT_AUX(struct AmiSSLIFace *, X509_CERT_AUX * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_X509_CERT_AUX_it(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_X509_get_ex_new_index(struct AmiSSLIFace *, long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func);
extern int                  VARARGS68K _AmiSSL_X509_set_ex_data(struct AmiSSLIFace *, X509 * r, int idx, void * arg);
extern void *               VARARGS68K _AmiSSL_X509_get_ex_data(struct AmiSSLIFace *, X509 * r, int idx);
extern int                  VARARGS68K _AmiSSL_i2d_X509_AUX(struct AmiSSLIFace *, X509 * a, unsigned char ** pp);
extern X509 *               VARARGS68K _AmiSSL_d2i_X509_AUX(struct AmiSSLIFace *, X509 ** a, const unsigned char ** pp, long length);
extern int                  VARARGS68K _AmiSSL_X509_alias_set1(struct AmiSSLIFace *, X509 * x, unsigned char * name, int len);
extern int                  VARARGS68K _AmiSSL_X509_keyid_set1(struct AmiSSLIFace *, X509 * x, unsigned char * id, int len);
extern unsigned char *      VARARGS68K _AmiSSL_X509_alias_get0(struct AmiSSLIFace *, X509 * x, int * len);
extern int                  VARARGS68K (*_AmiSSL_X509_TRUST_set_default(struct AmiSSLIFace *, int (*trust)(int, X509 *, int)))(int, X509 *, int);
extern int                  VARARGS68K _AmiSSL_X509_TRUST_set(struct AmiSSLIFace *, int * t, int trust);
extern int                  VARARGS68K _AmiSSL_X509_add1_trust_object(struct AmiSSLIFace *, X509 * x, ASN1_OBJECT * obj);
extern int                  VARARGS68K _AmiSSL_X509_add1_reject_object(struct AmiSSLIFace *, X509 * x, ASN1_OBJECT * obj);
extern void                 VARARGS68K _AmiSSL_X509_trust_clear(struct AmiSSLIFace *, X509 * x);
extern void                 VARARGS68K _AmiSSL_X509_reject_clear(struct AmiSSLIFace *, X509 * x);
extern X509_REVOKED *       VARARGS68K _AmiSSL_X509_REVOKED_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_X509_REVOKED_free(struct AmiSSLIFace *, X509_REVOKED * a);
extern X509_REVOKED *       VARARGS68K _AmiSSL_d2i_X509_REVOKED(struct AmiSSLIFace *, X509_REVOKED ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_X509_REVOKED(struct AmiSSLIFace *, X509_REVOKED * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_X509_REVOKED_it(struct AmiSSLIFace *);
extern X509_CRL_INFO *      VARARGS68K _AmiSSL_X509_CRL_INFO_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_X509_CRL_INFO_free(struct AmiSSLIFace *, X509_CRL_INFO * a);
extern X509_CRL_INFO *      VARARGS68K _AmiSSL_d2i_X509_CRL_INFO(struct AmiSSLIFace *, X509_CRL_INFO ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_X509_CRL_INFO(struct AmiSSLIFace *, X509_CRL_INFO * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_X509_CRL_INFO_it(struct AmiSSLIFace *);
extern X509_CRL *           VARARGS68K _AmiSSL_X509_CRL_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_X509_CRL_free(struct AmiSSLIFace *, X509_CRL * a);
extern X509_CRL *           VARARGS68K _AmiSSL_d2i_X509_CRL(struct AmiSSLIFace *, X509_CRL ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_X509_CRL(struct AmiSSLIFace *, X509_CRL * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_X509_CRL_it(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_X509_CRL_add0_revoked(struct AmiSSLIFace *, X509_CRL * crl, X509_REVOKED * rev);
extern X509_PKEY *          VARARGS68K _AmiSSL_X509_PKEY_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_X509_PKEY_free(struct AmiSSLIFace *, X509_PKEY * a);
extern int                  VARARGS68K _AmiSSL_i2d_X509_PKEY(struct AmiSSLIFace *, X509_PKEY * a, unsigned char ** pp);
extern X509_PKEY *          VARARGS68K _AmiSSL_d2i_X509_PKEY(struct AmiSSLIFace *, X509_PKEY ** a, const unsigned char ** pp, long length);
extern NETSCAPE_SPKI *      VARARGS68K _AmiSSL_NETSCAPE_SPKI_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_NETSCAPE_SPKI_free(struct AmiSSLIFace *, NETSCAPE_SPKI * a);
extern NETSCAPE_SPKI *      VARARGS68K _AmiSSL_d2i_NETSCAPE_SPKI(struct AmiSSLIFace *, NETSCAPE_SPKI ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_NETSCAPE_SPKI(struct AmiSSLIFace *, NETSCAPE_SPKI * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_NETSCAPE_SPKI_it(struct AmiSSLIFace *);
extern NETSCAPE_SPKAC *     VARARGS68K _AmiSSL_NETSCAPE_SPKAC_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_NETSCAPE_SPKAC_free(struct AmiSSLIFace *, NETSCAPE_SPKAC * a);
extern NETSCAPE_SPKAC *     VARARGS68K _AmiSSL_d2i_NETSCAPE_SPKAC(struct AmiSSLIFace *, NETSCAPE_SPKAC ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_NETSCAPE_SPKAC(struct AmiSSLIFace *, NETSCAPE_SPKAC * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_NETSCAPE_SPKAC_it(struct AmiSSLIFace *);
extern NETSCAPE_CERT_SEQUENCE * VARARGS68K _AmiSSL_NETSCAPE_CERT_SEQUENCE_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_NETSCAPE_CERT_SEQUENCE_free(struct AmiSSLIFace *, NETSCAPE_CERT_SEQUENCE * a);
extern NETSCAPE_CERT_SEQUENCE * VARARGS68K _AmiSSL_d2i_NETSCAPE_CERT_SEQUENCE(struct AmiSSLIFace *, NETSCAPE_CERT_SEQUENCE ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_NETSCAPE_CERT_SEQUENCE(struct AmiSSLIFace *, NETSCAPE_CERT_SEQUENCE * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_NETSCAPE_CERT_SEQUENCE_it(struct AmiSSLIFace *);
extern X509_INFO *          VARARGS68K _AmiSSL_X509_INFO_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_X509_INFO_free(struct AmiSSLIFace *, X509_INFO * a);
extern char *               VARARGS68K _AmiSSL_X509_NAME_oneline(struct AmiSSLIFace *, X509_NAME * a, char * buf, int size);
extern int                  VARARGS68K _AmiSSL_ASN1_verify(struct AmiSSLIFace *, int (*i2d)(), X509_ALGOR * algor1, ASN1_BIT_STRING * signature, char * data, EVP_PKEY * pkey);
extern int                  VARARGS68K _AmiSSL_ASN1_digest(struct AmiSSLIFace *, int (*i2d)(), const EVP_MD * type, char * data, unsigned char * md, unsigned int * len);
extern int                  VARARGS68K _AmiSSL_ASN1_sign(struct AmiSSLIFace *, int (*i2d)(), X509_ALGOR * algor1, X509_ALGOR * algor2, ASN1_BIT_STRING * signature, char * data, EVP_PKEY * pkey, const EVP_MD * type);
extern int                  VARARGS68K _AmiSSL_ASN1_item_digest(struct AmiSSLIFace *, const ASN1_ITEM * it, const EVP_MD * type, void * data, unsigned char * md, unsigned int * len);
extern int                  VARARGS68K _AmiSSL_ASN1_item_verify(struct AmiSSLIFace *, const ASN1_ITEM * it, X509_ALGOR * algor1, ASN1_BIT_STRING * signature, void * data, EVP_PKEY * pkey);
extern int                  VARARGS68K _AmiSSL_ASN1_item_sign(struct AmiSSLIFace *, const ASN1_ITEM * it, X509_ALGOR * algor1, X509_ALGOR * algor2, ASN1_BIT_STRING * signature, void * data, EVP_PKEY * pkey, const EVP_MD * type);
extern int                  VARARGS68K _AmiSSL_X509_set_version(struct AmiSSLIFace *, X509 * x, long version);
extern int                  VARARGS68K _AmiSSL_X509_set_serialNumber(struct AmiSSLIFace *, X509 * x, ASN1_INTEGER * serial);
extern ASN1_INTEGER *       VARARGS68K _AmiSSL_X509_get_serialNumber(struct AmiSSLIFace *, X509 * x);
extern int                  VARARGS68K _AmiSSL_X509_set_issuer_name(struct AmiSSLIFace *, X509 * x, X509_NAME * name);
extern X509_NAME *          VARARGS68K _AmiSSL_X509_get_issuer_name(struct AmiSSLIFace *, X509 * a);
extern int                  VARARGS68K _AmiSSL_X509_set_subject_name(struct AmiSSLIFace *, X509 * x, X509_NAME * name);
extern X509_NAME *          VARARGS68K _AmiSSL_X509_get_subject_name(struct AmiSSLIFace *, X509 * a);
extern int                  VARARGS68K _AmiSSL_X509_set_notBefore(struct AmiSSLIFace *, X509 * x, ASN1_TIME * tm);
extern int                  VARARGS68K _AmiSSL_X509_set_notAfter(struct AmiSSLIFace *, X509 * x, ASN1_TIME * tm);
extern int                  VARARGS68K _AmiSSL_X509_set_pubkey(struct AmiSSLIFace *, X509 * x, EVP_PKEY * pkey);
extern EVP_PKEY *           VARARGS68K _AmiSSL_X509_get_pubkey(struct AmiSSLIFace *, X509 * x);
extern ASN1_BIT_STRING *    VARARGS68K _AmiSSL_X509_get0_pubkey_bitstr(struct AmiSSLIFace *, const X509 * x);
extern int                  VARARGS68K _AmiSSL_X509_certificate_type(struct AmiSSLIFace *, X509 * x, EVP_PKEY * pubkey);
extern int                  VARARGS68K _AmiSSL_X509_REQ_set_version(struct AmiSSLIFace *, X509_REQ * x, long version);
extern int                  VARARGS68K _AmiSSL_X509_REQ_set_subject_name(struct AmiSSLIFace *, X509_REQ * req, X509_NAME * name);
extern int                  VARARGS68K _AmiSSL_X509_REQ_set_pubkey(struct AmiSSLIFace *, X509_REQ * x, EVP_PKEY * pkey);
extern EVP_PKEY *           VARARGS68K _AmiSSL_X509_REQ_get_pubkey(struct AmiSSLIFace *, X509_REQ * req);
extern int                  VARARGS68K _AmiSSL_X509_REQ_extension_nid(struct AmiSSLIFace *, int nid);
extern int *                VARARGS68K _AmiSSL_X509_REQ_get_extension_nids(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_X509_REQ_set_extension_nids(struct AmiSSLIFace *, int * nids);
extern STACK_OF(X509_EXTENSION) * VARARGS68K _AmiSSL_X509_REQ_get_extensions(struct AmiSSLIFace *, X509_REQ * req);
extern int                  VARARGS68K _AmiSSL_X509_REQ_add_extensions_nid(struct AmiSSLIFace *, X509_REQ * req, STACK_OF(X509_EXTENSION) * exts, int nid);
extern int                  VARARGS68K _AmiSSL_X509_REQ_add_extensions(struct AmiSSLIFace *, X509_REQ * req, STACK_OF(X509_EXTENSION) * exts);
extern int                  VARARGS68K _AmiSSL_X509_REQ_get_attr_count(struct AmiSSLIFace *, const X509_REQ * req);
extern int                  VARARGS68K _AmiSSL_X509_REQ_get_attr_by_NID(struct AmiSSLIFace *, const X509_REQ * req, int nid, int lastpos);
extern int                  VARARGS68K _AmiSSL_X509_REQ_get_attr_by_OBJ(struct AmiSSLIFace *, const X509_REQ * req, ASN1_OBJECT * obj, int lastpos);
extern X509_ATTRIBUTE *     VARARGS68K _AmiSSL_X509_REQ_get_attr(struct AmiSSLIFace *, const X509_REQ * req, int loc);
extern X509_ATTRIBUTE *     VARARGS68K _AmiSSL_X509_REQ_delete_attr(struct AmiSSLIFace *, X509_REQ * req, int loc);
extern int                  VARARGS68K _AmiSSL_X509_REQ_add1_attr(struct AmiSSLIFace *, X509_REQ * req, X509_ATTRIBUTE * attr);
extern int                  VARARGS68K _AmiSSL_X509_REQ_add1_attr_by_OBJ(struct AmiSSLIFace *, X509_REQ * req, const ASN1_OBJECT * obj, int type, const unsigned char * bytes, int len);
extern int                  VARARGS68K _AmiSSL_X509_REQ_add1_attr_by_NID(struct AmiSSLIFace *, X509_REQ * req, int nid, int type, const unsigned char * bytes, int len);
extern int                  VARARGS68K _AmiSSL_X509_REQ_add1_attr_by_txt(struct AmiSSLIFace *, X509_REQ * req, const char * attrname, int type, const unsigned char * bytes, int len);
extern int                  VARARGS68K _AmiSSL_X509_CRL_set_version(struct AmiSSLIFace *, X509_CRL * x, long version);
extern int                  VARARGS68K _AmiSSL_X509_CRL_set_issuer_name(struct AmiSSLIFace *, X509_CRL * x, X509_NAME * name);
extern int                  VARARGS68K _AmiSSL_X509_CRL_set_lastUpdate(struct AmiSSLIFace *, X509_CRL * x, ASN1_TIME * tm);
extern int                  VARARGS68K _AmiSSL_X509_CRL_set_nextUpdate(struct AmiSSLIFace *, X509_CRL * x, ASN1_TIME * tm);
extern int                  VARARGS68K _AmiSSL_X509_CRL_sort(struct AmiSSLIFace *, X509_CRL * crl);
extern int                  VARARGS68K _AmiSSL_X509_REVOKED_set_serialNumber(struct AmiSSLIFace *, X509_REVOKED * x, ASN1_INTEGER * serial);
extern int                  VARARGS68K _AmiSSL_X509_REVOKED_set_revocationDate(struct AmiSSLIFace *, X509_REVOKED * r, ASN1_TIME * tm);
extern int                  VARARGS68K _AmiSSL_X509_check_private_key(struct AmiSSLIFace *, X509 * x509, EVP_PKEY * pkey);
extern int                  VARARGS68K _AmiSSL_X509_issuer_and_serial_cmp(struct AmiSSLIFace *, const X509 * a, const X509 * b);
extern unsigned long        VARARGS68K _AmiSSL_X509_issuer_and_serial_hash(struct AmiSSLIFace *, X509 * a);
extern int                  VARARGS68K _AmiSSL_X509_issuer_name_cmp(struct AmiSSLIFace *, const X509 * a, const X509 * b);
extern unsigned long        VARARGS68K _AmiSSL_X509_issuer_name_hash(struct AmiSSLIFace *, X509 * a);
extern int                  VARARGS68K _AmiSSL_X509_subject_name_cmp(struct AmiSSLIFace *, const X509 * a, const X509 * b);
extern unsigned long        VARARGS68K _AmiSSL_X509_subject_name_hash(struct AmiSSLIFace *, X509 * x);
extern int                  VARARGS68K _AmiSSL_X509_cmp(struct AmiSSLIFace *, const X509 * a, const X509 * b);
extern int                  VARARGS68K _AmiSSL_X509_NAME_cmp(struct AmiSSLIFace *, const X509_NAME * a, const X509_NAME * b);
extern unsigned long        VARARGS68K _AmiSSL_X509_NAME_hash(struct AmiSSLIFace *, X509_NAME * x);
extern int                  VARARGS68K _AmiSSL_X509_CRL_cmp(struct AmiSSLIFace *, const X509_CRL * a, const X509_CRL * b);
extern int                  VARARGS68K _AmiSSL_X509_NAME_print(struct AmiSSLIFace *, BIO * bp, X509_NAME * name, int obase);
extern int                  VARARGS68K _AmiSSL_X509_NAME_print_ex(struct AmiSSLIFace *, BIO * out, X509_NAME * nm, int indent, unsigned long flags);
extern int                  VARARGS68K _AmiSSL_X509_print_ex(struct AmiSSLIFace *, BIO * bp, X509 * x, unsigned long nmflag, unsigned long cflag);
extern int                  VARARGS68K _AmiSSL_X509_print(struct AmiSSLIFace *, BIO * bp, X509 * x);
extern int                  VARARGS68K _AmiSSL_X509_ocspid_print(struct AmiSSLIFace *, BIO * bp, X509 * x);
extern int                  VARARGS68K _AmiSSL_X509_CERT_AUX_print(struct AmiSSLIFace *, BIO * bp, X509_CERT_AUX * x, int indent);
extern int                  VARARGS68K _AmiSSL_X509_CRL_print(struct AmiSSLIFace *, BIO * bp, X509_CRL * x);
extern int                  VARARGS68K _AmiSSL_X509_REQ_print_ex(struct AmiSSLIFace *, BIO * bp, X509_REQ * x, unsigned long nmflag, unsigned long cflag);
extern int                  VARARGS68K _AmiSSL_X509_REQ_print(struct AmiSSLIFace *, BIO * bp, X509_REQ * req);
extern int                  VARARGS68K _AmiSSL_X509_NAME_entry_count(struct AmiSSLIFace *, X509_NAME * name);
extern int                  VARARGS68K _AmiSSL_X509_NAME_get_text_by_NID(struct AmiSSLIFace *, X509_NAME * name, int nid, char * buf, int len);
extern int                  VARARGS68K _AmiSSL_X509_NAME_get_text_by_OBJ(struct AmiSSLIFace *, X509_NAME * name, ASN1_OBJECT * obj, char * buf, int len);
extern int                  VARARGS68K _AmiSSL_X509_NAME_get_index_by_NID(struct AmiSSLIFace *, X509_NAME * name, int nid, int lastpos);
extern int                  VARARGS68K _AmiSSL_X509_NAME_get_index_by_OBJ(struct AmiSSLIFace *, X509_NAME * name, ASN1_OBJECT * obj, int lastpos);
extern X509_NAME_ENTRY *    VARARGS68K _AmiSSL_X509_NAME_get_entry(struct AmiSSLIFace *, X509_NAME * name, int loc);
extern X509_NAME_ENTRY *    VARARGS68K _AmiSSL_X509_NAME_delete_entry(struct AmiSSLIFace *, X509_NAME * name, int loc);
extern int                  VARARGS68K _AmiSSL_X509_NAME_add_entry(struct AmiSSLIFace *, X509_NAME * name, X509_NAME_ENTRY * ne, int loc, int set);
extern int                  VARARGS68K _AmiSSL_X509_NAME_add_entry_by_OBJ(struct AmiSSLIFace *, X509_NAME * name, ASN1_OBJECT * obj, int type, unsigned char * bytes, int len, int loc, int set);
extern int                  VARARGS68K _AmiSSL_X509_NAME_add_entry_by_NID(struct AmiSSLIFace *, X509_NAME * name, int nid, int type, unsigned char * bytes, int len, int loc, int set);
extern X509_NAME_ENTRY *    VARARGS68K _AmiSSL_X509_NAME_ENTRY_create_by_txt(struct AmiSSLIFace *, X509_NAME_ENTRY ** ne, const char * field, int type, const unsigned char * bytes, int len);
extern X509_NAME_ENTRY *    VARARGS68K _AmiSSL_X509_NAME_ENTRY_create_by_NID(struct AmiSSLIFace *, X509_NAME_ENTRY ** ne, int nid, int type, unsigned char * bytes, int len);
extern int                  VARARGS68K _AmiSSL_X509_NAME_add_entry_by_txt(struct AmiSSLIFace *, X509_NAME * name, const char * field, int type, const unsigned char * bytes, int len, int loc, int set);
extern X509_NAME_ENTRY *    VARARGS68K _AmiSSL_X509_NAME_ENTRY_create_by_OBJ(struct AmiSSLIFace *, X509_NAME_ENTRY ** ne, ASN1_OBJECT * obj, int type, const unsigned char * bytes, int len);
extern int                  VARARGS68K _AmiSSL_X509_NAME_ENTRY_set_object(struct AmiSSLIFace *, X509_NAME_ENTRY * ne, ASN1_OBJECT * obj);
extern int                  VARARGS68K _AmiSSL_X509_NAME_ENTRY_set_data(struct AmiSSLIFace *, X509_NAME_ENTRY * ne, int type, const unsigned char * bytes, int len);
extern ASN1_OBJECT *        VARARGS68K _AmiSSL_X509_NAME_ENTRY_get_object(struct AmiSSLIFace *, X509_NAME_ENTRY * ne);
extern ASN1_STRING *        VARARGS68K _AmiSSL_X509_NAME_ENTRY_get_data(struct AmiSSLIFace *, X509_NAME_ENTRY * ne);
extern int                  VARARGS68K _AmiSSL_X509v3_get_ext_count(struct AmiSSLIFace *, const STACK_OF(X509_EXTENSION) * x);
extern int                  VARARGS68K _AmiSSL_X509v3_get_ext_by_NID(struct AmiSSLIFace *, const STACK_OF(X509_EXTENSION) * x, int nid, int lastpos);
extern int                  VARARGS68K _AmiSSL_X509v3_get_ext_by_OBJ(struct AmiSSLIFace *, const STACK_OF(X509_EXTENSION) * x, ASN1_OBJECT * obj, int lastpos);
extern int                  VARARGS68K _AmiSSL_X509v3_get_ext_by_critical(struct AmiSSLIFace *, const STACK_OF(X509_EXTENSION) * x, int crit, int lastpos);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_X509v3_get_ext(struct AmiSSLIFace *, const STACK_OF(X509_EXTENSION) * x, int loc);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_X509v3_delete_ext(struct AmiSSLIFace *, STACK_OF(X509_EXTENSION) * x, int loc);
extern STACK_OF(X509_EXTENSION) * VARARGS68K _AmiSSL_X509v3_add_ext(struct AmiSSLIFace *, STACK_OF(X509_EXTENSION) ** x, X509_EXTENSION * ex, int loc);
extern int                  VARARGS68K _AmiSSL_X509_get_ext_count(struct AmiSSLIFace *, X509 * x);
extern int                  VARARGS68K _AmiSSL_X509_get_ext_by_NID(struct AmiSSLIFace *, X509 * x, int nid, int lastpos);
extern int                  VARARGS68K _AmiSSL_X509_get_ext_by_OBJ(struct AmiSSLIFace *, X509 * x, ASN1_OBJECT * obj, int lastpos);
extern int                  VARARGS68K _AmiSSL_X509_get_ext_by_critical(struct AmiSSLIFace *, X509 * x, int crit, int lastpos);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_X509_get_ext(struct AmiSSLIFace *, X509 * x, int loc);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_X509_delete_ext(struct AmiSSLIFace *, X509 * x, int loc);
extern int                  VARARGS68K _AmiSSL_X509_add_ext(struct AmiSSLIFace *, X509 * x, X509_EXTENSION * ex, int loc);
extern void *               VARARGS68K _AmiSSL_X509_get_ext_d2i(struct AmiSSLIFace *, X509 * x, int nid, int * crit, int * idx);
extern int                  VARARGS68K _AmiSSL_X509_add1_ext_i2d(struct AmiSSLIFace *, X509 * x, int nid, void * value, int crit, unsigned long flags);
extern int                  VARARGS68K _AmiSSL_X509_CRL_get_ext_count(struct AmiSSLIFace *, X509_CRL * x);
extern int                  VARARGS68K _AmiSSL_X509_CRL_get_ext_by_NID(struct AmiSSLIFace *, X509_CRL * x, int nid, int lastpos);
extern int                  VARARGS68K _AmiSSL_X509_CRL_get_ext_by_OBJ(struct AmiSSLIFace *, X509_CRL * x, ASN1_OBJECT * obj, int lastpos);
extern int                  VARARGS68K _AmiSSL_X509_CRL_get_ext_by_critical(struct AmiSSLIFace *, X509_CRL * x, int crit, int lastpos);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_X509_CRL_get_ext(struct AmiSSLIFace *, X509_CRL * x, int loc);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_X509_CRL_delete_ext(struct AmiSSLIFace *, X509_CRL * x, int loc);
extern int                  VARARGS68K _AmiSSL_X509_CRL_add_ext(struct AmiSSLIFace *, X509_CRL * x, X509_EXTENSION * ex, int loc);
extern void *               VARARGS68K _AmiSSL_X509_CRL_get_ext_d2i(struct AmiSSLIFace *, X509_CRL * x, int nid, int * crit, int * idx);
extern int                  VARARGS68K _AmiSSL_X509_CRL_add1_ext_i2d(struct AmiSSLIFace *, X509_CRL * x, int nid, void * value, int crit, unsigned long flags);
extern int                  VARARGS68K _AmiSSL_X509_REVOKED_get_ext_count(struct AmiSSLIFace *, X509_REVOKED * x);
extern int                  VARARGS68K _AmiSSL_X509_REVOKED_get_ext_by_NID(struct AmiSSLIFace *, X509_REVOKED * x, int nid, int lastpos);
extern int                  VARARGS68K _AmiSSL_X509_REVOKED_get_ext_by_OBJ(struct AmiSSLIFace *, X509_REVOKED * x, ASN1_OBJECT * obj, int lastpos);
extern int                  VARARGS68K _AmiSSL_X509_REVOKED_get_ext_by_critical(struct AmiSSLIFace *, X509_REVOKED * x, int crit, int lastpos);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_X509_REVOKED_get_ext(struct AmiSSLIFace *, X509_REVOKED * x, int loc);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_X509_REVOKED_delete_ext(struct AmiSSLIFace *, X509_REVOKED * x, int loc);
extern int                  VARARGS68K _AmiSSL_X509_REVOKED_add_ext(struct AmiSSLIFace *, X509_REVOKED * x, X509_EXTENSION * ex, int loc);
extern void *               VARARGS68K _AmiSSL_X509_REVOKED_get_ext_d2i(struct AmiSSLIFace *, X509_REVOKED * x, int nid, int * crit, int * idx);
extern int                  VARARGS68K _AmiSSL_X509_REVOKED_add1_ext_i2d(struct AmiSSLIFace *, X509_REVOKED * x, int nid, void * value, int crit, unsigned long flags);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_X509_EXTENSION_create_by_NID(struct AmiSSLIFace *, X509_EXTENSION ** ex, int nid, int crit, ASN1_OCTET_STRING * data);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_X509_EXTENSION_create_by_OBJ(struct AmiSSLIFace *, X509_EXTENSION ** ex, ASN1_OBJECT * obj, int crit, ASN1_OCTET_STRING * data);
extern int                  VARARGS68K _AmiSSL_X509_EXTENSION_set_object(struct AmiSSLIFace *, X509_EXTENSION * ex, ASN1_OBJECT * obj);
extern int                  VARARGS68K _AmiSSL_X509_EXTENSION_set_critical(struct AmiSSLIFace *, X509_EXTENSION * ex, int crit);
extern int                  VARARGS68K _AmiSSL_X509_EXTENSION_set_data(struct AmiSSLIFace *, X509_EXTENSION * ex, ASN1_OCTET_STRING * data);
extern ASN1_OBJECT *        VARARGS68K _AmiSSL_X509_EXTENSION_get_object(struct AmiSSLIFace *, X509_EXTENSION * ex);
extern ASN1_OCTET_STRING *  VARARGS68K _AmiSSL_X509_EXTENSION_get_data(struct AmiSSLIFace *, X509_EXTENSION * ne);
extern int                  VARARGS68K _AmiSSL_X509_EXTENSION_get_critical(struct AmiSSLIFace *, X509_EXTENSION * ex);
extern int                  VARARGS68K _AmiSSL_X509at_get_attr_count(struct AmiSSLIFace *, const STACK_OF(X509_ATTRIBUTE) * x);
extern int                  VARARGS68K _AmiSSL_X509at_get_attr_by_NID(struct AmiSSLIFace *, const STACK_OF(X509_ATTRIBUTE) * x, int nid, int lastpos);
extern int                  VARARGS68K _AmiSSL_X509at_get_attr_by_OBJ(struct AmiSSLIFace *, const STACK_OF(X509_ATTRIBUTE) * sk, ASN1_OBJECT * obj, int lastpos);
extern X509_ATTRIBUTE *     VARARGS68K _AmiSSL_X509at_get_attr(struct AmiSSLIFace *, const STACK_OF(X509_ATTRIBUTE) * x, int loc);
extern X509_ATTRIBUTE *     VARARGS68K _AmiSSL_X509at_delete_attr(struct AmiSSLIFace *, STACK_OF(X509_ATTRIBUTE) * x, int loc);
extern STACK_OF(X509_ATTRIBUTE) * VARARGS68K _AmiSSL_X509at_add1_attr(struct AmiSSLIFace *, STACK_OF(X509_ATTRIBUTE) ** x, X509_ATTRIBUTE * attr);
extern STACK_OF(X509_ATTRIBUTE) * VARARGS68K _AmiSSL_X509at_add1_attr_by_OBJ(struct AmiSSLIFace *, STACK_OF(X509_ATTRIBUTE) ** x, const ASN1_OBJECT * obj, int type, const unsigned char * bytes, int len);
extern STACK_OF(X509_ATTRIBUTE) * VARARGS68K _AmiSSL_X509at_add1_attr_by_NID(struct AmiSSLIFace *, STACK_OF(X509_ATTRIBUTE) ** x, int nid, int type, const unsigned char * bytes, int len);
extern STACK_OF(X509_ATTRIBUTE) * VARARGS68K _AmiSSL_X509at_add1_attr_by_txt(struct AmiSSLIFace *, STACK_OF(X509_ATTRIBUTE) ** x, const char * attrname, int type, const unsigned char * bytes, int len);
extern X509_ATTRIBUTE *     VARARGS68K _AmiSSL_X509_ATTRIBUTE_create_by_NID(struct AmiSSLIFace *, X509_ATTRIBUTE ** attr, int nid, int atrtype, const void * data, int len);
extern X509_ATTRIBUTE *     VARARGS68K _AmiSSL_X509_ATTRIBUTE_create_by_OBJ(struct AmiSSLIFace *, X509_ATTRIBUTE ** attr, const ASN1_OBJECT * obj, int atrtype, const void * data, int len);
extern X509_ATTRIBUTE *     VARARGS68K _AmiSSL_X509_ATTRIBUTE_create_by_txt(struct AmiSSLIFace *, X509_ATTRIBUTE ** attr, const char * atrname, int type, const unsigned char * bytes, int len);
extern int                  VARARGS68K _AmiSSL_X509_ATTRIBUTE_set1_object(struct AmiSSLIFace *, X509_ATTRIBUTE * attr, const ASN1_OBJECT * obj);
extern int                  VARARGS68K _AmiSSL_X509_ATTRIBUTE_set1_data(struct AmiSSLIFace *, X509_ATTRIBUTE * attr, int attrtype, const void * data, int len);
extern void *               VARARGS68K _AmiSSL_X509_ATTRIBUTE_get0_data(struct AmiSSLIFace *, X509_ATTRIBUTE * attr, int idx, int atrtype, void * data);
extern int                  VARARGS68K _AmiSSL_X509_ATTRIBUTE_count(struct AmiSSLIFace *, X509_ATTRIBUTE * attr);
extern ASN1_OBJECT *        VARARGS68K _AmiSSL_X509_ATTRIBUTE_get0_object(struct AmiSSLIFace *, X509_ATTRIBUTE * attr);
extern ASN1_TYPE *          VARARGS68K _AmiSSL_X509_ATTRIBUTE_get0_type(struct AmiSSLIFace *, X509_ATTRIBUTE * attr, int idx);
extern int                  VARARGS68K _AmiSSL_X509_verify_cert(struct AmiSSLIFace *, X509_STORE_CTX * ctx);
extern X509 *               VARARGS68K _AmiSSL_X509_find_by_issuer_and_serial(struct AmiSSLIFace *, STACK_OF(X509) * sk, X509_NAME * name, ASN1_INTEGER * serial);
extern X509 *               VARARGS68K _AmiSSL_X509_find_by_subject(struct AmiSSLIFace *, STACK_OF(X509) * sk, X509_NAME * name);
extern PBEPARAM *           VARARGS68K _AmiSSL_PBEPARAM_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_PBEPARAM_free(struct AmiSSLIFace *, PBEPARAM * a);
extern PBEPARAM *           VARARGS68K _AmiSSL_d2i_PBEPARAM(struct AmiSSLIFace *, PBEPARAM ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_PBEPARAM(struct AmiSSLIFace *, PBEPARAM * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_PBEPARAM_it(struct AmiSSLIFace *);
extern PBE2PARAM *          VARARGS68K _AmiSSL_PBE2PARAM_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_PBE2PARAM_free(struct AmiSSLIFace *, PBE2PARAM * a);
extern PBE2PARAM *          VARARGS68K _AmiSSL_d2i_PBE2PARAM(struct AmiSSLIFace *, PBE2PARAM ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_PBE2PARAM(struct AmiSSLIFace *, PBE2PARAM * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_PBE2PARAM_it(struct AmiSSLIFace *);
extern PBKDF2PARAM *        VARARGS68K _AmiSSL_PBKDF2PARAM_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_PBKDF2PARAM_free(struct AmiSSLIFace *, PBKDF2PARAM * a);
extern PBKDF2PARAM *        VARARGS68K _AmiSSL_d2i_PBKDF2PARAM(struct AmiSSLIFace *, PBKDF2PARAM ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_PBKDF2PARAM(struct AmiSSLIFace *, PBKDF2PARAM * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_PBKDF2PARAM_it(struct AmiSSLIFace *);
extern X509_ALGOR *         VARARGS68K _AmiSSL_PKCS5_pbe_set(struct AmiSSLIFace *, int alg, int iter, unsigned char * salt, int saltlen);
extern X509_ALGOR *         VARARGS68K _AmiSSL_PKCS5_pbe2_set(struct AmiSSLIFace *, const EVP_CIPHER * cipher, int iter, unsigned char * salt, int saltlen);
extern PKCS8_PRIV_KEY_INFO * VARARGS68K _AmiSSL_PKCS8_PRIV_KEY_INFO_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_PKCS8_PRIV_KEY_INFO_free(struct AmiSSLIFace *, PKCS8_PRIV_KEY_INFO * a);
extern PKCS8_PRIV_KEY_INFO * VARARGS68K _AmiSSL_d2i_PKCS8_PRIV_KEY_INFO(struct AmiSSLIFace *, PKCS8_PRIV_KEY_INFO ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_PKCS8_PRIV_KEY_INFO(struct AmiSSLIFace *, PKCS8_PRIV_KEY_INFO * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_PKCS8_PRIV_KEY_INFO_it(struct AmiSSLIFace *);
extern EVP_PKEY *           VARARGS68K _AmiSSL_EVP_PKCS82PKEY(struct AmiSSLIFace *, PKCS8_PRIV_KEY_INFO * p8);
extern PKCS8_PRIV_KEY_INFO * VARARGS68K _AmiSSL_EVP_PKEY2PKCS8(struct AmiSSLIFace *, EVP_PKEY * pkey);
extern PKCS8_PRIV_KEY_INFO * VARARGS68K _AmiSSL_EVP_PKEY2PKCS8_broken(struct AmiSSLIFace *, EVP_PKEY * pkey, int broken);
extern PKCS8_PRIV_KEY_INFO * VARARGS68K _AmiSSL_PKCS8_set_broken(struct AmiSSLIFace *, PKCS8_PRIV_KEY_INFO * p8, int broken);
extern int                  VARARGS68K _AmiSSL_X509_check_trust(struct AmiSSLIFace *, X509 * x, int id, int flags);
extern int                  VARARGS68K _AmiSSL_X509_TRUST_get_count(struct AmiSSLIFace *);
extern X509_TRUST *         VARARGS68K _AmiSSL_X509_TRUST_get0(struct AmiSSLIFace *, int idx);
extern int                  VARARGS68K _AmiSSL_X509_TRUST_get_by_id(struct AmiSSLIFace *, int id);
extern int                  VARARGS68K _AmiSSL_X509_TRUST_add(struct AmiSSLIFace *, int id, int flags, int (*ck)(X509_TRUST *, X509 *, int), char * name, int arg1, void * arg2);
extern void                 VARARGS68K _AmiSSL_X509_TRUST_cleanup(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_X509_TRUST_get_flags(struct AmiSSLIFace *, X509_TRUST * xp);
extern char *               VARARGS68K _AmiSSL_X509_TRUST_get0_name(struct AmiSSLIFace *, X509_TRUST * xp);
extern int                  VARARGS68K _AmiSSL_X509_TRUST_get_trust(struct AmiSSLIFace *, X509_TRUST * xp);
extern void                 VARARGS68K _AmiSSL_ERR_load_X509_strings(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_X509_OBJECT_idx_by_subject(struct AmiSSLIFace *, STACK_OF(X509_OBJECT) * h, int type, X509_NAME * name);
extern X509_OBJECT *        VARARGS68K _AmiSSL_X509_OBJECT_retrieve_by_subject(struct AmiSSLIFace *, STACK_OF(X509_OBJECT) * h, int type, X509_NAME * name);
extern X509_OBJECT *        VARARGS68K _AmiSSL_X509_OBJECT_retrieve_match(struct AmiSSLIFace *, STACK_OF(X509_OBJECT) * h, X509_OBJECT * x);
extern void                 VARARGS68K _AmiSSL_X509_OBJECT_up_ref_count(struct AmiSSLIFace *, X509_OBJECT * a);
extern void                 VARARGS68K _AmiSSL_X509_OBJECT_free_contents(struct AmiSSLIFace *, X509_OBJECT * a);
extern X509_STORE *         VARARGS68K _AmiSSL_X509_STORE_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_X509_STORE_free(struct AmiSSLIFace *, X509_STORE * v);
extern void                 VARARGS68K _AmiSSL_X509_STORE_set_flags(struct AmiSSLIFace *, X509_STORE * ctx, long flags);
extern int                  VARARGS68K _AmiSSL_X509_STORE_set_purpose(struct AmiSSLIFace *, X509_STORE * ctx, int purpose);
extern int                  VARARGS68K _AmiSSL_X509_STORE_set_trust(struct AmiSSLIFace *, X509_STORE * ctx, int trust);
extern X509_STORE_CTX *     VARARGS68K _AmiSSL_X509_STORE_CTX_new(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_X509_STORE_CTX_get1_issuer(struct AmiSSLIFace *, X509 ** issuer, X509_STORE_CTX * ctx, X509 * x);
extern void                 VARARGS68K _AmiSSL_X509_STORE_CTX_free(struct AmiSSLIFace *, X509_STORE_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_X509_STORE_CTX_init(struct AmiSSLIFace *, X509_STORE_CTX * ctx, X509_STORE * store, X509 * x509, STACK_OF(X509) * chain);
extern void                 VARARGS68K _AmiSSL_X509_STORE_CTX_trusted_stack(struct AmiSSLIFace *, X509_STORE_CTX * ctx, STACK_OF(X509) * sk);
extern void                 VARARGS68K _AmiSSL_X509_STORE_CTX_cleanup(struct AmiSSLIFace *, X509_STORE_CTX * ctx);
extern X509_LOOKUP *        VARARGS68K _AmiSSL_X509_STORE_add_lookup(struct AmiSSLIFace *, X509_STORE * v, X509_LOOKUP_METHOD * m);
extern X509_LOOKUP_METHOD * VARARGS68K _AmiSSL_X509_LOOKUP_hash_dir(struct AmiSSLIFace *);
extern X509_LOOKUP_METHOD * VARARGS68K _AmiSSL_X509_LOOKUP_file(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_X509_STORE_add_cert(struct AmiSSLIFace *, X509_STORE * ctx, X509 * x);
extern int                  VARARGS68K _AmiSSL_X509_STORE_add_crl(struct AmiSSLIFace *, X509_STORE * ctx, X509_CRL * x);
extern int                  VARARGS68K _AmiSSL_X509_STORE_get_by_subject(struct AmiSSLIFace *, X509_STORE_CTX * vs, int type, X509_NAME * name, X509_OBJECT * ret);
extern int                  VARARGS68K _AmiSSL_X509_LOOKUP_ctrl(struct AmiSSLIFace *, X509_LOOKUP * ctx, int cmd, const char * argc, long argl, char ** ret);
extern int                  VARARGS68K _AmiSSL_X509_load_cert_file(struct AmiSSLIFace *, X509_LOOKUP * ctx, const char * file, int type);
extern int                  VARARGS68K _AmiSSL_X509_load_crl_file(struct AmiSSLIFace *, X509_LOOKUP * ctx, const char * file, int type);
extern int                  VARARGS68K _AmiSSL_X509_load_cert_crl_file(struct AmiSSLIFace *, X509_LOOKUP * ctx, const char * file, int type);
extern X509_LOOKUP *        VARARGS68K _AmiSSL_X509_LOOKUP_new(struct AmiSSLIFace *, X509_LOOKUP_METHOD * method);
extern void                 VARARGS68K _AmiSSL_X509_LOOKUP_free(struct AmiSSLIFace *, X509_LOOKUP * ctx);
extern int                  VARARGS68K _AmiSSL_X509_LOOKUP_init(struct AmiSSLIFace *, X509_LOOKUP * ctx);
extern int                  VARARGS68K _AmiSSL_X509_LOOKUP_by_subject(struct AmiSSLIFace *, X509_LOOKUP * ctx, int type, X509_NAME * name, X509_OBJECT * ret);
extern int                  VARARGS68K _AmiSSL_X509_LOOKUP_by_issuer_serial(struct AmiSSLIFace *, X509_LOOKUP * ctx, int type, X509_NAME * name, ASN1_INTEGER * serial, X509_OBJECT * ret);
extern int                  VARARGS68K _AmiSSL_X509_LOOKUP_by_fingerprint(struct AmiSSLIFace *, X509_LOOKUP * ctx, int type, unsigned char * bytes, int len, X509_OBJECT * ret);
extern int                  VARARGS68K _AmiSSL_X509_LOOKUP_by_alias(struct AmiSSLIFace *, X509_LOOKUP * ctx, int type, char * str, int len, X509_OBJECT * ret);
extern int                  VARARGS68K _AmiSSL_X509_LOOKUP_shutdown(struct AmiSSLIFace *, X509_LOOKUP * ctx);
extern int                  VARARGS68K _AmiSSL_X509_STORE_load_locations(struct AmiSSLIFace *, X509_STORE * ctx, const char * file, const char * dir);
extern int                  VARARGS68K _AmiSSL_X509_STORE_set_default_paths(struct AmiSSLIFace *, X509_STORE * ctx);
extern int                  VARARGS68K _AmiSSL_X509_STORE_CTX_get_ex_new_index(struct AmiSSLIFace *, long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func);
extern int                  VARARGS68K _AmiSSL_X509_STORE_CTX_set_ex_data(struct AmiSSLIFace *, X509_STORE_CTX * ctx, int idx, void * data);
extern void *               VARARGS68K _AmiSSL_X509_STORE_CTX_get_ex_data(struct AmiSSLIFace *, X509_STORE_CTX * ctx, int idx);
extern int                  VARARGS68K _AmiSSL_X509_STORE_CTX_get_error(struct AmiSSLIFace *, X509_STORE_CTX * ctx);
extern void                 VARARGS68K _AmiSSL_X509_STORE_CTX_set_error(struct AmiSSLIFace *, X509_STORE_CTX * ctx, int s);
extern int                  VARARGS68K _AmiSSL_X509_STORE_CTX_get_error_depth(struct AmiSSLIFace *, X509_STORE_CTX * ctx);
extern X509 *               VARARGS68K _AmiSSL_X509_STORE_CTX_get_current_cert(struct AmiSSLIFace *, X509_STORE_CTX * ctx);
extern STACK_OF(X509) *     VARARGS68K _AmiSSL_X509_STORE_CTX_get_chain(struct AmiSSLIFace *, X509_STORE_CTX * ctx);
extern STACK_OF(X509) *     VARARGS68K _AmiSSL_X509_STORE_CTX_get1_chain(struct AmiSSLIFace *, X509_STORE_CTX * ctx);
extern void                 VARARGS68K _AmiSSL_X509_STORE_CTX_set_cert(struct AmiSSLIFace *, X509_STORE_CTX * c, X509 * x);
extern void                 VARARGS68K _AmiSSL_X509_STORE_CTX_set_chain(struct AmiSSLIFace *, X509_STORE_CTX * c, STACK_OF(X509) * sk);
extern int                  VARARGS68K _AmiSSL_X509_STORE_CTX_set_purpose(struct AmiSSLIFace *, X509_STORE_CTX * ctx, int purpose);
extern int                  VARARGS68K _AmiSSL_X509_STORE_CTX_set_trust(struct AmiSSLIFace *, X509_STORE_CTX * ctx, int trust);
extern int                  VARARGS68K _AmiSSL_X509_STORE_CTX_purpose_inherit(struct AmiSSLIFace *, X509_STORE_CTX * ctx, int def_purpose, int purpose, int trust);
extern void                 VARARGS68K _AmiSSL_X509_STORE_CTX_set_flags(struct AmiSSLIFace *, X509_STORE_CTX * ctx, long flags);
extern void                 VARARGS68K _AmiSSL_X509_STORE_CTX_set_time(struct AmiSSLIFace *, X509_STORE_CTX * ctx, long flags, time_t t);
extern void                 VARARGS68K _AmiSSL_X509_STORE_CTX_set_verify_cb(struct AmiSSLIFace *, X509_STORE_CTX * ctx, int (*verify_cb)(int, X509_STORE_CTX *));
extern BASIC_CONSTRAINTS *  VARARGS68K _AmiSSL_BASIC_CONSTRAINTS_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_BASIC_CONSTRAINTS_free(struct AmiSSLIFace *, BASIC_CONSTRAINTS * a);
extern BASIC_CONSTRAINTS *  VARARGS68K _AmiSSL_d2i_BASIC_CONSTRAINTS(struct AmiSSLIFace *, BASIC_CONSTRAINTS ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_BASIC_CONSTRAINTS(struct AmiSSLIFace *, BASIC_CONSTRAINTS * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_BASIC_CONSTRAINTS_it(struct AmiSSLIFace *);
extern SXNET *              VARARGS68K _AmiSSL_SXNET_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_SXNET_free(struct AmiSSLIFace *, SXNET * a);
extern SXNET *              VARARGS68K _AmiSSL_d2i_SXNET(struct AmiSSLIFace *, SXNET ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_SXNET(struct AmiSSLIFace *, SXNET * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_SXNET_it(struct AmiSSLIFace *);
extern SXNETID *            VARARGS68K _AmiSSL_SXNETID_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_SXNETID_free(struct AmiSSLIFace *, SXNETID * a);
extern SXNETID *            VARARGS68K _AmiSSL_d2i_SXNETID(struct AmiSSLIFace *, SXNETID ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_SXNETID(struct AmiSSLIFace *, SXNETID * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_SXNETID_it(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_SXNET_add_id_asc(struct AmiSSLIFace *, SXNET ** psx, char * zone, char * user, int userlen);
extern int                  VARARGS68K _AmiSSL_SXNET_add_id_ulong(struct AmiSSLIFace *, SXNET ** psx, unsigned long lzone, char * user, int userlen);
extern int                  VARARGS68K _AmiSSL_SXNET_add_id_INTEGER(struct AmiSSLIFace *, SXNET ** psx, ASN1_INTEGER * izone, char * user, int userlen);
extern ASN1_OCTET_STRING *  VARARGS68K _AmiSSL_SXNET_get_id_asc(struct AmiSSLIFace *, SXNET * sx, char * zone);
extern ASN1_OCTET_STRING *  VARARGS68K _AmiSSL_SXNET_get_id_ulong(struct AmiSSLIFace *, SXNET * sx, unsigned long lzone);
extern ASN1_OCTET_STRING *  VARARGS68K _AmiSSL_SXNET_get_id_INTEGER(struct AmiSSLIFace *, SXNET * sx, ASN1_INTEGER * zone);
extern AUTHORITY_KEYID *    VARARGS68K _AmiSSL_AUTHORITY_KEYID_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_AUTHORITY_KEYID_free(struct AmiSSLIFace *, AUTHORITY_KEYID * a);
extern AUTHORITY_KEYID *    VARARGS68K _AmiSSL_d2i_AUTHORITY_KEYID(struct AmiSSLIFace *, AUTHORITY_KEYID ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_AUTHORITY_KEYID(struct AmiSSLIFace *, AUTHORITY_KEYID * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_AUTHORITY_KEYID_it(struct AmiSSLIFace *);
extern PKEY_USAGE_PERIOD *  VARARGS68K _AmiSSL_PKEY_USAGE_PERIOD_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_PKEY_USAGE_PERIOD_free(struct AmiSSLIFace *, PKEY_USAGE_PERIOD * a);
extern PKEY_USAGE_PERIOD *  VARARGS68K _AmiSSL_d2i_PKEY_USAGE_PERIOD(struct AmiSSLIFace *, PKEY_USAGE_PERIOD ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_PKEY_USAGE_PERIOD(struct AmiSSLIFace *, PKEY_USAGE_PERIOD * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_PKEY_USAGE_PERIOD_it(struct AmiSSLIFace *);
extern GENERAL_NAME *       VARARGS68K _AmiSSL_GENERAL_NAME_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_GENERAL_NAME_free(struct AmiSSLIFace *, GENERAL_NAME * a);
extern GENERAL_NAME *       VARARGS68K _AmiSSL_d2i_GENERAL_NAME(struct AmiSSLIFace *, GENERAL_NAME ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_GENERAL_NAME(struct AmiSSLIFace *, GENERAL_NAME * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_GENERAL_NAME_it(struct AmiSSLIFace *);
extern STACK_OF(CONF_VALUE) * VARARGS68K _AmiSSL_i2v_GENERAL_NAME(struct AmiSSLIFace *, X509V3_EXT_METHOD * method, GENERAL_NAME * gen, STACK_OF(CONF_VALUE) * ret);
extern int                  VARARGS68K _AmiSSL_GENERAL_NAME_print(struct AmiSSLIFace *, BIO * out, GENERAL_NAME * gen);
extern GENERAL_NAMES *      VARARGS68K _AmiSSL_GENERAL_NAMES_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_GENERAL_NAMES_free(struct AmiSSLIFace *, GENERAL_NAMES * a);
extern GENERAL_NAMES *      VARARGS68K _AmiSSL_d2i_GENERAL_NAMES(struct AmiSSLIFace *, GENERAL_NAMES ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_GENERAL_NAMES(struct AmiSSLIFace *, GENERAL_NAMES * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_GENERAL_NAMES_it(struct AmiSSLIFace *);
extern STACK_OF(CONF_VALUE) * VARARGS68K _AmiSSL_i2v_GENERAL_NAMES(struct AmiSSLIFace *, X509V3_EXT_METHOD * method, GENERAL_NAMES * gen, STACK_OF(CONF_VALUE) * extlist);
extern GENERAL_NAMES *      VARARGS68K _AmiSSL_v2i_GENERAL_NAMES(struct AmiSSLIFace *, X509V3_EXT_METHOD * method, X509V3_CTX * ctx, STACK_OF(CONF_VALUE) * nval);
extern OTHERNAME *          VARARGS68K _AmiSSL_OTHERNAME_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_OTHERNAME_free(struct AmiSSLIFace *, OTHERNAME * a);
extern OTHERNAME *          VARARGS68K _AmiSSL_d2i_OTHERNAME(struct AmiSSLIFace *, OTHERNAME ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_OTHERNAME(struct AmiSSLIFace *, OTHERNAME * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_OTHERNAME_it(struct AmiSSLIFace *);
extern EDIPARTYNAME *       VARARGS68K _AmiSSL_EDIPARTYNAME_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_EDIPARTYNAME_free(struct AmiSSLIFace *, EDIPARTYNAME * a);
extern EDIPARTYNAME *       VARARGS68K _AmiSSL_d2i_EDIPARTYNAME(struct AmiSSLIFace *, EDIPARTYNAME ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_EDIPARTYNAME(struct AmiSSLIFace *, EDIPARTYNAME * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_EDIPARTYNAME_it(struct AmiSSLIFace *);
extern char *               VARARGS68K _AmiSSL_i2s_ASN1_OCTET_STRING(struct AmiSSLIFace *, X509V3_EXT_METHOD * method, ASN1_OCTET_STRING * ia5);
extern ASN1_OCTET_STRING *  VARARGS68K _AmiSSL_s2i_ASN1_OCTET_STRING(struct AmiSSLIFace *, X509V3_EXT_METHOD * method, X509V3_CTX * ctx, char * str);
extern EXTENDED_KEY_USAGE * VARARGS68K _AmiSSL_EXTENDED_KEY_USAGE_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_EXTENDED_KEY_USAGE_free(struct AmiSSLIFace *, EXTENDED_KEY_USAGE * a);
extern EXTENDED_KEY_USAGE * VARARGS68K _AmiSSL_d2i_EXTENDED_KEY_USAGE(struct AmiSSLIFace *, EXTENDED_KEY_USAGE ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_EXTENDED_KEY_USAGE(struct AmiSSLIFace *, EXTENDED_KEY_USAGE * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_EXTENDED_KEY_USAGE_it(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_i2a_ACCESS_DESCRIPTION(struct AmiSSLIFace *, BIO * bp, ACCESS_DESCRIPTION * a);
extern CERTIFICATEPOLICIES * VARARGS68K _AmiSSL_CERTIFICATEPOLICIES_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_CERTIFICATEPOLICIES_free(struct AmiSSLIFace *, CERTIFICATEPOLICIES * a);
extern CERTIFICATEPOLICIES * VARARGS68K _AmiSSL_d2i_CERTIFICATEPOLICIES(struct AmiSSLIFace *, CERTIFICATEPOLICIES ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_CERTIFICATEPOLICIES(struct AmiSSLIFace *, CERTIFICATEPOLICIES * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_CERTIFICATEPOLICIES_it(struct AmiSSLIFace *);
extern POLICYINFO *         VARARGS68K _AmiSSL_POLICYINFO_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_POLICYINFO_free(struct AmiSSLIFace *, POLICYINFO * a);
extern POLICYINFO *         VARARGS68K _AmiSSL_d2i_POLICYINFO(struct AmiSSLIFace *, POLICYINFO ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_POLICYINFO(struct AmiSSLIFace *, POLICYINFO * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_POLICYINFO_it(struct AmiSSLIFace *);
extern POLICYQUALINFO *     VARARGS68K _AmiSSL_POLICYQUALINFO_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_POLICYQUALINFO_free(struct AmiSSLIFace *, POLICYQUALINFO * a);
extern POLICYQUALINFO *     VARARGS68K _AmiSSL_d2i_POLICYQUALINFO(struct AmiSSLIFace *, POLICYQUALINFO ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_POLICYQUALINFO(struct AmiSSLIFace *, POLICYQUALINFO * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_POLICYQUALINFO_it(struct AmiSSLIFace *);
extern USERNOTICE *         VARARGS68K _AmiSSL_USERNOTICE_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_USERNOTICE_free(struct AmiSSLIFace *, USERNOTICE * a);
extern USERNOTICE *         VARARGS68K _AmiSSL_d2i_USERNOTICE(struct AmiSSLIFace *, USERNOTICE ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_USERNOTICE(struct AmiSSLIFace *, USERNOTICE * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_USERNOTICE_it(struct AmiSSLIFace *);
extern NOTICEREF *          VARARGS68K _AmiSSL_NOTICEREF_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_NOTICEREF_free(struct AmiSSLIFace *, NOTICEREF * a);
extern NOTICEREF *          VARARGS68K _AmiSSL_d2i_NOTICEREF(struct AmiSSLIFace *, NOTICEREF ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_NOTICEREF(struct AmiSSLIFace *, NOTICEREF * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_NOTICEREF_it(struct AmiSSLIFace *);
extern CRL_DIST_POINTS *    VARARGS68K _AmiSSL_CRL_DIST_POINTS_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_CRL_DIST_POINTS_free(struct AmiSSLIFace *, CRL_DIST_POINTS * a);
extern CRL_DIST_POINTS *    VARARGS68K _AmiSSL_d2i_CRL_DIST_POINTS(struct AmiSSLIFace *, CRL_DIST_POINTS ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_CRL_DIST_POINTS(struct AmiSSLIFace *, CRL_DIST_POINTS * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_CRL_DIST_POINTS_it(struct AmiSSLIFace *);
extern DIST_POINT *         VARARGS68K _AmiSSL_DIST_POINT_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_DIST_POINT_free(struct AmiSSLIFace *, DIST_POINT * a);
extern DIST_POINT *         VARARGS68K _AmiSSL_d2i_DIST_POINT(struct AmiSSLIFace *, DIST_POINT ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_DIST_POINT(struct AmiSSLIFace *, DIST_POINT * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_DIST_POINT_it(struct AmiSSLIFace *);
extern DIST_POINT_NAME *    VARARGS68K _AmiSSL_DIST_POINT_NAME_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_DIST_POINT_NAME_free(struct AmiSSLIFace *, DIST_POINT_NAME * a);
extern DIST_POINT_NAME *    VARARGS68K _AmiSSL_d2i_DIST_POINT_NAME(struct AmiSSLIFace *, DIST_POINT_NAME ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_DIST_POINT_NAME(struct AmiSSLIFace *, DIST_POINT_NAME * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_DIST_POINT_NAME_it(struct AmiSSLIFace *);
extern ACCESS_DESCRIPTION * VARARGS68K _AmiSSL_ACCESS_DESCRIPTION_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ACCESS_DESCRIPTION_free(struct AmiSSLIFace *, ACCESS_DESCRIPTION * a);
extern ACCESS_DESCRIPTION * VARARGS68K _AmiSSL_d2i_ACCESS_DESCRIPTION(struct AmiSSLIFace *, ACCESS_DESCRIPTION ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_ACCESS_DESCRIPTION(struct AmiSSLIFace *, ACCESS_DESCRIPTION * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ACCESS_DESCRIPTION_it(struct AmiSSLIFace *);
extern AUTHORITY_INFO_ACCESS * VARARGS68K _AmiSSL_AUTHORITY_INFO_ACCESS_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_AUTHORITY_INFO_ACCESS_free(struct AmiSSLIFace *, AUTHORITY_INFO_ACCESS * a);
extern AUTHORITY_INFO_ACCESS * VARARGS68K _AmiSSL_d2i_AUTHORITY_INFO_ACCESS(struct AmiSSLIFace *, AUTHORITY_INFO_ACCESS ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_AUTHORITY_INFO_ACCESS(struct AmiSSLIFace *, AUTHORITY_INFO_ACCESS * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_AUTHORITY_INFO_ACCESS_it(struct AmiSSLIFace *);
extern GENERAL_NAME *       VARARGS68K _AmiSSL_v2i_GENERAL_NAME(struct AmiSSLIFace *, X509V3_EXT_METHOD * method, X509V3_CTX * ctx, CONF_VALUE * cnf);
extern void                 VARARGS68K _AmiSSL_X509V3_conf_free(struct AmiSSLIFace *, CONF_VALUE * val);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_X509V3_EXT_nconf_nid(struct AmiSSLIFace *, CONF * conf, X509V3_CTX * ctx, int ext_nid, char * value);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_X509V3_EXT_nconf(struct AmiSSLIFace *, CONF * conf, X509V3_CTX * ctx, char * name, char * value);
extern int                  VARARGS68K _AmiSSL_X509V3_EXT_add_nconf_sk(struct AmiSSLIFace *, CONF * conf, X509V3_CTX * ctx, char * section, STACK_OF(X509_EXTENSION) ** sk);
extern int                  VARARGS68K _AmiSSL_X509V3_EXT_add_nconf(struct AmiSSLIFace *, CONF * conf, X509V3_CTX * ctx, char * section, X509 * cert);
extern int                  VARARGS68K _AmiSSL_X509V3_EXT_REQ_add_nconf(struct AmiSSLIFace *, CONF * conf, X509V3_CTX * ctx, char * section, X509_REQ * req);
extern int                  VARARGS68K _AmiSSL_X509V3_EXT_CRL_add_nconf(struct AmiSSLIFace *, CONF * conf, X509V3_CTX * ctx, char * section, X509_CRL * crl);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_X509V3_EXT_conf_nid(struct AmiSSLIFace *, LHASH_OF(CONF_VALUE) * conf, X509V3_CTX * ctx, int ext_nid, char * value);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_X509V3_EXT_conf(struct AmiSSLIFace *, LHASH_OF(CONF_VALUE) * conf, X509V3_CTX * ctx, char * name, char * value);
extern int                  VARARGS68K _AmiSSL_X509V3_EXT_add_conf(struct AmiSSLIFace *, LHASH_OF(CONF_VALUE) * conf, X509V3_CTX * ctx, char * section, X509 * cert);
extern int                  VARARGS68K _AmiSSL_X509V3_EXT_REQ_add_conf(struct AmiSSLIFace *, LHASH_OF(CONF_VALUE) * conf, X509V3_CTX * ctx, char * section, X509_REQ * req);
extern int                  VARARGS68K _AmiSSL_X509V3_EXT_CRL_add_conf(struct AmiSSLIFace *, LHASH_OF(CONF_VALUE) * conf, X509V3_CTX * ctx, char * section, X509_CRL * crl);
extern int                  VARARGS68K _AmiSSL_X509V3_add_value_bool_nf(struct AmiSSLIFace *, char * name, int asn1_bool, STACK_OF(CONF_VALUE) ** extlist);
extern int                  VARARGS68K _AmiSSL_X509V3_get_value_bool(struct AmiSSLIFace *, CONF_VALUE * value, int * asn1_bool);
extern int                  VARARGS68K _AmiSSL_X509V3_get_value_int(struct AmiSSLIFace *, CONF_VALUE * value, ASN1_INTEGER ** aint);
extern void                 VARARGS68K _AmiSSL_X509V3_set_nconf(struct AmiSSLIFace *, X509V3_CTX * ctx, CONF * conf);
extern void                 VARARGS68K _AmiSSL_X509V3_set_conf_lhash(struct AmiSSLIFace *, X509V3_CTX * ctx, LHASH_OF(CONF_VALUE) * lhash);
extern char *               VARARGS68K _AmiSSL_X509V3_get_string(struct AmiSSLIFace *, X509V3_CTX * ctx, char * name, char * section);
extern STACK_OF(CONF_VALUE) * VARARGS68K _AmiSSL_X509V3_get_section(struct AmiSSLIFace *, X509V3_CTX * ctx, char * section);
extern void                 VARARGS68K _AmiSSL_X509V3_string_free(struct AmiSSLIFace *, X509V3_CTX * ctx, char * str);
extern void                 VARARGS68K _AmiSSL_X509V3_section_free(struct AmiSSLIFace *, X509V3_CTX * ctx, STACK_OF(CONF_VALUE) * section);
extern void                 VARARGS68K _AmiSSL_X509V3_set_ctx(struct AmiSSLIFace *, X509V3_CTX * ctx, X509 * issuer, X509 * subject, X509_REQ * req, X509_CRL * crl, int flags);
extern int                  VARARGS68K _AmiSSL_X509V3_add_value(struct AmiSSLIFace *, const char * name, const char * value, STACK_OF(CONF_VALUE) ** extlist);
extern int                  VARARGS68K _AmiSSL_X509V3_add_value_uchar(struct AmiSSLIFace *, const char * name, const unsigned char * value, STACK_OF(CONF_VALUE) ** extlist);
extern int                  VARARGS68K _AmiSSL_X509V3_add_value_bool(struct AmiSSLIFace *, const char * name, int asn1_bool, STACK_OF(CONF_VALUE) ** extlist);
extern int                  VARARGS68K _AmiSSL_X509V3_add_value_int(struct AmiSSLIFace *, const char * name, ASN1_INTEGER * aint, STACK_OF(CONF_VALUE) ** extlist);
extern char *               VARARGS68K _AmiSSL_i2s_ASN1_INTEGER(struct AmiSSLIFace *, X509V3_EXT_METHOD * meth, ASN1_INTEGER * aint);
extern ASN1_INTEGER *       VARARGS68K _AmiSSL_s2i_ASN1_INTEGER(struct AmiSSLIFace *, X509V3_EXT_METHOD * meth, char * value);
extern char *               VARARGS68K _AmiSSL_i2s_ASN1_ENUMERATED(struct AmiSSLIFace *, X509V3_EXT_METHOD * meth, ASN1_ENUMERATED * aint);
extern char *               VARARGS68K _AmiSSL_i2s_ASN1_ENUMERATED_TABLE(struct AmiSSLIFace *, X509V3_EXT_METHOD * meth, ASN1_ENUMERATED * aint);
extern int                  VARARGS68K _AmiSSL_X509V3_EXT_add(struct AmiSSLIFace *, X509V3_EXT_METHOD * ext);
extern int                  VARARGS68K _AmiSSL_X509V3_EXT_add_list(struct AmiSSLIFace *, X509V3_EXT_METHOD * extlist);
extern int                  VARARGS68K _AmiSSL_X509V3_EXT_add_alias(struct AmiSSLIFace *, int nid_to, int nid_from);
extern void                 VARARGS68K _AmiSSL_X509V3_EXT_cleanup(struct AmiSSLIFace *);
extern const X509V3_EXT_METHOD * VARARGS68K _AmiSSL_X509V3_EXT_get(struct AmiSSLIFace *, X509_EXTENSION * ext);
extern const X509V3_EXT_METHOD * VARARGS68K _AmiSSL_X509V3_EXT_get_nid(struct AmiSSLIFace *, int nid);
extern int                  VARARGS68K _AmiSSL_X509V3_add_standard_extensions(struct AmiSSLIFace *);
extern STACK_OF(CONF_VALUE) * VARARGS68K _AmiSSL_X509V3_parse_list(struct AmiSSLIFace *, const char * line);
extern void *               VARARGS68K _AmiSSL_X509V3_EXT_d2i(struct AmiSSLIFace *, X509_EXTENSION * ext);
extern void *               VARARGS68K _AmiSSL_X509V3_get_d2i(struct AmiSSLIFace *, STACK_OF(X509_EXTENSION) * x, int nid, int * crit, int * idx);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_X509V3_EXT_i2d(struct AmiSSLIFace *, int ext_nid, int crit, void * ext_struc);
extern int                  VARARGS68K _AmiSSL_X509V3_add1_i2d(struct AmiSSLIFace *, STACK_OF(X509_EXTENSION) ** x, int nid, void * value, int crit, unsigned long flags);
extern char *               VARARGS68K _AmiSSL_hex_to_string(struct AmiSSLIFace *, unsigned char * buffer, long len);
extern unsigned char *      VARARGS68K _AmiSSL_string_to_hex(struct AmiSSLIFace *, char * str, long * len);
extern int                  VARARGS68K _AmiSSL_name_cmp(struct AmiSSLIFace *, const char * name, const char * cmp);
extern void                 VARARGS68K _AmiSSL_X509V3_EXT_val_prn(struct AmiSSLIFace *, BIO * out, STACK_OF(CONF_VALUE) * val, int indent, int ml);
extern int                  VARARGS68K _AmiSSL_X509V3_EXT_print(struct AmiSSLIFace *, BIO * out, X509_EXTENSION * ext, unsigned long flag, int indent);
extern int                  VARARGS68K _AmiSSL_X509V3_extensions_print(struct AmiSSLIFace *, BIO * out, char * title, STACK_OF(X509_EXTENSION) * exts, unsigned long flag, int indent);
extern int                  VARARGS68K _AmiSSL_X509_check_purpose(struct AmiSSLIFace *, X509 * x, int id, int ca);
extern int                  VARARGS68K _AmiSSL_X509_supported_extension(struct AmiSSLIFace *, X509_EXTENSION * ex);
extern int                  VARARGS68K _AmiSSL_X509_PURPOSE_set(struct AmiSSLIFace *, int * p, int purpose);
extern int                  VARARGS68K _AmiSSL_X509_check_issued(struct AmiSSLIFace *, X509 * issuer, X509 * subject);
extern int                  VARARGS68K _AmiSSL_X509_PURPOSE_get_count(struct AmiSSLIFace *);
extern X509_PURPOSE *       VARARGS68K _AmiSSL_X509_PURPOSE_get0(struct AmiSSLIFace *, int idx);
extern int                  VARARGS68K _AmiSSL_X509_PURPOSE_get_by_sname(struct AmiSSLIFace *, char * sname);
extern int                  VARARGS68K _AmiSSL_X509_PURPOSE_get_by_id(struct AmiSSLIFace *, int id);
extern int                  VARARGS68K _AmiSSL_X509_PURPOSE_add(struct AmiSSLIFace *, int id, int trust, int flags, int (*ck)(const X509_PURPOSE *, const X509 *, int), char * name, char * sname, void * arg);
extern char *               VARARGS68K _AmiSSL_X509_PURPOSE_get0_name(struct AmiSSLIFace *, X509_PURPOSE * xp);
extern char *               VARARGS68K _AmiSSL_X509_PURPOSE_get0_sname(struct AmiSSLIFace *, X509_PURPOSE * xp);
extern int                  VARARGS68K _AmiSSL_X509_PURPOSE_get_trust(struct AmiSSLIFace *, X509_PURPOSE * xp);
extern void                 VARARGS68K _AmiSSL_X509_PURPOSE_cleanup(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_X509_PURPOSE_get_id(struct AmiSSLIFace *, X509_PURPOSE * a);
extern STACK_OF(OPENSSL_STRING) * VARARGS68K _AmiSSL_X509_get1_email(struct AmiSSLIFace *, X509 * x);
extern STACK_OF(OPENSSL_STRING) * VARARGS68K _AmiSSL_X509_REQ_get1_email(struct AmiSSLIFace *, X509_REQ * x);
extern void                 VARARGS68K _AmiSSL_X509_email_free(struct AmiSSLIFace *, STACK_OF(OPENSSL_STRING) * sk);
extern void                 VARARGS68K _AmiSSL_ERR_load_X509V3_strings(struct AmiSSLIFace *);
extern const char *         VARARGS68K _AmiSSL_AES_options(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_AES_set_encrypt_key(struct AmiSSLIFace *, const unsigned char * userKey, const int bits, AES_KEY * key);
extern int                  VARARGS68K _AmiSSL_AES_set_decrypt_key(struct AmiSSLIFace *, const unsigned char * userKey, const int bits, AES_KEY * key);
extern void                 VARARGS68K _AmiSSL_AES_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, const AES_KEY * key);
extern void                 VARARGS68K _AmiSSL_AES_decrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, const AES_KEY * key);
extern void                 VARARGS68K _AmiSSL_AES_ecb_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, const AES_KEY * key, const int enc);
extern void                 VARARGS68K _AmiSSL_AES_cbc_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, const unsigned long length, const AES_KEY * key, unsigned char * ivec, const int enc);
extern void                 VARARGS68K _AmiSSL_AES_cfb128_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, const unsigned long length, const AES_KEY * key, unsigned char * ivec, int * num, const int enc);
extern void                 VARARGS68K _AmiSSL_AES_cfb1_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, const unsigned long length, const AES_KEY * key, unsigned char * ivec, int * num, const int enc);
extern void                 VARARGS68K _AmiSSL_AES_cfb8_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, const unsigned long length, const AES_KEY * key, unsigned char * ivec, int * num, const int enc);
extern void                 VARARGS68K _AmiSSL_AES_ofb128_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, const unsigned long length, const AES_KEY * key, unsigned char * ivec, int * num);
extern void                 VARARGS68K _AmiSSL_AES_ctr128_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, const unsigned long length, const AES_KEY * key, unsigned char * ivec, unsigned char * ecount_buf, unsigned int * num);
extern void                 VARARGS68K _AmiSSL_BF_set_key(struct AmiSSLIFace *, BF_KEY * key, int len, const unsigned char * data);
extern void                 VARARGS68K _AmiSSL_BF_encrypt(struct AmiSSLIFace *, BF_LONG * data, const BF_KEY * key);
extern void                 VARARGS68K _AmiSSL_BF_decrypt(struct AmiSSLIFace *, BF_LONG * data, const BF_KEY * key);
extern void                 VARARGS68K _AmiSSL_BF_ecb_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, const BF_KEY * key, int enc);
extern void                 VARARGS68K _AmiSSL_BF_cbc_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, long length, const BF_KEY * schedule, unsigned char * ivec, int enc);
extern void                 VARARGS68K _AmiSSL_BF_cfb64_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, long length, const BF_KEY * schedule, unsigned char * ivec, int * num, int enc);
extern void                 VARARGS68K _AmiSSL_BF_ofb64_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, long length, const BF_KEY * schedule, unsigned char * ivec, int * num);
extern const char *         VARARGS68K _AmiSSL_BF_options(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_CAST_set_key(struct AmiSSLIFace *, CAST_KEY * key, int len, const unsigned char * data);
extern void                 VARARGS68K _AmiSSL_CAST_ecb_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, CAST_KEY * key, int enc);
extern void                 VARARGS68K _AmiSSL_CAST_encrypt(struct AmiSSLIFace *, CAST_LONG * data, CAST_KEY * key);
extern void                 VARARGS68K _AmiSSL_CAST_decrypt(struct AmiSSLIFace *, CAST_LONG * data, CAST_KEY * key);
extern void                 VARARGS68K _AmiSSL_CAST_cbc_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, long length, CAST_KEY * ks, unsigned char * iv, int enc);
extern void                 VARARGS68K _AmiSSL_CAST_cfb64_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, long length, CAST_KEY * schedule, unsigned char * ivec, int * num, int enc);
extern void                 VARARGS68K _AmiSSL_CAST_ofb64_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, long length, CAST_KEY * schedule, unsigned char * ivec, int * num);
extern void                 VARARGS68K _AmiSSL_DES_ecb3_encrypt(struct AmiSSLIFace *, const_DES_cblock * input, DES_cblock * output, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3, int enc);
extern DES_LONG             VARARGS68K _AmiSSL_DES_cbc_cksum(struct AmiSSLIFace *, const unsigned char * input, DES_cblock * output, long length, DES_key_schedule * schedule, const_DES_cblock * ivec);
extern void                 VARARGS68K _AmiSSL_DES_cbc_encrypt(struct AmiSSLIFace *, const unsigned char * input, unsigned char * output, long length, DES_key_schedule * schedule, DES_cblock * ivec, int enc);
extern void                 VARARGS68K _AmiSSL_DES_ncbc_encrypt(struct AmiSSLIFace *, const unsigned char * input, unsigned char * output, long length, DES_key_schedule * schedule, DES_cblock * ivec, int enc);
extern void                 VARARGS68K _AmiSSL_DES_xcbc_encrypt(struct AmiSSLIFace *, const unsigned char * input, unsigned char * output, long length, DES_key_schedule * schedule, DES_cblock * ivec, const_DES_cblock * inw, const_DES_cblock * outw, int enc);
extern void                 VARARGS68K _AmiSSL_DES_cfb_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, int numbits, long length, DES_key_schedule * schedule, DES_cblock * ivec, int enc);
extern void                 VARARGS68K _AmiSSL_DES_ecb_encrypt(struct AmiSSLIFace *, const_DES_cblock * input, DES_cblock * output, DES_key_schedule * ks, int enc);
extern void                 VARARGS68K _AmiSSL_DES_encrypt1(struct AmiSSLIFace *, DES_LONG * data, DES_key_schedule * ks, int enc);
extern void                 VARARGS68K _AmiSSL_DES_encrypt2(struct AmiSSLIFace *, DES_LONG * data, DES_key_schedule * ks, int enc);
extern void                 VARARGS68K _AmiSSL_DES_encrypt3(struct AmiSSLIFace *, DES_LONG * data, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3);
extern void                 VARARGS68K _AmiSSL_DES_decrypt3(struct AmiSSLIFace *, DES_LONG * data, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3);
extern void                 VARARGS68K _AmiSSL_DES_ede3_cbc_encrypt(struct AmiSSLIFace *, const unsigned char * input, unsigned char * output, long length, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3, DES_cblock * ivec, int enc);
extern void                 VARARGS68K _AmiSSL_DES_ede3_cbcm_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, long length, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3, DES_cblock * ivec1, DES_cblock * ivec2, int enc);
extern void                 VARARGS68K _AmiSSL_DES_ede3_cfb64_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, long length, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3, DES_cblock * ivec, int * num, int enc);
extern void                 VARARGS68K _AmiSSL_DES_ede3_cfb_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, int numbits, long length, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3, DES_cblock * ivec, int enc);
extern void                 VARARGS68K _AmiSSL_DES_ede3_ofb64_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, long length, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3, DES_cblock * ivec, int * num);
extern int                  VARARGS68K _AmiSSL_DES_enc_read(struct AmiSSLIFace *, int fd, void * buf, int len, DES_key_schedule * sched, DES_cblock * iv);
extern int                  VARARGS68K _AmiSSL_DES_enc_write(struct AmiSSLIFace *, int fd, const void * buf, int len, DES_key_schedule * sched, DES_cblock * iv);
extern char *               VARARGS68K _AmiSSL_DES_fcrypt(struct AmiSSLIFace *, const char * buf, const char * salt, char * ret);
extern char *               VARARGS68K _AmiSSL_DES_crypt(struct AmiSSLIFace *, const char * buf, const char * salt);
extern void                 VARARGS68K _AmiSSL_DES_ofb_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, int numbits, long length, DES_key_schedule * schedule, DES_cblock * ivec);
extern void                 VARARGS68K _AmiSSL_DES_pcbc_encrypt(struct AmiSSLIFace *, const unsigned char * input, unsigned char * output, long length, DES_key_schedule * schedule, DES_cblock * ivec, int enc);
extern DES_LONG             VARARGS68K _AmiSSL_DES_quad_cksum(struct AmiSSLIFace *, const unsigned char * input, DES_cblock * output, long length, int out_count, DES_cblock * seed);
extern int                  VARARGS68K _AmiSSL_DES_random_key(struct AmiSSLIFace *, DES_cblock * ret);
extern void                 VARARGS68K _AmiSSL_DES_set_odd_parity(struct AmiSSLIFace *, DES_cblock * key);
extern int                  VARARGS68K _AmiSSL_DES_check_key_parity(struct AmiSSLIFace *, const_DES_cblock * key);
extern int                  VARARGS68K _AmiSSL_DES_is_weak_key(struct AmiSSLIFace *, const_DES_cblock * key);
extern int                  VARARGS68K _AmiSSL_DES_set_key(struct AmiSSLIFace *, const_DES_cblock * key, DES_key_schedule * schedule);
extern int                  VARARGS68K _AmiSSL_DES_key_sched(struct AmiSSLIFace *, const_DES_cblock * key, DES_key_schedule * schedule);
extern int                  VARARGS68K _AmiSSL_DES_set_key_checked(struct AmiSSLIFace *, const_DES_cblock * key, DES_key_schedule * schedule);
extern void                 VARARGS68K _AmiSSL_DES_set_key_unchecked(struct AmiSSLIFace *, const_DES_cblock * key, DES_key_schedule * schedule);
extern void                 VARARGS68K _AmiSSL_DES_string_to_key(struct AmiSSLIFace *, const char * str, DES_cblock * key);
extern void                 VARARGS68K _AmiSSL_DES_string_to_2keys(struct AmiSSLIFace *, const char * str, DES_cblock * key1, DES_cblock * key2);
extern void                 VARARGS68K _AmiSSL_DES_cfb64_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, long length, DES_key_schedule * schedule, DES_cblock * ivec, int * num, int enc);
extern void                 VARARGS68K _AmiSSL_DES_ofb64_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, long length, DES_key_schedule * schedule, DES_cblock * ivec, int * num);
extern int                  VARARGS68K _AmiSSL_DES_read_password(struct AmiSSLIFace *, DES_cblock * key, const char * prompt, int verify);
extern int                  VARARGS68K _AmiSSL_DES_read_2passwords(struct AmiSSLIFace *, DES_cblock * key1, DES_cblock * key2, const char * prompt, int verify);
extern const char *         VARARGS68K _AmiSSL__ossl_old_des_options(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL__ossl_old_des_ecb3_encrypt(struct AmiSSLIFace *, _ossl_old_des_cblock * input, _ossl_old_des_cblock * output, _ossl_old_des_key_schedule ks1, _ossl_old_des_key_schedule ks2, _ossl_old_des_key_schedule ks3, int enc);
extern DES_LONG             VARARGS68K _AmiSSL__ossl_old_des_cbc_cksum(struct AmiSSLIFace *, _ossl_old_des_cblock * input, _ossl_old_des_cblock * output, long length, _ossl_old_des_key_schedule schedule, _ossl_old_des_cblock * ivec);
extern void                 VARARGS68K _AmiSSL__ossl_old_des_cbc_encrypt(struct AmiSSLIFace *, _ossl_old_des_cblock * input, _ossl_old_des_cblock * output, long length, _ossl_old_des_key_schedule schedule, _ossl_old_des_cblock * ivec, int enc);
extern void                 VARARGS68K _AmiSSL__ossl_old_des_ncbc_encrypt(struct AmiSSLIFace *, _ossl_old_des_cblock * input, _ossl_old_des_cblock * output, long length, _ossl_old_des_key_schedule schedule, _ossl_old_des_cblock * ivec, int enc);
extern void                 VARARGS68K _AmiSSL__ossl_old_des_xcbc_encrypt(struct AmiSSLIFace *, _ossl_old_des_cblock * input, _ossl_old_des_cblock * output, long length, _ossl_old_des_key_schedule schedule, _ossl_old_des_cblock * ivec, _ossl_old_des_cblock * inw, _ossl_old_des_cblock * outw, int enc);
extern void                 VARARGS68K _AmiSSL__ossl_old_des_cfb_encrypt(struct AmiSSLIFace *, unsigned char * in, unsigned char * out, int numbits, long length, _ossl_old_des_key_schedule schedule, _ossl_old_des_cblock * ivec, int enc);
extern void                 VARARGS68K _AmiSSL__ossl_old_des_ecb_encrypt(struct AmiSSLIFace *, _ossl_old_des_cblock * input, _ossl_old_des_cblock * output, _ossl_old_des_key_schedule ks, int enc);
extern void                 VARARGS68K _AmiSSL__ossl_old_des_encrypt(struct AmiSSLIFace *, DES_LONG * data, _ossl_old_des_key_schedule ks, int enc);
extern void                 VARARGS68K _AmiSSL__ossl_old_des_encrypt2(struct AmiSSLIFace *, DES_LONG * data, _ossl_old_des_key_schedule ks, int enc);
extern void                 VARARGS68K _AmiSSL__ossl_old_des_encrypt3(struct AmiSSLIFace *, DES_LONG * data, _ossl_old_des_key_schedule ks1, _ossl_old_des_key_schedule ks2, _ossl_old_des_key_schedule ks3);
extern void                 VARARGS68K _AmiSSL__ossl_old_des_decrypt3(struct AmiSSLIFace *, DES_LONG * data, _ossl_old_des_key_schedule ks1, _ossl_old_des_key_schedule ks2, _ossl_old_des_key_schedule ks3);
extern void                 VARARGS68K _AmiSSL__ossl_old_des_ede3_cbc_encrypt(struct AmiSSLIFace *, _ossl_old_des_cblock * input, _ossl_old_des_cblock * output, long length, _ossl_old_des_key_schedule ks1, _ossl_old_des_key_schedule ks2, _ossl_old_des_key_schedule ks3, _ossl_old_des_cblock * ivec, int enc);
extern void                 VARARGS68K _AmiSSL__ossl_old_des_ede3_cfb64_encrypt(struct AmiSSLIFace *, unsigned char * in, unsigned char * out, long length, _ossl_old_des_key_schedule ks1, _ossl_old_des_key_schedule ks2, _ossl_old_des_key_schedule ks3, _ossl_old_des_cblock * ivec, int * num, int enc);
extern void                 VARARGS68K _AmiSSL__ossl_old_des_ede3_ofb64_encrypt(struct AmiSSLIFace *, unsigned char * in, unsigned char * out, long length, _ossl_old_des_key_schedule ks1, _ossl_old_des_key_schedule ks2, _ossl_old_des_key_schedule ks3, _ossl_old_des_cblock * ivec, int * num);
extern int                  VARARGS68K _AmiSSL__ossl_old_des_enc_read(struct AmiSSLIFace *, int fd, char * buf, int len, _ossl_old_des_key_schedule sched, _ossl_old_des_cblock * iv);
extern int                  VARARGS68K _AmiSSL__ossl_old_des_enc_write(struct AmiSSLIFace *, int fd, char * buf, int len, _ossl_old_des_key_schedule sched, _ossl_old_des_cblock * iv);
extern char *               VARARGS68K _AmiSSL__ossl_old_des_fcrypt(struct AmiSSLIFace *, const char * buf, const char * salt, char * ret);
extern char *               VARARGS68K _AmiSSL__ossl_old_des_crypt(struct AmiSSLIFace *, const char * buf, const char * salt);
extern char *               VARARGS68K _AmiSSL__ossl_old_crypt(struct AmiSSLIFace *, const char * buf, const char * salt);
extern void                 VARARGS68K _AmiSSL__ossl_old_des_ofb_encrypt(struct AmiSSLIFace *, unsigned char * in, unsigned char * out, int numbits, long length, _ossl_old_des_key_schedule schedule, _ossl_old_des_cblock * ivec);
extern void                 VARARGS68K _AmiSSL__ossl_old_des_pcbc_encrypt(struct AmiSSLIFace *, _ossl_old_des_cblock * input, _ossl_old_des_cblock * output, long length, _ossl_old_des_key_schedule schedule, _ossl_old_des_cblock * ivec, int enc);
extern DES_LONG             VARARGS68K _AmiSSL__ossl_old_des_quad_cksum(struct AmiSSLIFace *, _ossl_old_des_cblock * input, _ossl_old_des_cblock * output, long length, int out_count, _ossl_old_des_cblock * seed);
extern void                 VARARGS68K _AmiSSL__ossl_old_des_random_seed(struct AmiSSLIFace *, _ossl_old_des_cblock key);
extern void                 VARARGS68K _AmiSSL__ossl_old_des_random_key(struct AmiSSLIFace *, _ossl_old_des_cblock ret);
extern int                  VARARGS68K _AmiSSL__ossl_old_des_read_password(struct AmiSSLIFace *, _ossl_old_des_cblock * key, const char * prompt, int verify);
extern int                  VARARGS68K _AmiSSL__ossl_old_des_read_2passwords(struct AmiSSLIFace *, _ossl_old_des_cblock * key1, _ossl_old_des_cblock * key2, const char * prompt, int verify);
extern void                 VARARGS68K _AmiSSL__ossl_old_des_set_odd_parity(struct AmiSSLIFace *, _ossl_old_des_cblock * key);
extern int                  VARARGS68K _AmiSSL__ossl_old_des_is_weak_key(struct AmiSSLIFace *, _ossl_old_des_cblock * key);
extern int                  VARARGS68K _AmiSSL__ossl_old_des_set_key(struct AmiSSLIFace *, _ossl_old_des_cblock * key, _ossl_old_des_key_schedule schedule);
extern int                  VARARGS68K _AmiSSL__ossl_old_des_key_sched(struct AmiSSLIFace *, _ossl_old_des_cblock * key, _ossl_old_des_key_schedule schedule);
extern void                 VARARGS68K _AmiSSL__ossl_old_des_string_to_key(struct AmiSSLIFace *, char * str, _ossl_old_des_cblock * key);
extern void                 VARARGS68K _AmiSSL__ossl_old_des_string_to_2keys(struct AmiSSLIFace *, char * str, _ossl_old_des_cblock * key1, _ossl_old_des_cblock * key2);
extern void                 VARARGS68K _AmiSSL__ossl_old_des_cfb64_encrypt(struct AmiSSLIFace *, unsigned char * in, unsigned char * out, long length, _ossl_old_des_key_schedule schedule, _ossl_old_des_cblock * ivec, int * num, int enc);
extern void                 VARARGS68K _AmiSSL__ossl_old_des_ofb64_encrypt(struct AmiSSLIFace *, unsigned char * in, unsigned char * out, long length, _ossl_old_des_key_schedule schedule, _ossl_old_des_cblock * ivec, int * num);
extern void                 VARARGS68K _AmiSSL__ossl_096_des_random_seed(struct AmiSSLIFace *, des_cblock * key);
extern const DH_METHOD *    VARARGS68K _AmiSSL_DH_OpenSSL(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_DH_set_default_method(struct AmiSSLIFace *, const DH_METHOD * meth);
extern const DH_METHOD *    VARARGS68K _AmiSSL_DH_get_default_method(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_DH_set_method(struct AmiSSLIFace *, DH * dh, const DH_METHOD * meth);
extern DH *                 VARARGS68K _AmiSSL_DH_new_method(struct AmiSSLIFace *, ENGINE * engine);
extern DH *                 VARARGS68K _AmiSSL_DH_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_DH_free(struct AmiSSLIFace *, DH * dh);
extern int                  VARARGS68K _AmiSSL_DH_up_ref(struct AmiSSLIFace *, DH * dh);
extern int                  VARARGS68K _AmiSSL_DH_size(struct AmiSSLIFace *, const DH * dh);
extern int                  VARARGS68K _AmiSSL_DH_get_ex_new_index(struct AmiSSLIFace *, long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func);
extern int                  VARARGS68K _AmiSSL_DH_set_ex_data(struct AmiSSLIFace *, DH * d, int idx, void * arg);
extern void *               VARARGS68K _AmiSSL_DH_get_ex_data(struct AmiSSLIFace *, DH * d, int idx);
extern DH *                 VARARGS68K _AmiSSL_DH_generate_parameters(struct AmiSSLIFace *, int prime_len, int generator, void (*callback)(int, int, void *), void * cb_arg);
extern int                  VARARGS68K _AmiSSL_DH_check(struct AmiSSLIFace *, const DH * dh, int * codes);
extern int                  VARARGS68K _AmiSSL_DH_generate_key(struct AmiSSLIFace *, DH * dh);
extern int                  VARARGS68K _AmiSSL_DH_compute_key(struct AmiSSLIFace *, unsigned char * key, const BIGNUM * pub_key, DH * dh);
extern DH *                 VARARGS68K _AmiSSL_d2i_DHparams(struct AmiSSLIFace *, DH ** a, const unsigned char ** pp, long length);
extern int                  VARARGS68K _AmiSSL_i2d_DHparams(struct AmiSSLIFace *, const DH * a, unsigned char ** pp);
extern int                  VARARGS68K _AmiSSL_DHparams_print(struct AmiSSLIFace *, BIO * bp, const DH * x);
extern void                 VARARGS68K _AmiSSL_ERR_load_DH_strings(struct AmiSSLIFace *);
extern DSA_SIG *            VARARGS68K _AmiSSL_DSA_SIG_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_DSA_SIG_free(struct AmiSSLIFace *, DSA_SIG * sig);
extern int                  VARARGS68K _AmiSSL_i2d_DSA_SIG(struct AmiSSLIFace *, const DSA_SIG * a, unsigned char ** pp);
extern DSA_SIG *            VARARGS68K _AmiSSL_d2i_DSA_SIG(struct AmiSSLIFace *, DSA_SIG ** v, const unsigned char ** pp, long length);
extern DSA_SIG *            VARARGS68K _AmiSSL_DSA_do_sign(struct AmiSSLIFace *, const unsigned char * dgst, int dlen, DSA * dsa);
extern int                  VARARGS68K _AmiSSL_DSA_do_verify(struct AmiSSLIFace *, const unsigned char * dgst, int dgst_len, DSA_SIG * sig, DSA * dsa);
extern const DSA_METHOD *   VARARGS68K _AmiSSL_DSA_OpenSSL(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_DSA_set_default_method(struct AmiSSLIFace *, const DSA_METHOD * a);
extern const DSA_METHOD *   VARARGS68K _AmiSSL_DSA_get_default_method(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_DSA_set_method(struct AmiSSLIFace *, DSA * dsa, const DSA_METHOD * a);
extern DSA *                VARARGS68K _AmiSSL_DSA_new(struct AmiSSLIFace *);
extern DSA *                VARARGS68K _AmiSSL_DSA_new_method(struct AmiSSLIFace *, ENGINE * engine);
extern void                 VARARGS68K _AmiSSL_DSA_free(struct AmiSSLIFace *, DSA * r);
extern int                  VARARGS68K _AmiSSL_DSA_up_ref(struct AmiSSLIFace *, DSA * r);
extern int                  VARARGS68K _AmiSSL_DSA_size(struct AmiSSLIFace *, const DSA * a);
extern int                  VARARGS68K _AmiSSL_DSA_sign_setup(struct AmiSSLIFace *, DSA * dsa, BN_CTX * ctx_in, BIGNUM ** kinvp, BIGNUM ** rp);
extern int                  VARARGS68K _AmiSSL_DSA_sign(struct AmiSSLIFace *, int type, const unsigned char * dgst, int dlen, unsigned char * sig, unsigned int * siglen, DSA * dsa);
extern int                  VARARGS68K _AmiSSL_DSA_verify(struct AmiSSLIFace *, int type, const unsigned char * dgst, int dgst_len, const unsigned char * sigbuf, int siglen, DSA * dsa);
extern int                  VARARGS68K _AmiSSL_DSA_get_ex_new_index(struct AmiSSLIFace *, long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func);
extern int                  VARARGS68K _AmiSSL_DSA_set_ex_data(struct AmiSSLIFace *, DSA * d, int idx, void * arg);
extern void *               VARARGS68K _AmiSSL_DSA_get_ex_data(struct AmiSSLIFace *, DSA * d, int idx);
extern DSA *                VARARGS68K _AmiSSL_d2i_DSAPublicKey(struct AmiSSLIFace *, DSA ** a, const unsigned char ** pp, long length);
extern DSA *                VARARGS68K _AmiSSL_d2i_DSAPrivateKey(struct AmiSSLIFace *, DSA ** a, const unsigned char ** pp, long length);
extern DSA *                VARARGS68K _AmiSSL_d2i_DSAparams(struct AmiSSLIFace *, DSA ** a, const unsigned char ** pp, long length);
extern DSA *                VARARGS68K _AmiSSL_DSA_generate_parameters(struct AmiSSLIFace *, int bits, unsigned char * seed, int seed_len, int * counter_ret, unsigned long * h_ret, void (*callback)(int, int, void *), void * cb_arg);
extern int                  VARARGS68K _AmiSSL_DSA_generate_key(struct AmiSSLIFace *, DSA * a);
extern int                  VARARGS68K _AmiSSL_i2d_DSAPublicKey(struct AmiSSLIFace *, const DSA * a, unsigned char ** pp);
extern int                  VARARGS68K _AmiSSL_i2d_DSAPrivateKey(struct AmiSSLIFace *, const DSA * a, unsigned char ** pp);
extern int                  VARARGS68K _AmiSSL_i2d_DSAparams(struct AmiSSLIFace *, const DSA * a, unsigned char ** pp);
extern int                  VARARGS68K _AmiSSL_DSAparams_print(struct AmiSSLIFace *, BIO * bp, const DSA * x);
extern int                  VARARGS68K _AmiSSL_DSA_print(struct AmiSSLIFace *, BIO * bp, const DSA * x, int off);
extern DH *                 VARARGS68K _AmiSSL_DSA_dup_DH(struct AmiSSLIFace *, const DSA * r);
extern void                 VARARGS68K _AmiSSL_ERR_load_DSA_strings(struct AmiSSLIFace *);
extern const char *         VARARGS68K _AmiSSL_idea_options(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_idea_ecb_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, IDEA_KEY_SCHEDULE * ks);
extern void                 VARARGS68K _AmiSSL_idea_set_encrypt_key(struct AmiSSLIFace *, const unsigned char * key, IDEA_KEY_SCHEDULE * ks);
extern void                 VARARGS68K _AmiSSL_idea_set_decrypt_key(struct AmiSSLIFace *, IDEA_KEY_SCHEDULE * ek, IDEA_KEY_SCHEDULE * dk);
extern void                 VARARGS68K _AmiSSL_idea_cbc_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, long length, IDEA_KEY_SCHEDULE * ks, unsigned char * iv, int enc);
extern void                 VARARGS68K _AmiSSL_idea_cfb64_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, long length, IDEA_KEY_SCHEDULE * ks, unsigned char * iv, int * num, int enc);
extern void                 VARARGS68K _AmiSSL_idea_ofb64_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, long length, IDEA_KEY_SCHEDULE * ks, unsigned char * iv, int * num);
extern void                 VARARGS68K _AmiSSL_idea_encrypt(struct AmiSSLIFace *, unsigned long * in, IDEA_KEY_SCHEDULE * ks);
extern const char *         VARARGS68K _AmiSSL_MD2_options(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_MD2_Init(struct AmiSSLIFace *, MD2_CTX * c);
extern int                  VARARGS68K _AmiSSL_MD2_Update(struct AmiSSLIFace *, MD2_CTX * c, const unsigned char * data, unsigned long len);
extern int                  VARARGS68K _AmiSSL_MD2_Final(struct AmiSSLIFace *, unsigned char * md, MD2_CTX * c);
extern unsigned char *      VARARGS68K _AmiSSL_MD2(struct AmiSSLIFace *, const unsigned char * d, unsigned long n, unsigned char * md);
extern int                  VARARGS68K _AmiSSL_MD4_Init(struct AmiSSLIFace *, MD4_CTX * c);
extern int                  VARARGS68K _AmiSSL_MD4_Update(struct AmiSSLIFace *, MD4_CTX * c, const void * data, unsigned long len);
extern int                  VARARGS68K _AmiSSL_MD4_Final(struct AmiSSLIFace *, unsigned char * md, MD4_CTX * c);
extern unsigned char *      VARARGS68K _AmiSSL_MD4(struct AmiSSLIFace *, const unsigned char * d, unsigned long n, unsigned char * md);
extern void                 VARARGS68K _AmiSSL_MD4_Transform(struct AmiSSLIFace *, MD4_CTX * c, const unsigned char * b);
extern int                  VARARGS68K _AmiSSL_MD5_Init(struct AmiSSLIFace *, MD5_CTX * c);
extern int                  VARARGS68K _AmiSSL_MD5_Update(struct AmiSSLIFace *, MD5_CTX * c, const void * data, unsigned long len);
extern int                  VARARGS68K _AmiSSL_MD5_Final(struct AmiSSLIFace *, unsigned char * md, MD5_CTX * c);
extern unsigned char *      VARARGS68K _AmiSSL_MD5(struct AmiSSLIFace *, const unsigned char * d, unsigned long n, unsigned char * md);
extern void                 VARARGS68K _AmiSSL_MD5_Transform(struct AmiSSLIFace *, MD5_CTX * c, const unsigned char * b);
extern int                  VARARGS68K _AmiSSL_MDC2_Init(struct AmiSSLIFace *, MDC2_CTX * c);
extern int                  VARARGS68K _AmiSSL_MDC2_Update(struct AmiSSLIFace *, MDC2_CTX * c, const unsigned char * data, unsigned long len);
extern int                  VARARGS68K _AmiSSL_MDC2_Final(struct AmiSSLIFace *, unsigned char * md, MDC2_CTX * c);
extern unsigned char *      VARARGS68K _AmiSSL_MDC2(struct AmiSSLIFace *, const unsigned char * d, unsigned long n, unsigned char * md);
extern void                 VARARGS68K _AmiSSL_RC2_set_key(struct AmiSSLIFace *, RC2_KEY * key, int len, const unsigned char * data, int bits);
extern void                 VARARGS68K _AmiSSL_RC2_ecb_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, RC2_KEY * key, int enc);
extern void                 VARARGS68K _AmiSSL_RC2_encrypt(struct AmiSSLIFace *, unsigned long * data, RC2_KEY * key);
extern void                 VARARGS68K _AmiSSL_RC2_decrypt(struct AmiSSLIFace *, unsigned long * data, RC2_KEY * key);
extern void                 VARARGS68K _AmiSSL_RC2_cbc_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, long length, RC2_KEY * ks, unsigned char * iv, int enc);
extern void                 VARARGS68K _AmiSSL_RC2_cfb64_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, long length, RC2_KEY * schedule, unsigned char * ivec, int * num, int enc);
extern void                 VARARGS68K _AmiSSL_RC2_ofb64_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, long length, RC2_KEY * schedule, unsigned char * ivec, int * num);
extern const char *         VARARGS68K _AmiSSL_RC4_options(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_RC4_set_key(struct AmiSSLIFace *, RC4_KEY * key, int len, const unsigned char * data);
extern void                 VARARGS68K _AmiSSL_RC4(struct AmiSSLIFace *, RC4_KEY * key, unsigned long len, const unsigned char * indata, unsigned char * outdata);
extern void                 VARARGS68K _AmiSSL_RC5_32_set_key(struct AmiSSLIFace *, RC5_32_KEY * key, int len, const unsigned char * data, int rounds);
extern void                 VARARGS68K _AmiSSL_RC5_32_ecb_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, RC5_32_KEY * key, int enc);
extern void                 VARARGS68K _AmiSSL_RC5_32_encrypt(struct AmiSSLIFace *, unsigned long * data, RC5_32_KEY * key);
extern void                 VARARGS68K _AmiSSL_RC5_32_decrypt(struct AmiSSLIFace *, unsigned long * data, RC5_32_KEY * key);
extern void                 VARARGS68K _AmiSSL_RC5_32_cbc_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, long length, RC5_32_KEY * ks, unsigned char * iv, int enc);
extern void                 VARARGS68K _AmiSSL_RC5_32_cfb64_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, long length, RC5_32_KEY * schedule, unsigned char * ivec, int * num, int enc);
extern void                 VARARGS68K _AmiSSL_RC5_32_ofb64_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, long length, RC5_32_KEY * schedule, unsigned char * ivec, int * num);
extern int                  VARARGS68K _AmiSSL_RIPEMD160_Init(struct AmiSSLIFace *, RIPEMD160_CTX * c);
extern int                  VARARGS68K _AmiSSL_RIPEMD160_Update(struct AmiSSLIFace *, RIPEMD160_CTX * c, const void * data, unsigned long len);
extern int                  VARARGS68K _AmiSSL_RIPEMD160_Final(struct AmiSSLIFace *, unsigned char * md, RIPEMD160_CTX * c);
extern unsigned char *      VARARGS68K _AmiSSL_RIPEMD160(struct AmiSSLIFace *, const unsigned char * d, unsigned long n, unsigned char * md);
extern void                 VARARGS68K _AmiSSL_RIPEMD160_Transform(struct AmiSSLIFace *, RIPEMD160_CTX * c, const unsigned char * b);
extern RSA *                VARARGS68K _AmiSSL_RSA_new(struct AmiSSLIFace *);
extern RSA *                VARARGS68K _AmiSSL_RSA_new_method(struct AmiSSLIFace *, ENGINE * engine);
extern int                  VARARGS68K _AmiSSL_RSA_size(struct AmiSSLIFace *, const RSA * a);
extern RSA *                VARARGS68K _AmiSSL_RSA_generate_key(struct AmiSSLIFace *, int bits, unsigned long e, void (*callback)(int, int, void *), void * cb_arg);
extern int                  VARARGS68K _AmiSSL_RSA_check_key(struct AmiSSLIFace *, const RSA * a);
extern int                  VARARGS68K _AmiSSL_RSA_public_encrypt(struct AmiSSLIFace *, int flen, const unsigned char * from, unsigned char * to, RSA * rsa, int padding);
extern int                  VARARGS68K _AmiSSL_RSA_private_encrypt(struct AmiSSLIFace *, int flen, const unsigned char * from, unsigned char * to, RSA * rsa, int padding);
extern int                  VARARGS68K _AmiSSL_RSA_public_decrypt(struct AmiSSLIFace *, int flen, const unsigned char * from, unsigned char * to, RSA * rsa, int padding);
extern int                  VARARGS68K _AmiSSL_RSA_private_decrypt(struct AmiSSLIFace *, int flen, const unsigned char * from, unsigned char * to, RSA * rsa, int padding);
extern void                 VARARGS68K _AmiSSL_RSA_free(struct AmiSSLIFace *, RSA * r);
extern int                  VARARGS68K _AmiSSL_RSA_up_ref(struct AmiSSLIFace *, RSA * r);
extern int                  VARARGS68K _AmiSSL_RSA_flags(struct AmiSSLIFace *, const RSA * r);
extern void                 VARARGS68K _AmiSSL_RSA_set_default_method(struct AmiSSLIFace *, const RSA_METHOD * meth);
extern const RSA_METHOD *   VARARGS68K _AmiSSL_RSA_get_default_method(struct AmiSSLIFace *);
extern const RSA_METHOD *   VARARGS68K _AmiSSL_RSA_get_method(struct AmiSSLIFace *, const RSA * rsa);
extern int                  VARARGS68K _AmiSSL_RSA_set_method(struct AmiSSLIFace *, RSA * rsa, const RSA_METHOD * meth);
extern int                  VARARGS68K _AmiSSL_RSA_memory_lock(struct AmiSSLIFace *, RSA * r);
extern const RSA_METHOD *   VARARGS68K _AmiSSL_RSA_PKCS1_SSLeay(struct AmiSSLIFace *);
extern const RSA_METHOD *   VARARGS68K _AmiSSL_RSA_null_method(struct AmiSSLIFace *);
extern RSA *                VARARGS68K _AmiSSL_d2i_RSAPublicKey(struct AmiSSLIFace *, RSA ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_RSAPublicKey(struct AmiSSLIFace *, const RSA * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_RSAPublicKey_it(struct AmiSSLIFace *);
extern RSA *                VARARGS68K _AmiSSL_d2i_RSAPrivateKey(struct AmiSSLIFace *, RSA ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_RSAPrivateKey(struct AmiSSLIFace *, const RSA * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_RSAPrivateKey_it(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_RSA_print(struct AmiSSLIFace *, BIO * bp, const RSA * r, int offset);
extern int                  VARARGS68K _AmiSSL_i2d_RSA_NET(struct AmiSSLIFace *, const RSA * a, unsigned char ** pp, int (*cb)(), int sgckey);
extern RSA *                VARARGS68K _AmiSSL_d2i_RSA_NET(struct AmiSSLIFace *, RSA ** a, const unsigned char ** pp, long length, int (*cb)(), int sgckey);
extern int                  VARARGS68K _AmiSSL_i2d_Netscape_RSA(struct AmiSSLIFace *, const RSA * a, unsigned char ** pp, int (*cb)());
extern RSA *                VARARGS68K _AmiSSL_d2i_Netscape_RSA(struct AmiSSLIFace *, RSA ** a, const unsigned char ** pp, long length, int (*cb)());
extern int                  VARARGS68K _AmiSSL_RSA_sign(struct AmiSSLIFace *, int type, const unsigned char * m, unsigned int m_length, unsigned char * sigret, unsigned int * siglen, RSA * rsa);
extern int                  VARARGS68K _AmiSSL_RSA_verify(struct AmiSSLIFace *, int type, const unsigned char * m, unsigned int m_length, unsigned char * sigbuf, unsigned int siglen, RSA * rsa);
extern int                  VARARGS68K _AmiSSL_RSA_sign_ASN1_OCTET_STRING(struct AmiSSLIFace *, int type, const unsigned char * m, unsigned int m_length, unsigned char * sigret, unsigned int * siglen, RSA * rsa);
extern int                  VARARGS68K _AmiSSL_RSA_verify_ASN1_OCTET_STRING(struct AmiSSLIFace *, int type, const unsigned char * m, unsigned int m_length, unsigned char * sigbuf, unsigned int siglen, RSA * rsa);
extern int                  VARARGS68K _AmiSSL_RSA_blinding_on(struct AmiSSLIFace *, RSA * rsa, BN_CTX * ctx);
extern void                 VARARGS68K _AmiSSL_RSA_blinding_off(struct AmiSSLIFace *, RSA * rsa);
extern int                  VARARGS68K _AmiSSL_RSA_padding_add_PKCS1_type_1(struct AmiSSLIFace *, unsigned char * to, int tlen, const unsigned char * f, int fl);
extern int                  VARARGS68K _AmiSSL_RSA_padding_check_PKCS1_type_1(struct AmiSSLIFace *, unsigned char * to, int tlen, const unsigned char * f, int fl, int rsa_len);
extern int                  VARARGS68K _AmiSSL_RSA_padding_add_PKCS1_type_2(struct AmiSSLIFace *, unsigned char * to, int tlen, const unsigned char * f, int fl);
extern int                  VARARGS68K _AmiSSL_RSA_padding_check_PKCS1_type_2(struct AmiSSLIFace *, unsigned char * to, int tlen, const unsigned char * f, int fl, int rsa_len);
extern int                  VARARGS68K _AmiSSL_RSA_padding_add_PKCS1_OAEP(struct AmiSSLIFace *, unsigned char * to, int tlen, const unsigned char * f, int fl, const unsigned char * p, int pl);
extern int                  VARARGS68K _AmiSSL_RSA_padding_check_PKCS1_OAEP(struct AmiSSLIFace *, unsigned char * to, int tlen, const unsigned char * f, int fl, int rsa_len, const unsigned char * p, int pl);
extern int                  VARARGS68K _AmiSSL_RSA_padding_add_SSLv23(struct AmiSSLIFace *, unsigned char * to, int tlen, const unsigned char * f, int fl);
extern int                  VARARGS68K _AmiSSL_RSA_padding_check_SSLv23(struct AmiSSLIFace *, unsigned char * to, int tlen, const unsigned char * f, int fl, int rsa_len);
extern int                  VARARGS68K _AmiSSL_RSA_padding_add_none(struct AmiSSLIFace *, unsigned char * to, int tlen, const unsigned char * f, int fl);
extern int                  VARARGS68K _AmiSSL_RSA_padding_check_none(struct AmiSSLIFace *, unsigned char * to, int tlen, const unsigned char * f, int fl, int rsa_len);
extern int                  VARARGS68K _AmiSSL_RSA_get_ex_new_index(struct AmiSSLIFace *, long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func);
extern int                  VARARGS68K _AmiSSL_RSA_set_ex_data(struct AmiSSLIFace *, RSA * r, int idx, void * arg);
extern void *               VARARGS68K _AmiSSL_RSA_get_ex_data(struct AmiSSLIFace *, const RSA * r, int idx);
extern RSA *                VARARGS68K _AmiSSL_RSAPublicKey_dup(struct AmiSSLIFace *, RSA * rsa);
extern RSA *                VARARGS68K _AmiSSL_RSAPrivateKey_dup(struct AmiSSLIFace *, RSA * rsa);
extern void                 VARARGS68K _AmiSSL_ERR_load_RSA_strings(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_SHA_Init(struct AmiSSLIFace *, SHA_CTX * c);
extern int                  VARARGS68K _AmiSSL_SHA_Update(struct AmiSSLIFace *, SHA_CTX * c, const void * data, unsigned long len);
extern int                  VARARGS68K _AmiSSL_SHA_Final(struct AmiSSLIFace *, unsigned char * md, SHA_CTX * c);
extern unsigned char *      VARARGS68K _AmiSSL_SHA(struct AmiSSLIFace *, const unsigned char * d, unsigned long n, unsigned char * md);
extern void                 VARARGS68K _AmiSSL_SHA_Transform(struct AmiSSLIFace *, SHA_CTX * c, const unsigned char * data);
extern int                  VARARGS68K _AmiSSL_SHA1_Init(struct AmiSSLIFace *, SHA_CTX * c);
extern int                  VARARGS68K _AmiSSL_SHA1_Update(struct AmiSSLIFace *, SHA_CTX * c, const void * data, unsigned long len);
extern int                  VARARGS68K _AmiSSL_SHA1_Final(struct AmiSSLIFace *, unsigned char * md, SHA_CTX * c);
extern unsigned char *      VARARGS68K _AmiSSL_SHA1(struct AmiSSLIFace *, const unsigned char * d, unsigned long n, unsigned char * md);
extern void                 VARARGS68K _AmiSSL_SHA1_Transform(struct AmiSSLIFace *, SHA_CTX * c, const unsigned char * data);
extern int                  VARARGS68K _AmiSSL_UI_read_string_lib(struct AmiSSLIFace *, UI * ui, UI_STRING * uis);
extern int                  VARARGS68K _AmiSSL_UI_write_string_lib(struct AmiSSLIFace *, UI * ui, UI_STRING * uis);
extern void                 VARARGS68K _AmiSSL_HMAC_CTX_set_flags(struct AmiSSLIFace *, HMAC_CTX * ctx, unsigned long flags);
extern void                 VARARGS68K _AmiSSL_private_RC4_set_key(struct AmiSSLIFace *, RC4_KEY * key, int len, const unsigned char * data);
extern int                  VARARGS68K _AmiSSL_X509_check_ca(struct AmiSSLIFace *, X509 * x);
extern PROXY_POLICY *       VARARGS68K _AmiSSL_PROXY_POLICY_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_PROXY_POLICY_free(struct AmiSSLIFace *, PROXY_POLICY * a);
extern PROXY_POLICY *       VARARGS68K _AmiSSL_d2i_PROXY_POLICY(struct AmiSSLIFace *, PROXY_POLICY ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_PROXY_POLICY(struct AmiSSLIFace *, PROXY_POLICY * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_PROXY_POLICY_it(struct AmiSSLIFace *);
extern PROXY_CERT_INFO_EXTENSION * VARARGS68K _AmiSSL_PROXY_CERT_INFO_EXTENSION_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_PROXY_CERT_INFO_EXTENSION_free(struct AmiSSLIFace *, PROXY_CERT_INFO_EXTENSION * a);
extern PROXY_CERT_INFO_EXTENSION * VARARGS68K _AmiSSL_d2i_PROXY_CERT_INFO_EXTENSION(struct AmiSSLIFace *, PROXY_CERT_INFO_EXTENSION ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_i2d_PROXY_CERT_INFO_EXTENSION(struct AmiSSLIFace *, PROXY_CERT_INFO_EXTENSION * a, unsigned char ** out);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_PROXY_CERT_INFO_EXTENSION_it(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_BN_mod_exp_mont_consttime(struct AmiSSLIFace *, BIGNUM * rr, const BIGNUM * a, const BIGNUM * p, const BIGNUM * m, BN_CTX * ctx, BN_MONT_CTX * in_mont);
extern BN_MONT_CTX *        VARARGS68K _AmiSSL_BN_MONT_CTX_set_locked(struct AmiSSLIFace *, BN_MONT_CTX ** pmont, int lock, const BIGNUM * mod, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_PKCS1_MGF1(struct AmiSSLIFace *, unsigned char * mask, long len, const unsigned char * seed, long seedlen, const EVP_MD * dgst);
extern int                  VARARGS68K _AmiSSL_RSA_padding_add_X931(struct AmiSSLIFace *, unsigned char * to, int tlen, const unsigned char * from, int flen);
extern int                  VARARGS68K _AmiSSL_RSA_padding_check_X931(struct AmiSSLIFace *, unsigned char * to, int tlen, const unsigned char * from, int flen, int num);
extern int                  VARARGS68K _AmiSSL_RSA_X931_hash_id(struct AmiSSLIFace *, int nid);
extern int                  VARARGS68K _AmiSSL_RSA_verify_PKCS1_PSS(struct AmiSSLIFace *, RSA * rsa, const unsigned char * mHash, const EVP_MD * Hash, const unsigned char * EM, int sLen);
extern int                  VARARGS68K _AmiSSL_RSA_padding_add_PKCS1_PSS(struct AmiSSLIFace *, RSA * rsa, unsigned char * EM, const unsigned char * mHash, const EVP_MD * Hash, int sLen);
extern const EVP_MD *       VARARGS68K _AmiSSL_EVP_sha224(struct AmiSSLIFace *);
extern const EVP_MD *       VARARGS68K _AmiSSL_EVP_sha256(struct AmiSSLIFace *);
extern const EVP_MD *       VARARGS68K _AmiSSL_EVP_sha384(struct AmiSSLIFace *);
extern const EVP_MD *       VARARGS68K _AmiSSL_EVP_sha512(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_BN_GF2m_add(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * b);
extern int                  VARARGS68K _AmiSSL_BN_GF2m_arr2poly(struct AmiSSLIFace *, const int * p, BIGNUM * a);
extern int                  VARARGS68K _AmiSSL_BN_GF2m_mod(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * p);
extern int                  VARARGS68K _AmiSSL_BN_GF2m_mod_mul(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * p, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_GF2m_mod_sqr(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_GF2m_mod_inv(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * b, const BIGNUM * p, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_GF2m_mod_div(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * p, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_GF2m_mod_exp(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * p, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_GF2m_mod_sqrt(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_GF2m_mod_solve_quad(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_generate_prime_ex(struct AmiSSLIFace *, BIGNUM * ret, int bits, int safe, const BIGNUM * add, const BIGNUM * rem, BN_GENCB * cb);
extern int                  VARARGS68K _AmiSSL_BN_is_prime_ex(struct AmiSSLIFace *, const BIGNUM * p, int nchecks, BN_CTX * ctx, BN_GENCB * cb);
extern void                 VARARGS68K _AmiSSL_BN_set_negative(struct AmiSSLIFace *, BIGNUM * b, int n);
extern int                  VARARGS68K _AmiSSL_EC_GROUP_get_degree(struct AmiSSLIFace *, const EC_GROUP * group);
extern const EC_METHOD *    VARARGS68K _AmiSSL_EC_GF2m_simple_method(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_EC_GROUP_set_curve_GF2m(struct AmiSSLIFace *, EC_GROUP * group, const BIGNUM * p, const BIGNUM * a, const BIGNUM * b, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_EC_GROUP_get_curve_GF2m(struct AmiSSLIFace *, const EC_GROUP * group, BIGNUM * p, BIGNUM * a, BIGNUM * b, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_EC_POINT_set_affine_coordinates_GF2m(struct AmiSSLIFace *, const EC_GROUP * group, EC_POINT * point, const BIGNUM * x, const BIGNUM * y, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_EC_POINT_get_affine_coordinates_GF2m(struct AmiSSLIFace *, const EC_GROUP * group, const EC_POINT * point, BIGNUM * x, BIGNUM * y, BN_CTX * ctx);
extern size_t               VARARGS68K _AmiSSL_EC_get_builtin_curves(struct AmiSSLIFace *, EC_builtin_curve * r, size_t nitems);
extern EC_GROUP *           VARARGS68K _AmiSSL_EC_GROUP_new_by_curve_name(struct AmiSSLIFace *, int nid);
extern int                  VARARGS68K _AmiSSL_EC_GROUP_check(struct AmiSSLIFace *, const EC_GROUP * group, BN_CTX * ctx);
extern void                 VARARGS68K _AmiSSL_ENGINE_cleanup(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_DSA_generate_parameters_ex(struct AmiSSLIFace *, DSA * dsa, int bits, unsigned char * seed, int seed_len, int * counter_ret, unsigned long * h_ret, BN_GENCB * cb);
extern const EVP_MD *       VARARGS68K _AmiSSL_EVP_ecdsa(struct AmiSSLIFace *);
extern EC_KEY *             VARARGS68K _AmiSSL_EC_KEY_new_by_curve_name(struct AmiSSLIFace *, int nid);
extern int                  VARARGS68K _AmiSSL_EC_KEY_generate_key(struct AmiSSLIFace *, EC_KEY * key);
extern void                 VARARGS68K _AmiSSL_EC_KEY_free(struct AmiSSLIFace *, EC_KEY * key);
extern void                 VARARGS68K _AmiSSL_ECDSA_SIG_free(struct AmiSSLIFace *, ECDSA_SIG * a);
extern ECDSA_SIG *          VARARGS68K _AmiSSL_ECDSA_do_sign(struct AmiSSLIFace *, const unsigned char * dgst, int dlen, EC_KEY * eckey);
extern int                  VARARGS68K _AmiSSL_ECDSA_do_verify(struct AmiSSLIFace *, const unsigned char * dgst, int dgst_len, const ECDSA_SIG * sig, EC_KEY * eckey);
extern EC_KEY *             VARARGS68K _AmiSSL_EC_KEY_new(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_EC_KEY_set_group(struct AmiSSLIFace *, EC_KEY * eckey, const EC_GROUP * group);
extern const EC_GROUP *     VARARGS68K _AmiSSL_EC_KEY_get0_group(struct AmiSSLIFace *, const EC_KEY * key);
extern int                  VARARGS68K _AmiSSL_EC_KEY_check_key(struct AmiSSLIFace *, const EC_KEY * eckey);
extern int                  VARARGS68K _AmiSSL_ECDSA_size(struct AmiSSLIFace *, const EC_KEY * eckey);
extern int                  VARARGS68K _AmiSSL_ECDSA_sign(struct AmiSSLIFace *, int type, const unsigned char * dgst, int dgstlen, unsigned char * sig, unsigned int * siglen, EC_KEY * eckey);
extern int                  VARARGS68K _AmiSSL_ECDSA_verify(struct AmiSSLIFace *, int type, const unsigned char * dgst, int dgstlen, const unsigned char * sig, int siglen, EC_KEY * eckey);
extern ECDSA_SIG *          VARARGS68K _AmiSSL_d2i_ECDSA_SIG(struct AmiSSLIFace *, ECDSA_SIG ** v, const unsigned char ** pp, long len);
extern int                  VARARGS68K _AmiSSL_i2d_ECDSA_SIG(struct AmiSSLIFace *, const ECDSA_SIG * a, unsigned char ** pp);
extern int                  VARARGS68K _AmiSSL_DH_generate_parameters_ex(struct AmiSSLIFace *, DH * ret, int prime_len, int generator, BN_GENCB * cb);
extern int                  VARARGS68K _AmiSSL_EC_METHOD_get_field_type(struct AmiSSLIFace *, const EC_METHOD * meth);
extern const EC_POINT *     VARARGS68K _AmiSSL_EC_KEY_get0_public_key(struct AmiSSLIFace *, const EC_KEY * eckey);
extern int                  VARARGS68K _AmiSSL_ECDH_compute_key(struct AmiSSLIFace *, void * out, size_t outlen, const EC_POINT * pub_key, EC_KEY * ecdh, void *(*KDF)(const void *, size_t, void *, size_t *));
extern const BIGNUM *       VARARGS68K _AmiSSL_EC_KEY_get0_private_key(struct AmiSSLIFace *, const EC_KEY * eckey);
extern ENGINE *             VARARGS68K _AmiSSL_ENGINE_get_first(struct AmiSSLIFace *);
extern const char *         VARARGS68K _AmiSSL_ENGINE_get_id(struct AmiSSLIFace *, const ENGINE * e);
extern const char *         VARARGS68K _AmiSSL_ENGINE_get_name(struct AmiSSLIFace *, const ENGINE * e);
extern ENGINE *             VARARGS68K _AmiSSL_ENGINE_get_next(struct AmiSSLIFace *, ENGINE * e);
extern int                  VARARGS68K _AmiSSL_ENGINE_free(struct AmiSSLIFace *, ENGINE * e);
extern ENGINE *             VARARGS68K _AmiSSL_ENGINE_new(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_id(struct AmiSSLIFace *, ENGINE * e, const char * id);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_name(struct AmiSSLIFace *, ENGINE * e, const char * name);
extern int                  VARARGS68K _AmiSSL_ENGINE_add(struct AmiSSLIFace *, ENGINE * e);
extern int                  VARARGS68K _AmiSSL_ENGINE_remove(struct AmiSSLIFace *, ENGINE * e);
extern void                 VARARGS68K _AmiSSL_ENGINE_load_builtin_engines(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ENGINE_register_all_ciphers(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_EVP_CIPHER_nid(struct AmiSSLIFace *, const EVP_CIPHER * cipher);
extern int                  VARARGS68K _AmiSSL_EVP_MD_type(struct AmiSSLIFace *, const EVP_MD * md);
extern void                 VARARGS68K _AmiSSL_ENGINE_register_all_digests(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_BIO_test_flags(struct AmiSSLIFace *, const BIO * b, int flags);
extern STACK_OF(SSL_COMP) * VARARGS68K _AmiSSL_SSL_COMP_get_compression_methods(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_RSA_generate_key_ex(struct AmiSSLIFace *, RSA * rsa, int bits, BIGNUM * e, BN_GENCB * cb);
extern void                 VARARGS68K _AmiSSL_X509_VERIFY_PARAM_free(struct AmiSSLIFace *, X509_VERIFY_PARAM * param);
extern int                  VARARGS68K _AmiSSL_X509_STORE_set1_param(struct AmiSSLIFace *, X509_STORE * ctx, X509_VERIFY_PARAM * pm);
extern ASN1_TYPE *          VARARGS68K _AmiSSL_ASN1_generate_nconf(struct AmiSSLIFace *, char * str, CONF * nconf);
extern EC_GROUP *           VARARGS68K _AmiSSL_PEM_read_bio_ECPKParameters(struct AmiSSLIFace *, BIO * bp, EC_GROUP ** x, pem_password_cb * cb, void * u);
extern EC_KEY *             VARARGS68K _AmiSSL_EC_KEY_dup(struct AmiSSLIFace *, const EC_KEY * ec_key);
extern void                 VARARGS68K _AmiSSL_BIO_set_callback(struct AmiSSLIFace *, BIO * b, long (*callback)(struct bio_st *, int, const char *, int, long, long));
extern void                 VARARGS68K _AmiSSL_BIO_set_callback_arg(struct AmiSSLIFace *, BIO * b, char * arg);
extern void                 VARARGS68K _AmiSSL_EVP_MD_CTX_set_flags(struct AmiSSLIFace *, EVP_MD_CTX * ctx, int flags);
extern void                 VARARGS68K _AmiSSL_BIO_set_flags(struct AmiSSLIFace *, BIO * b, int flags);
extern void                 VARARGS68K _AmiSSL_EVP_CIPHER_CTX_set_flags(struct AmiSSLIFace *, EVP_CIPHER_CTX * ctx, int flags);
extern int                  VARARGS68K _AmiSSL_EVP_CIPHER_iv_length(struct AmiSSLIFace *, const EVP_CIPHER * cipher);
extern int                  VARARGS68K _AmiSSL_X509_REQ_check_private_key(struct AmiSSLIFace *, X509_REQ * x509, EVP_PKEY * pkey);
extern EC_KEY *             VARARGS68K _AmiSSL_PEM_read_bio_EC_PUBKEY(struct AmiSSLIFace *, BIO * bp, EC_KEY ** x, pem_password_cb * cb, void * u);
extern EC_KEY *             VARARGS68K _AmiSSL_PEM_read_bio_ECPrivateKey(struct AmiSSLIFace *, BIO * bp, EC_KEY ** x, pem_password_cb * cb, void * u);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_EC_PUBKEY(struct AmiSSLIFace *, BIO * bp, EC_KEY * x);
extern EC_KEY *             VARARGS68K _AmiSSL_d2i_EC_PUBKEY_bio(struct AmiSSLIFace *, BIO * bp, EC_KEY ** eckey);
extern void                 VARARGS68K _AmiSSL_EC_KEY_set_asn1_flag(struct AmiSSLIFace *, EC_KEY * key, int flag);
extern void                 VARARGS68K _AmiSSL_EC_KEY_set_conv_form(struct AmiSSLIFace *, EC_KEY * key, point_conversion_form_t cform);
extern int                  VARARGS68K _AmiSSL_EC_KEY_print(struct AmiSSLIFace *, BIO * bp, const EC_KEY * x, int off);
extern EC_KEY *             VARARGS68K _AmiSSL_d2i_ECPrivateKey_bio(struct AmiSSLIFace *, BIO * bp, EC_KEY ** eckey);
extern int                  VARARGS68K _AmiSSL_i2d_EC_PUBKEY_bio(struct AmiSSLIFace *, BIO * bp, EC_KEY * eckey);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_ECPrivateKey(struct AmiSSLIFace *, BIO * bp, EC_KEY * x, const EVP_CIPHER * enc, unsigned char * kstr, int klen, pem_password_cb * cb, void * u);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_ECPKParameters(struct AmiSSLIFace *, BIO * bp, const EC_GROUP * x);
extern int                  VARARGS68K _AmiSSL_i2d_ECPrivateKey_bio(struct AmiSSLIFace *, BIO * bp, EC_KEY * eckey);
extern int                  VARARGS68K _AmiSSL_i2d_ECPKParameters(struct AmiSSLIFace *, const EC_GROUP * a, unsigned char ** out);
extern void                 VARARGS68K _AmiSSL_EC_GROUP_set_asn1_flag(struct AmiSSLIFace *, EC_GROUP * group, int flag);
extern void                 VARARGS68K _AmiSSL_EC_GROUP_set_point_conversion_form(struct AmiSSLIFace *, EC_GROUP * group, point_conversion_form_t form);
extern point_conversion_form_t VARARGS68K _AmiSSL_EC_GROUP_get_point_conversion_form(struct AmiSSLIFace *, const EC_GROUP * group);
extern int                  VARARGS68K _AmiSSL_ECPKParameters_print(struct AmiSSLIFace *, BIO * bp, const EC_GROUP * x, int off);
extern size_t               VARARGS68K _AmiSSL_EC_GROUP_set_seed(struct AmiSSLIFace *, EC_GROUP * group, const unsigned char * p, size_t len);
extern EC_GROUP *           VARARGS68K _AmiSSL_d2i_ECPKParameters(struct AmiSSLIFace *, EC_GROUP ** a, const unsigned char ** in, long len);
extern BIGNUM *             VARARGS68K _AmiSSL_EC_POINT_point2bn(struct AmiSSLIFace *, const EC_GROUP * group, const EC_POINT * point, point_conversion_form_t form, BIGNUM * ret, BN_CTX * ctx);
extern STACK_OF(OPENSSL_STRING) * VARARGS68K _AmiSSL_X509_get1_ocsp(struct AmiSSLIFace *, X509 * x);
extern const char *         VARARGS68K _AmiSSL_SSL_get_servername(struct AmiSSLIFace *, const SSL * s, const int type);
extern SSL_CTX *            VARARGS68K _AmiSSL_SSL_set_SSL_CTX(struct AmiSSLIFace *, SSL * ssl, SSL_CTX * ctx);
extern void                 VARARGS68K _AmiSSL_SSL_CTX_set_cookie_generate_cb(struct AmiSSLIFace *, SSL_CTX * ctx, int (*app_gen_cookie_cb)(SSL *ssl, unsigned char *cookie, unsigned int *cookie_len));
extern void                 VARARGS68K _AmiSSL_SSL_CTX_set_cookie_verify_cb(struct AmiSSLIFace *, SSL_CTX * ctx, int (*app_verify_cookie_cb)(SSL *ssl, unsigned char *cookie, unsigned int cookie_len));
extern void                 VARARGS68K _AmiSSL_SSL_CTX_set_info_callback(struct AmiSSLIFace *, SSL_CTX * ctx, void (*cb)(const SSL *ssl, int type, int val));
extern const SSL_METHOD *   VARARGS68K _AmiSSL_DTLSv1_server_method(struct AmiSSLIFace *);
extern BIO *                VARARGS68K _AmiSSL_BIO_new_dgram(struct AmiSSLIFace *, int fd, int close_flag);
extern int                  VARARGS68K _AmiSSL_SSL_get_servername_type(struct AmiSSLIFace *, const SSL * s);
extern const COMP_METHOD *  VARARGS68K _AmiSSL_SSL_get_current_compression(struct AmiSSLIFace *, SSL * s);
extern const COMP_METHOD *  VARARGS68K _AmiSSL_SSL_get_current_expansion(struct AmiSSLIFace *, SSL * s);
extern const char *         VARARGS68K _AmiSSL_SSL_COMP_get_name(struct AmiSSLIFace *, const COMP_METHOD * comp);
extern ENGINE *             VARARGS68K _AmiSSL_ENGINE_by_id(struct AmiSSLIFace *, const char * id);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_set_client_cert_engine(struct AmiSSLIFace *, SSL_CTX * ctx, ENGINE * e);
extern const SSL_METHOD *   VARARGS68K _AmiSSL_DTLSv1_client_method(struct AmiSSLIFace *);
extern const SSL_METHOD *   VARARGS68K _AmiSSL_DTLSv1_method(struct AmiSSLIFace *);
extern unsigned char *      VARARGS68K _AmiSSL_SHA256(struct AmiSSLIFace *, const unsigned char * d, size_t n, unsigned char * md);
extern unsigned char *      VARARGS68K _AmiSSL_SHA512(struct AmiSSLIFace *, const unsigned char * d, size_t n, unsigned char * md);
extern void                 VARARGS68K _AmiSSL_AES_ige_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, const unsigned long length, const AES_KEY * key, unsigned char * ivec, const int enc);
extern int                  VARARGS68K _AmiSSL_EC_KEY_precompute_mult(struct AmiSSLIFace *, EC_KEY * key, BN_CTX * ctx);
extern EVP_PKEY *           VARARGS68K _AmiSSL_ENGINE_load_private_key(struct AmiSSLIFace *, ENGINE * e, const char * key_id, UI_METHOD * ui_method, void * callback_data);
extern EVP_PKEY *           VARARGS68K _AmiSSL_ENGINE_load_public_key(struct AmiSSLIFace *, ENGINE * e, const char * key_id, UI_METHOD * ui_method, void * callback_data);
extern int                  VARARGS68K _AmiSSL_ENGINE_ctrl_cmd(struct AmiSSLIFace *, ENGINE * e, const char * cmd_name, long i, void * p, void (*f)(void), int cmd_optional);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_default(struct AmiSSLIFace *, ENGINE * e, unsigned int flags);
extern int                  VARARGS68K _AmiSSL_ENGINE_ctrl(struct AmiSSLIFace *, ENGINE * e, int cmd, long i, void * p, void (*f)(void));
extern int                  VARARGS68K _AmiSSL_ENGINE_register_all_complete(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_ENGINE_ctrl_cmd_string(struct AmiSSLIFace *, ENGINE * e, const char * cmd_name, const char * arg, int cmd_optional);
extern int                  VARARGS68K _AmiSSL_X509_VERIFY_PARAM_add0_policy(struct AmiSSLIFace *, X509_VERIFY_PARAM * param, ASN1_OBJECT * policy);
extern int                  VARARGS68K _AmiSSL_X509_VERIFY_PARAM_set_purpose(struct AmiSSLIFace *, X509_VERIFY_PARAM * param, int purpose);
extern int                  VARARGS68K _AmiSSL_X509_VERIFY_PARAM_set_flags(struct AmiSSLIFace *, X509_VERIFY_PARAM * param, unsigned long flags);
extern X509_VERIFY_PARAM *  VARARGS68K _AmiSSL_X509_VERIFY_PARAM_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_X509_POLICY_NODE_print(struct AmiSSLIFace *, BIO * out, X509_POLICY_NODE * node, int indent);
extern X509_POLICY_TREE *   VARARGS68K _AmiSSL_X509_STORE_CTX_get0_policy_tree(struct AmiSSLIFace *, X509_STORE_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_X509_STORE_CTX_get_explicit_policy(struct AmiSSLIFace *, X509_STORE_CTX * ctx);
extern STACK_OF(X509_POLICY_NODE) * VARARGS68K _AmiSSL_X509_policy_tree_get0_policies(struct AmiSSLIFace *, const X509_POLICY_TREE * tree);
extern STACK_OF(X509_POLICY_NODE) * VARARGS68K _AmiSSL_X509_policy_tree_get0_user_policies(struct AmiSSLIFace *, const X509_POLICY_TREE * tree);
extern char *               VARARGS68K _AmiSSL_BIO_get_callback_arg(struct AmiSSLIFace *, const BIO * b);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_add1_attr_by_NID(struct AmiSSLIFace *, EVP_PKEY * key, int nid, int type, const unsigned char * bytes, int len);
extern const RSA_METHOD *   VARARGS68K _AmiSSL_ENGINE_get_RSA(struct AmiSSLIFace *, const ENGINE * e);
extern const DSA_METHOD *   VARARGS68K _AmiSSL_ENGINE_get_DSA(struct AmiSSLIFace *, const ENGINE * e);
extern const DH_METHOD *    VARARGS68K _AmiSSL_ENGINE_get_DH(struct AmiSSLIFace *, const ENGINE * e);
extern const RAND_METHOD *  VARARGS68K _AmiSSL_ENGINE_get_RAND(struct AmiSSLIFace *, const ENGINE * e);
extern ENGINE_CIPHERS_PTR   VARARGS68K _AmiSSL_ENGINE_get_ciphers(struct AmiSSLIFace *, const ENGINE * e);
extern ENGINE_DIGESTS_PTR   VARARGS68K _AmiSSL_ENGINE_get_digests(struct AmiSSLIFace *, const ENGINE * e);
extern int                  VARARGS68K _AmiSSL_ENGINE_init(struct AmiSSLIFace *, ENGINE * e);
extern int                  VARARGS68K _AmiSSL_ENGINE_finish(struct AmiSSLIFace *, ENGINE * e);
extern OCSP_REQ_CTX *       VARARGS68K _AmiSSL_OCSP_sendreq_new(struct AmiSSLIFace *, BIO * io, char * path, OCSP_REQUEST * req, int maxline);
extern int                  VARARGS68K _AmiSSL_OCSP_sendreq_nbio(struct AmiSSLIFace *, OCSP_RESPONSE ** presp, OCSP_REQ_CTX * rctx);
extern void                 VARARGS68K _AmiSSL_OCSP_REQ_CTX_free(struct AmiSSLIFace *, OCSP_REQ_CTX * rctx);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_use_psk_identity_hint(struct AmiSSLIFace *, SSL_CTX * ctx, const char * identity_hint);
extern void                 VARARGS68K _AmiSSL_SSL_CTX_set_psk_client_callback(struct AmiSSLIFace *, SSL_CTX * ctx, unsigned int (*psk_client_callback)(SSL *ssl, const char *hint, char *identity, unsigned int max_identity_len, unsigned char *psk, unsigned int max_psk_len));
extern const char *         VARARGS68K _AmiSSL_SSL_get_psk_identity_hint(struct AmiSSLIFace *, const SSL * s);
extern void                 VARARGS68K _AmiSSL_SSL_set_psk_server_callback(struct AmiSSLIFace *, SSL * ssl, unsigned int (*psk_server_callback)(SSL *ssl, const char *identity, unsigned char *psk, unsigned int max_psk_len));
extern int                  VARARGS68K _AmiSSL_SSL_use_psk_identity_hint(struct AmiSSLIFace *, SSL * s, const char * identity_hint);
extern void                 VARARGS68K _AmiSSL_SSL_set_psk_client_callback(struct AmiSSLIFace *, SSL * ssl, unsigned int (*psk_client_callback)(SSL *ssl, const char *hint, char *identity, unsigned int max_identity_len, unsigned char *psk, unsigned int max_psk_len));
extern void                 VARARGS68K _AmiSSL_SSL_CTX_set_psk_server_callback(struct AmiSSLIFace *, SSL_CTX * ctx, unsigned int (*psk_server_callback)(SSL *ssl, const char *identity, unsigned char *psk, unsigned int max_psk_len));
extern const char *         VARARGS68K _AmiSSL_SSL_get_psk_identity(struct AmiSSLIFace *, const SSL * s);
extern int                  VARARGS68K _AmiSSL_SSL_set_session_ticket_ext(struct AmiSSLIFace *, SSL * s, void * ext_data, int ext_len);
extern int                  VARARGS68K _AmiSSL_SSL_set_session_secret_cb(struct AmiSSLIFace *, SSL * s, tls_session_secret_cb_fn tls_session_secret_cb, void * arg);
extern int                  VARARGS68K _AmiSSL_SSL_set_session_ticket_ext_cb(struct AmiSSLIFace *, SSL * s, tls_session_ticket_ext_cb_fn cb, void * arg);
extern int                  VARARGS68K _AmiSSL_SSL_set1_param(struct AmiSSLIFace *, SSL * ssl, X509_VERIFY_PARAM * vpm);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_set1_param(struct AmiSSLIFace *, SSL_CTX * ctx, X509_VERIFY_PARAM * vpm);
extern int                  VARARGS68K _AmiSSL_SSL_renegotiate_abbreviated(struct AmiSSLIFace *, SSL * s);
extern const SSL_METHOD *   VARARGS68K _AmiSSL_TLSv1_1_method(struct AmiSSLIFace *);
extern const SSL_METHOD *   VARARGS68K _AmiSSL_TLSv1_1_client_method(struct AmiSSLIFace *);
extern const SSL_METHOD *   VARARGS68K _AmiSSL_TLSv1_1_server_method(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_set_srp_client_pwd_callback(struct AmiSSLIFace *, SSL_CTX * ctx, char * (*cb)(SSL *, void *));
extern BIGNUM *             VARARGS68K _AmiSSL_SSL_get_srp_g(struct AmiSSLIFace *, SSL * s);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_set_srp_username_callback(struct AmiSSLIFace *, SSL_CTX * ctx, int (*cb)(SSL *, int *, void *));
extern char *               VARARGS68K _AmiSSL_SSL_get_srp_userinfo(struct AmiSSLIFace *, SSL * s);
extern int                  VARARGS68K _AmiSSL_SSL_set_srp_server_param(struct AmiSSLIFace *, SSL * s, const BIGNUM * N, const BIGNUM * g, BIGNUM * sa, BIGNUM * v, char * info);
extern int                  VARARGS68K _AmiSSL_SSL_set_srp_server_param_pw(struct AmiSSLIFace *, SSL * s, const char * user, const char * pass, const char * grp);
extern BIGNUM *             VARARGS68K _AmiSSL_SSL_get_srp_N(struct AmiSSLIFace *, SSL * s);
extern char *               VARARGS68K _AmiSSL_SSL_get_srp_username(struct AmiSSLIFace *, SSL * s);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_set_srp_password(struct AmiSSLIFace *, SSL_CTX * ctx, char * password);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_set_srp_strength(struct AmiSSLIFace *, SSL_CTX * ctx, int strength);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_set_srp_verify_param_callback(struct AmiSSLIFace *, SSL_CTX * ctx, int (*cb)(SSL *, void *));
extern int                  VARARGS68K _AmiSSL_SSL_CTX_set_srp_cb_arg(struct AmiSSLIFace *, SSL_CTX * ctx, void * arg);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_set_srp_username(struct AmiSSLIFace *, SSL_CTX * ctx, char * name);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_SRP_CTX_init(struct AmiSSLIFace *, SSL_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_SRP_Calc_A_param(struct AmiSSLIFace *, SSL * s);
extern int                  VARARGS68K _AmiSSL_SRP_generate_server_master_secret(struct AmiSSLIFace *, SSL * s, unsigned char * master_key);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_SRP_CTX_free(struct AmiSSLIFace *, SSL_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_SRP_generate_client_master_secret(struct AmiSSLIFace *, SSL * s, unsigned char * master_key);
extern int                  VARARGS68K _AmiSSL_SSL_srp_server_param_with_username(struct AmiSSLIFace *, SSL * s, int * ad);
extern int                  VARARGS68K _AmiSSL_SSL_SRP_CTX_free(struct AmiSSLIFace *, SSL * ctx);
extern void                 VARARGS68K _AmiSSL_SSL_set_debug(struct AmiSSLIFace *, SSL * s, int debug);
extern X509 *               VARARGS68K _AmiSSL_SSL_SESSION_get0_peer(struct AmiSSLIFace *, SSL_SESSION * s);
extern const SSL_METHOD *   VARARGS68K _AmiSSL_TLSv1_2_client_method(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_SSL_SESSION_set1_id_context(struct AmiSSLIFace *, SSL_SESSION * s, const unsigned char * sid_ctx, unsigned int sid_ctx_len);
extern const SSL_METHOD *   VARARGS68K _AmiSSL_TLSv1_2_server_method(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_SSL_cache_hit(struct AmiSSLIFace *, SSL * s);
extern void                 VARARGS68K _AmiSSL_SSL_set_state(struct AmiSSLIFace *, SSL * ssl, int state);
extern unsigned long        VARARGS68K _AmiSSL_SSL_CIPHER_get_id(struct AmiSSLIFace *, const SSL_CIPHER * c);
extern const SSL_METHOD *   VARARGS68K _AmiSSL_TLSv1_2_method(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_SSL_export_keying_material(struct AmiSSLIFace *, SSL * s, unsigned char * out, size_t olen, const char * label, size_t llen, const unsigned char * p, size_t plen, int use_context);
extern int                  VARARGS68K _AmiSSL_SSL_set_tlsext_use_srtp(struct AmiSSLIFace *, SSL * ctx, const char * profiles);
extern void                 VARARGS68K _AmiSSL_SSL_CTX_set_next_protos_advertised_cb(struct AmiSSLIFace *, SSL_CTX * s, int (*cb)(SSL *ssl, const unsigned char **out, unsigned int *outlen, void *arg), void * arg);
extern void                 VARARGS68K _AmiSSL_SSL_get0_next_proto_negotiated(struct AmiSSLIFace *, const SSL * s, const unsigned char ** data, unsigned * len);
extern SRTP_PROTECTION_PROFILE * VARARGS68K _AmiSSL_SSL_get_selected_srtp_profile(struct AmiSSLIFace *, SSL * s);
extern int                  VARARGS68K _AmiSSL_SSL_CTX_set_tlsext_use_srtp(struct AmiSSLIFace *, SSL_CTX * ctx, const char * profiles);
extern int                  VARARGS68K _AmiSSL_SSL_select_next_proto(struct AmiSSLIFace *, unsigned char ** out, unsigned char * outlen, const unsigned char * in, unsigned int inlen, const unsigned char * client, unsigned int client_len);
extern STACK_OF(SRTP_PROTECTION_PROFILE) * VARARGS68K _AmiSSL_SSL_get_srtp_profiles(struct AmiSSLIFace *, SSL * s);
extern void                 VARARGS68K _AmiSSL_SSL_CTX_set_next_proto_select_cb(struct AmiSSLIFace *, SSL_CTX * s, int (*cb)(SSL *ssl, unsigned char **out, unsigned char *outlen, const unsigned char *in, unsigned int inlen, void *arg), void * arg);
extern unsigned int         VARARGS68K _AmiSSL_SSL_SESSION_get_compress_id(struct AmiSSLIFace *, const SSL_SESSION * s);
extern void                 VARARGS68K _AmiSSL_SSL_CTX_set_tmp_ecdh_callback(struct AmiSSLIFace *, SSL_CTX * ctx, EC_KEY *(*ecdh)(SSL *ssl, int is_export, int keylength));
extern void                 VARARGS68K _AmiSSL_SSL_set_tmp_ecdh_callback(struct AmiSSLIFace *, SSL * ssl, EC_KEY *(*ecdh)(SSL *ssl, int is_export, int keylength));
extern int                  VARARGS68K _AmiSSL_SSL_SRP_CTX_init(struct AmiSSLIFace *, SSL * s);
extern const char *         VARARGS68K _AmiSSL_DES_options(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ERR_load_ENGINE_strings(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_DSA(struct AmiSSLIFace *, ENGINE * e, const DSA_METHOD * dsa_meth);
extern ENGINE_GEN_INT_FUNC_PTR VARARGS68K _AmiSSL_ENGINE_get_finish_function(struct AmiSSLIFace *, const ENGINE * e);
extern ENGINE *             VARARGS68K _AmiSSL_ENGINE_get_default_RSA(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_DH(struct AmiSSLIFace *, ENGINE * e, const DH_METHOD * dh_meth);
extern ENGINE_GEN_INT_FUNC_PTR VARARGS68K _AmiSSL_ENGINE_get_init_function(struct AmiSSLIFace *, const ENGINE * e);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_init_function(struct AmiSSLIFace *, ENGINE * e, ENGINE_GEN_INT_FUNC_PTR init_f);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_default_DSA(struct AmiSSLIFace *, ENGINE * e);
extern ENGINE *             VARARGS68K _AmiSSL_ENGINE_get_last(struct AmiSSLIFace *);
extern ENGINE *             VARARGS68K _AmiSSL_ENGINE_get_prev(struct AmiSSLIFace *, ENGINE * e);
extern ENGINE *             VARARGS68K _AmiSSL_ENGINE_get_default_DH(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_finish_function(struct AmiSSLIFace *, ENGINE * e, ENGINE_GEN_INT_FUNC_PTR finish_f);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_RSA(struct AmiSSLIFace *, ENGINE * e, const RSA_METHOD * rsa_meth);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_default_RAND(struct AmiSSLIFace *, ENGINE * e);
extern ENGINE *             VARARGS68K _AmiSSL_ENGINE_get_default_DSA(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_default_RSA(struct AmiSSLIFace *, ENGINE * e);
extern ENGINE *             VARARGS68K _AmiSSL_ENGINE_get_default_RAND(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_RAND(struct AmiSSLIFace *, ENGINE * e, const RAND_METHOD * rand_meth);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_default_DH(struct AmiSSLIFace *, ENGINE * e);
extern ENGINE_CTRL_FUNC_PTR VARARGS68K _AmiSSL_ENGINE_get_ctrl_function(struct AmiSSLIFace *, const ENGINE * e);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_ctrl_function(struct AmiSSLIFace *, ENGINE * e, ENGINE_CTRL_FUNC_PTR ctrl_f);
extern void                 VARARGS68K _AmiSSL_ENGINE_unregister_ciphers(struct AmiSSLIFace *, ENGINE * e);
extern void                 VARARGS68K _AmiSSL_ENGINE_unregister_RSA(struct AmiSSLIFace *, ENGINE * e);
extern void                 VARARGS68K _AmiSSL_ENGINE_register_all_RAND(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ENGINE_load_dynamic(struct AmiSSLIFace *);
extern ENGINE *             VARARGS68K _AmiSSL_ENGINE_get_digest_engine(struct AmiSSLIFace *, int nid);
extern int                  VARARGS68K _AmiSSL_ENGINE_register_DH(struct AmiSSLIFace *, ENGINE * e);
extern int                  VARARGS68K _AmiSSL_ENGINE_register_RAND(struct AmiSSLIFace *, ENGINE * e);
extern void                 VARARGS68K _AmiSSL_ENGINE_load_cryptodev(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_ENGINE_register_ciphers(struct AmiSSLIFace *, ENGINE * e);
extern void                 VARARGS68K _AmiSSL_ENGINE_load_ubsec(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ENGINE_load_openssl(struct AmiSSLIFace *);
extern const ENGINE_CMD_DEFN * VARARGS68K _AmiSSL_ENGINE_get_cmd_defns(struct AmiSSLIFace *, const ENGINE * e);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_load_privkey_function(struct AmiSSLIFace *, ENGINE * e, ENGINE_LOAD_KEY_PTR loadpriv_f);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_default_digests(struct AmiSSLIFace *, ENGINE * e);
extern int                  VARARGS68K _AmiSSL_ENGINE_register_RSA(struct AmiSSLIFace *, ENGINE * e);
extern void                 VARARGS68K _AmiSSL_ENGINE_unregister_DSA(struct AmiSSLIFace *, ENGINE * e);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_ciphers(struct AmiSSLIFace *, ENGINE * e, ENGINE_CIPHERS_PTR f);
extern int                  VARARGS68K _AmiSSL_RAND_set_rand_engine(struct AmiSSLIFace *, ENGINE * engine);
extern const EVP_MD *       VARARGS68K _AmiSSL_ENGINE_get_digest(struct AmiSSLIFace *, ENGINE * e, int nid);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_ENGINE_get_cipher(struct AmiSSLIFace *, ENGINE * e, int nid);
extern int                  VARARGS68K _AmiSSL_ENGINE_cmd_is_executable(struct AmiSSLIFace *, ENGINE * e, int cmd);
extern int                  VARARGS68K _AmiSSL_ENGINE_register_DSA(struct AmiSSLIFace *, ENGINE * e);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_load_pubkey_function(struct AmiSSLIFace *, ENGINE * e, ENGINE_LOAD_KEY_PTR loadpub_f);
extern ENGINE_LOAD_KEY_PTR  VARARGS68K _AmiSSL_ENGINE_get_load_pubkey_function(struct AmiSSLIFace *, const ENGINE * e);
extern void                 VARARGS68K _AmiSSL_ENGINE_register_all_RSA(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ENGINE_unregister_digests(struct AmiSSLIFace *, ENGINE * e);
extern int                  VARARGS68K _AmiSSL_ENGINE_get_ex_new_index(struct AmiSSLIFace *, long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dep_func, CRYPTO_EX_free * free_func);
extern void *               VARARGS68K _AmiSSL_ENGINE_get_ex_data(struct AmiSSLIFace *, const ENGINE * e, int idx);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_cmd_defns(struct AmiSSLIFace *, ENGINE * e, const ENGINE_CMD_DEFN * defns);
extern int                  VARARGS68K _AmiSSL_ENGINE_register_digests(struct AmiSSLIFace *, ENGINE * e);
extern void                 VARARGS68K _AmiSSL_ENGINE_register_all_DH(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_ENGINE_get_flags(struct AmiSSLIFace *, const ENGINE * e);
extern void                 VARARGS68K _AmiSSL_ENGINE_unregister_DH(struct AmiSSLIFace *, ENGINE * e);
extern void                 VARARGS68K _AmiSSL_ENGINE_register_all_DSA(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_digests(struct AmiSSLIFace *, ENGINE * e, ENGINE_DIGESTS_PTR f);
extern int                  VARARGS68K _AmiSSL_ENGINE_register_complete(struct AmiSSLIFace *, ENGINE * e);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_ex_data(struct AmiSSLIFace *, ENGINE * e, int idx, void * arg);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_destroy_function(struct AmiSSLIFace *, ENGINE * e, ENGINE_GEN_INT_FUNC_PTR destroy_f);
extern ENGINE *             VARARGS68K _AmiSSL_ENGINE_get_cipher_engine(struct AmiSSLIFace *, int nid);
extern void                 VARARGS68K _AmiSSL_ENGINE_load_cswift(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_default_ciphers(struct AmiSSLIFace *, ENGINE * e);
extern void                 VARARGS68K _AmiSSL_ENGINE_unregister_RAND(struct AmiSSLIFace *, ENGINE * e);
extern void                 VARARGS68K _AmiSSL_ENGINE_load_nuron(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ENGINE_set_table_flags(struct AmiSSLIFace *, unsigned int flags);
extern void                 VARARGS68K _AmiSSL_ENGINE_load_chil(struct AmiSSLIFace *);
extern ENGINE_GEN_INT_FUNC_PTR VARARGS68K _AmiSSL_ENGINE_get_destroy_function(struct AmiSSLIFace *, const ENGINE * e);
extern void                 VARARGS68K _AmiSSL_ENGINE_load_atalla(struct AmiSSLIFace *);
extern unsigned int         VARARGS68K _AmiSSL_ENGINE_get_table_flags(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_flags(struct AmiSSLIFace *, ENGINE * e, int flags);
extern ENGINE_LOAD_KEY_PTR  VARARGS68K _AmiSSL_ENGINE_get_load_privkey_function(struct AmiSSLIFace *, const ENGINE * e);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_default_string(struct AmiSSLIFace *, ENGINE * e, const char * def_list);
extern void                 VARARGS68K _AmiSSL_ENGINE_add_conf_module(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ENGINE_load_aep(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ENGINE_load_sureware(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ENGINE_load_4758cca(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_ENGINE_up_ref(struct AmiSSLIFace *, ENGINE * e);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_STORE(struct AmiSSLIFace *, ENGINE * e, const STORE_METHOD * store_meth);
extern int                  VARARGS68K _AmiSSL_ENGINE_register_ECDSA(struct AmiSSLIFace *, ENGINE * e);
extern unsigned long        VARARGS68K _AmiSSL_BN_BLINDING_get_thread_id(struct AmiSSLIFace *, const BN_BLINDING * b);
extern int                  VARARGS68K _AmiSSL_EC_GROUP_get_trinomial_basis(struct AmiSSLIFace *, const EC_GROUP * eg, unsigned int * k);
extern const ECDH_METHOD *  VARARGS68K _AmiSSL_ECDH_get_default_method(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_ENGINE_register_ECDH(struct AmiSSLIFace *, ENGINE * e);
extern int                  VARARGS68K _AmiSSL_SHA512_Update(struct AmiSSLIFace *, SHA512_CTX * c, const void * data, size_t len);
extern int                  VARARGS68K _AmiSSL_i2d_ECPrivateKey(struct AmiSSLIFace *, EC_KEY * key, unsigned char ** out);
extern int                  VARARGS68K _AmiSSL_BN_GF2m_mod_exp_arr(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const int * p, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BN_GF2m_mod_mul_arr(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const int * p, BN_CTX * ctx);
extern EC_KEY *             VARARGS68K _AmiSSL_o2i_ECPublicKey(struct AmiSSLIFace *, EC_KEY ** key, const unsigned char ** in, long len);
extern EC_KEY *             VARARGS68K _AmiSSL_EC_KEY_copy(struct AmiSSLIFace *, EC_KEY * dst, const EC_KEY * src);
extern int                  VARARGS68K _AmiSSL_EC_GROUP_check_discriminant(struct AmiSSLIFace *, const EC_GROUP * group, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_i2o_ECPublicKey(struct AmiSSLIFace *, EC_KEY * key, unsigned char ** out);
extern EC_GROUP *           VARARGS68K _AmiSSL_EC_GROUP_new_curve_GF2m(struct AmiSSLIFace *, const BIGNUM * p, const BIGNUM * a, const BIGNUM * b, BN_CTX * ctx);
extern void                 VARARGS68K _AmiSSL_ENGINE_unregister_STORE(struct AmiSSLIFace *, ENGINE * e);
extern struct ec_key_st *   VARARGS68K _AmiSSL_EVP_PKEY_get1_EC_KEY(struct AmiSSLIFace *, EVP_PKEY * pkey);
extern ENGINE *             VARARGS68K _AmiSSL_ENGINE_get_default_ECDH(struct AmiSSLIFace *);
extern point_conversion_form_t VARARGS68K _AmiSSL_EC_KEY_get_conv_form(struct AmiSSLIFace *, const EC_KEY * key);
extern void *               VARARGS68K _AmiSSL_ENGINE_get_static_state(struct AmiSSLIFace *);
extern ECDSA_SIG *          VARARGS68K _AmiSSL_ECDSA_SIG_new(struct AmiSSLIFace *);
extern EC_POINT *           VARARGS68K _AmiSSL_EC_POINT_bn2point(struct AmiSSLIFace *, const EC_GROUP * g, const BIGNUM * b, EC_POINT * p, BN_CTX * ctx);
extern void *               VARARGS68K _AmiSSL_EC_KEY_get_key_method_data(struct AmiSSLIFace *, EC_KEY * key, void *(*dup_func)(void *), void (*free_func)(void *), void (*clear_free_func)(void *));
extern int                  VARARGS68K _AmiSSL_ECDSA_sign_ex(struct AmiSSLIFace *, int type, const unsigned char * dgst, int dgstlen, unsigned char * sig, unsigned int * siglen, const BIGNUM * kinv, const BIGNUM * rp, EC_KEY * eckey);
extern int                  VARARGS68K _AmiSSL_EC_GROUP_get_pentanomial_basis(struct AmiSSLIFace *, const EC_GROUP * ecgroup, unsigned int * k1, unsigned int * k2, unsigned int * k3);
extern int                  VARARGS68K _AmiSSL_ECDSA_sign_setup(struct AmiSSLIFace *, EC_KEY * eckey, BN_CTX * ctx, BIGNUM ** kinv, BIGNUM ** rp);
extern int                  VARARGS68K _AmiSSL_BN_GF2m_mod_solve_quad_arr(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const int * p, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_EC_KEY_up_ref(struct AmiSSLIFace *, EC_KEY * key);
extern EC_KEY *             VARARGS68K _AmiSSL_d2i_EC_PUBKEY(struct AmiSSLIFace *, EC_KEY ** a, const unsigned char ** pp, long length);
extern int                  VARARGS68K _AmiSSL_EC_GROUP_have_precompute_mult(struct AmiSSLIFace *, const EC_GROUP * group);
extern int                  VARARGS68K _AmiSSL_BN_GF2m_mod_arr(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const int * p);
extern void *               VARARGS68K _AmiSSL_ECDH_get_ex_data(struct AmiSSLIFace *, EC_KEY * d, int idx);
extern void                 VARARGS68K _AmiSSL_ENGINE_unregister_ECDH(struct AmiSSLIFace *, ENGINE * e);
extern const ECDH_METHOD *  VARARGS68K _AmiSSL_ECDH_OpenSSL(struct AmiSSLIFace *);
extern EC_POINT *           VARARGS68K _AmiSSL_EC_POINT_dup(struct AmiSSLIFace *, const EC_POINT * src, const EC_GROUP * group);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_set1_EC_KEY(struct AmiSSLIFace *, EVP_PKEY * pkey, struct ec_key_st * key);
extern int                  VARARGS68K _AmiSSL_BN_GF2m_mod_sqrt_arr(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const int * p, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_EC_KEY_set_private_key(struct AmiSSLIFace *, EC_KEY * key, const BIGNUM * prv);
extern int                  VARARGS68K _AmiSSL_BN_GF2m_poly2arr(struct AmiSSLIFace *, const BIGNUM * a, int * p, int max);
extern int                  VARARGS68K _AmiSSL_i2d_ECParameters(struct AmiSSLIFace *, EC_KEY * key, unsigned char ** out);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_ECDH(struct AmiSSLIFace *, ENGINE * e, const ECDH_METHOD * ecdh_meth);
extern int                  VARARGS68K _AmiSSL_SHA256_Init(struct AmiSSLIFace *, SHA256_CTX * c);
extern void *               VARARGS68K _AmiSSL_ECDSA_get_ex_data(struct AmiSSLIFace *, EC_KEY * d, int idx);
extern unsigned char *      VARARGS68K _AmiSSL_SHA224(struct AmiSSLIFace *, const unsigned char * d, size_t n, unsigned char * md);
extern size_t               VARARGS68K _AmiSSL_EC_GROUP_get_seed_len(struct AmiSSLIFace *, const EC_GROUP * ecgroup);
extern int                  VARARGS68K _AmiSSL_i2d_EC_PUBKEY(struct AmiSSLIFace *, EC_KEY * a, unsigned char ** pp);
extern const ECDSA_METHOD * VARARGS68K _AmiSSL_ECDSA_get_default_method(struct AmiSSLIFace *);
extern const EC_METHOD *    VARARGS68K _AmiSSL_EC_GFp_nist_method(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ENGINE_load_padlock(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_EC_GROUP_set_curve_name(struct AmiSSLIFace *, EC_GROUP * group, int nid);
extern int                  VARARGS68K _AmiSSL_BN_GF2m_mod_sqr_arr(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const int * p, BN_CTX * ctx);
extern BIO_METHOD *         VARARGS68K _AmiSSL_BIO_s_datagram(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_default_ECDSA(struct AmiSSLIFace *, ENGINE * e);
extern void                 VARARGS68K _AmiSSL_ECDH_set_default_method(struct AmiSSLIFace *, const ECDH_METHOD * method);
extern int                  VARARGS68K _AmiSSL_SHA384_Update(struct AmiSSLIFace *, SHA512_CTX * c, const void * data, size_t len);
extern void *               VARARGS68K _AmiSSL_EC_KEY_insert_key_method_data(struct AmiSSLIFace *, EC_KEY * key, void * data, void *(*dup_func)(void *), void (*free_func)(void *), void (*clear_free_func)(void *));
extern int                  VARARGS68K _AmiSSL_SHA224_Final(struct AmiSSLIFace *, unsigned char * md, SHA256_CTX * c);
extern int                  VARARGS68K _AmiSSL_SHA224_Update(struct AmiSSLIFace *, SHA256_CTX * c, const void * data, size_t len);
extern EC_KEY *             VARARGS68K _AmiSSL_d2i_ECPrivateKey(struct AmiSSLIFace *, EC_KEY ** key, const unsigned char ** in, long len);
extern void                 VARARGS68K _AmiSSL_ENGINE_register_all_STORE(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_SHA512_Final(struct AmiSSLIFace *, unsigned char * md, SHA512_CTX * c);
extern int                  VARARGS68K _AmiSSL_EC_GROUP_get_asn1_flag(struct AmiSSLIFace *, const EC_GROUP * group);
extern int                  VARARGS68K _AmiSSL_ECDH_get_ex_new_index(struct AmiSSLIFace *, long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func);
extern unsigned char *      VARARGS68K _AmiSSL_EC_GROUP_get0_seed(struct AmiSSLIFace *, const EC_GROUP * x);
extern int                  VARARGS68K _AmiSSL_BN_GF2m_mod_div_arr(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const int * p, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_ECDSA(struct AmiSSLIFace *, ENGINE * e, const ECDSA_METHOD * ecdsa_meth);
extern int                  VARARGS68K _AmiSSL_ECDH_set_method(struct AmiSSLIFace *, EC_KEY * key, const ECDH_METHOD * meth);
extern int                  VARARGS68K _AmiSSL_ECDH_set_ex_data(struct AmiSSLIFace *, EC_KEY * d, int idx, void * arg);
extern const ECDSA_METHOD * VARARGS68K _AmiSSL_ECDSA_OpenSSL(struct AmiSSLIFace *);
extern unsigned             VARARGS68K _AmiSSL_EC_KEY_get_enc_flags(struct AmiSSLIFace *, const EC_KEY * key);
extern void                 VARARGS68K _AmiSSL_ECDSA_set_default_method(struct AmiSSLIFace *, const ECDSA_METHOD * meth);
extern int                  VARARGS68K _AmiSSL_EC_POINT_set_compressed_coordinates_GF2m(struct AmiSSLIFace *, const EC_GROUP * group, EC_POINT * p, const BIGNUM * x, int y_bit, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_EC_GROUP_cmp(struct AmiSSLIFace *, const EC_GROUP * a, const EC_GROUP * b, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_SHA224_Init(struct AmiSSLIFace *, SHA256_CTX * c);
extern int                  VARARGS68K _AmiSSL_SHA512_Init(struct AmiSSLIFace *, SHA512_CTX * c);
extern void                 VARARGS68K _AmiSSL_ERR_load_ECDSA_strings(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_EC_GROUP_get_basis_type(struct AmiSSLIFace *, const EC_GROUP * group);
extern void                 VARARGS68K _AmiSSL_ENGINE_register_all_ECDH(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ENGINE_register_all_ECDSA(struct AmiSSLIFace *);
extern EC_GROUP *           VARARGS68K _AmiSSL_EC_GROUP_dup(struct AmiSSLIFace *, const EC_GROUP * src);
extern ENGINE *             VARARGS68K _AmiSSL_ENGINE_get_default_ECDSA(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_SHA256_Transform(struct AmiSSLIFace *, SHA256_CTX * c, const unsigned char * data);
extern void                 VARARGS68K _AmiSSL_EC_KEY_set_enc_flags(struct AmiSSLIFace *, EC_KEY * eckey, unsigned int flags);
extern char *               VARARGS68K _AmiSSL_EC_POINT_point2hex(struct AmiSSLIFace *, const EC_GROUP * group, const EC_POINT * point, point_conversion_form_t form, BN_CTX * ctx);
extern const STORE_METHOD * VARARGS68K _AmiSSL_ENGINE_get_STORE(struct AmiSSLIFace *, const ENGINE * e);
extern ECDSA_SIG *          VARARGS68K _AmiSSL_ECDSA_do_sign_ex(struct AmiSSLIFace *, const unsigned char * dgst, int dgstlen, const BIGNUM * kinv, const BIGNUM * rp, EC_KEY * eckey);
extern void                 VARARGS68K _AmiSSL_SHA512_Transform(struct AmiSSLIFace *, SHA512_CTX * c, const unsigned char * data);
extern int                  VARARGS68K _AmiSSL_EC_KEY_set_public_key(struct AmiSSLIFace *, EC_KEY * key, const EC_POINT * pub);
extern int                  VARARGS68K _AmiSSL_ENGINE_register_STORE(struct AmiSSLIFace *, ENGINE * e);
extern int                  VARARGS68K _AmiSSL_EC_GROUP_get_curve_name(struct AmiSSLIFace *, const EC_GROUP * group);
extern int                  VARARGS68K _AmiSSL_SHA256_Final(struct AmiSSLIFace *, unsigned char * md, SHA256_CTX * c);
extern const ECDH_METHOD *  VARARGS68K _AmiSSL_ENGINE_get_ECDH(struct AmiSSLIFace *, const ENGINE * e);
extern const ECDSA_METHOD * VARARGS68K _AmiSSL_ENGINE_get_ECDSA(struct AmiSSLIFace *, const ENGINE * e);
extern void                 VARARGS68K _AmiSSL_ERR_load_ECDH_strings(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_ECDSA_set_method(struct AmiSSLIFace *, EC_KEY * eckey, const ECDSA_METHOD * meth);
extern EC_KEY *             VARARGS68K _AmiSSL_d2i_ECParameters(struct AmiSSLIFace *, EC_KEY ** key, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_SHA384_Init(struct AmiSSLIFace *, SHA512_CTX * c);
extern int                  VARARGS68K _AmiSSL_ECDSA_set_ex_data(struct AmiSSLIFace *, EC_KEY * d, int idx, void * arg);
extern int                  VARARGS68K _AmiSSL_SHA384_Final(struct AmiSSLIFace *, unsigned char * md, SHA512_CTX * c);
extern int                  VARARGS68K _AmiSSL_ECDSA_get_ex_new_index(struct AmiSSLIFace *, long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func);
extern unsigned char *      VARARGS68K _AmiSSL_SHA384(struct AmiSSLIFace *, const unsigned char * d, size_t n, unsigned char * md);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_default_ECDH(struct AmiSSLIFace *, ENGINE * e);
extern EC_POINT *           VARARGS68K _AmiSSL_EC_POINT_hex2point(struct AmiSSLIFace *, const EC_GROUP * group, const char * c, EC_POINT * p, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_SHA256_Update(struct AmiSSLIFace *, SHA256_CTX * c, const void * data, size_t len);
extern int                  VARARGS68K _AmiSSL_BN_GF2m_mod_inv_arr(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * b, const int * p, BN_CTX * ctx);
extern void                 VARARGS68K _AmiSSL_ENGINE_unregister_ECDSA(struct AmiSSLIFace *, ENGINE * e);
extern void                 VARARGS68K _AmiSSL_BN_BLINDING_set_thread_id(struct AmiSSLIFace *, BN_BLINDING * b, unsigned long l);
extern int                  VARARGS68K _AmiSSL_DH_check_pub_key(struct AmiSSLIFace *, const DH * dh, const BIGNUM * pub_key, int * codes);
extern void                 VARARGS68K _AmiSSL_Camellia_cbc_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, size_t length, const CAMELLIA_KEY * key, unsigned char * ivec, const int enc);
extern void                 VARARGS68K _AmiSSL_Camellia_cfb128_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, size_t length, const CAMELLIA_KEY * key, unsigned char * ivec, int * num, const int enc);
extern void                 VARARGS68K _AmiSSL_Camellia_cfb1_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, size_t length, const CAMELLIA_KEY * key, unsigned char * ivec, int * num, const int enc);
extern void                 VARARGS68K _AmiSSL_Camellia_cfb8_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, size_t length, const CAMELLIA_KEY * key, unsigned char * ivec, int * num, const int enc);
extern void                 VARARGS68K _AmiSSL_Camellia_ctr128_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, size_t length, const CAMELLIA_KEY * key, unsigned char * ivec, unsigned char * ecount_buf, unsigned int * num);
extern void                 VARARGS68K _AmiSSL_Camellia_decrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, const CAMELLIA_KEY * key);
extern void                 VARARGS68K _AmiSSL_Camellia_ecb_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, const CAMELLIA_KEY * key, const int enc);
extern void                 VARARGS68K _AmiSSL_Camellia_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, const CAMELLIA_KEY * key);
extern void                 VARARGS68K _AmiSSL_Camellia_ofb128_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, size_t length, const CAMELLIA_KEY * key, unsigned char * ivec, int * num);
extern int                  VARARGS68K _AmiSSL_Camellia_set_key(struct AmiSSLIFace *, const unsigned char * userKey, const int bits, CAMELLIA_KEY * key);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_camellia_128_cbc(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_camellia_128_cfb128(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_camellia_128_cfb1(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_camellia_128_cfb8(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_camellia_128_ecb(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_camellia_128_ofb(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_camellia_192_cbc(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_camellia_192_cfb128(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_camellia_192_cfb1(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_camellia_192_cfb8(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_camellia_192_ecb(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_camellia_192_ofb(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_camellia_256_cbc(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_camellia_256_cfb128(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_camellia_256_cfb1(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_camellia_256_cfb8(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_camellia_256_ecb(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_camellia_256_ofb(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_AES_bi_ige_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, size_t length, const AES_KEY * key, const AES_KEY * key2, const unsigned char * ivec, const int enc);
extern void                 VARARGS68K _AmiSSL_SEED_decrypt(struct AmiSSLIFace *, const unsigned char * s, unsigned char * d, const SEED_KEY_SCHEDULE * ks);
extern void                 VARARGS68K _AmiSSL_SEED_encrypt(struct AmiSSLIFace *, const unsigned char * s, unsigned char * d, const SEED_KEY_SCHEDULE * ks);
extern void                 VARARGS68K _AmiSSL_SEED_cbc_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, size_t len, const SEED_KEY_SCHEDULE * ks, unsigned char * ivec, int enc);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_seed_ofb(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_SEED_cfb128_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, size_t len, const SEED_KEY_SCHEDULE * ks, unsigned char * ivec, int * num, int enc);
extern void                 VARARGS68K _AmiSSL_SEED_ofb128_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, size_t len, const SEED_KEY_SCHEDULE * ks, unsigned char * ivec, int * num);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_seed_cbc(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_SEED_ecb_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, const SEED_KEY_SCHEDULE * ks, int enc);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_seed_ecb(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_SEED_set_key(struct AmiSSLIFace *, const unsigned char * rawkey, SEED_KEY_SCHEDULE * ks);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_seed_cfb128(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_AES_unwrap_key(struct AmiSSLIFace *, AES_KEY * key, const unsigned char * iv, unsigned char * out, const unsigned char * in, unsigned int inlen);
extern int                  VARARGS68K _AmiSSL_AES_wrap_key(struct AmiSSLIFace *, AES_KEY * key, const unsigned char * iv, unsigned char * out, const unsigned char * in, unsigned int inlen);
extern void                 VARARGS68K _AmiSSL_CMS_ReceiptRequest_free(struct AmiSSLIFace *, CMS_ReceiptRequest * rr);
extern CMS_CertificateChoices * VARARGS68K _AmiSSL_CMS_add0_CertificateChoices(struct AmiSSLIFace *, CMS_ContentInfo * cms);
extern int                  VARARGS68K _AmiSSL_CMS_unsigned_add1_attr_by_OBJ(struct AmiSSLIFace *, CMS_SignerInfo * si, const ASN1_OBJECT * obj, int type, const void * bytes, int len);
extern void                 VARARGS68K _AmiSSL_ERR_load_CMS_strings(struct AmiSSLIFace *);
extern CMS_ContentInfo *    VARARGS68K _AmiSSL_CMS_sign_receipt(struct AmiSSLIFace *, CMS_SignerInfo * si, X509 * signcert, EVP_PKEY * pkey, STACK_OF(X509) * certs, unsigned int flags);
extern int                  VARARGS68K _AmiSSL_i2d_CMS_ContentInfo(struct AmiSSLIFace *, CMS_ContentInfo * a, unsigned char ** out);
extern X509_ATTRIBUTE *     VARARGS68K _AmiSSL_CMS_signed_delete_attr(struct AmiSSLIFace *, CMS_SignerInfo * si, int loc);
extern CMS_ContentInfo *    VARARGS68K _AmiSSL_d2i_CMS_bio(struct AmiSSLIFace *, BIO * bp, CMS_ContentInfo ** cms);
extern int                  VARARGS68K _AmiSSL_CMS_unsigned_get_attr_by_NID(struct AmiSSLIFace *, const CMS_SignerInfo * si, int nid, int lastpos);
extern int                  VARARGS68K _AmiSSL_CMS_verify(struct AmiSSLIFace *, CMS_ContentInfo * cms, STACK_OF(X509) * certs, X509_STORE * store, BIO * dcont, BIO * out, unsigned int flags);
extern CMS_ContentInfo *    VARARGS68K _AmiSSL_SMIME_read_CMS(struct AmiSSLIFace *, BIO * bio, BIO ** biocont);
extern int                  VARARGS68K _AmiSSL_CMS_decrypt_set1_key(struct AmiSSLIFace *, CMS_ContentInfo * cms, unsigned char * key, size_t keylen, unsigned char * id, size_t idlen);
extern void                 VARARGS68K _AmiSSL_CMS_SignerInfo_get0_algs(struct AmiSSLIFace *, CMS_SignerInfo * si, EVP_PKEY ** pk, X509 ** signer, X509_ALGOR ** pdig, X509_ALGOR ** psig);
extern int                  VARARGS68K _AmiSSL_CMS_add1_cert(struct AmiSSLIFace *, CMS_ContentInfo * cms, X509 * cert);
extern int                  VARARGS68K _AmiSSL_CMS_set_detached(struct AmiSSLIFace *, CMS_ContentInfo * cms, int detached);
extern CMS_ContentInfo *    VARARGS68K _AmiSSL_CMS_encrypt(struct AmiSSLIFace *, STACK_OF(X509) * certs, BIO * in, const EVP_CIPHER * cipher, unsigned int flags);
extern CMS_ContentInfo *    VARARGS68K _AmiSSL_CMS_EnvelopedData_create(struct AmiSSLIFace *, const EVP_CIPHER * cipher);
extern int                  VARARGS68K _AmiSSL_CMS_uncompress(struct AmiSSLIFace *, CMS_ContentInfo * cms, BIO * dcont, BIO * out, unsigned int flags);
extern int                  VARARGS68K _AmiSSL_CMS_add0_crl(struct AmiSSLIFace *, CMS_ContentInfo * cms, X509_CRL * crl);
extern int                  VARARGS68K _AmiSSL_CMS_SignerInfo_verify_content(struct AmiSSLIFace *, CMS_SignerInfo * si, BIO * chain);
extern void *               VARARGS68K _AmiSSL_CMS_unsigned_get0_data_by_OBJ(struct AmiSSLIFace *, CMS_SignerInfo * si, ASN1_OBJECT * oid, int lastpos, int type);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_CMS(struct AmiSSLIFace *, BIO * out, CMS_ContentInfo * cms);
extern X509_ATTRIBUTE *     VARARGS68K _AmiSSL_CMS_unsigned_get_attr(struct AmiSSLIFace *, const CMS_SignerInfo * si, int loc);
extern int                  VARARGS68K _AmiSSL_CMS_RecipientInfo_ktri_cert_cmp(struct AmiSSLIFace *, CMS_RecipientInfo * ri, X509 * cert);
extern int                  VARARGS68K _AmiSSL_CMS_RecipientInfo_ktri_get0_algs(struct AmiSSLIFace *, CMS_RecipientInfo * ri, EVP_PKEY ** pk, X509 ** recip, X509_ALGOR ** palg);
extern void                 VARARGS68K _AmiSSL_CMS_ContentInfo_free(struct AmiSSLIFace *, CMS_ContentInfo * cms);
extern int                  VARARGS68K _AmiSSL_CMS_final(struct AmiSSLIFace *, CMS_ContentInfo * cms, BIO * data, BIO * dcont, unsigned int flags);
extern int                  VARARGS68K _AmiSSL_CMS_add_simple_smimecap(struct AmiSSLIFace *, STACK_OF(X509_ALGOR) ** algs, int algnid, int keysize);
extern int                  VARARGS68K _AmiSSL_CMS_SignerInfo_verify(struct AmiSSLIFace *, CMS_SignerInfo * si);
extern int                  VARARGS68K _AmiSSL_CMS_data(struct AmiSSLIFace *, CMS_ContentInfo * cms, BIO * out, unsigned int flags);
extern CMS_ReceiptRequest * VARARGS68K _AmiSSL_d2i_CMS_ReceiptRequest(struct AmiSSLIFace *, CMS_ReceiptRequest ** a, unsigned char const ** in, long len);
extern CMS_ContentInfo *    VARARGS68K _AmiSSL_CMS_compress(struct AmiSSLIFace *, BIO * in, int comp_nid, unsigned int flags);
extern CMS_ContentInfo *    VARARGS68K _AmiSSL_CMS_digest_create(struct AmiSSLIFace *, BIO * in, const EVP_MD * md, unsigned int flags);
extern int                  VARARGS68K _AmiSSL_CMS_SignerInfo_cert_cmp(struct AmiSSLIFace *, CMS_SignerInfo * si, X509 * cert);
extern int                  VARARGS68K _AmiSSL_CMS_SignerInfo_sign(struct AmiSSLIFace *, CMS_SignerInfo * si);
extern CMS_ContentInfo *    VARARGS68K _AmiSSL_CMS_data_create(struct AmiSSLIFace *, BIO * in, unsigned int flags);
extern int                  VARARGS68K _AmiSSL_i2d_CMS_bio(struct AmiSSLIFace *, BIO * bp, CMS_ContentInfo * cms);
extern int                  VARARGS68K _AmiSSL_CMS_EncryptedData_set1_key(struct AmiSSLIFace *, CMS_ContentInfo * cms, const EVP_CIPHER * ciph, const unsigned char * key, size_t keylen);
extern int                  VARARGS68K _AmiSSL_CMS_decrypt(struct AmiSSLIFace *, CMS_ContentInfo * cms, EVP_PKEY * pkey, X509 * cert, BIO * dcont, BIO * out, unsigned int flags);
extern X509_ATTRIBUTE *     VARARGS68K _AmiSSL_CMS_unsigned_delete_attr(struct AmiSSLIFace *, CMS_SignerInfo * si, int loc);
extern int                  VARARGS68K _AmiSSL_CMS_unsigned_get_attr_count(struct AmiSSLIFace *, const CMS_SignerInfo * si);
extern int                  VARARGS68K _AmiSSL_CMS_add_smimecap(struct AmiSSLIFace *, CMS_SignerInfo * si, STACK_OF(X509_ALGOR) * algs);
extern int                  VARARGS68K _AmiSSL_CMS_signed_get_attr_by_OBJ(struct AmiSSLIFace *, const CMS_SignerInfo * si, ASN1_OBJECT * obj, int lastpos);
extern CMS_ContentInfo *    VARARGS68K _AmiSSL_d2i_CMS_ContentInfo(struct AmiSSLIFace *, CMS_ContentInfo ** a, unsigned char const ** in, long len);
extern int                  VARARGS68K _AmiSSL_CMS_add_standard_smimecap(struct AmiSSLIFace *, STACK_OF(X509_ALGOR) ** smcap);
extern CMS_ContentInfo *    VARARGS68K _AmiSSL_CMS_ContentInfo_new(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_CMS_RecipientInfo_type(struct AmiSSLIFace *, CMS_RecipientInfo * ri);
extern const ASN1_OBJECT *  VARARGS68K _AmiSSL_CMS_get0_type(struct AmiSSLIFace *, CMS_ContentInfo * cms);
extern int                  VARARGS68K _AmiSSL_CMS_is_detached(struct AmiSSLIFace *, CMS_ContentInfo * cms);
extern CMS_ContentInfo *    VARARGS68K _AmiSSL_CMS_sign(struct AmiSSLIFace *, X509 * signcert, EVP_PKEY * pkey, STACK_OF(X509) * certs, BIO * data, unsigned int flags);
extern int                  VARARGS68K _AmiSSL_CMS_signed_add1_attr(struct AmiSSLIFace *, CMS_SignerInfo * si, X509_ATTRIBUTE * attr);
extern int                  VARARGS68K _AmiSSL_CMS_unsigned_get_attr_by_OBJ(struct AmiSSLIFace *, const CMS_SignerInfo * si, ASN1_OBJECT * obj, int lastpos);
extern int                  VARARGS68K _AmiSSL_SMIME_write_CMS(struct AmiSSLIFace *, BIO * bio, CMS_ContentInfo * cms, BIO * data, int flags);
extern int                  VARARGS68K _AmiSSL_CMS_EncryptedData_decrypt(struct AmiSSLIFace *, CMS_ContentInfo * cms, const unsigned char * key, size_t keylen, BIO * dcont, BIO * out, unsigned int flags);
extern STACK_OF(CMS_RecipientInfo) * VARARGS68K _AmiSSL_CMS_get0_RecipientInfos(struct AmiSSLIFace *, CMS_ContentInfo * cms);
extern CMS_RevocationInfoChoice * VARARGS68K _AmiSSL_CMS_add0_RevocationInfoChoice(struct AmiSSLIFace *, CMS_ContentInfo * cms);
extern int                  VARARGS68K _AmiSSL_CMS_decrypt_set1_pkey(struct AmiSSLIFace *, CMS_ContentInfo * cms, EVP_PKEY * pk, X509 * cert);
extern void                 VARARGS68K _AmiSSL_CMS_SignerInfo_set1_signer_cert(struct AmiSSLIFace *, CMS_SignerInfo * si, X509 * signer);
extern STACK_OF(X509) *     VARARGS68K _AmiSSL_CMS_get0_signers(struct AmiSSLIFace *, CMS_ContentInfo * cms);
extern void                 VARARGS68K _AmiSSL_CMS_ReceiptRequest_get0_values(struct AmiSSLIFace *, CMS_ReceiptRequest * rr, ASN1_STRING ** pcid, int * pallorfirst, STACK_OF(GENERAL_NAMES) ** plist, STACK_OF(GENERAL_NAMES) ** prto);
extern void *               VARARGS68K _AmiSSL_CMS_signed_get0_data_by_OBJ(struct AmiSSLIFace *, CMS_SignerInfo * si, ASN1_OBJECT * oid, int lastpos, int type);
extern STACK_OF(CMS_SignerInfo) * VARARGS68K _AmiSSL_CMS_get0_SignerInfos(struct AmiSSLIFace *, CMS_ContentInfo * cms);
extern int                  VARARGS68K _AmiSSL_CMS_add0_cert(struct AmiSSLIFace *, CMS_ContentInfo * cms, X509 * cert);
extern CMS_ContentInfo *    VARARGS68K _AmiSSL_CMS_EncryptedData_encrypt(struct AmiSSLIFace *, BIO * in, const EVP_CIPHER * cipher, const unsigned char * key, size_t keylen, unsigned int flags);
extern int                  VARARGS68K _AmiSSL_CMS_digest_verify(struct AmiSSLIFace *, CMS_ContentInfo * cms, BIO * dcont, BIO * out, unsigned int flags);
extern int                  VARARGS68K _AmiSSL_CMS_set1_signers_certs(struct AmiSSLIFace *, CMS_ContentInfo * cms, STACK_OF(X509) * certs, unsigned int flags);
extern X509_ATTRIBUTE *     VARARGS68K _AmiSSL_CMS_signed_get_attr(struct AmiSSLIFace *, const CMS_SignerInfo * si, int loc);
extern int                  VARARGS68K _AmiSSL_CMS_RecipientInfo_set0_key(struct AmiSSLIFace *, CMS_RecipientInfo * ri, unsigned char * key, size_t keylen);
extern int                  VARARGS68K _AmiSSL_CMS_SignedData_init(struct AmiSSLIFace *, CMS_ContentInfo * cms);
extern int                  VARARGS68K _AmiSSL_CMS_RecipientInfo_kekri_get0_id(struct AmiSSLIFace *, CMS_RecipientInfo * ri, X509_ALGOR ** palg, ASN1_OCTET_STRING ** pid, ASN1_GENERALIZEDTIME ** pdate, ASN1_OBJECT ** potherid, ASN1_TYPE ** pothertype);
extern int                  VARARGS68K _AmiSSL_CMS_verify_receipt(struct AmiSSLIFace *, CMS_ContentInfo * rcms, CMS_ContentInfo * ocms, STACK_OF(X509) * certs, X509_STORE * store, unsigned int flags);
extern CMS_ContentInfo *    VARARGS68K _AmiSSL_PEM_read_bio_CMS(struct AmiSSLIFace *, BIO * bp, CMS_ContentInfo ** x, pem_password_cb * cb, void * u);
extern STACK_OF(X509_CRL) * VARARGS68K _AmiSSL_CMS_get1_crls(struct AmiSSLIFace *, CMS_ContentInfo * cms);
extern CMS_RecipientInfo *  VARARGS68K _AmiSSL_CMS_add0_recipient_key(struct AmiSSLIFace *, CMS_ContentInfo * cms, int nid, unsigned char * key, size_t keylen, unsigned char * id, size_t idlen, ASN1_GENERALIZEDTIME * date, ASN1_OBJECT * otherTypeId, ASN1_TYPE * otherType);
extern CMS_ReceiptRequest * VARARGS68K _AmiSSL_CMS_ReceiptRequest_new(struct AmiSSLIFace *);
extern ASN1_OCTET_STRING ** VARARGS68K _AmiSSL_CMS_get0_content(struct AmiSSLIFace *, CMS_ContentInfo * cms);
extern int                  VARARGS68K _AmiSSL_CMS_get1_ReceiptRequest(struct AmiSSLIFace *, CMS_SignerInfo * si, CMS_ReceiptRequest ** prr);
extern int                  VARARGS68K _AmiSSL_CMS_signed_add1_attr_by_OBJ(struct AmiSSLIFace *, CMS_SignerInfo * si, const ASN1_OBJECT * obj, int type, const void * bytes, int len);
extern int                  VARARGS68K _AmiSSL_CMS_RecipientInfo_kekri_id_cmp(struct AmiSSLIFace *, CMS_RecipientInfo * ri, const unsigned char * id, size_t idlen);
extern int                  VARARGS68K _AmiSSL_CMS_add1_ReceiptRequest(struct AmiSSLIFace *, CMS_SignerInfo * si, CMS_ReceiptRequest * rr);
extern int                  VARARGS68K _AmiSSL_CMS_SignerInfo_get0_signer_id(struct AmiSSLIFace *, CMS_SignerInfo * si, ASN1_OCTET_STRING ** keyid, X509_NAME ** issuer, ASN1_INTEGER ** sno);
extern int                  VARARGS68K _AmiSSL_CMS_unsigned_add1_attr_by_NID(struct AmiSSLIFace *, CMS_SignerInfo * si, int nid, int type, const void * bytes, int len);
extern int                  VARARGS68K _AmiSSL_CMS_unsigned_add1_attr(struct AmiSSLIFace *, CMS_SignerInfo * si, X509_ATTRIBUTE * attr);
extern int                  VARARGS68K _AmiSSL_CMS_signed_get_attr_by_NID(struct AmiSSLIFace *, const CMS_SignerInfo * si, int nid, int lastpos);
extern STACK_OF(X509) *     VARARGS68K _AmiSSL_CMS_get1_certs(struct AmiSSLIFace *, CMS_ContentInfo * cms);
extern int                  VARARGS68K _AmiSSL_CMS_signed_add1_attr_by_NID(struct AmiSSLIFace *, CMS_SignerInfo * si, int nid, int type, const void * bytes, int len);
extern int                  VARARGS68K _AmiSSL_CMS_unsigned_add1_attr_by_txt(struct AmiSSLIFace *, CMS_SignerInfo * si, const char * attrname, int type, const void * bytes, int len);
extern int                  VARARGS68K _AmiSSL_CMS_dataFinal(struct AmiSSLIFace *, CMS_ContentInfo * cms, BIO * bio);
extern int                  VARARGS68K _AmiSSL_CMS_RecipientInfo_ktri_get0_signer_id(struct AmiSSLIFace *, CMS_RecipientInfo * ri, ASN1_OCTET_STRING ** keyid, X509_NAME ** issuer, ASN1_INTEGER ** sno);
extern int                  VARARGS68K _AmiSSL_i2d_CMS_ReceiptRequest(struct AmiSSLIFace *, CMS_ReceiptRequest * a, unsigned char ** out);
extern CMS_RecipientInfo *  VARARGS68K _AmiSSL_CMS_add1_recipient_cert(struct AmiSSLIFace *, CMS_ContentInfo * cms, X509 * recip, unsigned int flags);
extern BIO *                VARARGS68K _AmiSSL_CMS_dataInit(struct AmiSSLIFace *, CMS_ContentInfo * cms, BIO * icont);
extern int                  VARARGS68K _AmiSSL_CMS_signed_add1_attr_by_txt(struct AmiSSLIFace *, CMS_SignerInfo * si, const char * attrname, int type, const void * bytes, int len);
extern int                  VARARGS68K _AmiSSL_CMS_RecipientInfo_decrypt(struct AmiSSLIFace *, CMS_ContentInfo * cms, CMS_RecipientInfo * ri);
extern int                  VARARGS68K _AmiSSL_CMS_signed_get_attr_count(struct AmiSSLIFace *, const CMS_SignerInfo * si);
extern const ASN1_OBJECT *  VARARGS68K _AmiSSL_CMS_get0_eContentType(struct AmiSSLIFace *, CMS_ContentInfo * cms);
extern int                  VARARGS68K _AmiSSL_CMS_set1_eContentType(struct AmiSSLIFace *, CMS_ContentInfo * cms, const ASN1_OBJECT * oid);
extern CMS_ReceiptRequest * VARARGS68K _AmiSSL_CMS_ReceiptRequest_create0(struct AmiSSLIFace *, unsigned char * id, int idlen, int allorfirst, STACK_OF(GENERAL_NAMES) * receiptList, STACK_OF(GENERAL_NAMES) * receiptsTo);
extern CMS_SignerInfo *     VARARGS68K _AmiSSL_CMS_add1_signer(struct AmiSSLIFace *, CMS_ContentInfo * cms, X509 * signer, EVP_PKEY * pk, const EVP_MD * md, unsigned int flags);
extern int                  VARARGS68K _AmiSSL_CMS_RecipientInfo_set0_pkey(struct AmiSSLIFace *, CMS_RecipientInfo * ri, EVP_PKEY * pkey);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_load_ssl_client_cert_function(struct AmiSSLIFace *, ENGINE * e, ENGINE_SSL_CLIENT_CERT_PTR loadssl_f);
extern ENGINE_SSL_CLIENT_CERT_PTR VARARGS68K _AmiSSL_ENGINE_get_ssl_client_cert_function(struct AmiSSLIFace *, const ENGINE * e);
extern int                  VARARGS68K _AmiSSL_ENGINE_load_ssl_client_cert(struct AmiSSLIFace *, ENGINE * e, SSL * s, STACK_OF(X509_NAME) * ca_dn, X509 ** pcert, EVP_PKEY ** ppkey, STACK_OF(X509) ** pother, UI_METHOD * ui_method, void * callback_data);
extern void                 VARARGS68K _AmiSSL_ENGINE_load_capi(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_ENGINE_register_pkey_meths(struct AmiSSLIFace *, ENGINE * e);
extern ENGINE *             VARARGS68K _AmiSSL_ENGINE_get_pkey_asn1_meth_engine(struct AmiSSLIFace *, int nid);
extern int                  VARARGS68K _AmiSSL_WHIRLPOOL_Init(struct AmiSSLIFace *, WHIRLPOOL_CTX * c);
extern unsigned char *      VARARGS68K _AmiSSL_WHIRLPOOL(struct AmiSSLIFace *, const void * inp, size_t bytes, unsigned char * md);
extern const EVP_PKEY_ASN1_METHOD * VARARGS68K _AmiSSL_ENGINE_get_pkey_asn1_meth(struct AmiSSLIFace *, ENGINE * e, int nid);
extern const EVP_PKEY_METHOD * VARARGS68K _AmiSSL_ENGINE_get_pkey_meth(struct AmiSSLIFace *, ENGINE * e, int nid);
extern BIO *                VARARGS68K _AmiSSL_BIO_new_CMS(struct AmiSSLIFace *, BIO * out, CMS_ContentInfo * cms);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_default_pkey_asn1_meths(struct AmiSSLIFace *, ENGINE * e);
extern void                 VARARGS68K _AmiSSL_WHIRLPOOL_BitUpdate(struct AmiSSLIFace *, WHIRLPOOL_CTX * ctx, const void * inp, size_t bits);
extern int                  VARARGS68K _AmiSSL_i2d_CMS_bio_stream(struct AmiSSLIFace *, BIO * out, CMS_ContentInfo * cms, BIO * in, int flags);
extern int                  VARARGS68K _AmiSSL_CMS_stream(struct AmiSSLIFace *, unsigned char *** boundary, CMS_ContentInfo * cms);
extern const EVP_PKEY_ASN1_METHOD * VARARGS68K _AmiSSL_ENGINE_pkey_asn1_find_str(struct AmiSSLIFace *, ENGINE ** pe, const char * str, int len);
extern ENGINE_PKEY_METHS_PTR VARARGS68K _AmiSSL_ENGINE_get_pkey_meths(struct AmiSSLIFace *, const ENGINE * e);
extern int                  VARARGS68K _AmiSSL_ENGINE_register_pkey_asn1_meths(struct AmiSSLIFace *, ENGINE * e);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_default_pkey_meths(struct AmiSSLIFace *, ENGINE * e);
extern int                  VARARGS68K _AmiSSL_HMAC_CTX_copy(struct AmiSSLIFace *, HMAC_CTX * dctx, HMAC_CTX * sctx);
extern ENGINE_PKEY_ASN1_METHS_PTR VARARGS68K _AmiSSL_ENGINE_get_pkey_asn1_meths(struct AmiSSLIFace *, const ENGINE * e);
extern const EVP_MD *       VARARGS68K _AmiSSL_EVP_whirlpool(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ENGINE_register_all_pkey_meths(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_WHIRLPOOL_Final(struct AmiSSLIFace *, unsigned char * md, WHIRLPOOL_CTX * c);
extern const EVP_PKEY_ASN1_METHOD * VARARGS68K _AmiSSL_ENGINE_get_pkey_asn1_meth_str(struct AmiSSLIFace *, ENGINE * e, const char * str, int len);
extern void                 VARARGS68K _AmiSSL_ENGINE_register_all_pkey_asn1_meths(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_CMS_ContentInfo_print_ctx(struct AmiSSLIFace *, BIO * out, CMS_ContentInfo * cms, int a, void * p);
extern int                  VARARGS68K _AmiSSL_CMS_add1_crl(struct AmiSSLIFace *, CMS_ContentInfo * cms, X509_CRL * crl);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_pkey_asn1_meths(struct AmiSSLIFace *, ENGINE * e, ENGINE_PKEY_ASN1_METHS_PTR f);
extern ENGINE *             VARARGS68K _AmiSSL_ENGINE_get_pkey_meth_engine(struct AmiSSLIFace *, int nid);
extern int                  VARARGS68K _AmiSSL_WHIRLPOOL_Update(struct AmiSSLIFace *, WHIRLPOOL_CTX * c, const void * inp, size_t bytes);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_CMS_stream(struct AmiSSLIFace *, BIO * out, CMS_ContentInfo * cms, BIO * in, int flags);
extern void                 VARARGS68K _AmiSSL_ENGINE_unregister_pkey_meths(struct AmiSSLIFace *, ENGINE * e);
extern void                 VARARGS68K _AmiSSL_ENGINE_unregister_pkey_asn1_meths(struct AmiSSLIFace *, ENGINE * e);
extern int                  VARARGS68K _AmiSSL_ENGINE_set_pkey_meths(struct AmiSSLIFace *, ENGINE * e, ENGINE_PKEY_METHS_PTR f);
extern DSA *                VARARGS68K _AmiSSL_DSAparams_dup(struct AmiSSLIFace *, DSA * x);
extern DH *                 VARARGS68K _AmiSSL_DHparams_dup(struct AmiSSLIFace *, DH * d);
extern unsigned long        VARARGS68K _AmiSSL_X509_issuer_name_hash_old(struct AmiSSLIFace *, X509 * a);
extern unsigned long        VARARGS68K _AmiSSL_X509_subject_name_hash_old(struct AmiSSLIFace *, X509 * x);
extern SRP_user_pwd *       VARARGS68K _AmiSSL_SRP_VBASE_get_by_user(struct AmiSSLIFace *, SRP_VBASE * vb, char * username);
extern BIGNUM *             VARARGS68K _AmiSSL_SRP_Calc_server_key(struct AmiSSLIFace *, BIGNUM * A, BIGNUM * v, BIGNUM * u, BIGNUM * b, BIGNUM * N);
extern char *               VARARGS68K _AmiSSL_SRP_create_verifier(struct AmiSSLIFace *, const char * user, const char * pass, char ** salt, char ** verifier, const char * N, const char * g);
extern int                  VARARGS68K _AmiSSL_SRP_create_verifier_BN(struct AmiSSLIFace *, const char * user, const char * pass, BIGNUM ** salt, BIGNUM ** verifier, BIGNUM * N, BIGNUM * g);
extern BIGNUM *             VARARGS68K _AmiSSL_SRP_Calc_u(struct AmiSSLIFace *, BIGNUM * A, BIGNUM * B, BIGNUM * N);
extern int                  VARARGS68K _AmiSSL_SRP_VBASE_free(struct AmiSSLIFace *, SRP_VBASE * vb);
extern BIGNUM *             VARARGS68K _AmiSSL_SRP_Calc_client_key(struct AmiSSLIFace *, BIGNUM * N, BIGNUM * B, BIGNUM * g, BIGNUM * x, BIGNUM * a, BIGNUM * u);
extern SRP_gN *             VARARGS68K _AmiSSL_SRP_get_default_gN(struct AmiSSLIFace *, const char * id);
extern BIGNUM *             VARARGS68K _AmiSSL_SRP_Calc_x(struct AmiSSLIFace *, BIGNUM * s, const char * user, const char * pass);
extern BIGNUM *             VARARGS68K _AmiSSL_SRP_Calc_B(struct AmiSSLIFace *, BIGNUM * b, BIGNUM * N, BIGNUM * g, BIGNUM * v);
extern SRP_VBASE *          VARARGS68K _AmiSSL_SRP_VBASE_new(struct AmiSSLIFace *, char * seed_key);
extern char *               VARARGS68K _AmiSSL_SRP_check_known_gN_param(struct AmiSSLIFace *, BIGNUM * g, BIGNUM * N);
extern BIGNUM *             VARARGS68K _AmiSSL_SRP_Calc_A(struct AmiSSLIFace *, BIGNUM * a, BIGNUM * N, BIGNUM * g);
extern int                  VARARGS68K _AmiSSL_SRP_Verify_A_mod_N(struct AmiSSLIFace *, BIGNUM * A, BIGNUM * N);
extern int                  VARARGS68K _AmiSSL_SRP_VBASE_init(struct AmiSSLIFace *, SRP_VBASE * vb, char * verifier_file);
extern int                  VARARGS68K _AmiSSL_SRP_Verify_B_mod_N(struct AmiSSLIFace *, BIGNUM * B, BIGNUM * N);
extern int                  VARARGS68K _AmiSSL_EC_KEY_set_public_key_affine_coordinates(struct AmiSSLIFace *, EC_KEY * key, BIGNUM * x, BIGNUM * y);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_192_ctr(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_128_ctr(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_256_ctr(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_EC_KEY_get_flags(struct AmiSSLIFace *, const EC_KEY * key);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_128_xts(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_private_AES_set_decrypt_key(struct AmiSSLIFace *, const unsigned char * userKey, const int bits, AES_KEY * key);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_256_xts(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_128_gcm(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_EC_KEY_clear_flags(struct AmiSSLIFace *, EC_KEY * key, int flags);
extern void                 VARARGS68K _AmiSSL_EC_KEY_set_flags(struct AmiSSLIFace *, EC_KEY * key, int flags);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_256_ccm(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_private_AES_set_encrypt_key(struct AmiSSLIFace *, const unsigned char * userKey, const int bits, AES_KEY * key);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_128_ccm(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_192_gcm(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_256_gcm(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_192_ccm(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_rc4_hmac_md5(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_128_cbc_hmac_sha1(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ENGINE_load_rdrand(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ENGINE_load_rsax(struct AmiSSLIFace *);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_aes_256_cbc_hmac_sha1(struct AmiSSLIFace *);
extern CMS_RecipientInfo *  VARARGS68K _AmiSSL_CMS_add0_recipient_password(struct AmiSSLIFace *, CMS_ContentInfo * cms, int iter, int wrap_nid, int pbe_nid, unsigned char * pass, ossl_ssize_t passlen, const EVP_CIPHER * kekciph);
extern int                  VARARGS68K _AmiSSL_CMS_decrypt_set1_password(struct AmiSSLIFace *, CMS_ContentInfo * cms, unsigned char * pass, ossl_ssize_t passlen);
extern int                  VARARGS68K _AmiSSL_CMS_RecipientInfo_set0_password(struct AmiSSLIFace *, CMS_RecipientInfo * ri, unsigned char * pass, ossl_ssize_t passlen);
extern int                  VARARGS68K _AmiSSL_X509_REQ_sign_ctx(struct AmiSSLIFace *, X509_REQ * x, EVP_MD_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_X509_CRL_sign_ctx(struct AmiSSLIFace *, X509_CRL * x, EVP_MD_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_X509_signature_dump(struct AmiSSLIFace *, BIO * bp, const ASN1_STRING * sig, int indent);
extern int                  VARARGS68K _AmiSSL_X509_sign_ctx(struct AmiSSLIFace *, X509 * x, EVP_MD_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_ASN1_item_sign_ctx(struct AmiSSLIFace *, const ASN1_ITEM * it, X509_ALGOR * algor1, X509_ALGOR * algor2, ASN1_BIT_STRING * signature, void * asn, EVP_MD_CTX * ctx);
extern void                 VARARGS68K _AmiSSL_OPENSSL_cpuid_setup(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ERR_remove_thread_state(struct AmiSSLIFace *, const CRYPTO_THREADID * id);
extern void                 VARARGS68K _AmiSSL_X509_STORE_CTX_set0_crls(struct AmiSSLIFace *, X509_STORE_CTX * ctx, STACK_OF(X509_CRL) * sk);
extern const unsigned char * VARARGS68K _AmiSSL_SSL_SESSION_get_id(struct AmiSSLIFace *, const SSL_SESSION * s, unsigned int * len);
extern void                 VARARGS68K _AmiSSL_SSL_CTX_sess_set_new_cb(struct AmiSSLIFace *, SSL_CTX * ctx, int (*new_session_cb)(struct ssl_st *ssl, SSL_SESSION *sess));
extern SSL_SESSION *        VARARGS68K (*_AmiSSL_SSL_CTX_sess_get_get_cb(struct AmiSSLIFace *, SSL_CTX * ctx))(struct ssl_st *ssl, unsigned char *Data, int len, int *copy);
extern void                 VARARGS68K _AmiSSL_SSL_CTX_sess_set_get_cb(struct AmiSSLIFace *, SSL_CTX * ctx, SSL_SESSION *(*get_session_cb)(struct ssl_st *ssl, unsigned char *data,int len,int *copy));
extern void                 VARARGS68K (*_AmiSSL_SSL_CTX_get_info_callback(struct AmiSSLIFace *, SSL_CTX * ctx))(const SSL *ssl,int type,int val);
extern void                 VARARGS68K _AmiSSL_SSL_CTX_set_client_cert_cb(struct AmiSSLIFace *, SSL_CTX * ctx, int (*client_cert_cb)(SSL *ssl, X509 **x509, EVP_PKEY **pkey));
extern void                 VARARGS68K _AmiSSL_SSL_CTX_sess_set_remove_cb(struct AmiSSLIFace *, SSL_CTX * ctx, void (*remove_session_cb)(struct ssl_ctx_st *ctx,SSL_SESSION *sess));
extern int                  VARARGS68K (*_AmiSSL_SSL_CTX_sess_get_new_cb(struct AmiSSLIFace *, SSL_CTX * ctx))(struct ssl_st *ssl, SSL_SESSION *sess);
extern int                  VARARGS68K (*_AmiSSL_SSL_CTX_get_client_cert_cb(struct AmiSSLIFace *, SSL_CTX * ctx))(SSL *ssl, X509 **x509, EVP_PKEY **pkey);
extern void                 VARARGS68K (*_AmiSSL_SSL_CTX_sess_get_remove_cb(struct AmiSSLIFace *, SSL_CTX * ctx))(struct ssl_ctx_st *ctx, SSL_SESSION *sess);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_SSL_SESSION(struct AmiSSLIFace *, BIO * bp, SSL_SESSION * x);
extern SSL_SESSION *        VARARGS68K _AmiSSL_PEM_read_bio_SSL_SESSION(struct AmiSSLIFace *, BIO * bp, SSL_SESSION ** x, pem_password_cb * cb, void * u);
extern int                  VARARGS68K _AmiSSL_FIPS_mode_set(struct AmiSSLIFace *, int r);
extern int                  VARARGS68K _AmiSSL_BN_X931_generate_Xpq(struct AmiSSLIFace *, BIGNUM * Xp, BIGNUM * Xq, int nbits, BN_CTX * ctx);
extern const BIGNUM *       VARARGS68K _AmiSSL_BN_get0_nist_prime_384(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_ERR_set_mark(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_BN_BLINDING_invert_ex(struct AmiSSLIFace *, BIGNUM * n, const BIGNUM * r, BN_BLINDING * b, BN_CTX * ctx);
extern void                 VARARGS68K _AmiSSL_NAME_CONSTRAINTS_free(struct AmiSSLIFace *, NAME_CONSTRAINTS * ncons);
extern void                 VARARGS68K _AmiSSL_X509_STORE_CTX_set0_param(struct AmiSSLIFace *, X509_STORE_CTX * ctx, X509_VERIFY_PARAM * param);
extern void                 VARARGS68K _AmiSSL_POLICY_CONSTRAINTS_free(struct AmiSSLIFace *, POLICY_CONSTRAINTS * pcons);
extern int                  VARARGS68K _AmiSSL_BN_nist_mod_192(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx);
extern void                 VARARGS68K _AmiSSL_GENERAL_SUBTREE_free(struct AmiSSLIFace *, GENERAL_SUBTREE * sub);
extern int                  VARARGS68K _AmiSSL_PKCS12_add_safe(struct AmiSSLIFace *, STACK_OF(PKCS7) ** psafes, STACK_OF(PKCS12_SAFEBAG) * bags, int safe_nid, int iter, char * pass);
extern const BIGNUM *       VARARGS68K _AmiSSL_BN_get0_nist_prime_192(struct AmiSSLIFace *);
extern unsigned char *      VARARGS68K _AmiSSL_X509_keyid_get0(struct AmiSSLIFace *, X509 * x, int * len);
extern pitem *              VARARGS68K _AmiSSL_pitem_new(struct AmiSSLIFace *, unsigned char * prio64be, void * data);
extern const X509_POLICY_NODE * VARARGS68K _AmiSSL_X509_policy_node_get0_parent(struct AmiSSLIFace *, const X509_POLICY_NODE * node);
extern ASN1_OCTET_STRING *  VARARGS68K _AmiSSL_a2i_IPADDRESS(struct AmiSSLIFace *, const char * ipasc);
extern void                 VARARGS68K _AmiSSL_X509_STORE_CTX_set_depth(struct AmiSSLIFace *, X509_STORE_CTX * ctx, int depth);
extern int                  VARARGS68K _AmiSSL_X509_VERIFY_PARAM_inherit(struct AmiSSLIFace *, X509_VERIFY_PARAM * to, const X509_VERIFY_PARAM * from);
extern pitem *              VARARGS68K _AmiSSL_pqueue_iterator(struct AmiSSLIFace *, pqueue pq);
extern void                 VARARGS68K _AmiSSL_X509_VERIFY_PARAM_set_depth(struct AmiSSLIFace *, X509_VERIFY_PARAM * param, int depth);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_add1_attr_by_txt(struct AmiSSLIFace *, EVP_PKEY * key, const char * attrname, int type, const unsigned char * bytes, int len);
extern void                 VARARGS68K _AmiSSL_BN_BLINDING_set_flags(struct AmiSSLIFace *, BN_BLINDING * b, unsigned long l);
extern int                  VARARGS68K _AmiSSL_X509_VERIFY_PARAM_set1_policies(struct AmiSSLIFace *, X509_VERIFY_PARAM * param, STACK_OF(ASN1_OBJECT) * policies);
extern int                  VARARGS68K _AmiSSL_X509_VERIFY_PARAM_set1_name(struct AmiSSLIFace *, X509_VERIFY_PARAM * param, const char * name);
extern void                 VARARGS68K _AmiSSL_POLICY_MAPPING_free(struct AmiSSLIFace *, POLICY_MAPPING * pmap);
extern void                 VARARGS68K _AmiSSL_pqueue_print(struct AmiSSLIFace *, pqueue pq);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_X509_CERT_PAIR(struct AmiSSLIFace *, BIO * bp, X509_CERT_PAIR * x);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_cmp(struct AmiSSLIFace *, const EVP_PKEY * a, const EVP_PKEY * b);
extern int                  VARARGS68K _AmiSSL_X509_policy_level_node_count(struct AmiSSLIFace *, X509_POLICY_LEVEL * level);
extern X509_ATTRIBUTE *     VARARGS68K _AmiSSL_EVP_PKEY_get_attr(struct AmiSSLIFace *, const EVP_PKEY * key, int loc);
extern GENERAL_SUBTREE *    VARARGS68K _AmiSSL_GENERAL_SUBTREE_new(struct AmiSSLIFace *);
extern STACK_OF(POLICYQUALINFO) * VARARGS68K _AmiSSL_X509_policy_node_get0_qualifiers(struct AmiSSLIFace *, const X509_POLICY_NODE * node);
extern pitem *              VARARGS68K _AmiSSL_pqueue_find(struct AmiSSLIFace *, pqueue pq, unsigned char * prio64be);
extern pitem *              VARARGS68K _AmiSSL_pqueue_peek(struct AmiSSLIFace *, pqueue pq);
extern const ASN1_OBJECT *  VARARGS68K _AmiSSL_X509_policy_node_get0_policy(struct AmiSSLIFace *, const X509_POLICY_NODE * node);
extern PKCS12 *             VARARGS68K _AmiSSL_PKCS12_add_safes(struct AmiSSLIFace *, STACK_OF(PKCS7) * safes, int p7_nid);
extern int                  VARARGS68K _AmiSSL_BN_BLINDING_convert_ex(struct AmiSSLIFace *, BIGNUM * n, BIGNUM * r, BN_BLINDING * b, BN_CTX * ctx);
extern void                 VARARGS68K _AmiSSL_X509_policy_tree_free(struct AmiSSLIFace *, X509_POLICY_TREE * tree);
extern unsigned long *      VARARGS68K _AmiSSL_OPENSSL_ia32cap_loc(struct AmiSSLIFace *);
extern const BIGNUM *       VARARGS68K _AmiSSL_BN_get0_nist_prime_224(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_BN_GENCB_call(struct AmiSSLIFace *, BN_GENCB * cb, int a, int b);
extern NAME_CONSTRAINTS *   VARARGS68K _AmiSSL_NAME_CONSTRAINTS_new(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_ECParameters_print(struct AmiSSLIFace *, BIO * bp, const EC_KEY * key);
extern void *               VARARGS68K _AmiSSL_BUF_memdup(struct AmiSSLIFace *, const void * data, size_t siz);
extern int                  VARARGS68K _AmiSSL_X509_VERIFY_PARAM_set_trust(struct AmiSSLIFace *, X509_VERIFY_PARAM * param, int trust);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_get_attr_count(struct AmiSSLIFace *, const EVP_PKEY * key);
extern X509_VERIFY_PARAM *  VARARGS68K _AmiSSL_X509_STORE_CTX_get0_param(struct AmiSSLIFace *, X509_STORE_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_X509_STORE_set_depth(struct AmiSSLIFace *, X509_STORE * store, int depth);
extern char *               VARARGS68K _AmiSSL_BUF_strndup(struct AmiSSLIFace *, const char * str, size_t siz);
extern int                  VARARGS68K _AmiSSL_ASN1_put_eoc(struct AmiSSLIFace *, unsigned char ** pp);
extern void                 VARARGS68K _AmiSSL_X509_VERIFY_PARAM_table_cleanup(struct AmiSSLIFace *);
extern BN_BLINDING *        VARARGS68K _AmiSSL_RSA_setup_blinding(struct AmiSSLIFace *, RSA * rsa, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_sk_find_ex(struct AmiSSLIFace *, _STACK * st, void * data);
extern POLICY_CONSTRAINTS * VARARGS68K _AmiSSL_POLICY_CONSTRAINTS_new(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_X509_VERIFY_PARAM_get_depth(struct AmiSSLIFace *, const X509_VERIFY_PARAM * param);
extern int                  VARARGS68K _AmiSSL_ASN1_item_ndef_i2d(struct AmiSSLIFace *, ASN1_VALUE * val, unsigned char ** out, const ASN1_ITEM * it);
extern int                  VARARGS68K _AmiSSL_ERR_pop_to_mark(struct AmiSSLIFace *);
extern X509_POLICY_NODE *   VARARGS68K _AmiSSL_X509_policy_level_get0_node(struct AmiSSLIFace *, X509_POLICY_LEVEL * level, int i);
extern int                  VARARGS68K _AmiSSL_i2d_PKCS7_NDEF(struct AmiSSLIFace *, PKCS7 * a, unsigned char ** out);
extern ASN1_TYPE *          VARARGS68K _AmiSSL_ASN1_generate_v3(struct AmiSSLIFace *, char * str, X509V3_CTX * cnf);
extern int                  VARARGS68K _AmiSSL_X509_policy_tree_level_count(struct AmiSSLIFace *, const X509_POLICY_TREE * tree);
extern void                 VARARGS68K _AmiSSL_X509_CERT_PAIR_free(struct AmiSSLIFace *, X509_CERT_PAIR * pair);
extern int                  VARARGS68K _AmiSSL_BN_nist_mod_224(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_BIO_dgram_non_fatal_error(struct AmiSSLIFace *, int error);
extern ASN1_BIT_STRING *    VARARGS68K _AmiSSL_v2i_ASN1_BIT_STRING(struct AmiSSLIFace *, X509V3_EXT_METHOD * method, X509V3_CTX * ctx, STACK_OF(CONF_VALUE) * nval);
extern int                  VARARGS68K _AmiSSL_X509_STORE_CTX_set_default(struct AmiSSLIFace *, X509_STORE_CTX * ctx, const char * name);
extern int                  VARARGS68K _AmiSSL_X509_VERIFY_PARAM_set1(struct AmiSSLIFace *, X509_VERIFY_PARAM * to, const X509_VERIFY_PARAM * from);
extern GENERAL_NAME *       VARARGS68K _AmiSSL_v2i_GENERAL_NAME_ex(struct AmiSSLIFace *, GENERAL_NAME * out, const X509V3_EXT_METHOD * method, X509V3_CTX * ctx, CONF_VALUE * cnf, int is_nc);
extern int                  VARARGS68K _AmiSSL_BN_nist_mod_521(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx);
extern X509_POLICY_LEVEL *  VARARGS68K _AmiSSL_X509_policy_tree_get0_level(struct AmiSSLIFace *, const X509_POLICY_TREE * tree, int i);
extern int                  VARARGS68K _AmiSSL_ASN1_const_check_infinite_end(struct AmiSSLIFace *, const unsigned char ** p, long len);
extern X509_ATTRIBUTE *     VARARGS68K _AmiSSL_EVP_PKEY_delete_attr(struct AmiSSLIFace *, EVP_PKEY * key, int loc);
extern const BIGNUM *       VARARGS68K _AmiSSL_BN_get0_nist_prime_256(struct AmiSSLIFace *);
extern STACK_OF(CONF_VALUE) * VARARGS68K _AmiSSL_i2v_ASN1_BIT_STRING(struct AmiSSLIFace *, X509V3_EXT_METHOD * method, ASN1_BIT_STRING * bits, STACK_OF(CONF_VALUE) * extlist);
extern int                  VARARGS68K _AmiSSL_BN_nist_mod_384(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_i2d_X509_CERT_PAIR(struct AmiSSLIFace *, X509_CERT_PAIR * a, unsigned char ** out);
extern pitem *              VARARGS68K _AmiSSL_pqueue_pop(struct AmiSSLIFace *, pqueue pq);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_get_attr_by_OBJ(struct AmiSSLIFace *, const EVP_PKEY * key, ASN1_OBJECT * obj, int lastpos);
extern const X509_VERIFY_PARAM * VARARGS68K _AmiSSL_X509_VERIFY_PARAM_lookup(struct AmiSSLIFace *, const char * name);
extern X509_CERT_PAIR *     VARARGS68K _AmiSSL_X509_CERT_PAIR_new(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_X509V3_NAME_from_section(struct AmiSSLIFace *, X509_NAME * nm, STACK_OF(CONF_VALUE) * dn_sk, unsigned long chtype);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_add1_attr(struct AmiSSLIFace *, EVP_PKEY * key, X509_ATTRIBUTE * attr);
extern int                  VARARGS68K _AmiSSL_BIO_dump_indent_cb(struct AmiSSLIFace *, int (*cb)(const void *data, size_t len, void *u), void * u, const char * s, int len, int indent);
extern X509_CERT_PAIR *     VARARGS68K _AmiSSL_d2i_X509_CERT_PAIR(struct AmiSSLIFace *, X509_CERT_PAIR ** a, const unsigned char ** in, long len);
extern int                  VARARGS68K _AmiSSL_asn1_const_Finish(struct AmiSSLIFace *, ASN1_const_CTX * c);
extern int                  VARARGS68K _AmiSSL_BN_nist_mod_256(struct AmiSSLIFace *, BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_X509_VERIFY_PARAM_add0_table(struct AmiSSLIFace *, X509_VERIFY_PARAM * param);
extern void                 VARARGS68K _AmiSSL_pqueue_free(struct AmiSSLIFace *, pqueue pq);
extern BN_BLINDING *        VARARGS68K _AmiSSL_BN_BLINDING_create_param(struct AmiSSLIFace *, BN_BLINDING * b, const BIGNUM * e, BIGNUM * m, BN_CTX * ctx, int (*bn_mod_exp)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx), BN_MONT_CTX * m_ctx);
extern const BIGNUM *       VARARGS68K _AmiSSL_BN_get0_nist_prime_521(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_BN_is_prime_fasttest_ex(struct AmiSSLIFace *, const BIGNUM * p, int nchecks, BN_CTX * ctx, int do_trial_devision, BN_GENCB * cb);
extern int                  VARARGS68K _AmiSSL_X509_policy_check(struct AmiSSLIFace *, X509_POLICY_TREE ** ptree, int * pexplicit_policy, STACK_OF(X509) * certs, STACK_OF(ASN1_OBJECT) * policy_oids, unsigned int flags);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_get_attr_by_NID(struct AmiSSLIFace *, const EVP_PKEY * key, int nid, int lastpos);
extern unsigned long        VARARGS68K _AmiSSL_BN_BLINDING_get_flags(struct AmiSSLIFace *, const BN_BLINDING * b);
extern PKCS12_SAFEBAG *     VARARGS68K _AmiSSL_PKCS12_add_cert(struct AmiSSLIFace *, STACK_OF(PKCS12_SAFEBAG) ** pbags, X509 * cert);
extern int                  VARARGS68K _AmiSSL_EVP_CIPHER_CTX_rand_key(struct AmiSSLIFace *, EVP_CIPHER_CTX * ctx, unsigned char * key);
extern ASN1_OCTET_STRING *  VARARGS68K _AmiSSL_a2i_IPADDRESS_NC(struct AmiSSLIFace *, const char * ipasc);
extern int                  VARARGS68K _AmiSSL_PKCS7_set_digest(struct AmiSSLIFace *, PKCS7 * p7, const EVP_MD * md);
extern POLICY_MAPPING *     VARARGS68K _AmiSSL_POLICY_MAPPING_new(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_PKCS7_set0_type_other(struct AmiSSLIFace *, PKCS7 * p7, int type, ASN1_TYPE * other);
extern X509_CERT_PAIR *     VARARGS68K _AmiSSL_PEM_read_bio_X509_CERT_PAIR(struct AmiSSLIFace *, BIO * bp, X509_CERT_PAIR ** x, pem_password_cb * cb, void * u);
extern pitem *              VARARGS68K _AmiSSL_pqueue_next(struct AmiSSLIFace *, piterator * iter);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_add1_attr_by_OBJ(struct AmiSSLIFace *, EVP_PKEY * key, const ASN1_OBJECT * obj, int type, const unsigned char * bytes, int len);
extern void                 VARARGS68K _AmiSSL_X509_VERIFY_PARAM_set_time(struct AmiSSLIFace *, X509_VERIFY_PARAM * param, time_t t);
extern pqueue               VARARGS68K _AmiSSL_pqueue_new(struct AmiSSLIFace *);
extern PKCS12_SAFEBAG *     VARARGS68K _AmiSSL_PKCS12_add_key(struct AmiSSLIFace *, STACK_OF(PKCS12_SAFEBAG) ** pbags, EVP_PKEY * key, int key_usage, int iter, int key_nid, char * pass);
extern char *               VARARGS68K _AmiSSL_DSO_merge(struct AmiSSLIFace *, DSO * dso, const char * filespec1, const char * filespec2);
extern int                  VARARGS68K _AmiSSL_BIO_dump_cb(struct AmiSSLIFace *, int (*cb)(const void *data, size_t len, void *u), void * u, const char * s, int len);
extern pitem *              VARARGS68K _AmiSSL_pqueue_insert(struct AmiSSLIFace *, pqueue pq, pitem * item);
extern void                 VARARGS68K _AmiSSL_pitem_free(struct AmiSSLIFace *, pitem * item);
extern BIGNUM *             VARARGS68K _AmiSSL_get_rfc3526_prime_8192(struct AmiSSLIFace *, BIGNUM * bn);
extern int                  VARARGS68K _AmiSSL_X509_VERIFY_PARAM_clear_flags(struct AmiSSLIFace *, X509_VERIFY_PARAM * param, unsigned long flags);
extern BIGNUM *             VARARGS68K _AmiSSL_get_rfc2409_prime_1024(struct AmiSSLIFace *, BIGNUM * bn);
extern BIGNUM *             VARARGS68K _AmiSSL_get_rfc3526_prime_2048(struct AmiSSLIFace *, BIGNUM * bn);
extern BIGNUM *             VARARGS68K _AmiSSL_get_rfc3526_prime_6144(struct AmiSSLIFace *, BIGNUM * bn);
extern BIGNUM *             VARARGS68K _AmiSSL_get_rfc3526_prime_1536(struct AmiSSLIFace *, BIGNUM * bn);
extern BIGNUM *             VARARGS68K _AmiSSL_get_rfc3526_prime_3072(struct AmiSSLIFace *, BIGNUM * bn);
extern BIGNUM *             VARARGS68K _AmiSSL_get_rfc3526_prime_4096(struct AmiSSLIFace *, BIGNUM * bn);
extern BIGNUM *             VARARGS68K _AmiSSL_get_rfc2409_prime_768(struct AmiSSLIFace *, BIGNUM * bn);
extern unsigned long        VARARGS68K _AmiSSL_X509_VERIFY_PARAM_get_flags(struct AmiSSLIFace *, X509_VERIFY_PARAM * param);
extern EVP_CIPHER_CTX *     VARARGS68K _AmiSSL_EVP_CIPHER_CTX_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_EVP_CIPHER_CTX_free(struct AmiSSLIFace *, EVP_CIPHER_CTX * a);
extern int                  VARARGS68K _AmiSSL_a2i_ipadd(struct AmiSSLIFace *, unsigned char * ipout, const char * ipasc);
extern int                  VARARGS68K _AmiSSL_EVP_CIPHER_block_size(struct AmiSSLIFace *, const EVP_CIPHER * cipher);
extern void                 VARARGS68K _AmiSSL_EVP_CIPHER_CTX_set_app_data(struct AmiSSLIFace *, EVP_CIPHER_CTX * ctx, void * data);
extern int                  VARARGS68K _AmiSSL_BIO_method_type(struct AmiSSLIFace *, const BIO * b);
extern int                  VARARGS68K _AmiSSL_EVP_CIPHER_CTX_nid(struct AmiSSLIFace *, const EVP_CIPHER_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_EVP_CIPHER_CTX_key_length(struct AmiSSLIFace *, const EVP_CIPHER_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_EVP_MD_size(struct AmiSSLIFace *, const EVP_MD * md);
extern int                  VARARGS68K _AmiSSL_EVP_MD_CTX_test_flags(struct AmiSSLIFace *, const EVP_MD_CTX * ctx, int flags);
extern void                 VARARGS68K _AmiSSL_BIO_clear_flags(struct AmiSSLIFace *, BIO * b, int flags);
extern int                  VARARGS68K _AmiSSL_EVP_MD_pkey_type(struct AmiSSLIFace *, const EVP_MD * md);
extern void                 VARARGS68K _AmiSSL_EVP_MD_CTX_clear_flags(struct AmiSSLIFace *, EVP_MD_CTX * ctx, int flags);
extern unsigned long        VARARGS68K _AmiSSL_EVP_CIPHER_flags(struct AmiSSLIFace *, const EVP_CIPHER * cipher);
extern long                 VARARGS68K (*_AmiSSL_BIO_get_callback(struct AmiSSLIFace *, const BIO * b))(struct bio_st *,int,const char *,int, long,long);
extern int                  VARARGS68K _AmiSSL_EVP_CIPHER_key_length(struct AmiSSLIFace *, const EVP_CIPHER * cipher);
extern int                  VARARGS68K _AmiSSL_EVP_Cipher(struct AmiSSLIFace *, EVP_CIPHER_CTX * c, unsigned char * out, const unsigned char * in, unsigned int inl);
extern int                  VARARGS68K _AmiSSL_EVP_CIPHER_CTX_block_size(struct AmiSSLIFace *, const EVP_CIPHER_CTX * ctx);
extern const EVP_CIPHER *   VARARGS68K _AmiSSL_EVP_CIPHER_CTX_cipher(struct AmiSSLIFace *, const EVP_CIPHER_CTX * ctx);
extern void *               VARARGS68K _AmiSSL_EVP_CIPHER_CTX_get_app_data(struct AmiSSLIFace *, const EVP_CIPHER_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_EVP_MD_block_size(struct AmiSSLIFace *, const EVP_MD * md);
extern unsigned long        VARARGS68K _AmiSSL_EVP_CIPHER_CTX_flags(struct AmiSSLIFace *, const EVP_CIPHER_CTX * ctx);
extern const EVP_MD *       VARARGS68K _AmiSSL_EVP_MD_CTX_md(struct AmiSSLIFace *, const EVP_MD_CTX * ctx);
extern const char *         VARARGS68K _AmiSSL_BIO_method_name(struct AmiSSLIFace *, const BIO * b);
extern int                  VARARGS68K _AmiSSL_EVP_CIPHER_CTX_iv_length(struct AmiSSLIFace *, const EVP_CIPHER_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_CRYPTO_memcmp(struct AmiSSLIFace *, const void * a, const void * b, size_t len);
extern void                 VARARGS68K _AmiSSL_BN_consttime_swap(struct AmiSSLIFace *, BN_ULONG swap, BIGNUM * a, BIGNUM * b, int nwords);
extern int                  VARARGS68K _AmiSSL_i2d_X509_EXTENSIONS(struct AmiSSLIFace *, X509_EXTENSIONS * a, unsigned char ** out);
extern X509_EXTENSIONS *    VARARGS68K _AmiSSL_d2i_X509_EXTENSIONS(struct AmiSSLIFace *, X509_EXTENSIONS ** a, const unsigned char ** in, long len);
extern void                 VARARGS68K _AmiSSL_X509_ALGOR_get0(struct AmiSSLIFace *, ASN1_OBJECT ** pobj, int * pptype, void ** ppval, X509_ALGOR * algor);
extern int                  VARARGS68K _AmiSSL_X509_ALGOR_set0(struct AmiSSLIFace *, X509_ALGOR * alg, ASN1_OBJECT * aobj, int ptype, void * pval);
extern void *               VARARGS68K _AmiSSL_X509at_get0_data_by_OBJ(struct AmiSSLIFace *, STACK_OF(X509_ATTRIBUTE) * x, ASN1_OBJECT * obj, int lastpos, int type);
extern int                  VARARGS68K _AmiSSL_ASN1_TYPE_set1(struct AmiSSLIFace *, ASN1_TYPE * a, int type, const void * value);
extern void                 VARARGS68K _AmiSSL_ASN1_STRING_set0(struct AmiSSLIFace *, ASN1_STRING * str, void * data, int len);
extern int                  VARARGS68K _AmiSSL_i2d_X509_ALGORS(struct AmiSSLIFace *, X509_ALGORS * a, unsigned char ** out);
extern void                 VARARGS68K _AmiSSL_COMP_zlib_cleanup(struct AmiSSLIFace *);
extern X509_ALGORS *        VARARGS68K _AmiSSL_d2i_X509_ALGORS(struct AmiSSLIFace *, X509_ALGORS ** a, const unsigned char ** in, long len);
extern ASN1_VALUE *         VARARGS68K _AmiSSL_SMIME_read_ASN1(struct AmiSSLIFace *, BIO * bio, BIO ** bcont, const ASN1_ITEM * it);
extern int                  VARARGS68K _AmiSSL_OPENSSL_isservice(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_EVP_CIPHER_CTX_clear_flags(struct AmiSSLIFace *, EVP_CIPHER_CTX * ctx, int flags);
extern int                  VARARGS68K _AmiSSL_BN_X931_generate_prime_ex(struct AmiSSLIFace *, BIGNUM * p, BIGNUM * p1, BIGNUM * p2, BIGNUM * Xp1, BIGNUM * Xp2, const BIGNUM * Xp, const BIGNUM * e, BN_CTX * ctx, BN_GENCB * cb);
extern int                  VARARGS68K _AmiSSL_EVP_CIPHER_CTX_test_flags(struct AmiSSLIFace *, const EVP_CIPHER_CTX * ctx, int flags);
extern void                 VARARGS68K _AmiSSL_EVP_add_alg_module(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_BN_X931_derive_prime_ex(struct AmiSSLIFace *, BIGNUM * p, BIGNUM * p1, BIGNUM * p2, const BIGNUM * Xp, const BIGNUM * Xp1, const BIGNUM * Xp2, const BIGNUM * e, BN_CTX * ctx, BN_GENCB * cb);
extern void                 VARARGS68K _AmiSSL_OPENSSL_init(struct AmiSSLIFace *);
extern char *               VARARGS68K _AmiSSL_CRYPTO_strdup(struct AmiSSLIFace *, const char * str, const char * file, int line);
extern int                  VARARGS68K _AmiSSL_pqueue_size(struct AmiSSLIFace *, pqueue pq);
extern int                  VARARGS68K _AmiSSL_i2d_TS_ACCURACY(struct AmiSSLIFace *, const TS_ACCURACY * a, unsigned char ** pp);
extern int                  VARARGS68K _AmiSSL_i2d_TS_MSG_IMPRINT(struct AmiSSLIFace *, const TS_MSG_IMPRINT * a, unsigned char ** pp);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_print_public(struct AmiSSLIFace *, BIO * out, const EVP_PKEY * pkey, int indent, ASN1_PCTX * pctx);
extern EVP_PKEY_CTX *       VARARGS68K _AmiSSL_EVP_PKEY_CTX_new(struct AmiSSLIFace *, EVP_PKEY * pkey, ENGINE * e);
extern int                  VARARGS68K _AmiSSL_i2d_TS_TST_INFO(struct AmiSSLIFace *, const TS_TST_INFO * a, unsigned char ** pp);
extern const EVP_PKEY_ASN1_METHOD * VARARGS68K _AmiSSL_EVP_PKEY_asn1_find(struct AmiSSLIFace *, ENGINE ** pe, int type);
extern DSO_METHOD *         VARARGS68K _AmiSSL_DSO_METHOD_beos(struct AmiSSLIFace *);
extern X509 *               VARARGS68K _AmiSSL_TS_CONF_load_cert(struct AmiSSLIFace *, const char * file);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_TS_REQ_get_ext(struct AmiSSLIFace *, TS_REQ * a, int loc);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_sign_init(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_ASN1_item_print(struct AmiSSLIFace *, BIO * out, ASN1_VALUE * ifld, int indent, const ASN1_ITEM * it, const ASN1_PCTX * ctx);
extern int                  VARARGS68K _AmiSSL_TS_TST_INFO_set_nonce(struct AmiSSLIFace *, TS_TST_INFO * a, const ASN1_INTEGER * nonce);
extern TS_RESP *            VARARGS68K _AmiSSL_TS_RESP_dup(struct AmiSSLIFace *, TS_RESP * a);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_asn1_add0(struct AmiSSLIFace *, const EVP_PKEY_ASN1_METHOD * ameth);
extern int                  VARARGS68K _AmiSSL_PKCS7_add0_attrib_signing_time(struct AmiSSLIFace *, PKCS7_SIGNER_INFO * si, ASN1_TIME * t);
extern int                  VARARGS68K _AmiSSL_BIO_asn1_get_prefix(struct AmiSSLIFace *, BIO * b, asn1_ps_func ** pprefix, asn1_ps_func ** pprefix_free);
extern int                  VARARGS68K _AmiSSL_TS_TST_INFO_set_time(struct AmiSSLIFace *, TS_TST_INFO * a, const ASN1_GENERALIZEDTIME * gtime);
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_meth_set_decrypt(struct AmiSSLIFace *, EVP_PKEY_METHOD * pmeth, int (*decrypt_init)(EVP_PKEY_CTX *ctx), int (*decrypt)(EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen));
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_set_type_str(struct AmiSSLIFace *, EVP_PKEY * pkey, const char * str, int len);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_CTX_get_keygen_info(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx, int idx);
extern int                  VARARGS68K _AmiSSL_TS_REQ_set_policy_id(struct AmiSSLIFace *, TS_REQ * a, ASN1_OBJECT * policy);
extern int                  VARARGS68K _AmiSSL_TS_RESP_set_status_info(struct AmiSSLIFace *, TS_RESP * a, TS_STATUS_INFO * info);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_keygen(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx, EVP_PKEY ** ppkey);
extern int                  VARARGS68K _AmiSSL_EVP_DigestSignInit(struct AmiSSLIFace *, EVP_MD_CTX * ctx, EVP_PKEY_CTX ** pctx, const EVP_MD * type, ENGINE * e, EVP_PKEY * pkey);
extern int                  VARARGS68K _AmiSSL_TS_ACCURACY_set_millis(struct AmiSSLIFace *, TS_ACCURACY * a, const ASN1_INTEGER * millis);
extern TS_REQ *             VARARGS68K _AmiSSL_TS_REQ_dup(struct AmiSSLIFace *, TS_REQ * a);
extern GENERAL_NAME *       VARARGS68K _AmiSSL_GENERAL_NAME_dup(struct AmiSSLIFace *, GENERAL_NAME * a);
extern STACK_OF(X509_CRL) * VARARGS68K _AmiSSL_X509_STORE_get1_crls(struct AmiSSLIFace *, X509_STORE_CTX * st, X509_NAME * nm);
extern EVP_PKEY_ASN1_METHOD * VARARGS68K _AmiSSL_EVP_PKEY_asn1_new(struct AmiSSLIFace *, int id, int flags, const char * pem_str, const char * info);
extern BIO *                VARARGS68K _AmiSSL_BIO_new_NDEF(struct AmiSSLIFace *, BIO * out, ASN1_VALUE * val, const ASN1_ITEM * it);
extern int                  VARARGS68K _AmiSSL_TS_MSG_IMPRINT_set_algo(struct AmiSSLIFace *, TS_MSG_IMPRINT * a, X509_ALGOR * alg);
extern int                  VARARGS68K _AmiSSL_i2d_TS_TST_INFO_bio(struct AmiSSLIFace *, BIO * fp, TS_TST_INFO * a);
extern int                  VARARGS68K _AmiSSL_TS_TST_INFO_set_ordering(struct AmiSSLIFace *, TS_TST_INFO * a, int ordering);
extern int                  VARARGS68K _AmiSSL_TS_TST_INFO_get_ext_by_OBJ(struct AmiSSLIFace *, TS_TST_INFO * a, ASN1_OBJECT * obj, int lastpos);
extern void                 VARARGS68K _AmiSSL_CRYPTO_THREADID_set_pointer(struct AmiSSLIFace *, CRYPTO_THREADID * id, void * ptr);
extern const char *         VARARGS68K _AmiSSL_TS_CONF_get_tsa_section(struct AmiSSLIFace *, CONF * conf, const char * section);
extern int                  VARARGS68K _AmiSSL_SMIME_write_ASN1(struct AmiSSLIFace *, BIO * bio, ASN1_VALUE * val, BIO * data, int flags, int ctype_nid, int econt_nid, STACK_OF(X509_ALGOR) * mdalgs, const ASN1_ITEM * it);
extern int                  VARARGS68K _AmiSSL_TS_RESP_CTX_set_signer_key(struct AmiSSLIFace *, TS_RESP_CTX * ctx, EVP_PKEY * key);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_encrypt_old(struct AmiSSLIFace *, unsigned char * enc_key, const unsigned char * key, int key_len, EVP_PKEY * pub_key);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_encrypt_init(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx);
extern void                 VARARGS68K _AmiSSL_CRYPTO_THREADID_cpy(struct AmiSSLIFace *, CRYPTO_THREADID * dest, const CRYPTO_THREADID * src);
extern unsigned long        VARARGS68K _AmiSSL_ASN1_PCTX_get_cert_flags(struct AmiSSLIFace *, ASN1_PCTX * p);
extern int                  VARARGS68K _AmiSSL_i2d_ESS_SIGNING_CERT(struct AmiSSLIFace *, const ESS_SIGNING_CERT * a, unsigned char ** pp);
extern EVP_PKEY *           VARARGS68K _AmiSSL_TS_CONF_load_key(struct AmiSSLIFace *, const char * file, const char * pass);
extern int                  VARARGS68K _AmiSSL_i2d_ASN1_SEQUENCE_ANY(struct AmiSSLIFace *, const ASN1_SEQUENCE_ANY * a, unsigned char ** pp);
extern TS_MSG_IMPRINT *     VARARGS68K _AmiSSL_d2i_TS_MSG_IMPRINT_bio(struct AmiSSLIFace *, BIO * fp, TS_MSG_IMPRINT ** a);
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_asn1_set_public(struct AmiSSLIFace *, EVP_PKEY_ASN1_METHOD * ameth, int (*pub_decode)(EVP_PKEY *pk, X509_PUBKEY *pub), int (*pub_encode)(X509_PUBKEY *pub, const EVP_PKEY *pk), int (*pub_cmp)(const EVP_PKEY *a, const EVP_PKEY *b), int (*pub_print)(BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx), int (*pkey_size)(const EVP_PKEY *pk), int (*pkey_bits)(const EVP_PKEY *pk));
extern EVP_PKEY *           VARARGS68K _AmiSSL_b2i_PublicKey_bio(struct AmiSSLIFace *, BIO * in);
extern int                  VARARGS68K _AmiSSL_BIO_asn1_set_prefix(struct AmiSSLIFace *, BIO * b, asn1_ps_func * prefix, asn1_ps_func * prefix_free);
extern EVP_PKEY *           VARARGS68K _AmiSSL_EVP_PKEY_new_mac_key(struct AmiSSLIFace *, int type, ENGINE * e, const unsigned char * key, int keylen);
extern int                  VARARGS68K _AmiSSL_CRYPTO_THREADID_cmp(struct AmiSSLIFace *, const CRYPTO_THREADID * a, const CRYPTO_THREADID * b);
extern void                 VARARGS68K _AmiSSL_TS_REQ_ext_free(struct AmiSSLIFace *, TS_REQ * a);
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_asn1_set_free(struct AmiSSLIFace *, EVP_PKEY_ASN1_METHOD * ameth, void (*pkey_free)(EVP_PKEY *pkey));
extern const EVP_PKEY_ASN1_METHOD * VARARGS68K _AmiSSL_EVP_PKEY_get0_asn1(struct AmiSSLIFace *, EVP_PKEY * pkey);
extern NETSCAPE_X509 *      VARARGS68K _AmiSSL_d2i_NETSCAPE_X509(struct AmiSSLIFace *, NETSCAPE_X509 ** a, unsigned char const ** in, long len);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_verify_recover_init(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx);
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_CTX_set_data(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx, void * data);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_keygen_init(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_TS_RESP_CTX_set_status_info(struct AmiSSLIFace *, TS_RESP_CTX * ctx, int status, const char * text);
extern X509_ALGOR *         VARARGS68K _AmiSSL_TS_MSG_IMPRINT_get_algo(struct AmiSSLIFace *, TS_MSG_IMPRINT * a);
extern int                  VARARGS68K _AmiSSL_TS_REQ_print_bio(struct AmiSSLIFace *, BIO * bio, TS_REQ * a);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_CTX_ctrl_str(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx, const char * type, const char * value);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_get_default_digest_nid(struct AmiSSLIFace *, EVP_PKEY * pkey, int * pnid);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_PKCS7_stream(struct AmiSSLIFace *, BIO * out, PKCS7 * p7, BIO * in, int flags);
extern int                  VARARGS68K _AmiSSL_TS_MSG_IMPRINT_print_bio(struct AmiSSLIFace *, BIO * bio, TS_MSG_IMPRINT * msg);
extern int                  VARARGS68K _AmiSSL_BN_asc2bn(struct AmiSSLIFace *, BIGNUM ** a, const char * str);
extern ASN1_OBJECT *        VARARGS68K _AmiSSL_TS_REQ_get_policy_id(struct AmiSSLIFace *, TS_REQ * a);
extern TS_ACCURACY *        VARARGS68K _AmiSSL_d2i_TS_ACCURACY(struct AmiSSLIFace *, TS_ACCURACY ** a, const unsigned char ** pp, long length);
extern void *               VARARGS68K _AmiSSL_DSO_global_lookup(struct AmiSSLIFace *, const char * name);
extern int                  VARARGS68K _AmiSSL_TS_CONF_set_tsa_name(struct AmiSSLIFace *, CONF * conf, const char * section, TS_RESP_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_i2d_ASN1_SET_ANY(struct AmiSSLIFace *, const ASN1_SEQUENCE_ANY * a, unsigned char ** pp);
extern unsigned long        VARARGS68K _AmiSSL_ASN1_PCTX_get_flags(struct AmiSSLIFace *, ASN1_PCTX * p);
extern int                  VARARGS68K _AmiSSL_TS_TST_INFO_get_ext_by_NID(struct AmiSSLIFace *, TS_TST_INFO * a, int nid, int lastpos);
extern TS_RESP *            VARARGS68K _AmiSSL_TS_RESP_new(struct AmiSSLIFace *);
extern ESS_CERT_ID *        VARARGS68K _AmiSSL_ESS_CERT_ID_dup(struct AmiSSLIFace *, ESS_CERT_ID * a);
extern TS_STATUS_INFO *     VARARGS68K _AmiSSL_TS_STATUS_INFO_dup(struct AmiSSLIFace *, TS_STATUS_INFO * a);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_TS_REQ_delete_ext(struct AmiSSLIFace *, TS_REQ * a, int loc);
extern int                  VARARGS68K _AmiSSL_EVP_DigestVerifyFinal(struct AmiSSLIFace *, EVP_MD_CTX * ctx, unsigned char * sig, size_t siglen);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_print_params(struct AmiSSLIFace *, BIO * out, const EVP_PKEY * pkey, int inden, ASN1_PCTX * pctx);
extern TS_MSG_IMPRINT *     VARARGS68K _AmiSSL_TS_REQ_get_msg_imprint(struct AmiSSLIFace *, TS_REQ * a);
extern int                  VARARGS68K _AmiSSL_OBJ_find_sigid_by_algs(struct AmiSSLIFace *, int * psignid, int dig_nid, int pkey_nid);
extern const ASN1_INTEGER * VARARGS68K _AmiSSL_TS_TST_INFO_get_serial(struct AmiSSLIFace *, const TS_TST_INFO * a);
extern const ASN1_INTEGER * VARARGS68K _AmiSSL_TS_REQ_get_nonce(struct AmiSSLIFace *, const TS_REQ * a);
extern int                  VARARGS68K _AmiSSL_X509_PUBKEY_set0_param(struct AmiSSLIFace *, X509_PUBKEY * pub, ASN1_OBJECT * aobj, int ptype, void * pval, unsigned char * penc, int penclen);
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_CTX_set0_keygen_info(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx, int * dat, int datlen);
extern int                  VARARGS68K _AmiSSL_DIST_POINT_set_dpname(struct AmiSSLIFace *, DIST_POINT_NAME * dpn, X509_NAME * iname);
extern int                  VARARGS68K _AmiSSL_i2d_ISSUING_DIST_POINT(struct AmiSSLIFace *, ISSUING_DIST_POINT * a, unsigned char ** pp);
extern void *               VARARGS68K _AmiSSL_EVP_PKEY_CTX_get_data(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_TS_STATUS_INFO_print_bio(struct AmiSSLIFace *, BIO * bio, TS_STATUS_INFO * a);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_derive_init(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx);
extern TS_TST_INFO *        VARARGS68K _AmiSSL_d2i_TS_TST_INFO(struct AmiSSLIFace *, TS_TST_INFO ** a, const unsigned char ** pp, long length);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_asn1_add_alias(struct AmiSSLIFace *, int to, int from);
extern TS_RESP *            VARARGS68K _AmiSSL_d2i_TS_RESP_bio(struct AmiSSLIFace *, BIO * fp, TS_RESP ** a);
extern int                  VARARGS68K _AmiSSL_OTHERNAME_cmp(struct AmiSSLIFace *, OTHERNAME * a, OTHERNAME * b);
extern void                 VARARGS68K _AmiSSL_GENERAL_NAME_set0_value(struct AmiSSLIFace *, GENERAL_NAME * a, int type, void * value);
extern void                 VARARGS68K _AmiSSL_PKCS7_RECIP_INFO_get0_alg(struct AmiSSLIFace *, PKCS7_RECIP_INFO * ri, X509_ALGOR ** penc);
extern TS_RESP_CTX *        VARARGS68K _AmiSSL_TS_RESP_CTX_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_TS_RESP_set_tst_info(struct AmiSSLIFace *, TS_RESP * a, PKCS7 * p7, TS_TST_INFO * tst_info);
extern int                  VARARGS68K _AmiSSL_PKCS7_final(struct AmiSSLIFace *, PKCS7 * p7, BIO * data, int flags);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_base_id(struct AmiSSLIFace *, const EVP_PKEY * pkey);
extern int                  VARARGS68K _AmiSSL_TS_RESP_CTX_set_signer_cert(struct AmiSSLIFace *, TS_RESP_CTX * ctx, X509 * signer);
extern int                  VARARGS68K _AmiSSL_TS_REQ_set_msg_imprint(struct AmiSSLIFace *, TS_REQ * a, TS_MSG_IMPRINT * msg_imprint);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_CTX_ctrl(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx, int keytype, int optype, int cmd, int p1, void * p2);
extern int                  VARARGS68K _AmiSSL_TS_CONF_set_digests(struct AmiSSLIFace *, CONF * conf, const char * section, TS_RESP_CTX * ctx);
extern TS_MSG_IMPRINT *     VARARGS68K _AmiSSL_d2i_TS_MSG_IMPRINT(struct AmiSSLIFace *, TS_MSG_IMPRINT ** a, const unsigned char ** pp, long length);
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_meth_set_ctrl(struct AmiSSLIFace *, EVP_PKEY_METHOD * pmeth, int (*ctrl)(EVP_PKEY_CTX *ctx, int type, int p1, void *p2), int (*ctrl_str)(EVP_PKEY_CTX *ctx, const char *type, const char *value));
extern int                  VARARGS68K _AmiSSL_TS_REQ_get_ext_by_NID(struct AmiSSLIFace *, TS_REQ * a, int nid, int lastpos);
extern int                  VARARGS68K _AmiSSL_PKCS5_pbe_set0_algor(struct AmiSSLIFace *, X509_ALGOR * algor, int alg, int iter, const unsigned char * salt, int saltlen);
extern CRYPTO_THREADID *    VARARGS68K _AmiSSL_BN_BLINDING_thread_id(struct AmiSSLIFace *, BN_BLINDING * b);
extern TS_ACCURACY *        VARARGS68K _AmiSSL_TS_ACCURACY_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_X509_CRL_METHOD_free(struct AmiSSLIFace *, X509_CRL_METHOD * m);
extern unsigned long        VARARGS68K _AmiSSL_ASN1_PCTX_get_nm_flags(struct AmiSSLIFace *, ASN1_PCTX * p);
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_meth_set_sign(struct AmiSSLIFace *, EVP_PKEY_METHOD * pmeth, int (*sign_init)(EVP_PKEY_CTX *ctx), int (*sign)(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen));
extern void                 VARARGS68K _AmiSSL_CRYPTO_THREADID_current(struct AmiSSLIFace *, CRYPTO_THREADID * id);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_decrypt_init(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx);
extern void                 VARARGS68K _AmiSSL_NETSCAPE_X509_free(struct AmiSSLIFace *, NETSCAPE_X509 * a);
extern int                  VARARGS68K _AmiSSL_i2b_PVK_bio(struct AmiSSLIFace *, BIO * out, EVP_PKEY * pk, int enclevel, pem_password_cb * cb, void * u);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_print_private(struct AmiSSLIFace *, BIO * out, const EVP_PKEY * pkey, int indent, ASN1_PCTX * pctx);
extern void *               VARARGS68K _AmiSSL_GENERAL_NAME_get0_value(struct AmiSSLIFace *, GENERAL_NAME * a, int * ptype);
extern EVP_PKEY *           VARARGS68K _AmiSSL_b2i_PVK_bio(struct AmiSSLIFace *, BIO * in, pem_password_cb * cb, void * u);
extern ASN1_UTCTIME *       VARARGS68K _AmiSSL_ASN1_UTCTIME_adj(struct AmiSSLIFace *, ASN1_UTCTIME * s, time_t t, int offset_day, int offset_sec);
extern TS_TST_INFO *        VARARGS68K _AmiSSL_TS_TST_INFO_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_EVP_MD_do_all_sorted(struct AmiSSLIFace *, void (*fn)(const EVP_MD *ciph, const char *from, const char *to, void *x), void * arg);
extern int                  VARARGS68K _AmiSSL_TS_CONF_set_default_engine(struct AmiSSLIFace *, const char * name);
extern int                  VARARGS68K _AmiSSL_TS_ACCURACY_set_seconds(struct AmiSSLIFace *, TS_ACCURACY * a, const ASN1_INTEGER * seconds);
extern const ASN1_GENERALIZEDTIME * VARARGS68K _AmiSSL_TS_TST_INFO_get_time(struct AmiSSLIFace *, const TS_TST_INFO * a);
extern int                  VARARGS68K _AmiSSL_PKCS8_pkey_get0(struct AmiSSLIFace *, ASN1_OBJECT ** ppkalg, const unsigned char ** pk, int * ppklen, X509_ALGOR ** pa, PKCS8_PRIV_KEY_INFO * p8);
extern const EVP_PKEY_ASN1_METHOD * VARARGS68K _AmiSSL_EVP_PKEY_asn1_get0(struct AmiSSLIFace *, int idx);
extern int                  VARARGS68K _AmiSSL_OBJ_add_sigid(struct AmiSSLIFace *, int signid, int dig_id, int pkey_id);
extern int                  VARARGS68K _AmiSSL_PKCS7_SIGNER_INFO_sign(struct AmiSSLIFace *, PKCS7_SIGNER_INFO * si);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_paramgen_init(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_sign(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx, unsigned char * sig, size_t * siglen, const unsigned char * tbs, size_t tbslen);
extern void                 VARARGS68K _AmiSSL_OBJ_sigid_free(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_meth_set_init(struct AmiSSLIFace *, EVP_PKEY_METHOD * pmeth, int (*init)(EVP_PKEY_CTX *ctx));
extern ESS_ISSUER_SERIAL *  VARARGS68K _AmiSSL_d2i_ESS_ISSUER_SERIAL(struct AmiSSLIFace *, ESS_ISSUER_SERIAL ** a, const unsigned char ** pp, long length);
extern ISSUING_DIST_POINT * VARARGS68K _AmiSSL_ISSUING_DIST_POINT_new(struct AmiSSLIFace *);
extern ASN1_TIME *          VARARGS68K _AmiSSL_ASN1_TIME_adj(struct AmiSSLIFace *, ASN1_TIME * s, time_t t, int offset_day, int offset_sec);
extern int                  VARARGS68K _AmiSSL_TS_OBJ_print_bio(struct AmiSSLIFace *, BIO * bio, const ASN1_OBJECT * obj);
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_meth_set_verify_recover(struct AmiSSLIFace *, EVP_PKEY_METHOD * pmeth, int (*verify_recover_init)(EVP_PKEY_CTX *ctx), int (*verify_recover)(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen));
extern TS_STATUS_INFO *     VARARGS68K _AmiSSL_TS_RESP_get_status_info(struct AmiSSLIFace *, TS_RESP * g);
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_CTX_set_cb(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx, EVP_PKEY_gen_cb * cb);
extern TS_TST_INFO *        VARARGS68K _AmiSSL_PKCS7_to_TS_TST_INFO(struct AmiSSLIFace *, PKCS7 * token);
extern unsigned long        VARARGS68K _AmiSSL_ASN1_PCTX_get_oid_flags(struct AmiSSLIFace *, ASN1_PCTX * p);
extern int                  VARARGS68K _AmiSSL_TS_TST_INFO_add_ext(struct AmiSSLIFace *, TS_TST_INFO * a, X509_EXTENSION * ex, int loc);
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_meth_set_derive(struct AmiSSLIFace *, EVP_PKEY_METHOD * pmeth, int (*derive_init)(EVP_PKEY_CTX *ctx), int (*derive)(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen));
extern int                  VARARGS68K _AmiSSL_i2d_TS_MSG_IMPRINT_bio(struct AmiSSLIFace *, BIO * fp, TS_MSG_IMPRINT * a);
extern int                  VARARGS68K _AmiSSL_TS_RESP_CTX_set_accuracy(struct AmiSSLIFace *, TS_RESP_CTX * ctx, int secs, int millis, int micros);
extern int                  VARARGS68K _AmiSSL_TS_REQ_set_nonce(struct AmiSSLIFace *, TS_REQ * a, const ASN1_INTEGER * nonce);
extern ESS_CERT_ID *        VARARGS68K _AmiSSL_ESS_CERT_ID_new(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_TS_REQ_get_ext_count(struct AmiSSLIFace *, TS_REQ * a);
extern void                 VARARGS68K _AmiSSL_BUF_reverse(struct AmiSSLIFace *, unsigned char * out, const unsigned char * in, size_t siz);
extern int                  VARARGS68K _AmiSSL_TS_TST_INFO_print_bio(struct AmiSSLIFace *, BIO * bio, TS_TST_INFO * a);
extern ISSUING_DIST_POINT * VARARGS68K _AmiSSL_d2i_ISSUING_DIST_POINT(struct AmiSSLIFace *, ISSUING_DIST_POINT ** a, const unsigned char ** pp, long length);
extern int                  VARARGS68K _AmiSSL_i2b_PrivateKey_bio(struct AmiSSLIFace *, BIO * out, EVP_PKEY * pk);
extern int                  VARARGS68K _AmiSSL_i2d_TS_RESP(struct AmiSSLIFace *, const TS_RESP * a, unsigned char ** pp);
extern EVP_PKEY *           VARARGS68K _AmiSSL_b2i_PublicKey(struct AmiSSLIFace *, const unsigned char ** in, long length);
extern void                 VARARGS68K _AmiSSL_TS_VERIFY_CTX_cleanup(struct AmiSSLIFace *, TS_VERIFY_CTX * ctx);
extern void                 VARARGS68K _AmiSSL_TS_STATUS_INFO_free(struct AmiSSLIFace *, TS_STATUS_INFO * a);
extern int                  VARARGS68K _AmiSSL_TS_RESP_verify_token(struct AmiSSLIFace *, TS_VERIFY_CTX * ctx, PKCS7 * token);
extern const void *         VARARGS68K _AmiSSL_OBJ_bsearch_ex_(struct AmiSSLIFace *, const void * key, const void * base, int num, int size, int (*cmp)(const void *, const void *), int flags);
extern int                  VARARGS68K _AmiSSL_ASN1_bn_print(struct AmiSSLIFace *, BIO * bp, const char * number, const BIGNUM * num, unsigned char * buf, int off);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_asn1_get_count(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ASN1_PCTX_set_nm_flags(struct AmiSSLIFace *, ASN1_PCTX * p, unsigned long flags);
extern int                  VARARGS68K _AmiSSL_EVP_DigestVerifyInit(struct AmiSSLIFace *, EVP_MD_CTX * ctx, EVP_PKEY_CTX ** pctx, const EVP_MD * type, ENGINE * e, EVP_PKEY * pkey);
extern ASN1_OBJECT *        VARARGS68K _AmiSSL_TS_TST_INFO_get_policy_id(struct AmiSSLIFace *, TS_TST_INFO * a);
extern int                  VARARGS68K _AmiSSL_TS_REQ_get_cert_req(struct AmiSSLIFace *, const TS_REQ * a);
extern void                 VARARGS68K _AmiSSL_X509_CRL_set_meth_data(struct AmiSSLIFace *, X509_CRL * crl, void * dat);
extern int                  VARARGS68K _AmiSSL_PKCS8_pkey_set0(struct AmiSSLIFace *, PKCS8_PRIV_KEY_INFO * priv, ASN1_OBJECT * aobj, int version, int ptype, void * pval, unsigned char * penc, int penclen);
extern int                  VARARGS68K _AmiSSL_ASN1_STRING_copy(struct AmiSSLIFace *, ASN1_STRING * dst, const ASN1_STRING * str);
extern int                  VARARGS68K _AmiSSL_X509_CRL_match(struct AmiSSLIFace *, const X509_CRL * a, const X509_CRL * b);
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_asn1_set_private(struct AmiSSLIFace *, EVP_PKEY_ASN1_METHOD * ameth, int (*priv_decode)(EVP_PKEY *pk, PKCS8_PRIV_KEY_INFO *p8inf), int (*priv_encode)(PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pk), int (*priv_print)(BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx));
extern void *               VARARGS68K _AmiSSL_TS_TST_INFO_get_ext_d2i(struct AmiSSLIFace *, TS_TST_INFO * a, int nid, int * crit, int * idx);
extern int                  VARARGS68K _AmiSSL_TS_RESP_CTX_add_policy(struct AmiSSLIFace *, TS_RESP_CTX * ctx, ASN1_OBJECT * policy);
extern TS_RESP *            VARARGS68K _AmiSSL_d2i_TS_RESP(struct AmiSSLIFace *, TS_RESP ** a, const unsigned char ** pp, long length);
extern STACK_OF(X509) *     VARARGS68K _AmiSSL_TS_CONF_load_certs(struct AmiSSLIFace *, const char * file);
extern TS_MSG_IMPRINT *     VARARGS68K _AmiSSL_TS_TST_INFO_get_msg_imprint(struct AmiSSLIFace *, TS_TST_INFO * a);
extern void                 VARARGS68K _AmiSSL_ERR_load_TS_strings(struct AmiSSLIFace *);
extern long                 VARARGS68K _AmiSSL_TS_TST_INFO_get_version(struct AmiSSLIFace *, const TS_TST_INFO * a);
extern EVP_PKEY_CTX *       VARARGS68K _AmiSSL_EVP_PKEY_CTX_dup(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx);
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_meth_set_verify(struct AmiSSLIFace *, EVP_PKEY_METHOD * pmeth, int (*verify_init)(EVP_PKEY_CTX *ctx), int (*verify)(EVP_PKEY_CTX *ctx, const unsigned char *sig, size_t siglen, const unsigned char *tbs, size_t tbslen));
extern int                  VARARGS68K _AmiSSL_i2b_PublicKey_bio(struct AmiSSLIFace *, BIO * out, EVP_PKEY * pk);
extern int                  VARARGS68K _AmiSSL_TS_CONF_set_certs(struct AmiSSLIFace *, CONF * conf, const char * section, const char * certs, TS_RESP_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_asn1_get0_info(struct AmiSSLIFace *, int * ppkey_id, int * ppkey_base_id, int * ppkey_flags, const char ** pinfo, const char ** ppem_str, const EVP_PKEY_ASN1_METHOD * ameth);
extern void                 VARARGS68K _AmiSSL_TS_VERIFY_CTX_free(struct AmiSSLIFace *, TS_VERIFY_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_TS_REQ_get_ext_by_critical(struct AmiSSLIFace *, TS_REQ * a, int crit, int lastpos);
extern void                 VARARGS68K _AmiSSL_TS_RESP_CTX_set_serial_cb(struct AmiSSLIFace *, TS_RESP_CTX * ctx, TS_serial_cb cb, void * data);
extern void *               VARARGS68K _AmiSSL_X509_CRL_get_meth_data(struct AmiSSLIFace *, X509_CRL * crl);
extern void                 VARARGS68K _AmiSSL_TS_RESP_CTX_set_time_cb(struct AmiSSLIFace *, TS_RESP_CTX * ctx, TS_time_cb cb, void * data);
extern ASN1_OCTET_STRING *  VARARGS68K _AmiSSL_TS_MSG_IMPRINT_get_msg(struct AmiSSLIFace *, TS_MSG_IMPRINT * a);
extern void                 VARARGS68K _AmiSSL_TS_TST_INFO_ext_free(struct AmiSSLIFace *, TS_TST_INFO * a);
extern long                 VARARGS68K _AmiSSL_TS_REQ_get_version(struct AmiSSLIFace *, const TS_REQ * a);
extern int                  VARARGS68K _AmiSSL_TS_REQ_add_ext(struct AmiSSLIFace *, TS_REQ * a, X509_EXTENSION * ex, int loc);
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_CTX_set_app_data(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx, void * data);
extern const void *         VARARGS68K _AmiSSL_OBJ_bsearch_(struct AmiSSLIFace *, const void * key, const void * base, int num, int size, int (*cmp)(const void *, const void *));
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_meth_set_verifyctx(struct AmiSSLIFace *, EVP_PKEY_METHOD * pmeth, int (*verifyctx_init)(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx), int (*verifyctx)(EVP_PKEY_CTX *ctx, const unsigned char *sig,int siglen, EVP_MD_CTX *mctx));
extern int                  VARARGS68K _AmiSSL_i2d_PKCS7_bio_stream(struct AmiSSLIFace *, BIO * out, PKCS7 * p7, BIO * in, int flags);
extern void                 VARARGS68K _AmiSSL_CRYPTO_THREADID_set_numeric(struct AmiSSLIFace *, CRYPTO_THREADID * id, unsigned long val);
extern PKCS7_SIGNER_INFO *  VARARGS68K _AmiSSL_PKCS7_sign_add_signer(struct AmiSSLIFace *, PKCS7 * p7, X509 * signcert, EVP_PKEY * pkey, const EVP_MD * md, int flags);
extern TS_TST_INFO *        VARARGS68K _AmiSSL_d2i_TS_TST_INFO_bio(struct AmiSSLIFace *, BIO * bp, TS_TST_INFO ** a);
extern int                  VARARGS68K _AmiSSL_TS_TST_INFO_get_ordering(struct AmiSSLIFace *, const TS_TST_INFO * a);
extern int                  VARARGS68K _AmiSSL_TS_RESP_print_bio(struct AmiSSLIFace *, BIO * bio, TS_RESP * a);
extern STACK_OF(X509_EXTENSION) * VARARGS68K _AmiSSL_TS_TST_INFO_get_exts(struct AmiSSLIFace *, TS_TST_INFO * a);
extern X509_ALGOR *         VARARGS68K _AmiSSL_PKCS5_pbe2_set_iv(struct AmiSSLIFace *, const EVP_CIPHER * cipher, int iter, unsigned char * salt, int saltlen, unsigned char * aiv, int prf_nid);
extern EVP_PKEY *           VARARGS68K _AmiSSL_b2i_PrivateKey(struct AmiSSLIFace *, const unsigned char ** in, long length);
extern void *               VARARGS68K _AmiSSL_EVP_PKEY_CTX_get_app_data(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_TS_REQ_set_cert_req(struct AmiSSLIFace *, TS_REQ * a, int cert_req);
extern int                  VARARGS68K _AmiSSL_CRYPTO_THREADID_set_callback(struct AmiSSLIFace *, void (*threadid_func)(CRYPTO_THREADID *));
extern int                  VARARGS68K _AmiSSL_TS_CONF_set_serial(struct AmiSSLIFace *, CONF * conf, const char * section, TS_serial_cb cb, TS_RESP_CTX * ctx);
extern void                 VARARGS68K _AmiSSL_TS_TST_INFO_free(struct AmiSSLIFace *, TS_TST_INFO * a);
extern int                  VARARGS68K _AmiSSL_TS_RESP_verify_response(struct AmiSSLIFace *, TS_VERIFY_CTX * ctx, TS_RESP * response);
extern int                  VARARGS68K _AmiSSL_i2d_ESS_ISSUER_SERIAL(struct AmiSSLIFace *, const ESS_ISSUER_SERIAL * a, unsigned char ** pp);
extern const ASN1_INTEGER * VARARGS68K _AmiSSL_TS_ACCURACY_get_seconds(struct AmiSSLIFace *, const TS_ACCURACY * a);
extern void                 VARARGS68K _AmiSSL_EVP_CIPHER_do_all(struct AmiSSLIFace *, void (*fn)(const EVP_CIPHER *ciph, const char *from, const char *to, void *x), void * arg);
extern EVP_PKEY *           VARARGS68K _AmiSSL_b2i_PrivateKey_bio(struct AmiSSLIFace *, BIO * in);
extern OCSP_CERTID *        VARARGS68K _AmiSSL_OCSP_CERTID_dup(struct AmiSSLIFace *, OCSP_CERTID * a);
extern int                  VARARGS68K _AmiSSL_X509_PUBKEY_get0_param(struct AmiSSLIFace *, ASN1_OBJECT ** ppkalg, const unsigned char ** pk, int * ppklen, X509_ALGOR ** pa, X509_PUBKEY * pub);
extern TS_MSG_IMPRINT *     VARARGS68K _AmiSSL_TS_MSG_IMPRINT_dup(struct AmiSSLIFace *, TS_MSG_IMPRINT * a);
extern void                 VARARGS68K _AmiSSL_PKCS7_print_ctx(struct AmiSSLIFace *, BIO * out, PKCS7 * x, int indent, const ASN1_PCTX * pctx);
extern int                  VARARGS68K _AmiSSL_i2d_TS_REQ_bio(struct AmiSSLIFace *, BIO * fp, TS_REQ * a);
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_asn1_set_param(struct AmiSSLIFace *, EVP_PKEY_ASN1_METHOD * ameth, int (*param_decode)(EVP_PKEY *pkey, const unsigned char **pder, int derlen), int (*param_encode)(const EVP_PKEY *pkey, unsigned char **pder), int (*param_missing)(const EVP_PKEY *pk), int (*param_copy)(EVP_PKEY *to, const EVP_PKEY *from), int (*param_cmp)(const EVP_PKEY *a, const EVP_PKEY *b), int (*param_print)(BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx));
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_meth_set_encrypt(struct AmiSSLIFace *, EVP_PKEY_METHOD * pmeth, int (*encrypt_init)(EVP_PKEY_CTX *ctx), int (*encryptfn)(EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen));
extern void                 VARARGS68K _AmiSSL_ASN1_PCTX_set_flags(struct AmiSSLIFace *, ASN1_PCTX * p, unsigned long flags);
extern int                  VARARGS68K _AmiSSL_i2d_ESS_CERT_ID(struct AmiSSLIFace *, const ESS_CERT_ID * a, unsigned char ** pp);
extern TS_VERIFY_CTX *      VARARGS68K _AmiSSL_TS_VERIFY_CTX_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_TS_RESP_CTX_set_extension_cb(struct AmiSSLIFace *, TS_RESP_CTX * ctx, TS_extension_cb cb, void * data);
extern int                  VARARGS68K _AmiSSL_TS_RESP_CTX_set_status_info_cond(struct AmiSSLIFace *, TS_RESP_CTX * ctx, int status, const char * text);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_verify(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx, const unsigned char * sig, size_t siglen, const unsigned char * tbs, size_t tbslen);
extern X509_CRL_METHOD *    VARARGS68K _AmiSSL_X509_CRL_METHOD_new(struct AmiSSLIFace *, int (*crl_init)(X509_CRL *crl), int (*crl_free)(X509_CRL *crl), int (*crl_lookup)(X509_CRL *crl, X509_REVOKED **ret, ASN1_INTEGER *ser, X509_NAME *issuer), int (*crl_verify)(X509_CRL *crl, EVP_PKEY *pk));
extern int                  VARARGS68K _AmiSSL_EVP_DigestSignFinal(struct AmiSSLIFace *, EVP_MD_CTX * ctx, unsigned char * sigret, size_t * siglen);
extern int                  VARARGS68K _AmiSSL_TS_RESP_CTX_set_def_policy(struct AmiSSLIFace *, TS_RESP_CTX * ctx, ASN1_OBJECT * def_policy);
extern TS_RESP *            VARARGS68K _AmiSSL_TS_RESP_create_response(struct AmiSSLIFace *, TS_RESP_CTX * ctx, BIO * req_bio);
extern void                 VARARGS68K _AmiSSL_PKCS7_SIGNER_INFO_get0_algs(struct AmiSSLIFace *, PKCS7_SIGNER_INFO * si, EVP_PKEY ** pk, X509_ALGOR ** pdig, X509_ALGOR ** psig);
extern const ASN1_INTEGER * VARARGS68K _AmiSSL_TS_TST_INFO_get_nonce(struct AmiSSLIFace *, const TS_TST_INFO * a);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_decrypt_old(struct AmiSSLIFace *, unsigned char * dec_key, const unsigned char * enc_key, int enc_key_len, EVP_PKEY * private_key);
extern int                  VARARGS68K _AmiSSL_TS_TST_INFO_set_policy_id(struct AmiSSLIFace *, TS_TST_INFO * a, ASN1_OBJECT * policy_id);
extern int                  VARARGS68K _AmiSSL_TS_CONF_set_ess_cert_id_chain(struct AmiSSLIFace *, CONF * conf, const char * section, TS_RESP_CTX * ctx);
extern EVP_PKEY *           VARARGS68K _AmiSSL_EVP_PKEY_CTX_get0_pkey(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx);
extern TS_REQ *             VARARGS68K _AmiSSL_d2i_TS_REQ(struct AmiSSLIFace *, TS_REQ ** a, const unsigned char ** pp, long length);
extern const EVP_PKEY_ASN1_METHOD * VARARGS68K _AmiSSL_EVP_PKEY_asn1_find_str(struct AmiSSLIFace *, ENGINE ** pe, const char * str, int len);
extern BIO_METHOD *         VARARGS68K _AmiSSL_BIO_f_asn1(struct AmiSSLIFace *);
extern ESS_SIGNING_CERT *   VARARGS68K _AmiSSL_ESS_SIGNING_CERT_new(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_EVP_PBE_find(struct AmiSSLIFace *, int type, int pbe_nid, int * pcnid, int * pmnid, EVP_PBE_KEYGEN ** pkeygen);
extern int                  VARARGS68K _AmiSSL_X509_CRL_get0_by_cert(struct AmiSSLIFace *, X509_CRL * crl, X509_REVOKED ** ret, X509 * x);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_derive(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx, unsigned char * key, size_t * keylen);
extern int                  VARARGS68K _AmiSSL_i2d_TS_REQ(struct AmiSSLIFace *, const TS_REQ * a, unsigned char ** pp);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_TS_TST_INFO_delete_ext(struct AmiSSLIFace *, TS_TST_INFO * a, int loc);
extern void                 VARARGS68K _AmiSSL_ESS_ISSUER_SERIAL_free(struct AmiSSLIFace *, ESS_ISSUER_SERIAL * a);
extern void                 VARARGS68K _AmiSSL_ASN1_PCTX_set_str_flags(struct AmiSSLIFace *, ASN1_PCTX * p, unsigned long flags);
extern int                  VARARGS68K _AmiSSL_TS_CONF_set_signer_key(struct AmiSSLIFace *, CONF * conf, const char * section, const char * key, const char * pass, TS_RESP_CTX * ctx);
extern const ASN1_INTEGER * VARARGS68K _AmiSSL_TS_ACCURACY_get_millis(struct AmiSSLIFace *, const TS_ACCURACY * a);
extern PKCS7 *              VARARGS68K _AmiSSL_TS_RESP_get_token(struct AmiSSLIFace *, TS_RESP * a);
extern TS_ACCURACY *        VARARGS68K _AmiSSL_TS_ACCURACY_dup(struct AmiSSLIFace *, TS_ACCURACY * a);
extern void                 VARARGS68K _AmiSSL_X509_CRL_set_default_method(struct AmiSSLIFace *, const X509_CRL_METHOD * meth);
extern unsigned long        VARARGS68K _AmiSSL_CRYPTO_THREADID_hash(struct AmiSSLIFace *, const CRYPTO_THREADID * id);
extern void                 VARARGS68K _AmiSSL_TS_RESP_free(struct AmiSSLIFace *, TS_RESP * a);
extern void                 VARARGS68K _AmiSSL_ISSUING_DIST_POINT_free(struct AmiSSLIFace *, ISSUING_DIST_POINT * a);
extern ESS_ISSUER_SERIAL *  VARARGS68K _AmiSSL_ESS_ISSUER_SERIAL_new(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_PKCS7_add1_attrib_digest(struct AmiSSLIFace *, PKCS7_SIGNER_INFO * si, const unsigned char * md, int mdlen);
extern int                  VARARGS68K _AmiSSL_TS_RESP_CTX_add_md(struct AmiSSLIFace *, TS_RESP_CTX * ctx, const EVP_MD * md);
extern TS_TST_INFO *        VARARGS68K _AmiSSL_TS_TST_INFO_dup(struct AmiSSLIFace *, TS_TST_INFO * a);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_Parameters(struct AmiSSLIFace *, BIO * bp, EVP_PKEY * x);
extern TS_ACCURACY *        VARARGS68K _AmiSSL_TS_TST_INFO_get_accuracy(struct AmiSSLIFace *, TS_TST_INFO * a);
extern int                  VARARGS68K _AmiSSL_X509_CRL_get0_by_serial(struct AmiSSLIFace *, X509_CRL * crl, X509_REVOKED ** ret, ASN1_INTEGER * serial);
extern int                  VARARGS68K _AmiSSL_TS_TST_INFO_set_version(struct AmiSSLIFace *, TS_TST_INFO * a, long version);
extern TS_TST_INFO *        VARARGS68K _AmiSSL_TS_RESP_CTX_get_tst_info(struct AmiSSLIFace *, TS_RESP_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_TS_RESP_verify_signature(struct AmiSSLIFace *, PKCS7 * token, STACK_OF(X509) * certs, X509_STORE * store, X509 ** signer_out);
extern void                 VARARGS68K (*_AmiSSL_CRYPTO_THREADID_get_callback(struct AmiSSLIFace *))(CRYPTO_THREADID *);
extern GENERAL_NAME *       VARARGS68K _AmiSSL_TS_TST_INFO_get_tsa(struct AmiSSLIFace *, TS_TST_INFO * a);
extern TS_STATUS_INFO *     VARARGS68K _AmiSSL_TS_STATUS_INFO_new(struct AmiSSLIFace *);
extern int                  VARARGS68K (*_AmiSSL_EVP_PKEY_CTX_get_cb(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx))(EVP_PKEY_CTX *ctx);
extern void *               VARARGS68K _AmiSSL_TS_REQ_get_ext_d2i(struct AmiSSLIFace *, TS_REQ * a, int nid, int * crit, int * idx);
extern int                  VARARGS68K _AmiSSL_GENERAL_NAME_set0_othername(struct AmiSSLIFace *, GENERAL_NAME * gen, ASN1_OBJECT * oid, ASN1_TYPE * value);
extern int                  VARARGS68K _AmiSSL_TS_TST_INFO_get_ext_count(struct AmiSSLIFace *, TS_TST_INFO * a);
extern TS_REQ *             VARARGS68K _AmiSSL_TS_RESP_CTX_get_request(struct AmiSSLIFace *, TS_RESP_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_i2d_NETSCAPE_X509(struct AmiSSLIFace *, NETSCAPE_X509 * a, unsigned char ** out);
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_meth_set_signctx(struct AmiSSLIFace *, EVP_PKEY_METHOD * pmeth, int (*signctx_init)(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx), int (*signctx)(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, EVP_MD_CTX *mctx));
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_asn1_copy(struct AmiSSLIFace *, EVP_PKEY_ASN1_METHOD * dst, const EVP_PKEY_ASN1_METHOD * src);
extern int                  VARARGS68K _AmiSSL_ASN1_TYPE_cmp(struct AmiSSLIFace *, ASN1_TYPE * a, ASN1_TYPE * b);
extern void                 VARARGS68K _AmiSSL_EVP_CIPHER_do_all_sorted(struct AmiSSLIFace *, void (*fn)(const EVP_CIPHER *ciph, const char *from, const char *to, void *x), void * arg);
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_CTX_free(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx);
extern STACK_OF(X509) *     VARARGS68K _AmiSSL_X509_STORE_get1_certs(struct AmiSSLIFace *, X509_STORE_CTX * st, X509_NAME * nm);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_CTX_get_operation(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx);
extern ESS_SIGNING_CERT *   VARARGS68K _AmiSSL_d2i_ESS_SIGNING_CERT(struct AmiSSLIFace *, ESS_SIGNING_CERT ** a, const unsigned char ** pp, long length);
extern int                  VARARGS68K _AmiSSL_TS_CONF_set_ordering(struct AmiSSLIFace *, CONF * conf, const char * section, TS_RESP_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_EVP_PBE_alg_add_type(struct AmiSSLIFace *, int pbe_type, int pbe_nid, int cipher_nid, int md_nid, EVP_PBE_KEYGEN * keygen);
extern int                  VARARGS68K _AmiSSL_TS_REQ_set_version(struct AmiSSLIFace *, TS_REQ * a, long version);
extern void *               VARARGS68K _AmiSSL_EVP_PKEY_get0(struct AmiSSLIFace *, EVP_PKEY * pkey);
extern int                  VARARGS68K _AmiSSL_BIO_asn1_set_suffix(struct AmiSSLIFace *, BIO * b, asn1_ps_func * suffix, asn1_ps_func * suffix_free);
extern int                  VARARGS68K _AmiSSL_i2d_TS_STATUS_INFO(struct AmiSSLIFace *, const TS_STATUS_INFO * a, unsigned char ** pp);
extern void                 VARARGS68K _AmiSSL_EVP_MD_do_all(struct AmiSSLIFace *, void (*fn)(const EVP_MD *ciph, const char *from, const char *to, void *x), void * arg);
extern int                  VARARGS68K _AmiSSL_TS_TST_INFO_set_accuracy(struct AmiSSLIFace *, TS_TST_INFO * a, TS_ACCURACY * accuracy);
extern int                  VARARGS68K _AmiSSL_PKCS7_add_attrib_content_type(struct AmiSSLIFace *, PKCS7_SIGNER_INFO * si, ASN1_OBJECT * coid);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_meth_add0(struct AmiSSLIFace *, const EVP_PKEY_METHOD * pmeth);
extern int                  VARARGS68K _AmiSSL_TS_TST_INFO_set_tsa(struct AmiSSLIFace *, TS_TST_INFO * a, GENERAL_NAME * tsa);
extern EVP_PKEY_METHOD *    VARARGS68K _AmiSSL_EVP_PKEY_meth_new(struct AmiSSLIFace *, int id, int flags);
extern int                  VARARGS68K _AmiSSL_TS_CONF_set_accuracy(struct AmiSSLIFace *, CONF * conf, const char * section, TS_RESP_CTX * ctx);
extern void                 VARARGS68K _AmiSSL_ASN1_PCTX_set_oid_flags(struct AmiSSLIFace *, ASN1_PCTX * p, unsigned long flags);
extern ESS_SIGNING_CERT *   VARARGS68K _AmiSSL_ESS_SIGNING_CERT_dup(struct AmiSSLIFace *, ESS_SIGNING_CERT * a);
extern TS_REQ *             VARARGS68K _AmiSSL_d2i_TS_REQ_bio(struct AmiSSLIFace *, BIO * fp, TS_REQ ** a);
extern ASN1_TIME *          VARARGS68K _AmiSSL_X509_time_adj_ex(struct AmiSSLIFace *, ASN1_TIME * s, int offset_day, long offset_sec, time_t * t);
extern void                 VARARGS68K _AmiSSL_TS_RESP_CTX_add_flags(struct AmiSSLIFace *, TS_RESP_CTX * ctx, int flags);
extern TS_STATUS_INFO *     VARARGS68K _AmiSSL_d2i_TS_STATUS_INFO(struct AmiSSLIFace *, TS_STATUS_INFO ** a, const unsigned char ** pp, long length);
extern int                  VARARGS68K _AmiSSL_TS_MSG_IMPRINT_set_msg(struct AmiSSLIFace *, TS_MSG_IMPRINT * a, unsigned char * d, int len);
extern int                  VARARGS68K _AmiSSL_BIO_asn1_get_suffix(struct AmiSSLIFace *, BIO * b, asn1_ps_func ** psuffix, asn1_ps_func ** psuffix_free);
extern void                 VARARGS68K _AmiSSL_TS_REQ_free(struct AmiSSLIFace *, TS_REQ * a);
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_meth_free(struct AmiSSLIFace *, EVP_PKEY_METHOD * pmeth);
extern STACK_OF(X509_EXTENSION) * VARARGS68K _AmiSSL_TS_REQ_get_exts(struct AmiSSLIFace *, TS_REQ * a);
extern int                  VARARGS68K _AmiSSL_TS_RESP_CTX_set_clock_precision_digits(struct AmiSSLIFace *, TS_RESP_CTX * ctx, unsigned clock_precision_digits);
extern int                  VARARGS68K _AmiSSL_TS_RESP_CTX_add_failure_info(struct AmiSSLIFace *, TS_RESP_CTX * ctx, int failure);
extern int                  VARARGS68K _AmiSSL_i2d_TS_RESP_bio(struct AmiSSLIFace *, BIO * fp, TS_RESP * a);
extern EVP_PKEY *           VARARGS68K _AmiSSL_EVP_PKEY_CTX_get0_peerkey(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx);
extern TS_REQ *             VARARGS68K _AmiSSL_TS_REQ_new(struct AmiSSLIFace *);
extern TS_MSG_IMPRINT *     VARARGS68K _AmiSSL_TS_MSG_IMPRINT_new(struct AmiSSLIFace *);
extern const EVP_PKEY_METHOD * VARARGS68K _AmiSSL_EVP_PKEY_meth_find(struct AmiSSLIFace *, int type);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_id(struct AmiSSLIFace *, const EVP_PKEY * pkey);
extern int                  VARARGS68K _AmiSSL_TS_TST_INFO_set_serial(struct AmiSSLIFace *, TS_TST_INFO * a, const ASN1_INTEGER * serial);
extern GENERAL_NAME *       VARARGS68K _AmiSSL_a2i_GENERAL_NAME(struct AmiSSLIFace *, GENERAL_NAME * out, const X509V3_EXT_METHOD * method, X509V3_CTX * ctx, int gen_type, char * value, int is_nc);
extern int                  VARARGS68K _AmiSSL_TS_CONF_set_crypto_device(struct AmiSSLIFace *, CONF * conf, const char * section, const char * device);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_verify_init(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_TS_CONF_set_policies(struct AmiSSLIFace *, CONF * conf, const char * section, TS_RESP_CTX * ctx);
extern ASN1_PCTX *          VARARGS68K _AmiSSL_ASN1_PCTX_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ESS_CERT_ID_free(struct AmiSSLIFace *, ESS_CERT_ID * a);
extern void                 VARARGS68K _AmiSSL_TS_MSG_IMPRINT_free(struct AmiSSLIFace *, TS_MSG_IMPRINT * a);
extern void                 VARARGS68K _AmiSSL_TS_VERIFY_CTX_init(struct AmiSSLIFace *, TS_VERIFY_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_PKCS7_stream(struct AmiSSLIFace *, unsigned char *** boundary, PKCS7 * p7);
extern int                  VARARGS68K _AmiSSL_TS_RESP_CTX_set_certs(struct AmiSSLIFace *, TS_RESP_CTX * ctx, STACK_OF(X509) * certs);
extern int                  VARARGS68K _AmiSSL_TS_CONF_set_def_policy(struct AmiSSLIFace *, CONF * conf, const char * section, const char * policy, TS_RESP_CTX * ctx);
extern ASN1_GENERALIZEDTIME * VARARGS68K _AmiSSL_ASN1_GENERALIZEDTIME_adj(struct AmiSSLIFace *, ASN1_GENERALIZEDTIME * s, time_t t, int offset_day, long offset_sec);
extern NETSCAPE_X509 *      VARARGS68K _AmiSSL_NETSCAPE_X509_new(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_TS_ACCURACY_free(struct AmiSSLIFace *, TS_ACCURACY * a);
extern TS_TST_INFO *        VARARGS68K _AmiSSL_TS_RESP_get_tst_info(struct AmiSSLIFace *, TS_RESP * a);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_derive_set_peer(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx, EVP_PKEY * peer);
extern EVP_PKEY *           VARARGS68K _AmiSSL_PEM_read_bio_Parameters(struct AmiSSLIFace *, BIO * bp, EVP_PKEY ** x);
extern int                  VARARGS68K _AmiSSL_TS_CONF_set_clock_precision_digits(struct AmiSSLIFace *, CONF * conf, const char * section, TS_RESP_CTX * ctx);
extern ESS_ISSUER_SERIAL *  VARARGS68K _AmiSSL_ESS_ISSUER_SERIAL_dup(struct AmiSSLIFace *, ESS_ISSUER_SERIAL * a);
extern const ASN1_INTEGER * VARARGS68K _AmiSSL_TS_ACCURACY_get_micros(struct AmiSSLIFace *, const TS_ACCURACY * a);
extern unsigned long        VARARGS68K _AmiSSL_ASN1_PCTX_get_str_flags(struct AmiSSLIFace *, ASN1_PCTX * p);
extern int                  VARARGS68K _AmiSSL_NAME_CONSTRAINTS_check(struct AmiSSLIFace *, X509 * x, NAME_CONSTRAINTS * nc);
extern int                  VARARGS68K _AmiSSL_ASN1_BIT_STRING_check(struct AmiSSLIFace *, ASN1_BIT_STRING * a, unsigned char * flags, int flags_len);
extern int                  VARARGS68K _AmiSSL_X509_check_akid(struct AmiSSLIFace *, X509 * issuer, AUTHORITY_KEYID * akid);
extern void                 VARARGS68K _AmiSSL_ASN1_PCTX_free(struct AmiSSLIFace *, ASN1_PCTX * p);
extern int                  VARARGS68K _AmiSSL_PEM_write_bio_ASN1_stream(struct AmiSSLIFace *, BIO * out, ASN1_VALUE * val, BIO * in, int flags, const char * hdr, const ASN1_ITEM * it);
extern int                  VARARGS68K _AmiSSL_i2d_ASN1_bio_stream(struct AmiSSLIFace *, BIO * out, ASN1_VALUE * val, BIO * in, int flags, const ASN1_ITEM * it);
extern int                  VARARGS68K _AmiSSL_TS_X509_ALGOR_print_bio(struct AmiSSLIFace *, BIO * bio, const X509_ALGOR * alg);
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_meth_set_cleanup(struct AmiSSLIFace *, EVP_PKEY_METHOD * pmeth, void (*cleanup)(EVP_PKEY_CTX *ctx));
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_asn1_free(struct AmiSSLIFace *, EVP_PKEY_ASN1_METHOD * ameth);
extern void                 VARARGS68K _AmiSSL_ESS_SIGNING_CERT_free(struct AmiSSLIFace *, ESS_SIGNING_CERT * a);
extern int                  VARARGS68K _AmiSSL_TS_TST_INFO_set_msg_imprint(struct AmiSSLIFace *, TS_TST_INFO * a, TS_MSG_IMPRINT * msg_imprint);
extern int                  VARARGS68K _AmiSSL_GENERAL_NAME_cmp(struct AmiSSLIFace *, GENERAL_NAME * a, GENERAL_NAME * b);
extern ASN1_SEQUENCE_ANY *  VARARGS68K _AmiSSL_d2i_ASN1_SET_ANY(struct AmiSSLIFace *, ASN1_SEQUENCE_ANY ** a, const unsigned char ** pp, long length);
extern ASN1_SEQUENCE_ANY *  VARARGS68K _AmiSSL_d2i_ASN1_SEQUENCE_ANY(struct AmiSSLIFace *, ASN1_SEQUENCE_ANY ** a, const unsigned char ** pp, long length);
extern int                  VARARGS68K _AmiSSL_GENERAL_NAME_get0_otherName(struct AmiSSLIFace *, GENERAL_NAME * gen, ASN1_OBJECT ** poid, ASN1_TYPE ** pvalue);
extern ESS_CERT_ID *        VARARGS68K _AmiSSL_d2i_ESS_CERT_ID(struct AmiSSLIFace *, ESS_CERT_ID ** a, const unsigned char ** pp, long length);
extern int                  VARARGS68K _AmiSSL_OBJ_find_sigid_algs(struct AmiSSLIFace *, int signid, int * pdig_nid, int * ppkey_nid);
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_meth_set_keygen(struct AmiSSLIFace *, EVP_PKEY_METHOD * pmeth, int (*keygen_init)(EVP_PKEY_CTX *ctx), int (*keygen)(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey));
extern int                  VARARGS68K _AmiSSL_PKCS5_PBKDF2_HMAC(struct AmiSSLIFace *, const char * pass, int passlen, const unsigned char * salt, int saltlen, int iter, const EVP_MD * digest, int keylen, unsigned char * out);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_paramgen(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx, EVP_PKEY ** ppkey);
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_meth_set_paramgen(struct AmiSSLIFace *, EVP_PKEY_METHOD * pmeth, int (*paramgen_init)(EVP_PKEY_CTX *ctx), int (*paramgen)(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey));
extern BIO *                VARARGS68K _AmiSSL_BIO_new_PKCS7(struct AmiSSLIFace *, BIO * out, PKCS7 * p7);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_verify_recover(struct AmiSSLIFace *, EVP_PKEY_CTX * ctx, unsigned char * rout, size_t * routlen, const unsigned char * sig, size_t siglen);
extern int                  VARARGS68K _AmiSSL_TS_ext_print_bio(struct AmiSSLIFace *, BIO * bio, STACK_OF(X509_EXTENSION) * extensions);
extern int                  VARARGS68K _AmiSSL_TS_ASN1_INTEGER_print_bio(struct AmiSSLIFace *, BIO * bio, const ASN1_INTEGER * num);
extern void                 VARARGS68K _AmiSSL_check_defer(struct AmiSSLIFace *, int nid);
extern int                  VARARGS68K _AmiSSL_DSO_pathbyaddr(struct AmiSSLIFace *, void * addr, char * path, int sz);
extern int                  VARARGS68K _AmiSSL_EVP_PKEY_set_type(struct AmiSSLIFace *, EVP_PKEY * pkey, int type);
extern int                  VARARGS68K _AmiSSL_TS_ACCURACY_set_micros(struct AmiSSLIFace *, TS_ACCURACY * a, const ASN1_INTEGER * micros);
extern TS_VERIFY_CTX *      VARARGS68K _AmiSSL_TS_REQ_to_TS_VERIFY_CTX(struct AmiSSLIFace *, TS_REQ * req, TS_VERIFY_CTX * ctx);
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_meth_set_copy(struct AmiSSLIFace *, EVP_PKEY_METHOD * pmeth, int (*copy)(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src));
extern void                 VARARGS68K _AmiSSL_ASN1_PCTX_set_cert_flags(struct AmiSSLIFace *, ASN1_PCTX * p, unsigned long flags);
extern X509_EXTENSION *     VARARGS68K _AmiSSL_TS_TST_INFO_get_ext(struct AmiSSLIFace *, TS_TST_INFO * a, int loc);
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_asn1_set_ctrl(struct AmiSSLIFace *, EVP_PKEY_ASN1_METHOD * ameth, int (*pkey_ctrl)(EVP_PKEY *pkey, int op, long arg1, void *arg2));
extern int                  VARARGS68K _AmiSSL_TS_TST_INFO_get_ext_by_critical(struct AmiSSLIFace *, TS_TST_INFO * a, int crit, int lastpos);
extern EVP_PKEY_CTX *       VARARGS68K _AmiSSL_EVP_PKEY_CTX_new_id(struct AmiSSLIFace *, int id, ENGINE * e);
extern int                  VARARGS68K _AmiSSL_TS_REQ_get_ext_by_OBJ(struct AmiSSLIFace *, TS_REQ * a, ASN1_OBJECT * obj, int lastpos);
extern int                  VARARGS68K _AmiSSL_TS_CONF_set_signer_cert(struct AmiSSLIFace *, CONF * conf, const char * section, const char * cert, TS_RESP_CTX * ctx);
extern unsigned long        VARARGS68K _AmiSSL_X509_NAME_hash_old(struct AmiSSLIFace *, X509_NAME * x);
extern int                  VARARGS68K _AmiSSL_ASN1_TIME_set_string(struct AmiSSLIFace *, ASN1_TIME * s, const char * str);
extern unsigned long        VARARGS68K _AmiSSL_EVP_MD_flags(struct AmiSSLIFace *, const EVP_MD * md);
extern void                 VARARGS68K _AmiSSL_TS_RESP_CTX_free(struct AmiSSLIFace *, TS_RESP_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_OCSP_REQ_CTX_add1_header(struct AmiSSLIFace *, OCSP_REQ_CTX * rctx, const char * name, const char * value);
extern int                  VARARGS68K _AmiSSL_OCSP_REQ_CTX_set1_req(struct AmiSSLIFace *, OCSP_REQ_CTX * rctx, OCSP_REQUEST * req);
extern void                 VARARGS68K _AmiSSL_X509_STORE_set_verify_cb(struct AmiSSLIFace *, X509_STORE * ctx, int (*verify_cb)(int, X509_STORE_CTX *));
extern X509_CRL *           VARARGS68K _AmiSSL_X509_STORE_CTX_get0_current_crl(struct AmiSSLIFace *, X509_STORE_CTX * ctx);
extern X509_STORE_CTX *     VARARGS68K _AmiSSL_X509_STORE_CTX_get0_parent_ctx(struct AmiSSLIFace *, X509_STORE_CTX * ctx);
extern X509 *               VARARGS68K _AmiSSL_X509_STORE_CTX_get0_current_issuer(struct AmiSSLIFace *, X509_STORE_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_EVP_CIPHER_CTX_copy(struct AmiSSLIFace *, EVP_CIPHER_CTX * out, const EVP_CIPHER_CTX * in);
extern char *               VARARGS68K (*_AmiSSL_UI_method_get_prompt_constructor(struct AmiSSLIFace *, UI_METHOD * method))(UI*, const char*, const char*);
extern int                  VARARGS68K _AmiSSL_UI_method_set_prompt_constructor(struct AmiSSLIFace *, UI_METHOD * method, char *(*prompt_constructor)(UI* ui, const char* object_desc, const char* object_name));
extern int                  VARARGS68K _AmiSSL_EVP_read_pw_string_min(struct AmiSSLIFace *, char * buf, int minlen, int maxlen, const char * prompt, int verify);
extern size_t               VARARGS68K _AmiSSL_CRYPTO_cts128_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, cbc128_f cbc);
extern size_t               VARARGS68K _AmiSSL_CRYPTO_cts128_decrypt_block(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, block128_f block);
extern void                 VARARGS68K _AmiSSL_CRYPTO_cfb128_1_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, size_t bits, const void * key, unsigned char * ivec, int * num, int enc, block128_f block);
extern void                 VARARGS68K _AmiSSL_CRYPTO_cbc128_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, block128_f block);
extern void                 VARARGS68K _AmiSSL_CRYPTO_ctr128_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, unsigned char * ecount_buf, unsigned int * num, block128_f block);
extern void                 VARARGS68K _AmiSSL_CRYPTO_ofb128_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, int * num, block128_f block);
extern size_t               VARARGS68K _AmiSSL_CRYPTO_cts128_decrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, cbc128_f cbc);
extern size_t               VARARGS68K _AmiSSL_CRYPTO_cts128_encrypt_block(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, block128_f block);
extern void                 VARARGS68K _AmiSSL_CRYPTO_cbc128_decrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, block128_f block);
extern void                 VARARGS68K _AmiSSL_CRYPTO_cfb128_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, int * num, int enc, block128_f block);
extern void                 VARARGS68K _AmiSSL_CRYPTO_cfb128_8_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, size_t length, const void * key, unsigned char * ivec, int * num, int enc, block128_f block);
extern int                  VARARGS68K _AmiSSL_OPENSSL_strcasecmp(struct AmiSSLIFace *, const char * str1, const char * str2);
extern int                  VARARGS68K _AmiSSL_OPENSSL_memcmp(struct AmiSSLIFace *, const void * p1, const void * p2, size_t n);
extern int                  VARARGS68K _AmiSSL_OPENSSL_strncasecmp(struct AmiSSLIFace *, const char * str1, const char * str2, size_t n);
extern struct tm *          VARARGS68K _AmiSSL_OPENSSL_gmtime(struct AmiSSLIFace *, const time_t * timer, struct tm * result);
extern int                  VARARGS68K _AmiSSL_OPENSSL_gmtime_adj(struct AmiSSLIFace *, struct tm * tm, int offset_day, long offset_sec);
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_meth_get0_info(struct AmiSSLIFace *, int * ppkey_id, int * pflags, const EVP_PKEY_METHOD * meth);
extern void                 VARARGS68K _AmiSSL_EVP_PKEY_meth_copy(struct AmiSSLIFace *, EVP_PKEY_METHOD * dst, const EVP_PKEY_METHOD * src);
extern int                  VARARGS68K _AmiSSL_RSA_padding_add_PKCS1_PSS_mgf1(struct AmiSSLIFace *, RSA * rsa, unsigned char * EM, const unsigned char * mHash, const EVP_MD * Hash, const EVP_MD * mgf1Hash, int sLen);
extern int                  VARARGS68K _AmiSSL_RSA_verify_PKCS1_PSS_mgf1(struct AmiSSLIFace *, RSA * rsa, const unsigned char * mHash, const EVP_MD * Hash, const EVP_MD * mgf1Hash, const unsigned char * EM, int sLen);
extern void                 VARARGS68K _AmiSSL_X509_ALGOR_set_md(struct AmiSSLIFace *, X509_ALGOR * alg, const EVP_MD * md);
extern int                  VARARGS68K _AmiSSL_CMAC_CTX_copy(struct AmiSSLIFace *, CMAC_CTX * out, const CMAC_CTX * in);
extern void                 VARARGS68K _AmiSSL_CMAC_CTX_free(struct AmiSSLIFace *, CMAC_CTX * ctx);
extern EVP_CIPHER_CTX *     VARARGS68K _AmiSSL_CMAC_CTX_get0_cipher_ctx(struct AmiSSLIFace *, CMAC_CTX * ctx);
extern void                 VARARGS68K _AmiSSL_CMAC_CTX_cleanup(struct AmiSSLIFace *, CMAC_CTX * ctx);
extern int                  VARARGS68K _AmiSSL_CMAC_Init(struct AmiSSLIFace *, CMAC_CTX * ctx, const void * key, size_t keylen, const EVP_CIPHER * cipher, ENGINE * impl);
extern int                  VARARGS68K _AmiSSL_CMAC_Update(struct AmiSSLIFace *, CMAC_CTX * ctx, const void * data, size_t dlen);
extern int                  VARARGS68K _AmiSSL_CMAC_resume(struct AmiSSLIFace *, CMAC_CTX * ctx);
extern CMAC_CTX *           VARARGS68K _AmiSSL_CMAC_CTX_new(struct AmiSSLIFace *);
extern int                  VARARGS68K _AmiSSL_CMAC_Final(struct AmiSSLIFace *, CMAC_CTX * ctx, unsigned char * out, size_t * poutlen);
extern void                 VARARGS68K _AmiSSL_CRYPTO_ctr128_encrypt_ctr32(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, unsigned char * ecount_buf, unsigned int * num, ctr128_f ctr);
extern void                 VARARGS68K _AmiSSL_CRYPTO_gcm128_release(struct AmiSSLIFace *, GCM128_CONTEXT * ctx);
extern int                  VARARGS68K _AmiSSL_CRYPTO_ccm128_decrypt_ccm64(struct AmiSSLIFace *, CCM128_CONTEXT * ctx, const unsigned char * inp, unsigned char * out, size_t len, ccm128_f stream);
extern int                  VARARGS68K _AmiSSL_CRYPTO_ccm128_encrypt(struct AmiSSLIFace *, CCM128_CONTEXT * ctx, const unsigned char * inp, unsigned char * out, size_t len);
extern int                  VARARGS68K _AmiSSL_CRYPTO_gcm128_encrypt(struct AmiSSLIFace *, GCM128_CONTEXT * ctx, const unsigned char * in, unsigned char * out, size_t len);
extern int                  VARARGS68K _AmiSSL_CRYPTO_xts128_encrypt(struct AmiSSLIFace *, XTS128_CONTEXT * ctx, const unsigned char * iv, const unsigned char * inp, unsigned char * out, size_t len, int enc);
extern size_t               VARARGS68K _AmiSSL_CRYPTO_nistcts128_decrypt_block(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, block128_f block);
extern void                 VARARGS68K _AmiSSL_CRYPTO_gcm128_setiv(struct AmiSSLIFace *, GCM128_CONTEXT * ctx, const unsigned char * iv, size_t len);
extern size_t               VARARGS68K _AmiSSL_CRYPTO_nistcts128_encrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, cbc128_f cbc);
extern void                 VARARGS68K _AmiSSL_CRYPTO_gcm128_tag(struct AmiSSLIFace *, GCM128_CONTEXT * ctx, unsigned char * tag, size_t len);
extern int                  VARARGS68K _AmiSSL_CRYPTO_ccm128_encrypt_ccm64(struct AmiSSLIFace *, CCM128_CONTEXT * ctx, const unsigned char * inp, unsigned char * out, size_t len, ccm128_f stream);
extern int                  VARARGS68K _AmiSSL_CRYPTO_ccm128_setiv(struct AmiSSLIFace *, CCM128_CONTEXT * ctx, const unsigned char * nonce, size_t nlen, size_t mlen);
extern size_t               VARARGS68K _AmiSSL_CRYPTO_nistcts128_encrypt_block(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, block128_f block);
extern int                  VARARGS68K _AmiSSL_CRYPTO_gcm128_aad(struct AmiSSLIFace *, GCM128_CONTEXT * ctx, const unsigned char * aad, size_t len);
extern void                 VARARGS68K _AmiSSL_CRYPTO_ccm128_init(struct AmiSSLIFace *, CCM128_CONTEXT * ctx, unsigned int M, unsigned int L, void * key, block128_f block);
extern size_t               VARARGS68K _AmiSSL_CRYPTO_nistcts128_decrypt(struct AmiSSLIFace *, const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, cbc128_f cbc);
extern GCM128_CONTEXT *     VARARGS68K _AmiSSL_CRYPTO_gcm128_new(struct AmiSSLIFace *, void * key, block128_f block);
extern size_t               VARARGS68K _AmiSSL_CRYPTO_ccm128_tag(struct AmiSSLIFace *, CCM128_CONTEXT * ctx, unsigned char * tag, size_t len);
extern int                  VARARGS68K _AmiSSL_CRYPTO_ccm128_decrypt(struct AmiSSLIFace *, CCM128_CONTEXT * ctx, const unsigned char * inp, unsigned char * out, size_t len);
extern void                 VARARGS68K _AmiSSL_CRYPTO_ccm128_aad(struct AmiSSLIFace *, CCM128_CONTEXT * ctx, const unsigned char * aad, size_t alen);
extern void                 VARARGS68K _AmiSSL_CRYPTO_gcm128_init(struct AmiSSLIFace *, GCM128_CONTEXT * ctx, void * key, block128_f block);
extern int                  VARARGS68K _AmiSSL_CRYPTO_gcm128_decrypt(struct AmiSSLIFace *, GCM128_CONTEXT * ctx, const unsigned char * in, unsigned char * out, size_t len);
extern int                  VARARGS68K _AmiSSL_CRYPTO_gcm128_decrypt_ctr32(struct AmiSSLIFace *, GCM128_CONTEXT * ctx, const unsigned char * in, unsigned char * out, size_t len, ctr128_f stream);
extern int                  VARARGS68K _AmiSSL_CRYPTO_gcm128_encrypt_ctr32(struct AmiSSLIFace *, GCM128_CONTEXT * ctx, const unsigned char * in, unsigned char * out, size_t len, ctr128_f stream);
extern int                  VARARGS68K _AmiSSL_CRYPTO_gcm128_finish(struct AmiSSLIFace *, GCM128_CONTEXT * ctx, const unsigned char * tag, size_t len);
extern X509_ALGOR *         VARARGS68K _AmiSSL_PKCS5_pbkdf2_set(struct AmiSSLIFace *, int iter, unsigned char * salt, int saltlen, int prf_nid, int keylen);
extern RSA_PSS_PARAMS *     VARARGS68K _AmiSSL_RSA_PSS_PARAMS_new(struct AmiSSLIFace *);
extern RSA_PSS_PARAMS *     VARARGS68K _AmiSSL_d2i_RSA_PSS_PARAMS(struct AmiSSLIFace *, RSA_PSS_PARAMS ** a, const unsigned char ** pp, long length);
extern void                 VARARGS68K _AmiSSL_RSA_PSS_PARAMS_free(struct AmiSSLIFace *, RSA_PSS_PARAMS * a);
extern int                  VARARGS68K _AmiSSL_i2d_RSA_PSS_PARAMS(struct AmiSSLIFace *, RSA_PSS_PARAMS * a, unsigned char ** out);
extern void *               VARARGS68K _AmiSSL_OPENSSL_stderr(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_OPENSSL_showfatal(struct AmiSSLIFace *, const char * fmta, ...);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_POLICY_MAPPING_it(struct AmiSSLIFace *);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_NAME_CONSTRAINTS_it(struct AmiSSLIFace *);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ASN1_OCTET_STRING_NDEF_it(struct AmiSSLIFace *);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_X509_CERT_PAIR_it(struct AmiSSLIFace *);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_POLICY_CONSTRAINTS_it(struct AmiSSLIFace *);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_POLICY_MAPPINGS_it(struct AmiSSLIFace *);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_GENERAL_SUBTREE_it(struct AmiSSLIFace *);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_X509_EXTENSIONS_it(struct AmiSSLIFace *);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_X509_ALGORS_it(struct AmiSSLIFace *);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_CMS_ContentInfo_it(struct AmiSSLIFace *);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_CMS_ReceiptRequest_it(struct AmiSSLIFace *);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ASN1_SEQUENCE_ANY_it(struct AmiSSLIFace *);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ASN1_SET_ANY_it(struct AmiSSLIFace *);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_NETSCAPE_X509_it(struct AmiSSLIFace *);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_ISSUING_DIST_POINT_it(struct AmiSSLIFace *);
extern const ASN1_ITEM *    VARARGS68K _AmiSSL_RSA_PSS_PARAMS_it(struct AmiSSLIFace *);
extern int *                VARARGS68K _AmiSSL__shadow_DES_rw_mode(struct AmiSSLIFace *);
extern int *                VARARGS68K _AmiSSL__shadow_DES_check_key(struct AmiSSLIFace *);
extern void                 VARARGS68K _AmiSSL_ENGINE_load_gost(struct AmiSSLIFace *);
