--- amissl_m68k.c	2022-03-26 13:15:21.662382856 +0000
+++ amissl_m68k.c_patched	2022-03-26 13:14:57.854378822 +0000
@@ -20115,13 +20115,20 @@
 
 // ---
 
+const UI_METHOD *UI_get_default_method_68k(void);
+
+STATIC const UI_METHOD * __attribute__((baserel_restore)) LIB_UI_get_default_method_68k(UNUSED struct AmiSSLIFace *Self)
+{
+	return UI_get_default_method_68k();
+}
+
 STATIC const UI_METHOD * stub_main_UI_get_default_method_PPC(uint32 *regarray)
 {
 	struct Library *Base = (struct Library *)regarray[REG68K_A6/4];
 	struct ExtendedLibrary *ExtLib = (struct ExtendedLibrary *)((uint32)Base + Base->lib_PosSize);
 	struct AmiSSLIFace *Self = (struct AmiSSLIFace *)ExtLib->MainIFace;
 
-	return Self->UI_get_default_method();
+	return LIB_UI_get_default_method_68k(Self);
 }
 STATIC CONST struct EmuTrap stub_main_UI_get_default_method = { TRAPINST, TRAPTYPE, (uint32 (*)(uint32 *))stub_main_UI_get_default_method_PPC };
 
@@ -20156,13 +20163,16 @@
 
 // ---
 
-STATIC UI_METHOD * stub_main_UI_OpenSSL_PPC(uint32 *regarray)
-{
-	struct Library *Base = (struct Library *)regarray[REG68K_A6/4];
-	struct ExtendedLibrary *ExtLib = (struct ExtendedLibrary *)((uint32)Base + Base->lib_PosSize);
-	struct AmiSSLIFace *Self = (struct AmiSSLIFace *)ExtLib->MainIFace;
+UI_METHOD *UI_OpenSSL_68k(void);
 
-	return Self->UI_OpenSSL();
+STATIC UI_METHOD * stub_main_UI_OpenSSL_PPC(UNUSED uint32 *regarray)
+{
+	/* This would need to be added to the interface and called through
+	 * Self->UI_OpenSSL_68k() mechanism to have baserel stuff work correctly,
+  	 * but since it's returning a pointer to constant (common to all openers)
+  	 * structure, it will work like this, too.
+	 */
+	return UI_OpenSSL_68k();
 }
 STATIC CONST struct EmuTrap stub_main_UI_OpenSSL = { TRAPINST, TRAPTYPE, (uint32 (*)(uint32 *))stub_main_UI_OpenSSL_PPC };
 
