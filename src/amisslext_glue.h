
/* This file was generated by idltool 53.32. Do not edit */


/***************************************************************************/

#ifndef GLUE_AMISSLEXT_H
#define GLUE_AMISSLEXT_H 1

#define PROTO_AMISSLEXT_H // Don't include protos
#ifndef EXEC_LIBRARIES_H
#include <exec/libraries.h>
#endif
#
#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif

#ifndef DOS_DOS_H
#include <dos/dos.h>
#endif

#ifndef AMISSL_AMISSL_H
#include <amissl/amissl.h>
#endif

#if defined(__amigaos4__)
struct AmiSSLIFace;
#define __IFACE_OR_BASE struct AmiSSLIFace *Self
#else
#define __IFACE_OR_BASE struct Library *Self
#endif

int SAVEDS ASM LIB_SSL_CTX_set_async_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, SSL_async_callback_fn callback));
int SAVEDS ASM LIB_SSL_CTX_set_async_callback_arg(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, void * arg));
int SAVEDS ASM LIB_SSL_set_async_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, SSL_async_callback_fn callback));
int SAVEDS ASM LIB_SSL_set_async_callback_arg(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, void * arg));
int SAVEDS ASM LIB_SSL_get_async_status(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, int * status));
int SAVEDS ASM LIB_SSL_sendfile(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, int fd), REG(d1, off_t offset), REG(d2, size_t size), REG(d3, int flags));
const char * SAVEDS ASM LIB_OSSL_default_cipher_list(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_OSSL_default_ciphersuites(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_SSL_add_store_cert_subjects_to_stack(REG(a6, __IFACE_OR_BASE), REG(a0, struct stack_st_X509_NAME * stackCAs), REG(a1, const char * uri));
int SAVEDS ASM LIB_SSL_CTX_set_default_verify_store(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx));
int SAVEDS ASM LIB_SSL_CTX_load_verify_file(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const char * CAfile));
int SAVEDS ASM LIB_SSL_CTX_load_verify_dir(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const char * CApath));
int SAVEDS ASM LIB_SSL_CTX_load_verify_store(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const char * CAstore));
int SAVEDS ASM LIB_SSL_CTX_set_tlsext_ticket_key_evp_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, int (*fp)(SSL *, unsigned char *, unsigned char *, EVP_CIPHER_CTX *, EVP_MAC_CTX *, int)));
SSL_CTX * SAVEDS ASM LIB_SSL_CTX_new_ex(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * propq), REG(a2, const SSL_METHOD * meth));
int SAVEDS ASM LIB_SSL_new_session_ticket(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
X509 * SAVEDS ASM LIB_SSL_get0_peer_certificate(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
X509 * SAVEDS ASM LIB_SSL_get1_peer_certificate(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
struct stack_st_X509_NAME * SAVEDS ASM LIB_SSL_load_client_CA_file_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const char * file), REG(a1, OSSL_LIB_CTX * libctx), REG(a2, const char * propq));
int SAVEDS ASM LIB_SSL_set0_tmp_dh_pkey(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, EVP_PKEY * dhpkey));
int SAVEDS ASM LIB_SSL_CTX_set0_tmp_dh_pkey(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, EVP_PKEY * dhpkey));
const char * SAVEDS ASM LIB_SSL_group_to_name(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, int id));
void SAVEDS ASM LIB_OSSL_HTTP_REQ_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_HTTP_REQ_CTX * rctx));
int SAVEDS ASM LIB_EVP_MD_get_type(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_get_key_length(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx));
unsigned long SAVEDS ASM LIB_EVP_CIPHER_get_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
X509_CRL * SAVEDS ASM LIB_X509_CRL_load_http(REG(a6, __IFACE_OR_BASE), REG(a0, const char * url), REG(a1, BIO * bio), REG(a2, BIO * rbio), REG(d0, int timeout));
int SAVEDS ASM LIB_OSSL_HTTP_parse_url(REG(a6, __IFACE_OR_BASE), REG(a0, const char * url), REG(a1, int * pssl), REG(a2, char ** puser), REG(a3, char ** phost), REG(d0, char ** pport), REG(d1, int * pport_num), REG(d2, char ** ppath), REG(d3, char ** pquery), REG(d4, char ** pfrag));
int SAVEDS ASM LIB_EVP_CIPHER_get_block_size(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
BIO * SAVEDS ASM LIB_OSSL_HTTP_REQ_CTX_exchange(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_HTTP_REQ_CTX * rctx));
int SAVEDS ASM LIB_EVP_MD_get_pkey_type(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md));
int SAVEDS ASM LIB_EVP_PKEY_get_security_bits(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey));
struct stack_st_X509 * SAVEDS ASM LIB_TS_VERIFY_CTX_set_certs(REG(a6, __IFACE_OR_BASE), REG(a0, TS_VERIFY_CTX * ctx), REG(a1, struct stack_st_X509 * certs));
OSSL_HTTP_REQ_CTX * SAVEDS ASM LIB_OSSL_HTTP_REQ_CTX_new(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * wbio), REG(a1, BIO * rbio), REG(d0, int buf_size));
X509 * SAVEDS ASM LIB_X509_load_http(REG(a6, __IFACE_OR_BASE), REG(a0, const char * url), REG(a1, BIO * bio), REG(a2, BIO * rbio), REG(d0, int timeout));
unsigned long SAVEDS ASM LIB_X509_NAME_hash_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_NAME * x), REG(a1, OSSL_LIB_CTX * libctx), REG(a2, const char * propq), REG(a3, int * ok));
int SAVEDS ASM LIB_OSSL_HTTP_REQ_CTX_set_request_line(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_HTTP_REQ_CTX * rctx), REG(d0, int method_POST), REG(a1, const char * server), REG(a2, const char * port), REG(a3, const char * path));
int SAVEDS ASM LIB_EVP_CIPHER_get_key_length(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_get_block_size(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_get_nid(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx));
int SAVEDS ASM LIB_OSSL_HTTP_REQ_CTX_set1_req(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_HTTP_REQ_CTX * rctx), REG(a1, const char * content_type), REG(a2, const ASN1_ITEM * it), REG(a3, const ASN1_VALUE * req));
void SAVEDS ASM LIB_OSSL_HTTP_REQ_CTX_set_max_response_length(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_HTTP_REQ_CTX * rctx), REG(d0, unsigned long len));
int SAVEDS ASM LIB_OSSL_HTTP_REQ_CTX_nbio(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_HTTP_REQ_CTX * rctx));
int SAVEDS ASM LIB_EVP_PKEY_get_base_id(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey));
unsigned long SAVEDS ASM LIB_EVP_MD_get_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md));
int SAVEDS ASM LIB_EVP_MD_get_size(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md));
EVP_PKEY_CTX * SAVEDS ASM LIB_EVP_MD_CTX_get_pkey_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD_CTX * ctx));
int SAVEDS ASM LIB_EVP_PKEY_get_bits(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey));
void * SAVEDS ASM LIB_EVP_MD_CTX_get0_md_data(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD_CTX * ctx));
int SAVEDS ASM LIB_OSSL_HTTP_REQ_CTX_add1_header(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_HTTP_REQ_CTX * rctx), REG(a1, const char * name), REG(a2, const char * value));
int SAVEDS ASM LIB_EVP_CIPHER_get_type(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_get_iv_length(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx));
int SAVEDS ASM LIB_EVP_PKEY_get_id(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey));
int SAVEDS ASM LIB_EVP_PKEY_get_size(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey));
int SAVEDS ASM LIB_EVP_MD_get_block_size(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_is_encrypting(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx));
int SAVEDS ASM LIB_OSSL_HTTP_REQ_CTX_nbio_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_HTTP_REQ_CTX * rctx), REG(a1, ASN1_VALUE ** pval), REG(a2, const ASN1_ITEM * it));
int SAVEDS ASM LIB_EVP_CIPHER_get_nid(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
int SAVEDS ASM LIB_EVP_CIPHER_get_iv_length(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
BIO * SAVEDS ASM LIB_OSSL_HTTP_REQ_CTX_get0_mem_bio(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_HTTP_REQ_CTX * rctx));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_get_num(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx));
EVP_MAC_CTX * SAVEDS ASM LIB_EVP_MAC_CTX_new(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MAC * mac));
void SAVEDS ASM LIB_EVP_MAC_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MAC_CTX * ctx));
EVP_MAC_CTX * SAVEDS ASM LIB_EVP_MAC_CTX_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MAC_CTX * src));
EVP_MAC * SAVEDS ASM LIB_EVP_MAC_CTX_get0_mac(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MAC_CTX * ctx));
size_t SAVEDS ASM LIB_EVP_MAC_CTX_get_mac_size(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MAC_CTX * ctx));
unsigned char * SAVEDS ASM LIB_EVP_Q_mac(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * name), REG(a2, const char * propq), REG(a3, const char * subalg), REG(d0, const OSSL_PARAM * params), REG(d1, const void * key), REG(d2, size_t keylen), REG(d3, const unsigned char * data), REG(d4, size_t datalen), REG(d5, unsigned char * out), REG(d6, size_t outsize), REG(d7, size_t * outlen));
int SAVEDS ASM LIB_EVP_MAC_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MAC_CTX * ctx), REG(a1, const unsigned char * key), REG(d0, size_t keylen), REG(a2, const OSSL_PARAM * params));
int SAVEDS ASM LIB_EVP_MAC_update(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MAC_CTX * ctx), REG(a1, const unsigned char * data), REG(d0, size_t datalen));
int SAVEDS ASM LIB_EVP_MAC_final(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MAC_CTX * ctx), REG(a1, unsigned char * out), REG(a2, size_t * outl), REG(d0, size_t outsize));
int SAVEDS ASM LIB_EVP_MAC_finalXOF(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MAC_CTX * ctx), REG(a1, unsigned char * out), REG(d0, size_t outsize));
const char * SAVEDS ASM LIB_OSSL_EC_curve_nid2name(REG(a6, __IFACE_OR_BASE), REG(d0, int nid));
int SAVEDS ASM LIB_EVP_PKEY_digestsign_supports_digest(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, OSSL_LIB_CTX * libctx), REG(a2, const char * name), REG(a3, const char * propq));
unsigned int SAVEDS ASM LIB_OPENSSL_version_major(REG(a6, __IFACE_OR_BASE));
unsigned int SAVEDS ASM LIB_OPENSSL_version_minor(REG(a6, __IFACE_OR_BASE));
unsigned int SAVEDS ASM LIB_OPENSSL_version_patch(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_OPENSSL_version_pre_release(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_OPENSSL_version_build_metadata(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ASYNC_WAIT_CTX_get_callback(REG(a6, __IFACE_OR_BASE), REG(a0, ASYNC_WAIT_CTX * ctx), REG(a1, ASYNC_callback_fn * callback), REG(a2, void ** callback_arg));
int SAVEDS ASM LIB_ASYNC_WAIT_CTX_set_callback(REG(a6, __IFACE_OR_BASE), REG(a0, ASYNC_WAIT_CTX * ctx), REG(a1, ASYNC_callback_fn callback), REG(a2, void * callback_arg));
int SAVEDS ASM LIB_ASYNC_WAIT_CTX_set_status(REG(a6, __IFACE_OR_BASE), REG(a0, ASYNC_WAIT_CTX * ctx), REG(d0, int status));
int SAVEDS ASM LIB_ASYNC_WAIT_CTX_get_status(REG(a6, __IFACE_OR_BASE), REG(a0, ASYNC_WAIT_CTX * ctx));
void SAVEDS ASM LIB_EVP_KDF_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_KDF_CTX * ctx));
void SAVEDS ASM LIB_EVP_KDF_CTX_reset(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_KDF_CTX * ctx));
size_t SAVEDS ASM LIB_EVP_KDF_CTX_get_kdf_size(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_KDF_CTX * ctx));
int SAVEDS ASM LIB_EVP_KDF_derive(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_KDF_CTX * ctx), REG(a1, unsigned char * key), REG(d0, size_t keylen), REG(a2, const OSSL_PARAM * params));
const char * SAVEDS ASM LIB_EVP_KDF_get0_name(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KDF * kdf));
const BIGNUM * SAVEDS ASM LIB_EC_GROUP_get0_field(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group));
int SAVEDS ASM LIB_CRYPTO_alloc_ex_data(REG(a6, __IFACE_OR_BASE), REG(d0, int class_index), REG(a0, void * obj), REG(a1, CRYPTO_EX_DATA * ad), REG(d1, int idx));
OSSL_LIB_CTX * SAVEDS ASM LIB_OSSL_LIB_CTX_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OSSL_LIB_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * a));
void SAVEDS ASM LIB_OPENSSL_LH_flush(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_LHASH * lh));
BIGNUM * SAVEDS ASM LIB_BN_native2bn(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * s), REG(d0, int len), REG(a1, BIGNUM * ret));
int SAVEDS ASM LIB_BN_bn2nativepad(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a), REG(a1, unsigned char * to), REG(d0, int tolen));
int SAVEDS ASM LIB_OSSL_trace_get_category_num(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name));
const char * SAVEDS ASM LIB_OSSL_trace_get_category_name(REG(a6, __IFACE_OR_BASE), REG(d0, int num));
int SAVEDS ASM LIB_OSSL_trace_set_channel(REG(a6, __IFACE_OR_BASE), REG(d0, int category), REG(a0, BIO* channel));
int SAVEDS ASM LIB_OSSL_trace_set_prefix(REG(a6, __IFACE_OR_BASE), REG(d0, int category), REG(a0, const char * prefix));
int SAVEDS ASM LIB_OSSL_trace_set_suffix(REG(a6, __IFACE_OR_BASE), REG(d0, int category), REG(a0, const char * suffix));
int SAVEDS ASM LIB_OSSL_trace_set_callback(REG(a6, __IFACE_OR_BASE), REG(d0, int category), REG(a0, OSSL_trace_cb callback), REG(a1, void * data));
int SAVEDS ASM LIB_OSSL_trace_enabled(REG(a6, __IFACE_OR_BASE), REG(d0, int category));
BIO * SAVEDS ASM LIB_OSSL_trace_begin(REG(a6, __IFACE_OR_BASE), REG(d0, int category));
void SAVEDS ASM LIB_OSSL_trace_end(REG(a6, __IFACE_OR_BASE), REG(d0, int category), REG(a0, BIO * channel));
OSSL_PROVIDER * SAVEDS ASM LIB_OSSL_PROVIDER_load(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * a), REG(a1, const char * name));
OSSL_PROVIDER * SAVEDS ASM LIB_OSSL_PROVIDER_try_load(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * a), REG(a1, const char * name), REG(d0, int retain_fallbacks));
int SAVEDS ASM LIB_OSSL_PROVIDER_unload(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PROVIDER * prov));
int SAVEDS ASM LIB_OSSL_PROVIDER_add_builtin(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * a), REG(a1, const char * name), REG(a2, OSSL_provider_init_fn * init_fn));
const OSSL_PARAM * SAVEDS ASM LIB_OSSL_PROVIDER_gettable_params(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PROVIDER * prov));
int SAVEDS ASM LIB_OSSL_PROVIDER_get_params(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PROVIDER * prov), REG(a1, OSSL_PARAM * params));
OSSL_CRMF_ENCRYPTEDVALUE * SAVEDS ASM LIB_d2i_OSSL_CRMF_ENCRYPTEDVALUE(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CRMF_ENCRYPTEDVALUE ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OSSL_CRMF_ENCRYPTEDVALUE(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CRMF_ENCRYPTEDVALUE * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OSSL_CRMF_ENCRYPTEDVALUE_it(REG(a6, __IFACE_OR_BASE));
OSSL_CRMF_MSG * SAVEDS ASM LIB_d2i_OSSL_CRMF_MSG(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CRMF_MSG ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OSSL_CRMF_MSG(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CRMF_MSG * a), REG(a1, unsigned char ** out));
OSSL_CRMF_MSG * SAVEDS ASM LIB_OSSL_CRMF_MSG_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CRMF_MSG * a));
const ASN1_ITEM * SAVEDS ASM LIB_OSSL_CRMF_MSG_it(REG(a6, __IFACE_OR_BASE));
OSSL_CRMF_PBMPARAMETER * SAVEDS ASM LIB_d2i_OSSL_CRMF_PBMPARAMETER(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CRMF_PBMPARAMETER ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OSSL_CRMF_PBMPARAMETER(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CRMF_PBMPARAMETER * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OSSL_CRMF_PBMPARAMETER_it(REG(a6, __IFACE_OR_BASE));
OSSL_CRMF_CERTID * SAVEDS ASM LIB_d2i_OSSL_CRMF_CERTID(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CRMF_CERTID ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OSSL_CRMF_CERTID(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CRMF_CERTID * a), REG(a1, unsigned char ** out));
OSSL_CRMF_CERTID * SAVEDS ASM LIB_OSSL_CRMF_CERTID_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CRMF_CERTID * a));
const ASN1_ITEM * SAVEDS ASM LIB_OSSL_CRMF_CERTID_it(REG(a6, __IFACE_OR_BASE));
OSSL_CRMF_PKIPUBLICATIONINFO * SAVEDS ASM LIB_d2i_OSSL_CRMF_PKIPUBLICATIONINFO(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CRMF_PKIPUBLICATIONINFO ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OSSL_CRMF_PKIPUBLICATIONINFO(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CRMF_PKIPUBLICATIONINFO * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OSSL_CRMF_PKIPUBLICATIONINFO_it(REG(a6, __IFACE_OR_BASE));
OSSL_CRMF_SINGLEPUBINFO * SAVEDS ASM LIB_d2i_OSSL_CRMF_SINGLEPUBINFO(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CRMF_SINGLEPUBINFO ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OSSL_CRMF_SINGLEPUBINFO(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CRMF_SINGLEPUBINFO * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OSSL_CRMF_SINGLEPUBINFO_it(REG(a6, __IFACE_OR_BASE));
OSSL_CRMF_CERTTEMPLATE * SAVEDS ASM LIB_d2i_OSSL_CRMF_CERTTEMPLATE(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CRMF_CERTTEMPLATE ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OSSL_CRMF_CERTTEMPLATE(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CRMF_CERTTEMPLATE * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OSSL_CRMF_CERTTEMPLATE_it(REG(a6, __IFACE_OR_BASE));
OSSL_CRMF_MSGS * SAVEDS ASM LIB_d2i_OSSL_CRMF_MSGS(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CRMF_MSGS ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OSSL_CRMF_MSGS(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CRMF_MSGS * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OSSL_CRMF_MSGS_it(REG(a6, __IFACE_OR_BASE));
OSSL_CRMF_PBMPARAMETER * SAVEDS ASM LIB_OSSL_CRMF_pbmp_new(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(d0, size_t slen), REG(d1, int owfnid), REG(d2, size_t itercnt), REG(d3, int macnid));
int SAVEDS ASM LIB_OSSL_CRMF_pbm_new(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * propq), REG(a2, const OSSL_CRMF_PBMPARAMETER * pbmp), REG(a3, const unsigned char * msg), REG(d0, size_t msglen), REG(d1, const unsigned char * sec), REG(d2, size_t seclen), REG(d3, unsigned char ** mac), REG(d4, size_t * maclen));
ASN1_UTF8STRING * SAVEDS ASM LIB_OSSL_CRMF_MSG_get0_regCtrl_regToken(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CRMF_MSG * msg));
int SAVEDS ASM LIB_OSSL_CRMF_MSG_set1_regCtrl_regToken(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CRMF_MSG * msg), REG(a1, const ASN1_UTF8STRING * tok));
ASN1_UTF8STRING * SAVEDS ASM LIB_OSSL_CRMF_MSG_get0_regCtrl_authenticator(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CRMF_MSG * msg));
int SAVEDS ASM LIB_OSSL_CRMF_MSG_set1_regCtrl_authenticator(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CRMF_MSG * msg), REG(a1, const ASN1_UTF8STRING * auth));
int SAVEDS ASM LIB_OSSL_CRMF_MSG_PKIPublicationInfo_push0_SinglePubInfo(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CRMF_PKIPUBLICATIONINFO * pi), REG(a1, OSSL_CRMF_SINGLEPUBINFO * spi));
int SAVEDS ASM LIB_OSSL_CRMF_MSG_set0_SinglePubInfo(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CRMF_SINGLEPUBINFO * spi), REG(d0, int method), REG(a1, GENERAL_NAME * nm));
OSSL_CRMF_PKIPUBLICATIONINFO * SAVEDS ASM LIB_OSSL_CRMF_MSG_get0_regCtrl_pkiPublicationInfo(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CRMF_MSG * msg));
int SAVEDS ASM LIB_OSSL_CRMF_MSG_set_PKIPublicationInfo_action(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CRMF_PKIPUBLICATIONINFO * pi), REG(d0, int action));
int SAVEDS ASM LIB_OSSL_CRMF_MSG_set1_regCtrl_pkiPublicationInfo(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CRMF_MSG * msg), REG(a1, const OSSL_CRMF_PKIPUBLICATIONINFO * pi));
X509_PUBKEY * SAVEDS ASM LIB_OSSL_CRMF_MSG_get0_regCtrl_protocolEncrKey(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CRMF_MSG * msg));
int SAVEDS ASM LIB_OSSL_CRMF_MSG_set1_regCtrl_protocolEncrKey(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CRMF_MSG * msg), REG(a1, const X509_PUBKEY * pubkey));
OSSL_CRMF_CERTID * SAVEDS ASM LIB_OSSL_CRMF_MSG_get0_regCtrl_oldCertID(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CRMF_MSG * msg));
int SAVEDS ASM LIB_OSSL_CRMF_MSG_set1_regCtrl_oldCertID(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CRMF_MSG * msg), REG(a1, const OSSL_CRMF_CERTID * cid));
OSSL_CRMF_CERTID * SAVEDS ASM LIB_OSSL_CRMF_CERTID_gen(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_NAME * issuer), REG(a1, const ASN1_INTEGER * serial));
ASN1_UTF8STRING * SAVEDS ASM LIB_OSSL_CRMF_MSG_get0_regInfo_utf8Pairs(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CRMF_MSG * msg));
int SAVEDS ASM LIB_OSSL_CRMF_MSG_set1_regInfo_utf8Pairs(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CRMF_MSG * msg), REG(a1, const ASN1_UTF8STRING * utf8pairs));
OSSL_CRMF_CERTREQUEST * SAVEDS ASM LIB_OSSL_CRMF_MSG_get0_regInfo_certReq(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CRMF_MSG * msg));
int SAVEDS ASM LIB_OSSL_CRMF_MSG_set1_regInfo_certReq(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CRMF_MSG * msg), REG(a1, const OSSL_CRMF_CERTREQUEST * cr));
int SAVEDS ASM LIB_OSSL_CRMF_MSG_set0_validity(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CRMF_MSG * crm), REG(a1, ASN1_TIME * notBefore), REG(a2, ASN1_TIME * notAfter));
int SAVEDS ASM LIB_OSSL_CRMF_MSG_set_certReqId(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CRMF_MSG * crm), REG(d0, int rid));
int SAVEDS ASM LIB_OSSL_CRMF_MSG_get_certReqId(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CRMF_MSG * crm));
int SAVEDS ASM LIB_OSSL_CRMF_MSG_set0_extensions(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CRMF_MSG * crm), REG(a1, X509_EXTENSIONS * exts));
int SAVEDS ASM LIB_OSSL_CRMF_MSG_push0_extension(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CRMF_MSG * crm), REG(a1, X509_EXTENSION * ext));
int SAVEDS ASM LIB_OSSL_CRMF_MSG_create_popo(REG(a6, __IFACE_OR_BASE), REG(d0, int meth), REG(a0, OSSL_CRMF_MSG * crm), REG(a1, EVP_PKEY * pkey), REG(a2, const EVP_MD * digest), REG(a3, OSSL_LIB_CTX * libctx), REG(d1, const char * propq));
int SAVEDS ASM LIB_OSSL_CRMF_MSGS_verify_popo(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CRMF_MSGS * reqs), REG(d0, int rid), REG(d1, int acceptRAVerified), REG(a1, OSSL_LIB_CTX * libctx), REG(a2, const char * propq));
OSSL_CRMF_CERTTEMPLATE * SAVEDS ASM LIB_OSSL_CRMF_MSG_get0_tmpl(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CRMF_MSG * crm));
const ASN1_INTEGER * SAVEDS ASM LIB_OSSL_CRMF_CERTTEMPLATE_get0_serialNumber(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CRMF_CERTTEMPLATE * tmpl));
const X509_NAME * SAVEDS ASM LIB_OSSL_CRMF_CERTTEMPLATE_get0_subject(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CRMF_CERTTEMPLATE * tmpl));
const X509_NAME * SAVEDS ASM LIB_OSSL_CRMF_CERTTEMPLATE_get0_issuer(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CRMF_CERTTEMPLATE * tmpl));
X509_EXTENSIONS * SAVEDS ASM LIB_OSSL_CRMF_CERTTEMPLATE_get0_extensions(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CRMF_CERTTEMPLATE * tmpl));
int SAVEDS ASM LIB_OSSL_CRMF_CERTTEMPLATE_fill(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CRMF_CERTTEMPLATE * tmpl), REG(a1, EVP_PKEY * pubkey), REG(a2, const X509_NAME * subject), REG(a3, const X509_NAME * issuer), REG(d0, const ASN1_INTEGER * serial));
X509 * SAVEDS ASM LIB_OSSL_CRMF_ENCRYPTEDVALUE_get1_encCert(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CRMF_ENCRYPTEDVALUE * ecert), REG(a1, OSSL_LIB_CTX * libctx), REG(a2, const char * propq), REG(a3, EVP_PKEY * pkey));
OSSL_PARAM * SAVEDS ASM LIB_OSSL_PARAM_locate(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * p), REG(a1, const char * key));
void SAVEDS ASM LIB_OSSL_PARAM_construct_int_amiga(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * result), REG(a1, const char * key), REG(a2, int * buf));
void SAVEDS ASM LIB_OSSL_PARAM_construct_uint_amiga(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * result), REG(a1, const char * key), REG(a2, unsigned int * buf));
void SAVEDS ASM LIB_OSSL_PARAM_construct_long_amiga(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * result), REG(a1, const char * key), REG(a2, long int * buf));
void SAVEDS ASM LIB_OSSL_PARAM_construct_ulong_amiga(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * result), REG(a1, const char * key), REG(a2, unsigned long int * buf));
void SAVEDS ASM LIB_OSSL_PARAM_construct_int32_amiga(REG(a6, __IFACE_OR_BASE), REG(a1, OSSL_PARAM * result), REG(a2, const char * key), REG(a3, int32_t * buf));
void SAVEDS ASM LIB_OSSL_PARAM_construct_uint32_amiga(REG(a6, __IFACE_OR_BASE), REG(a1, OSSL_PARAM * result), REG(a2, const char * key), REG(a3, uint32_t * buf));
void SAVEDS ASM LIB_OSSL_PARAM_construct_int64_amiga(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * result), REG(a1, const char * key), REG(a2, int64_t * buf));
void SAVEDS ASM LIB_OSSL_PARAM_construct_uint64_amiga(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * result), REG(a1, const char * key), REG(a2, uint64_t * buf));
void SAVEDS ASM LIB_OSSL_PARAM_construct_size_t_amiga(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * result), REG(a1, const char * key), REG(a2, size_t * buf));
void SAVEDS ASM LIB_OSSL_PARAM_construct_BN_amiga(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * result), REG(a1, const char * key), REG(a2, unsigned char * buf), REG(d0, size_t bsize));
void SAVEDS ASM LIB_OSSL_PARAM_construct_double_amiga(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * result), REG(a1, const char * key), REG(a2, double * buf));
void SAVEDS ASM LIB_OSSL_PARAM_construct_utf8_string_amiga(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * result), REG(a1, const char * key), REG(a2, char * buf), REG(d0, size_t bsize));
void SAVEDS ASM LIB_OSSL_PARAM_construct_utf8_ptr_amiga(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * result), REG(a1, const char * key), REG(a2, char ** buf), REG(d0, size_t bsize));
void SAVEDS ASM LIB_OSSL_PARAM_construct_octet_string_amiga(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * result), REG(a1, const char * key), REG(a2, void * buf), REG(d0, size_t bsize));
void SAVEDS ASM LIB_OSSL_PARAM_construct_octet_ptr_amiga(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * result), REG(a1, const char * key), REG(a2, void ** buf), REG(d0, size_t bsize));
int SAVEDS ASM LIB_OSSL_PARAM_get_int(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PARAM * p), REG(a1, int * val));
int SAVEDS ASM LIB_OSSL_PARAM_get_uint(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PARAM * p), REG(a1, unsigned int * val));
int SAVEDS ASM LIB_OSSL_PARAM_get_long(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PARAM * p), REG(a1, long int * val));
int SAVEDS ASM LIB_OSSL_PARAM_get_ulong(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PARAM * p), REG(a1, unsigned long int * val));
int SAVEDS ASM LIB_OSSL_PARAM_get_int32(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PARAM * p), REG(a1, int32_t * val));
int SAVEDS ASM LIB_OSSL_PARAM_get_uint32(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PARAM * p), REG(a1, uint32_t * val));
int SAVEDS ASM LIB_OSSL_PARAM_get_int64(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PARAM * p), REG(a1, int64_t * val));
int SAVEDS ASM LIB_OSSL_PARAM_get_uint64(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PARAM * p), REG(a1, uint64_t * val));
int SAVEDS ASM LIB_OSSL_PARAM_get_size_t(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PARAM * p), REG(a1, size_t * val));
int SAVEDS ASM LIB_OSSL_PARAM_set_int(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * p), REG(d0, int val));
int SAVEDS ASM LIB_OSSL_PARAM_set_uint(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * p), REG(d0, unsigned int val));
int SAVEDS ASM LIB_OSSL_PARAM_set_long(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * p), REG(d0, long int val));
int SAVEDS ASM LIB_OSSL_PARAM_set_ulong(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * p), REG(d0, unsigned long int val));
int SAVEDS ASM LIB_OSSL_PARAM_set_int32(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * p), REG(d0, int32_t val));
int SAVEDS ASM LIB_OSSL_PARAM_set_uint32(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * p), REG(d0, uint32_t val));
int SAVEDS ASM LIB_OSSL_PARAM_set_int64(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * p), REG(d0, int64_t val));
int SAVEDS ASM LIB_OSSL_PARAM_set_uint64(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * p), REG(d0, uint64_t val));
int SAVEDS ASM LIB_OSSL_PARAM_set_size_t(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * p), REG(d0, size_t val));
int SAVEDS ASM LIB_OSSL_PARAM_get_double(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PARAM * p), REG(a1, double * val));
int SAVEDS ASM LIB_OSSL_PARAM_set_double(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * p), REG(d0, double val));
int SAVEDS ASM LIB_OSSL_PARAM_get_BN(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PARAM * p), REG(a1, BIGNUM ** val));
int SAVEDS ASM LIB_OSSL_PARAM_set_BN(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * p), REG(a1, const BIGNUM * val));
int SAVEDS ASM LIB_OSSL_PARAM_get_utf8_string(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PARAM * p), REG(a1, char ** val), REG(d0, size_t max_len));
int SAVEDS ASM LIB_OSSL_PARAM_set_utf8_string(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * p), REG(a1, const char * val));
int SAVEDS ASM LIB_OSSL_PARAM_get_octet_string(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PARAM * p), REG(a1, void ** val), REG(d0, size_t max_len), REG(a2, size_t * used_len));
int SAVEDS ASM LIB_OSSL_PARAM_set_octet_string(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * p), REG(a1, const void * val), REG(d0, size_t len));
int SAVEDS ASM LIB_OSSL_PARAM_get_utf8_ptr(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PARAM * p), REG(a1, const char ** val));
int SAVEDS ASM LIB_OSSL_PARAM_set_utf8_ptr(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * p), REG(a1, const char * val));
int SAVEDS ASM LIB_OSSL_PARAM_get_octet_ptr(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PARAM * p), REG(a1, const void ** val), REG(a2, size_t * used_len));
int SAVEDS ASM LIB_OSSL_PARAM_set_octet_ptr(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * p), REG(a1, const void * val), REG(d0, size_t used_len));
void SAVEDS ASM LIB_X509_set0_distinguishing_id(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, ASN1_OCTET_STRING * d_id));
ASN1_OCTET_STRING * SAVEDS ASM LIB_X509_get0_distinguishing_id(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
int SAVEDS ASM LIB_EVP_MD_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD * md));
EVP_MD * SAVEDS ASM LIB_EVP_MD_fetch(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * ctx), REG(a1, const char * algorithm), REG(a2, const char * properties));
int SAVEDS ASM LIB_EVP_set_default_properties(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * propq));
void SAVEDS ASM LIB_OSSL_PARAM_construct_end_amiga(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * result));
int SAVEDS ASM LIB_EC_GROUP_check_named_curve(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group), REG(d0, int nist_only), REG(a1, BN_CTX * ctx));
int SAVEDS ASM LIB_EVP_CIPHER_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER * cipher));
EVP_CIPHER * SAVEDS ASM LIB_EVP_CIPHER_fetch(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * ctx), REG(a1, const char * algorithm), REG(a2, const char * properties));
int SAVEDS ASM LIB_EVP_CIPHER_get_mode(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
const char * SAVEDS ASM LIB_OPENSSL_info(REG(a6, __IFACE_OR_BASE), REG(d0, int type));
EVP_KDF_CTX * SAVEDS ASM LIB_EVP_KDF_CTX_new(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_KDF * kdf));
const EVP_KDF * SAVEDS ASM LIB_EVP_KDF_CTX_kdf(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_KDF_CTX * ctx));
int SAVEDS ASM LIB_i2d_KeyParams(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * a), REG(a1, unsigned char ** pp));
EVP_PKEY * SAVEDS ASM LIB_d2i_KeyParams(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, EVP_PKEY ** a), REG(a1, const unsigned char ** pp), REG(d1, long length));
int SAVEDS ASM LIB_i2d_KeyParams_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const EVP_PKEY * pkey));
EVP_PKEY * SAVEDS ASM LIB_d2i_KeyParams_bio(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, EVP_PKEY ** a), REG(a1, BIO * in));
const ASN1_ITEM * SAVEDS ASM LIB_OSSL_CMP_PKISTATUS_it(REG(a6, __IFACE_OR_BASE));
OSSL_CMP_PKIHEADER * SAVEDS ASM LIB_d2i_OSSL_CMP_PKIHEADER(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_PKIHEADER ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OSSL_CMP_PKIHEADER(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_PKIHEADER * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OSSL_CMP_PKIHEADER_it(REG(a6, __IFACE_OR_BASE));
OSSL_CMP_MSG * SAVEDS ASM LIB_d2i_OSSL_CMP_MSG(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_MSG ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OSSL_CMP_MSG(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_MSG * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OSSL_CMP_MSG_it(REG(a6, __IFACE_OR_BASE));
OSSL_CMP_ITAV * SAVEDS ASM LIB_OSSL_CMP_ITAV_create(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_OBJECT * type), REG(a1, ASN1_TYPE * value));
void SAVEDS ASM LIB_OSSL_CMP_ITAV_set0(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_ITAV * itav), REG(a1, ASN1_OBJECT * type), REG(a2, ASN1_TYPE * value));
ASN1_OBJECT * SAVEDS ASM LIB_OSSL_CMP_ITAV_get0_type(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_ITAV * itav));
ASN1_TYPE * SAVEDS ASM LIB_OSSL_CMP_ITAV_get0_value(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_ITAV * itav));
int SAVEDS ASM LIB_OSSL_CMP_ITAV_push0_stack_item(REG(a6, __IFACE_OR_BASE), REG(a0, struct stack_st_OSSL_CMP_ITAV ** itav_sk_p), REG(a1, OSSL_CMP_ITAV * itav));
void SAVEDS ASM LIB_OSSL_CMP_ITAV_free(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_ITAV * itav));
void SAVEDS ASM LIB_OSSL_CMP_MSG_free(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_MSG * msg));
int SAVEDS ASM LIB_EVP_MD_CTX_set_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, const OSSL_PARAM * params));
int SAVEDS ASM LIB_EVP_MD_CTX_get_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, OSSL_PARAM * params));
BN_CTX * SAVEDS ASM LIB_BN_CTX_new_ex(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * ctx));
BN_CTX * SAVEDS ASM LIB_BN_CTX_secure_new_ex(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * ctx));
void SAVEDS ASM LIB_OPENSSL_thread_stop_ex(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * ctx));
const OSSL_PARAM * SAVEDS ASM LIB_OSSL_PARAM_locate_const(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PARAM * p), REG(a1, const char * key));
void SAVEDS ASM LIB_X509_REQ_set0_distinguishing_id(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * x), REG(a1, ASN1_OCTET_STRING * d_id));
ASN1_OCTET_STRING * SAVEDS ASM LIB_X509_REQ_get0_distinguishing_id(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * x));
int SAVEDS ASM LIB_BN_rand_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * rnd), REG(d0, int bits), REG(d1, int top), REG(d2, int bottom), REG(d3, unsigned int strength), REG(a1, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_priv_rand_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * rnd), REG(d0, int bits), REG(d1, int top), REG(d2, int bottom), REG(d3, unsigned int strength), REG(a1, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_rand_range_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * range), REG(d0, unsigned int strength), REG(a2, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_priv_rand_range_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * range), REG(d0, unsigned int strength), REG(a2, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_generate_prime_ex2(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * ret), REG(d0, int bits), REG(d1, int safe), REG(a1, const BIGNUM * add), REG(a2, const BIGNUM * rem), REG(a3, BN_GENCB * cb), REG(d2, BN_CTX * ctx));
void SAVEDS ASM LIB_EVP_KEYEXCH_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_KEYEXCH * exchange));
int SAVEDS ASM LIB_EVP_KEYEXCH_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_KEYEXCH * exchange));
EVP_KEYEXCH * SAVEDS ASM LIB_EVP_KEYEXCH_fetch(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * ctx), REG(a1, const char * algorithm), REG(a2, const char * properties));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_dh_pad(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int pad));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const OSSL_PARAM * params));
EVP_KEYMGMT * SAVEDS ASM LIB_EVP_KEYMGMT_fetch(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * ctx), REG(a1, const char * algorithm), REG(a2, const char * properties));
int SAVEDS ASM LIB_EVP_KEYMGMT_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_KEYMGMT * keymgmt));
void SAVEDS ASM LIB_EVP_KEYMGMT_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_KEYMGMT * keymgmt));
const OSSL_PROVIDER * SAVEDS ASM LIB_EVP_KEYMGMT_get0_provider(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KEYMGMT * keymgmt));
X509_PUBKEY * SAVEDS ASM LIB_X509_PUBKEY_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_PUBKEY * a));
const char * SAVEDS ASM LIB_EVP_MD_get0_name(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md));
const char * SAVEDS ASM LIB_EVP_CIPHER_get0_name(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
const OSSL_PROVIDER * SAVEDS ASM LIB_EVP_MD_get0_provider(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md));
const OSSL_PROVIDER * SAVEDS ASM LIB_EVP_CIPHER_get0_provider(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
const char * SAVEDS ASM LIB_OSSL_PROVIDER_get0_name(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PROVIDER * prov));
void SAVEDS ASM LIB_EVP_CIPHER_do_all_provided(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, void (*fn)(EVP_CIPHER *cipher, void *arg)), REG(a2, void * arg));
void SAVEDS ASM LIB_EVP_MD_do_all_provided(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, void (*fn)(EVP_MD *md, void *arg)), REG(a2, void * arg));
OSSL_PROVIDER * SAVEDS ASM LIB_EVP_KEYEXCH_get0_provider(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KEYEXCH * exchange));
int SAVEDS ASM LIB_OSSL_PROVIDER_available(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * a), REG(a1, const char * name));
void SAVEDS ASM LIB_ERR_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ERR_set_debug(REG(a6, __IFACE_OR_BASE), REG(a0, const char * file), REG(d0, int line), REG(a1, const char * func));
#if defined(__amigaos4__)
void SAVEDS ASM LIB_ERR_vset_error(REG(a6, __IFACE_OR_BASE), REG(d0, int lib), REG(d1, int reason), REG(a0, const char * fmt), REG(a1, long * args));
#else
void SAVEDS ASM LIB_ERR_vset_error(REG(a6, __IFACE_OR_BASE), REG(d0, int lib), REG(d1, int reason), REG(a0, const char * fmt), REG(a1, va_list args));
#endif
void SAVEDS ASM LIB_ERR_set_error(REG(a6, __IFACE_OR_BASE), REG(d0, int lib), REG(d1, int reason), REG(a0, const char * fmt), ...);
int SAVEDS ASM LIB_X509_self_signed(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * cert), REG(d0, int verify_signature));
int SAVEDS ASM LIB_OPENSSL_hexstr2buf_ex(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * buf), REG(d0, size_t buf_n), REG(a1, size_t * buflen), REG(a2, const char * str), REG(d1, const char sep));
int SAVEDS ASM LIB_OPENSSL_buf2hexstr_ex(REG(a6, __IFACE_OR_BASE), REG(a0, char * str), REG(d0, size_t str_n), REG(a1, size_t * strlen), REG(a2, const unsigned char * buf), REG(d1, size_t buflen), REG(d2, const char sep));
int SAVEDS ASM LIB_OSSL_PARAM_allocate_from_text(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * to), REG(a1, const OSSL_PARAM * paramdefs), REG(a2, const char * key), REG(a3, const char * value), REG(d0, size_t value_n), REG(d1, int * found));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_MD_gettable_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * digest));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_MD_CTX_settable_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_MD_CTX_gettable_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx));
int SAVEDS ASM LIB_EVP_CIPHER_get_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER * cipher), REG(a1, OSSL_PARAM * params));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_set_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const OSSL_PARAM * params));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_get_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, OSSL_PARAM * params));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_CIPHER_gettable_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_CIPHER_settable_ctx_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_CIPHER_gettable_ctx_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
int SAVEDS ASM LIB_EVP_MD_get_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * digest), REG(a1, OSSL_PARAM * params));
EVP_MAC * SAVEDS ASM LIB_EVP_MAC_fetch(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * algorithm), REG(a2, const char * properties));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_MAC_settable_ctx_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MAC * mac));
int SAVEDS ASM LIB_EVP_MAC_CTX_set_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MAC_CTX * ctx), REG(a1, const OSSL_PARAM * params));
int SAVEDS ASM LIB_EVP_MAC_CTX_get_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MAC_CTX * ctx), REG(a1, OSSL_PARAM * params));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_MAC_gettable_ctx_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MAC * mac));
void SAVEDS ASM LIB_EVP_MAC_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MAC * mac));
int SAVEDS ASM LIB_EVP_MAC_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MAC * mac));
int SAVEDS ASM LIB_EVP_MAC_get_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MAC * mac), REG(a1, OSSL_PARAM * params));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_MAC_gettable_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MAC * mac));
const OSSL_PROVIDER * SAVEDS ASM LIB_EVP_MAC_get0_provider(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MAC * mac));
void SAVEDS ASM LIB_EVP_MAC_do_all_provided(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, void (*fn)(EVP_MAC *mac, void *arg)), REG(a2, void * arg));
const char * SAVEDS ASM LIB_EVP_MAC_get0_name(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MAC * mac));
void SAVEDS ASM LIB_EVP_MD_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD * md));
void SAVEDS ASM LIB_EVP_CIPHER_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER * cipher));
int SAVEDS ASM LIB_EVP_KDF_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_KDF * kdf));
void SAVEDS ASM LIB_EVP_KDF_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_KDF * kdf));
EVP_KDF * SAVEDS ASM LIB_EVP_KDF_fetch(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * algorithm), REG(a2, const char * properties));
EVP_KDF_CTX * SAVEDS ASM LIB_EVP_KDF_CTX_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KDF_CTX * src));
const OSSL_PROVIDER * SAVEDS ASM LIB_EVP_KDF_get0_provider(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KDF * kdf));
int SAVEDS ASM LIB_EVP_KDF_get_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_KDF * kdf), REG(a1, OSSL_PARAM * params));
int SAVEDS ASM LIB_EVP_KDF_CTX_get_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_KDF_CTX * ctx), REG(a1, OSSL_PARAM * params));
int SAVEDS ASM LIB_EVP_KDF_CTX_set_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_KDF_CTX * ctx), REG(a1, const OSSL_PARAM * params));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_KDF_gettable_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KDF * kdf));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_KDF_gettable_ctx_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KDF * kdf));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_KDF_settable_ctx_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KDF * kdf));
void SAVEDS ASM LIB_EVP_KDF_do_all_provided(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, void (*fn)(EVP_KDF *kdf, void *arg)), REG(a2, void * arg));
void SAVEDS ASM LIB_EVP_SIGNATURE_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_SIGNATURE * signature));
int SAVEDS ASM LIB_EVP_SIGNATURE_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_SIGNATURE * signature));
OSSL_PROVIDER * SAVEDS ASM LIB_EVP_SIGNATURE_get0_provider(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_SIGNATURE * signature));
EVP_SIGNATURE * SAVEDS ASM LIB_EVP_SIGNATURE_fetch(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * ctx), REG(a1, const char * algorithm), REG(a2, const char * properties));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_signature_md(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const EVP_MD * md));
int SAVEDS ASM LIB_EVP_PKEY_CTX_get_signature_md(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const EVP_MD ** md));
int SAVEDS ASM LIB_EVP_PKEY_CTX_get_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, OSSL_PARAM * params));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_PKEY_CTX_gettable_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_CTX * ctx));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_PKEY_CTX_settable_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_CTX * ctx));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_get_tag_length(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx));
unsigned long SAVEDS ASM LIB_ERR_get_error_all(REG(a6, __IFACE_OR_BASE), REG(a0, const char ** file), REG(a1, int * line), REG(a2, const char ** func), REG(a3, const char ** data), REG(d0, int * flags));
unsigned long SAVEDS ASM LIB_ERR_peek_error_func(REG(a6, __IFACE_OR_BASE), REG(a0, const char ** func));
unsigned long SAVEDS ASM LIB_ERR_peek_error_data(REG(a6, __IFACE_OR_BASE), REG(a0, const char ** data), REG(a1, int * flags));
unsigned long SAVEDS ASM LIB_ERR_peek_error_all(REG(a6, __IFACE_OR_BASE), REG(a0, const char ** file), REG(a1, int * line), REG(a2, const char ** func), REG(a3, const char ** data), REG(d0, int * flags));
unsigned long SAVEDS ASM LIB_ERR_peek_last_error_func(REG(a6, __IFACE_OR_BASE), REG(a0, const char ** func));
unsigned long SAVEDS ASM LIB_ERR_peek_last_error_data(REG(a6, __IFACE_OR_BASE), REG(a0, const char ** data), REG(a1, int * flags));
unsigned long SAVEDS ASM LIB_ERR_peek_last_error_all(REG(a6, __IFACE_OR_BASE), REG(a0, const char ** file), REG(a1, int * line), REG(a2, const char ** func), REG(a3, const char ** data), REG(d0, int * flags));
int SAVEDS ASM LIB_EVP_CIPHER_is_a(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher), REG(a1, const char * name));
int SAVEDS ASM LIB_EVP_MAC_is_a(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MAC * mac), REG(a1, const char * name));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_MD_settable_ctx_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_MD_gettable_ctx_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md));
OSSL_CMP_CTX * SAVEDS ASM LIB_OSSL_CMP_CTX_new(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * propq));
void SAVEDS ASM LIB_OSSL_CMP_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx));
int SAVEDS ASM LIB_OSSL_CMP_CTX_reinit(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set_option(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(d0, int opt), REG(d1, int val));
int SAVEDS ASM LIB_OSSL_CMP_CTX_get_option(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_CTX * ctx), REG(d0, int opt));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set_log_cb(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(d0, OSSL_CMP_log_cb_t cb));
void SAVEDS ASM LIB_OSSL_CMP_CTX_print_errors(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_CTX * ctx));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set1_serverPath(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, const char * path));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set1_server(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, const char * address));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set_serverPort(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(d0, int port));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set1_proxy(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, const char * name));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set1_no_proxy(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, const char * names));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set_http_cb(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(d0, OSSL_HTTP_bio_cb_t cb));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set_http_cb_arg(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, void * arg));
void * SAVEDS ASM LIB_OSSL_CMP_CTX_get_http_cb_arg(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_CTX * ctx));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set_transfer_cb(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(d0, OSSL_CMP_transfer_cb_t cb));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set_transfer_cb_arg(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, void * arg));
void * SAVEDS ASM LIB_OSSL_CMP_CTX_get_transfer_cb_arg(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_CTX * ctx));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set1_srvCert(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, X509 * cert));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set1_expected_sender(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, const X509_NAME * name));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set0_trustedStore(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, X509_STORE * store));
X509_STORE * SAVEDS ASM LIB_OSSL_CMP_CTX_get0_trustedStore(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_CTX * ctx));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set1_untrusted(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, struct stack_st_X509 * certs));
struct stack_st_X509 * SAVEDS ASM LIB_OSSL_CMP_CTX_get0_untrusted(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_CTX * ctx));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set1_cert(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, X509 * cert));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set1_pkey(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, EVP_PKEY * pkey));
int SAVEDS ASM LIB_OSSL_CMP_CTX_build_cert_chain(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, X509_STORE * own_trusted), REG(a2, struct stack_st_X509 * candidates));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set1_referenceValue(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, const unsigned char * ref), REG(d0, int len));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set1_secretValue(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, const unsigned char * sec), REG(d0, const int len));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set1_recipient(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, const X509_NAME * name));
int SAVEDS ASM LIB_OSSL_CMP_CTX_push0_geninfo_ITAV(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, OSSL_CMP_ITAV * itav));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set1_extraCertsOut(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, struct stack_st_X509 * extraCertsOut));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set0_newPkey(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(d0, int priv), REG(a1, EVP_PKEY * pkey));
EVP_PKEY * SAVEDS ASM LIB_OSSL_CMP_CTX_get0_newPkey(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_CTX * ctx), REG(d0, int priv));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set1_issuer(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, const X509_NAME * name));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set1_subjectName(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, const X509_NAME * name));
int SAVEDS ASM LIB_OSSL_CMP_CTX_push1_subjectAltName(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, const GENERAL_NAME * name));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set0_reqExtensions(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, X509_EXTENSIONS * exts));
int SAVEDS ASM LIB_OSSL_CMP_CTX_reqExtensions_have_SAN(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx));
int SAVEDS ASM LIB_OSSL_CMP_CTX_push0_policy(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, POLICYINFO * pinfo));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set1_oldCert(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, X509 * cert));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set1_p10CSR(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, const X509_REQ * csr));
int SAVEDS ASM LIB_OSSL_CMP_CTX_push0_genm_ITAV(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, OSSL_CMP_ITAV * itav));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set_certConf_cb(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(d0, OSSL_CMP_certConf_cb_t cb));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set_certConf_cb_arg(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, void * arg));
void * SAVEDS ASM LIB_OSSL_CMP_CTX_get_certConf_cb_arg(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_CTX * ctx));
int SAVEDS ASM LIB_OSSL_CMP_CTX_get_status(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_CTX * ctx));
OSSL_CMP_PKIFREETEXT * SAVEDS ASM LIB_OSSL_CMP_CTX_get0_statusString(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_CTX * ctx));
int SAVEDS ASM LIB_OSSL_CMP_CTX_get_failInfoCode(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_CTX * ctx));
X509 * SAVEDS ASM LIB_OSSL_CMP_CTX_get0_newCert(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_CTX * ctx));
struct stack_st_X509 * SAVEDS ASM LIB_OSSL_CMP_CTX_get1_newChain(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_CTX * ctx));
struct stack_st_X509 * SAVEDS ASM LIB_OSSL_CMP_CTX_get1_caPubs(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_CTX * ctx));
struct stack_st_X509 * SAVEDS ASM LIB_OSSL_CMP_CTX_get1_extraCertsIn(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_CTX * ctx));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set1_transactionID(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, const ASN1_OCTET_STRING * id));
int SAVEDS ASM LIB_OSSL_CMP_CTX_set1_senderNonce(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, const ASN1_OCTET_STRING * nonce));
int SAVEDS ASM LIB_OSSL_CMP_log_open(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OSSL_CMP_log_close(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_OSSL_CMP_print_to_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, const char * component), REG(a2, const char * file), REG(d0, int line), REG(d1, OSSL_CMP_severity level), REG(a3, const char * msg));
void SAVEDS ASM LIB_OSSL_CMP_print_errors_cb(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_log_cb_t log_fn));
const X509_NAME * SAVEDS ASM LIB_OSSL_CRMF_CERTID_get0_issuer(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CRMF_CERTID * cid));
const ASN1_INTEGER * SAVEDS ASM LIB_OSSL_CRMF_CERTID_get0_serialNumber(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CRMF_CERTID * cid));
int SAVEDS ASM LIB_EVP_DigestSignUpdate(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, const void * data), REG(d0, size_t dsize));
int SAVEDS ASM LIB_EVP_DigestVerifyUpdate(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, const void * data), REG(d0, size_t dsize));
int SAVEDS ASM LIB_BN_check_prime(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * p), REG(a1, BN_CTX * ctx), REG(a2, BN_GENCB * cb));
int SAVEDS ASM LIB_EVP_KEYMGMT_is_a(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KEYMGMT * keymgmt), REG(a1, const char * name));
void SAVEDS ASM LIB_EVP_KEYMGMT_do_all_provided(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, void (*fn)(EVP_KEYMGMT *keymgmt, void *arg)), REG(a2, void * arg));
int SAVEDS ASM LIB_EVP_KEYEXCH_is_a(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KEYEXCH * keyexch), REG(a1, const char * name));
void SAVEDS ASM LIB_EVP_KEYEXCH_do_all_provided(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, void (*fn)(EVP_KEYEXCH *keyexch, void *data)), REG(a2, void * data));
int SAVEDS ASM LIB_EVP_KDF_is_a(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KDF * kdf), REG(a1, const char * name));
int SAVEDS ASM LIB_EVP_MD_is_a(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md), REG(a1, const char * name));
int SAVEDS ASM LIB_EVP_SIGNATURE_is_a(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_SIGNATURE * signature), REG(a1, const char * name));
void SAVEDS ASM LIB_EVP_SIGNATURE_do_all_provided(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, void (*fn)(EVP_SIGNATURE *signature, void *data)), REG(a2, void * data));
int SAVEDS ASM LIB_EVP_MD_names_do_all(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md), REG(a1, void (*fn)(const char *name, void *data)), REG(a2, void * data));
int SAVEDS ASM LIB_EVP_CIPHER_names_do_all(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher), REG(a1, void (*fn)(const char *name, void *data)), REG(a2, void * data));
int SAVEDS ASM LIB_EVP_MAC_names_do_all(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MAC * mac), REG(a1, void (*fn)(const char *name, void *data)), REG(a2, void * data));
int SAVEDS ASM LIB_EVP_KEYMGMT_names_do_all(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KEYMGMT * keymgmt), REG(a1, void (*fn)(const char *name, void *data)), REG(a2, void * data));
int SAVEDS ASM LIB_EVP_KEYEXCH_names_do_all(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KEYEXCH * keyexch), REG(a1, void (*fn)(const char *name, void *data)), REG(a2, void * data));
int SAVEDS ASM LIB_EVP_KDF_names_do_all(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KDF * kdf), REG(a1, void (*fn)(const char *name, void *data)), REG(a2, void * data));
int SAVEDS ASM LIB_EVP_SIGNATURE_names_do_all(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_SIGNATURE * signature), REG(a1, void (*fn)(const char *name, void *data)), REG(a2, void * data));
char * SAVEDS ASM LIB_OSSL_CMP_CTX_snprint_PKIStatus(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_CTX * ctx), REG(a1, char * buf), REG(d0, size_t bufsize));
ASN1_OCTET_STRING * SAVEDS ASM LIB_OSSL_CMP_HDR_get0_transactionID(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_PKIHEADER * hdr));
ASN1_OCTET_STRING * SAVEDS ASM LIB_OSSL_CMP_HDR_get0_recipNonce(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_PKIHEADER * hdr));
X509_LOOKUP_METHOD * SAVEDS ASM LIB_X509_LOOKUP_store(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_X509_add_cert(REG(a6, __IFACE_OR_BASE), REG(a0, struct stack_st_X509 * sk), REG(a1, X509 * cert), REG(d0, int flags));
int SAVEDS ASM LIB_X509_add_certs(REG(a6, __IFACE_OR_BASE), REG(a0, struct stack_st_X509 * sk), REG(a1, struct stack_st_X509 * certs), REG(d0, int flags));
int SAVEDS ASM LIB_X509_STORE_load_file(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * ctx), REG(a1, const char * file));
int SAVEDS ASM LIB_X509_STORE_load_path(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * ctx), REG(a1, const char * path));
int SAVEDS ASM LIB_X509_STORE_load_store(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * ctx), REG(a1, const char * store));
int SAVEDS ASM LIB_EVP_PKEY_fromdata(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, EVP_PKEY ** ppkey), REG(d0, int selection), REG(a2, OSSL_PARAM * params));
void SAVEDS ASM LIB_EVP_ASYM_CIPHER_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_ASYM_CIPHER * cipher));
int SAVEDS ASM LIB_EVP_ASYM_CIPHER_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_ASYM_CIPHER * cipher));
OSSL_PROVIDER * SAVEDS ASM LIB_EVP_ASYM_CIPHER_get0_provider(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_ASYM_CIPHER * cipher));
EVP_ASYM_CIPHER * SAVEDS ASM LIB_EVP_ASYM_CIPHER_fetch(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * ctx), REG(a1, const char * algorithm), REG(a2, const char * properties));
int SAVEDS ASM LIB_EVP_ASYM_CIPHER_is_a(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_ASYM_CIPHER * cipher), REG(a1, const char * name));
void SAVEDS ASM LIB_EVP_ASYM_CIPHER_do_all_provided(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, void (*fn)(EVP_ASYM_CIPHER *cipher, void *arg)), REG(a2, void * arg));
int SAVEDS ASM LIB_EVP_ASYM_CIPHER_names_do_all(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_ASYM_CIPHER * cipher), REG(a1, void (*fn)(const char *name, void *data)), REG(a2, void * data));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_rsa_padding(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int pad_mode));
int SAVEDS ASM LIB_EVP_PKEY_CTX_get_rsa_padding(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, int * pad_mode));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_rsa_mgf1_md(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const EVP_MD * md));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_rsa_mgf1_md_name(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const char * mdname), REG(a2, const char * mdprops));
int SAVEDS ASM LIB_EVP_PKEY_CTX_get_rsa_mgf1_md(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const EVP_MD ** md));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_rsa_oaep_md(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const EVP_MD * md));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_rsa_oaep_md_name(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const char * mdname), REG(a2, const char * mdprops));
int SAVEDS ASM LIB_EVP_PKEY_CTX_get_rsa_oaep_md(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const EVP_MD ** md));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set0_rsa_oaep_label(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, void * label), REG(d0, int llen));
int SAVEDS ASM LIB_EVP_PKEY_CTX_get0_rsa_oaep_label(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, unsigned char ** label));
int SAVEDS ASM LIB_EVP_PKEY_CTX_get_rsa_mgf1_md_name(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, char * name), REG(d0, size_t namelen));
int SAVEDS ASM LIB_EVP_PKEY_CTX_get_rsa_oaep_md_name(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, char * name), REG(d0, size_t namelen));
int SAVEDS ASM LIB_OSSL_ENCODER_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_ENCODER * encoder));
void SAVEDS ASM LIB_OSSL_ENCODER_free(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_ENCODER * encoder));
OSSL_ENCODER * SAVEDS ASM LIB_OSSL_ENCODER_fetch(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * name), REG(a2, const char * properties));
int SAVEDS ASM LIB_OSSL_ENCODER_is_a(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_ENCODER * encoder), REG(a1, const char * name));
const OSSL_PROVIDER * SAVEDS ASM LIB_OSSL_ENCODER_get0_provider(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_ENCODER * encoder));
void SAVEDS ASM LIB_OSSL_ENCODER_do_all_provided(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, void (*fn)(OSSL_ENCODER *encoder, void *arg)), REG(a2, void * arg));
int SAVEDS ASM LIB_OSSL_ENCODER_names_do_all(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_ENCODER * encoder), REG(a1, void (*fn)(const char *name, void *data)), REG(a2, void * data));
const OSSL_PARAM * SAVEDS ASM LIB_OSSL_ENCODER_settable_ctx_params(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_ENCODER * encoder));
OSSL_ENCODER_CTX * SAVEDS ASM LIB_OSSL_ENCODER_CTX_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_OSSL_ENCODER_CTX_set_params(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_ENCODER_CTX * ctx), REG(a1, const OSSL_PARAM * params));
void SAVEDS ASM LIB_OSSL_ENCODER_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_ENCODER_CTX * ctx));
const char * SAVEDS ASM LIB_OSSL_ENCODER_get0_properties(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_ENCODER * encoder));
int SAVEDS ASM LIB_OSSL_ENCODER_to_bio(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_ENCODER_CTX * ctx), REG(a1, BIO * out));
OSSL_ENCODER_CTX * SAVEDS ASM LIB_OSSL_ENCODER_CTX_new_for_pkey(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey), REG(d0, int selection), REG(a1, const char * output_type), REG(a2, const char * output_struct), REG(a3, const char * propquery));
int SAVEDS ASM LIB_OSSL_ENCODER_CTX_set_cipher(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_ENCODER_CTX * ctx), REG(a1, const char * cipher_name), REG(a2, const char * propquery));
int SAVEDS ASM LIB_OSSL_ENCODER_CTX_set_passphrase(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_ENCODER_CTX * ctx), REG(a1, const unsigned char * kstr), REG(d0, size_t klen));
int SAVEDS ASM LIB_OSSL_ENCODER_CTX_set_pem_password_cb(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_ENCODER_CTX * ctx), REG(a1, pem_password_cb * cb), REG(a2, void * cbarg));
int SAVEDS ASM LIB_OSSL_ENCODER_CTX_set_passphrase_ui(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_ENCODER_CTX * ctx), REG(a1, const UI_METHOD * ui_method), REG(a2, void * ui_data));
X509_PUBKEY * SAVEDS ASM LIB_PEM_read_bio_X509_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, X509_PUBKEY ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_X509_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, const X509_PUBKEY * x));
X509_PUBKEY * SAVEDS ASM LIB_d2i_X509_PUBKEY_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_PUBKEY ** xpk));
int SAVEDS ASM LIB_i2d_X509_PUBKEY_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const X509_PUBKEY * xpk));
int SAVEDS ASM LIB_X509_cmp_timeframe(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_VERIFY_PARAM * vpm), REG(a1, const ASN1_TIME * start), REG(a2, const ASN1_TIME * end));
OSSL_CMP_PKIHEADER * SAVEDS ASM LIB_OSSL_CMP_MSG_get0_header(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_MSG * msg));
int SAVEDS ASM LIB_OSSL_CMP_MSG_get_bodytype(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_MSG * msg));
int SAVEDS ASM LIB_OSSL_CMP_MSG_update_transactionID(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, OSSL_CMP_MSG * msg));
OSSL_CRMF_MSG * SAVEDS ASM LIB_OSSL_CMP_CTX_setup_CRM(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(d0, int for_KUR), REG(d1, int rid));
const BIO_METHOD * SAVEDS ASM LIB_BIO_f_prefix(REG(a6, __IFACE_OR_BASE));
EVP_PKEY_CTX * SAVEDS ASM LIB_EVP_PKEY_CTX_new_from_name(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * name), REG(a2, const char * propquery));
EVP_PKEY_CTX * SAVEDS ASM LIB_EVP_PKEY_CTX_new_from_pkey(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, EVP_PKEY * pkey), REG(a2, const char * propquery));
void SAVEDS ASM LIB_OSSL_SELF_TEST_set_callback(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, OSSL_CALLBACK * cb), REG(a2, void * cbarg));
void SAVEDS ASM LIB_OSSL_SELF_TEST_get_callback(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, OSSL_CALLBACK ** cb), REG(a2, void ** cbarg));
ASN1_TIME * SAVEDS ASM LIB_ASN1_TIME_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_TIME * a));
ASN1_UTCTIME * SAVEDS ASM LIB_ASN1_UTCTIME_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_UTCTIME * a));
ASN1_GENERALIZEDTIME * SAVEDS ASM LIB_ASN1_GENERALIZEDTIME_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_GENERALIZEDTIME * a));
int SAVEDS ASM LIB_RAND_priv_bytes_ex(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * ctx), REG(a1, unsigned char * buf), REG(d0, size_t num), REG(d1, unsigned int strength));
int SAVEDS ASM LIB_RAND_bytes_ex(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * ctx), REG(a1, unsigned char * buf), REG(d0, size_t num), REG(d1, unsigned int strength));
int SAVEDS ASM LIB_EVP_PKEY_get_default_digest_name(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, char * mdname), REG(d0, size_t mdname_sz));
int SAVEDS ASM LIB_CMS_decrypt_set1_pkey_and_peer(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, EVP_PKEY * pk), REG(a2, X509 * cert), REG(a3, X509 * peer));
CMS_RecipientInfo * SAVEDS ASM LIB_CMS_add1_recipient(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, X509 * recip), REG(a2, EVP_PKEY * originatorPrivKey), REG(a3, X509 * originator), REG(d0, unsigned int flags));
int SAVEDS ASM LIB_CMS_RecipientInfo_kari_set0_pkey_and_peer(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientInfo * ri), REG(a1, EVP_PKEY * pk), REG(a2, X509 * peer));
int SAVEDS ASM LIB_PKCS8_pkey_add1_attr(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS8_PRIV_KEY_INFO * p8), REG(a1, X509_ATTRIBUTE * attr));
int SAVEDS ASM LIB_PKCS8_pkey_add1_attr_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS8_PRIV_KEY_INFO * p8), REG(a1, const ASN1_OBJECT * obj), REG(d0, int type), REG(a2, const unsigned char * bytes), REG(d1, int len));
int SAVEDS ASM LIB_EVP_PKEY_private_check(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
int SAVEDS ASM LIB_EVP_PKEY_pairwise_check(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
int SAVEDS ASM LIB_ASN1_item_verify_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_ITEM * it), REG(a1, const X509_ALGOR * alg), REG(a2, const ASN1_BIT_STRING * signature), REG(a3, const void * data), REG(d0, EVP_MD_CTX * ctx));
int SAVEDS ASM LIB_ASN1_item_sign_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_ITEM * it), REG(a1, X509_ALGOR * algor1), REG(a2, X509_ALGOR * algor2), REG(a3, ASN1_BIT_STRING * signature), REG(d0, const void * data), REG(d1, const ASN1_OCTET_STRING * id), REG(d2, EVP_PKEY * pkey), REG(d3, const EVP_MD * md), REG(d4, OSSL_LIB_CTX * libctx), REG(d5, const char * propq));
int SAVEDS ASM LIB_ASN1_item_verify_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_ITEM * it), REG(a1, const X509_ALGOR * alg), REG(a2, const ASN1_BIT_STRING * signature), REG(a3, const void * data), REG(d0, const ASN1_OCTET_STRING * id), REG(d1, EVP_PKEY * pkey), REG(d2, OSSL_LIB_CTX * libctx), REG(d3, const char * propq));
int SAVEDS ASM LIB_BIO_socket_wait(REG(a6, __IFACE_OR_BASE), REG(d0, int fd), REG(d1, int for_read), REG(d2, time_t max_time));
int SAVEDS ASM LIB_BIO_wait(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(d0, time_t max_time), REG(d1, unsigned int nap_milliseconds));
int SAVEDS ASM LIB_BIO_do_connect_retry(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(d0, int timeout), REG(d1, int nap_milliseconds));
int SAVEDS ASM LIB_OSSL_parse_url(REG(a6, __IFACE_OR_BASE), REG(a0, const char * url), REG(a1, char ** pscheme), REG(a2, char ** puser), REG(a3, char ** phost), REG(d0, char ** pport), REG(d1, int * pport_num), REG(d2, char ** ppath), REG(d3, char ** pquery), REG(d4, char ** pfrag));
const char * SAVEDS ASM LIB_OSSL_HTTP_adapt_proxy(REG(a6, __IFACE_OR_BASE), REG(a0, const char * proxy), REG(a1, const char * no_proxy), REG(a2, const char * server), REG(d0, int use_ssl));
size_t SAVEDS ASM LIB_OSSL_HTTP_REQ_CTX_get_resp_len(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_HTTP_REQ_CTX * rctx));
int SAVEDS ASM LIB_OSSL_HTTP_REQ_CTX_set_expected(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_HTTP_REQ_CTX * rctx), REG(a1, const char * content_type), REG(d0, int asn1), REG(d1, int timeout), REG(d2, int keep_alive));
int SAVEDS ASM LIB_OSSL_HTTP_is_alive(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_HTTP_REQ_CTX * rctx));
OSSL_HTTP_REQ_CTX * SAVEDS ASM LIB_OSSL_HTTP_open(REG(a6, __IFACE_OR_BASE), REG(a0, const char * server), REG(a1, const char * port), REG(a2, const char * proxy), REG(a3, const char * no_proxy), REG(d0, int use_ssl), REG(d1, BIO * bio), REG(d2, BIO * rbio), REG(d3, OSSL_HTTP_bio_cb_t bio_update_fn), REG(d4, void * arg), REG(d5, int buf_size), REG(d6, int overall_timeout));
int SAVEDS ASM LIB_OSSL_HTTP_proxy_connect(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, const char * server), REG(a2, const char * port), REG(a3, const char * proxyuser), REG(d0, const char * proxypass), REG(d1, int timeout), REG(d2, BIO * bio_err), REG(d3, const char * prog));
int SAVEDS ASM LIB_OSSL_HTTP_set1_request(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_HTTP_REQ_CTX * rctx), REG(a1, const char * path), REG(a2, const struct stack_st_CONF_VALUE * headers), REG(a3, const char * content_type), REG(d0, BIO * req), REG(d1, const char * expected_content_type), REG(d2, int expect_asn1), REG(d3, size_t max_resp_len), REG(d4, int timeout), REG(d5, int keep_alive));
BIO * SAVEDS ASM LIB_OSSL_HTTP_exchange(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_HTTP_REQ_CTX * rctx), REG(a1, char ** redirection_url));
BIO * SAVEDS ASM LIB_OSSL_HTTP_get_amiga_1(REG(a6, __IFACE_OR_BASE), REG(a0, const char * url), REG(a1, const char * proxy), REG(a2, const char * no_proxy), REG(d1, BIO * bio), REG(d2, BIO * rbio), REG(a3, OSSL_HTTP_bio_cb_t bio_update_fn), REG(d0, void * moreargs));
void * SAVEDS ASM LIB_OSSL_HTTP_get_amiga_2(REG(a6, __IFACE_OR_BASE), REG(a0, void * arg), REG(a1, int buf_size), REG(a2, const struct stack_st_CONF_VALUE * headers), REG(a3, const char * expected_content_type), REG(d0, int expect_asn1), REG(d1, size_t max_resp_len), REG(d2, int timeout));
BIO * SAVEDS ASM LIB_OSSL_HTTP_transfer_amiga_1(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_HTTP_REQ_CTX ** prctx), REG(a1, const char * server), REG(a2, const char * port), REG(d1, const char * path), REG(d2, int use_ssl), REG(d3, const char * proxy), REG(d4, const char * no_proxy), REG(d5, BIO * bio), REG(d6, BIO * rbio), REG(a3, OSSL_HTTP_bio_cb_t bio_update_fn), REG(d0, void * moreargs));
void * SAVEDS ASM LIB_OSSL_HTTP_transfer_amiga_2(REG(a6, __IFACE_OR_BASE), REG(a0, void * arg), REG(d0, int buf_size), REG(a1, const struct stack_st_CONF_VALUE * headers), REG(a2, const char * content_type), REG(a3, BIO * req), REG(d1, const char * expected_content_type), REG(d2, int expect_asn1), REG(d3, size_t max_resp_len), REG(d4, int timeout), REG(d5, int keep_alive));
int SAVEDS ASM LIB_OSSL_HTTP_close(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_HTTP_REQ_CTX * rctx), REG(d0, int ok));
BIO * SAVEDS ASM LIB_ASN1_item_i2d_mem_bio(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_ITEM * it), REG(a1, const ASN1_VALUE * val));
void SAVEDS ASM LIB_ERR_add_error_txt(REG(a6, __IFACE_OR_BASE), REG(a0, const char * sepr), REG(a1, const char * txt));
void SAVEDS ASM LIB_ERR_add_error_mem_bio(REG(a6, __IFACE_OR_BASE), REG(a0, const char * sep), REG(a1, BIO * bio));
int SAVEDS ASM LIB_X509_STORE_CTX_print_verify_cb(REG(a6, __IFACE_OR_BASE), REG(d0, int ok), REG(a0, X509_STORE_CTX * ctx));
struct stack_st_X509 * SAVEDS ASM LIB_X509_STORE_get1_all_certs(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * st));
int SAVEDS ASM LIB_OSSL_CMP_validate_msg(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, const OSSL_CMP_MSG * msg));
int SAVEDS ASM LIB_OSSL_CMP_validate_cert_path(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_CTX * ctx), REG(a1, X509_STORE * trusted_store), REG(a2, X509 * cert));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_ecdh_cofactor_mode(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int cofactor_mode));
int SAVEDS ASM LIB_EVP_PKEY_CTX_get_ecdh_cofactor_mode(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_ecdh_kdf_type(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int kdf));
int SAVEDS ASM LIB_EVP_PKEY_CTX_get_ecdh_kdf_type(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_ecdh_kdf_md(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const EVP_MD * md));
int SAVEDS ASM LIB_EVP_PKEY_CTX_get_ecdh_kdf_md(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const EVP_MD ** md));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_ecdh_kdf_outlen(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int len));
int SAVEDS ASM LIB_EVP_PKEY_CTX_get_ecdh_kdf_outlen(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, int * len));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set0_ecdh_kdf_ukm(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, unsigned char * ukm), REG(d0, int len));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_rsa_pss_saltlen(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int saltlen));
int SAVEDS ASM LIB_EVP_PKEY_CTX_get_rsa_pss_saltlen(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, int * saltlen));
ISSUER_SIGN_TOOL * SAVEDS ASM LIB_d2i_ISSUER_SIGN_TOOL(REG(a6, __IFACE_OR_BASE), REG(a0, ISSUER_SIGN_TOOL ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ISSUER_SIGN_TOOL(REG(a6, __IFACE_OR_BASE), REG(a0, const ISSUER_SIGN_TOOL * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ISSUER_SIGN_TOOL_it(REG(a6, __IFACE_OR_BASE));
OSSL_SELF_TEST * SAVEDS ASM LIB_OSSL_SELF_TEST_new(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CALLBACK * cb), REG(a1, void * cbarg));
void SAVEDS ASM LIB_OSSL_SELF_TEST_free(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_SELF_TEST * st));
void SAVEDS ASM LIB_OSSL_SELF_TEST_onbegin(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_SELF_TEST * st), REG(a1, const char * type), REG(a2, const char * desc));
int SAVEDS ASM LIB_OSSL_SELF_TEST_oncorrupt_byte(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_SELF_TEST * st), REG(a1, unsigned char * bytes));
void SAVEDS ASM LIB_OSSL_SELF_TEST_onend(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_SELF_TEST * st), REG(d0, int ret));
int SAVEDS ASM LIB_OSSL_PROVIDER_set_default_search_path(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * a), REG(a1, const char * path));
ASN1_OCTET_STRING * SAVEDS ASM LIB_X509_digest_sig(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * cert), REG(a1, EVP_MD ** md_used), REG(a2, int * md_is_fallback));
OSSL_CMP_MSG * SAVEDS ASM LIB_OSSL_CMP_MSG_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_MSG * a));
OSSL_CMP_ITAV * SAVEDS ASM LIB_OSSL_CMP_ITAV_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_ITAV * a));
OSSL_CMP_PKISI * SAVEDS ASM LIB_d2i_OSSL_CMP_PKISI(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_PKISI ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OSSL_CMP_PKISI(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_PKISI * a), REG(a1, unsigned char ** out));
void SAVEDS ASM LIB_OSSL_CMP_PKISI_free(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_PKISI * a));
OSSL_CMP_PKISI * SAVEDS ASM LIB_OSSL_CMP_PKISI_new(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_OSSL_CMP_PKISI_it(REG(a6, __IFACE_OR_BASE));
OSSL_CMP_PKISI * SAVEDS ASM LIB_OSSL_CMP_PKISI_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_PKISI * a));
char * SAVEDS ASM LIB_OSSL_CMP_snprint_PKIStatusInfo(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_PKISI * statusInfo), REG(a1, char * buf), REG(d0, size_t bufsize));
OSSL_CMP_PKISI * SAVEDS ASM LIB_OSSL_CMP_STATUSINFO_new(REG(a6, __IFACE_OR_BASE), REG(d0, int status), REG(d1, int fail_info), REG(a0, const char * text));
OSSL_CMP_MSG * SAVEDS ASM LIB_d2i_OSSL_CMP_MSG_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, OSSL_CMP_MSG ** msg));
int SAVEDS ASM LIB_i2d_OSSL_CMP_MSG_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, const OSSL_CMP_MSG * msg));
OSSL_CMP_MSG * SAVEDS ASM LIB_OSSL_CMP_SRV_process_request(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_SRV_CTX * srv_ctx), REG(a1, const OSSL_CMP_MSG * req));
OSSL_CMP_MSG * SAVEDS ASM LIB_OSSL_CMP_CTX_server_perform(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * client_ctx), REG(a1, const OSSL_CMP_MSG * req));
OSSL_CMP_SRV_CTX * SAVEDS ASM LIB_OSSL_CMP_SRV_CTX_new(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * propq));
void SAVEDS ASM LIB_OSSL_CMP_SRV_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_SRV_CTX * srv_ctx));
int SAVEDS ASM LIB_OSSL_CMP_SRV_CTX_init(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_SRV_CTX * srv_ctx), REG(a1, void * custom_ctx), REG(a2, OSSL_CMP_SRV_cert_request_cb_t process_cert_request), REG(a3, OSSL_CMP_SRV_rr_cb_t process_rr), REG(d0, OSSL_CMP_SRV_genm_cb_t process_genm), REG(d1, OSSL_CMP_SRV_error_cb_t process_error), REG(d2, OSSL_CMP_SRV_certConf_cb_t process_certConf), REG(d3, OSSL_CMP_SRV_pollReq_cb_t process_pollReq));
OSSL_CMP_CTX * SAVEDS ASM LIB_OSSL_CMP_SRV_CTX_get0_cmp_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_SRV_CTX * srv_ctx));
void * SAVEDS ASM LIB_OSSL_CMP_SRV_CTX_get0_custom_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CMP_SRV_CTX * srv_ctx));
int SAVEDS ASM LIB_OSSL_CMP_SRV_CTX_set_send_unprotected_errors(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_SRV_CTX * srv_ctx), REG(d0, int val));
int SAVEDS ASM LIB_OSSL_CMP_SRV_CTX_set_accept_unprotected(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_SRV_CTX * srv_ctx), REG(d0, int val));
int SAVEDS ASM LIB_OSSL_CMP_SRV_CTX_set_accept_raverified(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_SRV_CTX * srv_ctx), REG(d0, int val));
int SAVEDS ASM LIB_OSSL_CMP_SRV_CTX_set_grant_implicit_confirm(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_SRV_CTX * srv_ctx), REG(d0, int val));
X509 * SAVEDS ASM LIB_OSSL_CMP_exec_certreq(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(d0, int req_type), REG(a1, const OSSL_CRMF_MSG * crm));
int SAVEDS ASM LIB_OSSL_CMP_try_certreq(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(d0, int req_type), REG(a1, const OSSL_CRMF_MSG * crm), REG(a2, int * checkAfter));
int SAVEDS ASM LIB_OSSL_CMP_certConf_cb(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, X509 * cert), REG(d0, int fail_info), REG(a2, const char ** text));
int SAVEDS ASM LIB_OSSL_CMP_exec_RR_ses(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx));
struct stack_st_OSSL_CMP_ITAV * SAVEDS ASM LIB_OSSL_CMP_exec_GENM_ses(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx));
OSSL_CMP_MSG * SAVEDS ASM LIB_OSSL_CMP_MSG_http_perform(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_CMP_CTX * ctx), REG(a1, const OSSL_CMP_MSG * req));
OSSL_CMP_MSG * SAVEDS ASM LIB_OSSL_CMP_MSG_read(REG(a6, __IFACE_OR_BASE), REG(a0, const char * file), REG(a1, OSSL_LIB_CTX * libctx), REG(a2, const char * propq));
int SAVEDS ASM LIB_OSSL_CMP_MSG_write(REG(a6, __IFACE_OR_BASE), REG(a0, const char * file), REG(a1, const OSSL_CMP_MSG * msg));
#if defined(__amigaos4__)
EVP_PKEY * SAVEDS ASM LIB_EVP_PKEY_Q_vkeygen(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * propq), REG(a2, const char * type), REG(a3, long * args));
#else
EVP_PKEY * SAVEDS ASM LIB_EVP_PKEY_Q_vkeygen(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * propq), REG(a2, const char * type), REG(a3, va_list args));
#endif
EVP_PKEY * SAVEDS ASM LIB_EVP_PKEY_Q_keygen(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * propq), REG(a2, const char * type), ...);
int SAVEDS ASM LIB_EVP_PKEY_generate(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, EVP_PKEY ** ppkey));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_rsa_keygen_bits(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int bits));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set1_rsa_keygen_pubexp(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, BIGNUM * pubexp));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_rsa_keygen_primes(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int primes));
CONF * SAVEDS ASM LIB_NCONF_new_ex(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, CONF_METHOD * meth));
int SAVEDS ASM LIB_CONF_modules_load_file_ex(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * filename), REG(a2, const char * appname), REG(d0, unsigned long flags));
int SAVEDS ASM LIB_OSSL_LIB_CTX_load_config(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * ctx), REG(a1, const char * config_file));
OSSL_PARAM * SAVEDS ASM LIB_OSSL_PARAM_BLD_to_param(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM_BLD * bld));
int SAVEDS ASM LIB_OSSL_PARAM_BLD_push_int(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM_BLD * bld), REG(a1, const char * key), REG(d0, int val));
int SAVEDS ASM LIB_OSSL_PARAM_BLD_push_uint(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM_BLD * bld), REG(a1, const char * key), REG(d0, unsigned int val));
int SAVEDS ASM LIB_OSSL_PARAM_BLD_push_long(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM_BLD * bld), REG(a1, const char * key), REG(d0, long int val));
int SAVEDS ASM LIB_OSSL_PARAM_BLD_push_ulong(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM_BLD * bld), REG(a1, const char * key), REG(d0, unsigned long int val));
int SAVEDS ASM LIB_OSSL_PARAM_BLD_push_int32(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM_BLD * bld), REG(a1, const char * key), REG(d0, int32_t val));
int SAVEDS ASM LIB_OSSL_PARAM_BLD_push_uint32(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM_BLD * bld), REG(a1, const char * key), REG(d0, uint32_t val));
int SAVEDS ASM LIB_OSSL_PARAM_BLD_push_int64(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM_BLD * bld), REG(a1, const char * key), REG(d0, int64_t val));
int SAVEDS ASM LIB_OSSL_PARAM_BLD_push_uint64(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM_BLD * bld), REG(a1, const char * key), REG(d0, uint64_t val));
int SAVEDS ASM LIB_OSSL_PARAM_BLD_push_size_t(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM_BLD * bld), REG(a1, const char * key), REG(d0, size_t val));
int SAVEDS ASM LIB_OSSL_PARAM_BLD_push_double(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM_BLD * bld), REG(a1, const char * key), REG(d0, double val));
int SAVEDS ASM LIB_OSSL_PARAM_BLD_push_BN(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM_BLD * bld), REG(a1, const char * key), REG(a2, const BIGNUM * bn));
int SAVEDS ASM LIB_OSSL_PARAM_BLD_push_BN_pad(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM_BLD * bld), REG(a1, const char * key), REG(a2, const BIGNUM * bn), REG(d0, size_t sz));
int SAVEDS ASM LIB_OSSL_PARAM_BLD_push_utf8_string(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM_BLD * bld), REG(a1, const char * key), REG(a2, const char * buf), REG(d0, size_t bsize));
int SAVEDS ASM LIB_OSSL_PARAM_BLD_push_utf8_ptr(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM_BLD * bld), REG(a1, const char * key), REG(a2, char * buf), REG(d0, size_t bsize));
int SAVEDS ASM LIB_OSSL_PARAM_BLD_push_octet_string(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM_BLD * bld), REG(a1, const char * key), REG(a2, const void * buf), REG(d0, size_t bsize));
int SAVEDS ASM LIB_OSSL_PARAM_BLD_push_octet_ptr(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM_BLD * bld), REG(a1, const char * key), REG(a2, void * buf), REG(d0, size_t bsize));
OSSL_PARAM_BLD * SAVEDS ASM LIB_OSSL_PARAM_BLD_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OSSL_PARAM_BLD_free(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM_BLD * bld));
int SAVEDS ASM LIB_EVP_PKEY_set_type_by_keymgmt(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, EVP_KEYMGMT * keymgmt));
int SAVEDS ASM LIB_OCSP_RESPID_set_by_key_ex(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPID * respid), REG(a1, X509 * cert), REG(a2, OSSL_LIB_CTX * libctx), REG(a3, const char * propq));
int SAVEDS ASM LIB_OCSP_RESPID_match_ex(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPID * respid), REG(a1, X509 * cert), REG(a2, OSSL_LIB_CTX * libctx), REG(a3, const char * propq));
char * SAVEDS ASM LIB_SRP_create_verifier_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const char * user), REG(a1, const char * pass), REG(a2, char ** salt), REG(a3, char ** verifier), REG(d0, const char * N), REG(d1, const char * g), REG(d2, OSSL_LIB_CTX * libctx), REG(d3, const char * propq));
int SAVEDS ASM LIB_SRP_create_verifier_BN_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const char * user), REG(a1, const char * pass), REG(a2, BIGNUM ** salt), REG(a3, BIGNUM ** verifier), REG(d0, const BIGNUM * N), REG(d1, const BIGNUM * g), REG(d2, OSSL_LIB_CTX * libctx), REG(d3, const char * propq));
BIGNUM * SAVEDS ASM LIB_SRP_Calc_B_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * b), REG(a1, const BIGNUM * N), REG(a2, const BIGNUM * g), REG(a3, const BIGNUM * v), REG(d0, OSSL_LIB_CTX * libctx), REG(d1, const char * propq));
BIGNUM * SAVEDS ASM LIB_SRP_Calc_u_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * A), REG(a1, const BIGNUM * B), REG(a2, const BIGNUM * N), REG(a3, OSSL_LIB_CTX * libctx), REG(d0, const char * propq));
BIGNUM * SAVEDS ASM LIB_SRP_Calc_x_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * s), REG(a1, const char * user), REG(a2, const char * pass), REG(a3, OSSL_LIB_CTX * libctx), REG(d0, const char * propq));
BIGNUM * SAVEDS ASM LIB_SRP_Calc_client_key_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * N), REG(a1, const BIGNUM * B), REG(a2, const BIGNUM * g), REG(a3, const BIGNUM * x), REG(d0, const BIGNUM * a), REG(d1, const BIGNUM * u), REG(d2, OSSL_LIB_CTX * libctx), REG(d3, const char * propq));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_PKEY_gettable_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey));
int SAVEDS ASM LIB_EVP_PKEY_get_int_param(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey), REG(a1, const char * key_name), REG(a2, int * out));
int SAVEDS ASM LIB_EVP_PKEY_get_size_t_param(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey), REG(a1, const char * key_name), REG(a2, size_t * out));
int SAVEDS ASM LIB_EVP_PKEY_get_bn_param(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey), REG(a1, const char * key_name), REG(a2, BIGNUM ** bn));
int SAVEDS ASM LIB_EVP_PKEY_get_utf8_string_param(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey), REG(a1, const char * key_name), REG(a2, char * str), REG(d0, size_t max_buf_sz), REG(a3, size_t * out_sz));
int SAVEDS ASM LIB_EVP_PKEY_get_octet_string_param(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey), REG(a1, const char * key_name), REG(a2, unsigned char * buf), REG(d0, size_t max_buf_sz), REG(a3, size_t * out_sz));
int SAVEDS ASM LIB_EVP_PKEY_is_a(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey), REG(a1, const char * name));
int SAVEDS ASM LIB_EVP_PKEY_can_sign(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey));
X509_STORE_CTX * SAVEDS ASM LIB_X509_STORE_CTX_new_ex(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * propq));
int SAVEDS ASM LIB_X509_STORE_CTX_verify(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx));
CT_POLICY_EVAL_CTX * SAVEDS ASM LIB_CT_POLICY_EVAL_CTX_new_ex(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * propq));
CTLOG * SAVEDS ASM LIB_CTLOG_new_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * public_key), REG(a1, const char * name), REG(a2, OSSL_LIB_CTX * libctx), REG(a3, const char * propq));
int SAVEDS ASM LIB_CTLOG_new_from_base64_ex(REG(a6, __IFACE_OR_BASE), REG(a0, CTLOG ** ct_log), REG(a1, const char * pkey_base64), REG(a2, const char * name), REG(a3, OSSL_LIB_CTX * libctx), REG(d0, const char * propq));
CTLOG_STORE * SAVEDS ASM LIB_CTLOG_STORE_new_ex(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * propq));
int SAVEDS ASM LIB_EVP_PKEY_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * key), REG(d0, int idx), REG(a1, void * arg));
void * SAVEDS ASM LIB_EVP_PKEY_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * key), REG(d0, int idx));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_group_name(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const char * name));
int SAVEDS ASM LIB_EVP_PKEY_CTX_get_group_name(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, char * name), REG(d0, size_t namelen));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_ec_paramgen_curve_nid(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int nid));
EVP_PKEY * SAVEDS ASM LIB_d2i_PrivateKey_ex(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, EVP_PKEY ** a), REG(a1, const unsigned char ** pp), REG(d1, long length), REG(a2, OSSL_LIB_CTX * libctx), REG(a3, const char * propq));
EVP_PKEY * SAVEDS ASM LIB_d2i_AutoPrivateKey_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY ** a), REG(a1, const unsigned char ** pp), REG(d0, long length), REG(a2, OSSL_LIB_CTX * libctx), REG(a3, const char * propq));
EVP_PKEY * SAVEDS ASM LIB_d2i_PrivateKey_ex_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EVP_PKEY ** a), REG(a2, OSSL_LIB_CTX * libctx), REG(a3, const char * propq));
EVP_PKEY * SAVEDS ASM LIB_PEM_read_bio_PrivateKey_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, EVP_PKEY ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u), REG(d0, OSSL_LIB_CTX * libctx), REG(d1, const char * propq));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_dsa_paramgen_bits(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int nbits));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_dsa_paramgen_q_bits(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int qbits));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_dsa_paramgen_md_props(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const char * md_name), REG(a2, const char * md_properties));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_dsa_paramgen_gindex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int gindex));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_dsa_paramgen_type(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const char * name));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_dsa_paramgen_seed(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const unsigned char * seed), REG(d0, size_t seedlen));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_dsa_paramgen_md(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const EVP_MD * md));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_dh_paramgen_type(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int typ));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_dh_paramgen_gindex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int gindex));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_dh_paramgen_seed(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const unsigned char * seed), REG(d0, size_t seedlen));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_dh_paramgen_prime_len(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int pbits));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_dh_paramgen_subprime_len(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int qlen));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_dh_paramgen_generator(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int gen));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_dh_nid(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int nid));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_dh_rfc5114(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int gen));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_dhx_rfc5114(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int gen));
char * SAVEDS ASM LIB_X509_VERIFY_PARAM_get0_host(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param), REG(d0, int idx));
char * SAVEDS ASM LIB_X509_VERIFY_PARAM_get0_email(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param));
char * SAVEDS ASM LIB_X509_VERIFY_PARAM_get1_ip_asc(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param));
int SAVEDS ASM LIB_OSSL_PARAM_modified(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PARAM * p));
void SAVEDS ASM LIB_OSSL_PARAM_set_all_unmodified(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * p));
EVP_RAND * SAVEDS ASM LIB_EVP_RAND_fetch(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * algorithm), REG(a2, const char * properties));
int SAVEDS ASM LIB_EVP_RAND_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_RAND * rand));
void SAVEDS ASM LIB_EVP_RAND_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_RAND * rand));
const char * SAVEDS ASM LIB_EVP_RAND_get0_name(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_RAND * rand));
int SAVEDS ASM LIB_EVP_RAND_is_a(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_RAND * rand), REG(a1, const char * name));
const OSSL_PROVIDER * SAVEDS ASM LIB_EVP_RAND_get0_provider(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_RAND * rand));
int SAVEDS ASM LIB_EVP_RAND_get_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_RAND * rand), REG(a1, OSSL_PARAM * params));
EVP_RAND_CTX * SAVEDS ASM LIB_EVP_RAND_CTX_new(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_RAND * rand), REG(a1, EVP_RAND_CTX * parent));
void SAVEDS ASM LIB_EVP_RAND_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_RAND_CTX * ctx));
EVP_RAND * SAVEDS ASM LIB_EVP_RAND_CTX_get0_rand(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_RAND_CTX * ctx));
int SAVEDS ASM LIB_EVP_RAND_CTX_get_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_RAND_CTX * ctx), REG(a1, OSSL_PARAM * params));
int SAVEDS ASM LIB_EVP_RAND_CTX_set_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_RAND_CTX * ctx), REG(a1, const OSSL_PARAM * params));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_RAND_gettable_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_RAND * rand));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_RAND_gettable_ctx_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_RAND * rand));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_RAND_settable_ctx_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_RAND * rand));
void SAVEDS ASM LIB_EVP_RAND_do_all_provided(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, void (*fn)(EVP_RAND *rand, void *arg)), REG(a2, void * arg));
int SAVEDS ASM LIB_EVP_RAND_names_do_all(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_RAND * rand), REG(a1, void (*fn)(const char *name, void *data)), REG(a2, void * data));
int SAVEDS ASM LIB_EVP_RAND_instantiate(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_RAND_CTX * ctx), REG(d0, unsigned int strength), REG(d1, int prediction_resistance), REG(a1, const unsigned char * pstr), REG(d2, size_t pstr_len), REG(a2, const OSSL_PARAM * params));
int SAVEDS ASM LIB_EVP_RAND_uninstantiate(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_RAND_CTX * ctx));
int SAVEDS ASM LIB_EVP_RAND_generate(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_RAND_CTX * ctx), REG(a1, unsigned char * out), REG(d0, size_t outlen), REG(d1, unsigned int strength), REG(d2, int prediction_resistance), REG(a2, const unsigned char * addin), REG(d3, size_t addin_len));
int SAVEDS ASM LIB_EVP_RAND_reseed(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_RAND_CTX * ctx), REG(d0, int prediction_resistance), REG(a1, const unsigned char * ent), REG(d1, size_t ent_len), REG(a2, const unsigned char * addin), REG(d2, size_t addin_len));
int SAVEDS ASM LIB_EVP_RAND_nonce(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_RAND_CTX * ctx), REG(a1, unsigned char * out), REG(d0, size_t outlen));
int SAVEDS ASM LIB_EVP_RAND_enable_locking(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_RAND_CTX * ctx));
int SAVEDS ASM LIB_EVP_RAND_verify_zeroization(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_RAND_CTX * ctx));
unsigned int SAVEDS ASM LIB_EVP_RAND_get_strength(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_RAND_CTX * ctx));
int SAVEDS ASM LIB_EVP_RAND_get_state(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_RAND_CTX * ctx));
int SAVEDS ASM LIB_EVP_default_properties_is_fips_enabled(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx));
int SAVEDS ASM LIB_EVP_default_properties_enable_fips(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(d0, int enable));
EVP_PKEY * SAVEDS ASM LIB_EVP_PKEY_new_raw_private_key_ex(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * keytype), REG(a2, const char * propq), REG(a3, const unsigned char * priv), REG(d0, size_t len));
EVP_PKEY * SAVEDS ASM LIB_EVP_PKEY_new_raw_public_key_ex(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * keytype), REG(a2, const char * propq), REG(a3, const unsigned char * pub), REG(d0, size_t len));
int SAVEDS ASM LIB_OSSL_PARAM_BLD_push_time_t(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM_BLD * bld), REG(a1, const char * key), REG(d0, time_t val));
void SAVEDS ASM LIB_OSSL_PARAM_construct_time_t_amiga(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * result), REG(a1, const char * key), REG(a2, time_t * buf));
int SAVEDS ASM LIB_OSSL_PARAM_get_time_t(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PARAM * p), REG(a1, time_t * val));
int SAVEDS ASM LIB_OSSL_PARAM_set_time_t(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * p), REG(d0, time_t val));
OSSL_STORE_CTX * SAVEDS ASM LIB_OSSL_STORE_attach(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, const char * scheme), REG(a2, OSSL_LIB_CTX * libctx), REG(a3, const char * propq), REG(d0, const UI_METHOD * ui_method), REG(d1, void * ui_data), REG(d2, const OSSL_PARAM * params), REG(d3, OSSL_STORE_post_process_info_fn post_process), REG(d4, void * post_process_data));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_rsa_pss_keygen_saltlen(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int saltlen));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const EVP_MD * md));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md_name(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const char * mdname));
int SAVEDS ASM LIB_OSSL_PROVIDER_do_all(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * ctx), REG(a1, int (*cb)(OSSL_PROVIDER *provider, void *cbdata)), REG(a2, void * cbdata));
int SAVEDS ASM LIB_EC_GROUP_get_field_type(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group));
int SAVEDS ASM LIB_X509_PUBKEY_eq(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_PUBKEY * a), REG(a1, const X509_PUBKEY * b));
int SAVEDS ASM LIB_EVP_PKEY_eq(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * a), REG(a1, const EVP_PKEY * b));
int SAVEDS ASM LIB_EVP_PKEY_parameters_eq(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * a), REG(a1, const EVP_PKEY * b));
const OSSL_ALGORITHM * SAVEDS ASM LIB_OSSL_PROVIDER_query_operation(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PROVIDER * prov), REG(d0, int operation_id), REG(a1, int * no_cache));
void SAVEDS ASM LIB_OSSL_PROVIDER_unquery_operation(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PROVIDER * prov), REG(d0, int operation_id), REG(a1, const OSSL_ALGORITHM * algs));
void * SAVEDS ASM LIB_OSSL_PROVIDER_get0_provider_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PROVIDER * prov));
int SAVEDS ASM LIB_OSSL_PROVIDER_get_capabilities(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PROVIDER * prov), REG(a1, const char * capability), REG(a2, OSSL_CALLBACK * cb), REG(a3, void * arg));
EC_GROUP * SAVEDS ASM LIB_EC_GROUP_new_by_curve_name_ex(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * propq), REG(d0, int nid));
OSSL_LIB_CTX * SAVEDS ASM LIB_OSSL_LIB_CTX_set0_default(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx));
struct stack_st_X509_INFO * SAVEDS ASM LIB_PEM_X509_INFO_read_bio_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, struct stack_st_X509_INFO * sk), REG(a2, pem_password_cb * cb), REG(a3, void * u), REG(d0, OSSL_LIB_CTX * libctx), REG(d1, const char * propq));
int SAVEDS ASM LIB_X509_REQ_verify_ex(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * a), REG(a1, EVP_PKEY * r), REG(a2, OSSL_LIB_CTX * libctx), REG(a3, const char * propq));
X509 * SAVEDS ASM LIB_X509_new_ex(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * propq));
int SAVEDS ASM LIB_X509_LOOKUP_ctrl_ex(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP * ctx), REG(d0, int cmd), REG(a1, const char * argc), REG(d1, long argl), REG(a2, char ** ret), REG(a3, OSSL_LIB_CTX * libctx), REG(d2, const char * propq));
int SAVEDS ASM LIB_X509_load_cert_file_ex(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP * ctx), REG(a1, const char * file), REG(d0, int type), REG(a2, OSSL_LIB_CTX * libctx), REG(a3, const char * propq));
int SAVEDS ASM LIB_X509_load_cert_crl_file_ex(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP * ctx), REG(a1, const char * file), REG(d0, int type), REG(a2, OSSL_LIB_CTX * libctx), REG(a3, const char * propq));
int SAVEDS ASM LIB_X509_LOOKUP_by_subject_ex(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP * ctx), REG(d0, X509_LOOKUP_TYPE type), REG(a1, const X509_NAME * name), REG(a2, X509_OBJECT * ret), REG(a3, OSSL_LIB_CTX * libctx), REG(d1, const char * propq));
int SAVEDS ASM LIB_X509_STORE_load_file_ex(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * ctx), REG(a1, const char * file), REG(a2, OSSL_LIB_CTX * libctx), REG(a3, const char * propq));
int SAVEDS ASM LIB_X509_STORE_load_store_ex(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * ctx), REG(a1, const char * store), REG(a2, OSSL_LIB_CTX * libctx), REG(a3, const char * propq));
int SAVEDS ASM LIB_X509_STORE_load_locations_ex(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * ctx), REG(a1, const char * file), REG(a2, const char * dir), REG(a3, OSSL_LIB_CTX * libctx), REG(d0, const char * propq));
int SAVEDS ASM LIB_X509_STORE_set_default_paths_ex(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * ctx), REG(a1, OSSL_LIB_CTX * libctx), REG(a2, const char * propq));
struct stack_st_X509 * SAVEDS ASM LIB_X509_build_chain(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * target), REG(a1, struct stack_st_X509 * certs), REG(a2, X509_STORE * store), REG(d0, int with_self_signed), REG(a3, OSSL_LIB_CTX * libctx), REG(d1, const char * propq));
int SAVEDS ASM LIB_X509V3_set_issuer_pkey(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_CTX * ctx), REG(a1, EVP_PKEY * pkey));
char * SAVEDS ASM LIB_i2s_ASN1_UTF8STRING(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * method), REG(a1, ASN1_UTF8STRING * utf8));
ASN1_UTF8STRING * SAVEDS ASM LIB_s2i_ASN1_UTF8STRING(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * method), REG(a1, X509V3_CTX * ctx), REG(a2, const char * str));
OSSL_STORE_CTX * SAVEDS ASM LIB_OSSL_STORE_open_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const char * uri), REG(a1, OSSL_LIB_CTX * libctx), REG(a2, const char * propq), REG(a3, const UI_METHOD * ui_method), REG(d0, void * ui_data), REG(d1, const OSSL_PARAM * params), REG(d2, OSSL_STORE_post_process_info_fn post_process), REG(d3, void * post_process_data));
OSSL_DECODER * SAVEDS ASM LIB_OSSL_DECODER_fetch(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * name), REG(a2, const char * properties));
int SAVEDS ASM LIB_OSSL_DECODER_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER * encoder));
void SAVEDS ASM LIB_OSSL_DECODER_free(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER * encoder));
const OSSL_PROVIDER * SAVEDS ASM LIB_OSSL_DECODER_get0_provider(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_DECODER * encoder));
const char * SAVEDS ASM LIB_OSSL_DECODER_get0_properties(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_DECODER * encoder));
int SAVEDS ASM LIB_OSSL_DECODER_is_a(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_DECODER * encoder), REG(a1, const char * name));
void SAVEDS ASM LIB_OSSL_DECODER_do_all_provided(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, void (*fn)(OSSL_DECODER *encoder, void *arg)), REG(a2, void * arg));
int SAVEDS ASM LIB_OSSL_DECODER_names_do_all(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_DECODER * encoder), REG(a1, void (*fn)(const char *name, void *data)), REG(a2, void * data));
const OSSL_PARAM * SAVEDS ASM LIB_OSSL_DECODER_settable_ctx_params(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER * encoder));
OSSL_DECODER_CTX * SAVEDS ASM LIB_OSSL_DECODER_CTX_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_OSSL_DECODER_CTX_set_params(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER_CTX * ctx), REG(a1, const OSSL_PARAM * params));
void SAVEDS ASM LIB_OSSL_DECODER_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER_CTX * ctx));
int SAVEDS ASM LIB_OSSL_DECODER_CTX_set_passphrase(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER_CTX * ctx), REG(a1, const unsigned char * kstr), REG(d0, size_t klen));
int SAVEDS ASM LIB_OSSL_DECODER_CTX_set_pem_password_cb(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER_CTX * ctx), REG(a1, pem_password_cb * cb), REG(a2, void * cbarg));
int SAVEDS ASM LIB_OSSL_DECODER_CTX_set_passphrase_ui(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER_CTX * ctx), REG(a1, const UI_METHOD * ui_method), REG(a2, void * ui_data));
int SAVEDS ASM LIB_OSSL_DECODER_from_bio(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER_CTX * ctx), REG(a1, BIO * in));
int SAVEDS ASM LIB_OSSL_DECODER_CTX_add_decoder(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER_CTX * ctx), REG(a1, OSSL_DECODER * decoder));
int SAVEDS ASM LIB_OSSL_DECODER_CTX_add_extra(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER_CTX * ctx), REG(a1, OSSL_LIB_CTX * libctx), REG(a2, const char * propq));
int SAVEDS ASM LIB_OSSL_DECODER_CTX_get_num_decoders(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER_CTX * ctx));
int SAVEDS ASM LIB_OSSL_DECODER_CTX_set_input_type(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER_CTX * ctx), REG(a1, const char * input_type));
int SAVEDS ASM LIB_OSSL_DECODER_export(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER_INSTANCE * decoder_inst), REG(a1, void * reference), REG(d0, size_t reference_sz), REG(a2, OSSL_CALLBACK * export_cb), REG(a3, void * export_cbarg));
OSSL_DECODER * SAVEDS ASM LIB_OSSL_DECODER_INSTANCE_get_decoder(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER_INSTANCE * decoder_inst));
void * SAVEDS ASM LIB_OSSL_DECODER_INSTANCE_get_decoder_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER_INSTANCE * decoder_inst));
const OSSL_PARAM * SAVEDS ASM LIB_OSSL_DECODER_gettable_params(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER * decoder));
int SAVEDS ASM LIB_OSSL_DECODER_get_params(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER * decoder), REG(a1, OSSL_PARAM * params));
OSSL_DECODER_CTX * SAVEDS ASM LIB_OSSL_DECODER_CTX_new_for_pkey(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY ** pkey), REG(a1, const char * input_type), REG(a2, const char * input_struct), REG(a3, const char * keytype), REG(d0, int selection), REG(d1, OSSL_LIB_CTX * libctx), REG(d2, const char * propquery));
int SAVEDS ASM LIB_OSSL_DECODER_CTX_set_construct(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER_CTX * ctx), REG(a1, OSSL_DECODER_CONSTRUCT * construct));
int SAVEDS ASM LIB_OSSL_DECODER_CTX_set_construct_data(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER_CTX * ctx), REG(a1, void * construct_data));
int SAVEDS ASM LIB_OSSL_DECODER_CTX_set_cleanup(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER_CTX * ctx), REG(a1, OSSL_DECODER_CLEANUP * cleanup));
OSSL_DECODER_CONSTRUCT * SAVEDS ASM LIB_OSSL_DECODER_CTX_get_construct(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER_CTX * ctx));
void * SAVEDS ASM LIB_OSSL_DECODER_CTX_get_construct_data(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER_CTX * ctx));
OSSL_DECODER_CLEANUP * SAVEDS ASM LIB_OSSL_DECODER_CTX_get_cleanup(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER_CTX * ctx));
EVP_RAND_CTX * SAVEDS ASM LIB_RAND_get0_primary(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * ctx));
EVP_RAND_CTX * SAVEDS ASM LIB_RAND_get0_public(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * ctx));
EVP_RAND_CTX * SAVEDS ASM LIB_RAND_get0_private(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * ctx));
const ASN1_TYPE * SAVEDS ASM LIB_PKCS12_SAFEBAG_get0_bag_obj(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS12_SAFEBAG * bag));
const ASN1_OBJECT * SAVEDS ASM LIB_PKCS12_SAFEBAG_get0_bag_type(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS12_SAFEBAG * bag));
PKCS12_SAFEBAG * SAVEDS ASM LIB_PKCS12_SAFEBAG_create_secret(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(d1, int vtype), REG(a0, const unsigned char * value), REG(d2, int len));
int SAVEDS ASM LIB_PKCS12_add1_attr_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_SAFEBAG * bag), REG(d0, int nid), REG(d1, int type), REG(a1, const unsigned char * bytes), REG(d2, int len));
int SAVEDS ASM LIB_PKCS12_add1_attr_by_txt(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_SAFEBAG * bag), REG(a1, const char * attrname), REG(d0, int type), REG(a2, const unsigned char * bytes), REG(d1, int len));
PKCS12_SAFEBAG * SAVEDS ASM LIB_PKCS12_add_secret(REG(a6, __IFACE_OR_BASE), REG(a0, struct stack_st_PKCS12_SAFEBAG ** pbags), REG(d0, int nid_type), REG(a1, const unsigned char * value), REG(d1, int len));
int SAVEDS ASM LIB_SMIME_write_ASN1_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, ASN1_VALUE * val), REG(a2, BIO * data), REG(d0, int flags), REG(d1, int ctype_nid), REG(d2, int econt_nid), REG(a3, struct stack_st_X509_ALGOR * mdalgs), REG(d3, const ASN1_ITEM * it), REG(d4, OSSL_LIB_CTX * libctx), REG(d5, const char * propq));
ASN1_VALUE * SAVEDS ASM LIB_SMIME_read_ASN1_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(d0, int flags), REG(a1, BIO ** bcont), REG(a2, const ASN1_ITEM * it), REG(a3, ASN1_VALUE ** x), REG(d1, OSSL_LIB_CTX * libctx), REG(d2, const char * propq));
CMS_ContentInfo * SAVEDS ASM LIB_CMS_ContentInfo_new_ex(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * propq));
CMS_ContentInfo * SAVEDS ASM LIB_SMIME_read_CMS_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(d0, int flags), REG(a1, BIO ** bcont), REG(a2, CMS_ContentInfo ** ci));
CMS_ContentInfo * SAVEDS ASM LIB_CMS_sign_ex(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * signcert), REG(a1, EVP_PKEY * pkey), REG(a2, struct stack_st_X509 * certs), REG(a3, BIO * data), REG(d0, unsigned int flags), REG(d1, OSSL_LIB_CTX * ctx), REG(d2, const char * propq));
CMS_ContentInfo * SAVEDS ASM LIB_CMS_data_create_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in), REG(d0, unsigned int flags), REG(a1, OSSL_LIB_CTX * ctx), REG(a2, const char * propq));
CMS_ContentInfo * SAVEDS ASM LIB_CMS_digest_create_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in), REG(a1, const EVP_MD * md), REG(d0, unsigned int flags), REG(a2, OSSL_LIB_CTX * ctx), REG(a3, const char * propq));
CMS_ContentInfo * SAVEDS ASM LIB_CMS_EncryptedData_encrypt_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in), REG(a1, const EVP_CIPHER * cipher), REG(a2, const unsigned char * key), REG(d0, size_t keylen), REG(d1, unsigned int flags), REG(a3, OSSL_LIB_CTX * ctx), REG(d2, const char * propq));
CMS_ContentInfo * SAVEDS ASM LIB_CMS_encrypt_ex(REG(a6, __IFACE_OR_BASE), REG(a0, struct stack_st_X509 * certs), REG(a1, BIO * in), REG(a2, const EVP_CIPHER * cipher), REG(d0, unsigned int flags), REG(a3, OSSL_LIB_CTX * ctx), REG(d1, const char * propq));
CMS_ContentInfo * SAVEDS ASM LIB_CMS_EnvelopedData_create_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher), REG(a1, OSSL_LIB_CTX * ctx), REG(a2, const char * propq));
CMS_ReceiptRequest * SAVEDS ASM LIB_CMS_ReceiptRequest_create0_ex(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * id), REG(d0, int idlen), REG(d1, int allorfirst), REG(a1, struct stack_st_GENERAL_NAMES * receiptList), REG(a2, struct stack_st_GENERAL_NAMES * receiptsTo), REG(a3, OSSL_LIB_CTX * ctx));
int SAVEDS ASM LIB_EVP_SignFinal_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, unsigned char * md), REG(a2, unsigned int * s), REG(a3, EVP_PKEY * pkey), REG(d0, OSSL_LIB_CTX * libctx), REG(d1, const char * propq));
int SAVEDS ASM LIB_EVP_VerifyFinal_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, const unsigned char * sigbuf), REG(d0, unsigned int siglen), REG(a2, EVP_PKEY * pkey), REG(a3, OSSL_LIB_CTX * libctx), REG(d1, const char * propq));
int SAVEDS ASM LIB_EVP_DigestSignInit_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, EVP_PKEY_CTX ** pctx), REG(a2, const char * mdname), REG(a3, OSSL_LIB_CTX * libctx), REG(d0, const char * props), REG(d1, EVP_PKEY * pkey), REG(d2, const OSSL_PARAM * params));
int SAVEDS ASM LIB_EVP_DigestVerifyInit_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, EVP_PKEY_CTX ** pctx), REG(a2, const char * mdname), REG(a3, OSSL_LIB_CTX * libctx), REG(d0, const char * props), REG(d1, EVP_PKEY * pkey), REG(d2, const OSSL_PARAM * params));
PKCS7 * SAVEDS ASM LIB_PKCS7_new_ex(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * propq));
PKCS7 * SAVEDS ASM LIB_PKCS7_sign_ex(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * signcert), REG(a1, EVP_PKEY * pkey), REG(a2, struct stack_st_X509 * certs), REG(a3, BIO * data), REG(d0, int flags), REG(d1, OSSL_LIB_CTX * libctx), REG(d2, const char * propq));
PKCS7 * SAVEDS ASM LIB_PKCS7_encrypt_ex(REG(a6, __IFACE_OR_BASE), REG(a0, struct stack_st_X509 * certs), REG(a1, BIO * in), REG(a2, const EVP_CIPHER * cipher), REG(d0, int flags), REG(a3, OSSL_LIB_CTX * libctx), REG(d1, const char * propq));
PKCS7 * SAVEDS ASM LIB_SMIME_read_PKCS7_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, BIO ** bcont), REG(a2, PKCS7 ** p7));
int SAVEDS ASM LIB_OSSL_PROVIDER_self_test(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PROVIDER * prov));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_tls1_prf_md(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const EVP_MD * md));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set1_tls1_prf_secret(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * pctx), REG(a1, const unsigned char * sec), REG(d0, int seclen));
int SAVEDS ASM LIB_EVP_PKEY_CTX_add1_tls1_prf_seed(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * pctx), REG(a1, const unsigned char * seed), REG(d0, int seedlen));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_hkdf_md(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const EVP_MD * md));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set1_hkdf_salt(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const unsigned char * salt), REG(d0, int saltlen));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set1_hkdf_key(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const unsigned char * key), REG(d0, int keylen));
int SAVEDS ASM LIB_EVP_PKEY_CTX_add1_hkdf_info(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const unsigned char * info), REG(d0, int infolen));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_hkdf_mode(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int mode));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set1_pbe_pass(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const char * pass), REG(d0, int passlen));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set1_scrypt_salt(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const unsigned char * salt), REG(d0, int saltlen));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_scrypt_N(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, uint64_t n));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_scrypt_r(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, uint64_t r));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_scrypt_p(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, uint64_t p));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_scrypt_maxmem_bytes(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, uint64_t maxmem_bytes));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_dh_kdf_type(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int kdf));
int SAVEDS ASM LIB_EVP_PKEY_CTX_get_dh_kdf_type(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set0_dh_kdf_oid(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, ASN1_OBJECT * oid));
int SAVEDS ASM LIB_EVP_PKEY_CTX_get0_dh_kdf_oid(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, ASN1_OBJECT ** oid));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_dh_kdf_md(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const EVP_MD * md));
int SAVEDS ASM LIB_EVP_PKEY_CTX_get_dh_kdf_md(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const EVP_MD ** md));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_dh_kdf_outlen(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int len));
int SAVEDS ASM LIB_EVP_PKEY_CTX_get_dh_kdf_outlen(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, int * len));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set0_dh_kdf_ukm(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, unsigned char * ukm), REG(d0, int len));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_get_updated_iv(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, void * buf), REG(d0, size_t len));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_get_original_iv(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, void * buf), REG(d0, size_t len));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_KEYMGMT_gettable_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KEYMGMT * keymgmt));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_KEYMGMT_settable_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KEYMGMT * keymgmt));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_KEYMGMT_gen_settable_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KEYMGMT * keymgmt));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_SIGNATURE_gettable_ctx_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_SIGNATURE * sig));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_SIGNATURE_settable_ctx_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_SIGNATURE * sig));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_KEYEXCH_gettable_ctx_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KEYEXCH * keyexch));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_KEYEXCH_settable_ctx_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KEYEXCH * keyexch));
EVP_PKEY * SAVEDS ASM LIB_d2i_PUBKEY_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY ** a), REG(a1, const unsigned char ** pp), REG(d0, long length), REG(a2, OSSL_LIB_CTX * libctx), REG(a3, const char * propq));
OSSL_STORE_INFO * SAVEDS ASM LIB_OSSL_STORE_INFO_new_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pubkey));
EVP_PKEY * SAVEDS ASM LIB_OSSL_STORE_INFO_get0_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_INFO * info));
EVP_PKEY * SAVEDS ASM LIB_OSSL_STORE_INFO_get1_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_INFO * info));
EVP_PKEY * SAVEDS ASM LIB_PEM_read_bio_PUBKEY_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, EVP_PKEY ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u), REG(d0, OSSL_LIB_CTX * libctx), REG(d1, const char * propq));
EVP_PKEY * SAVEDS ASM LIB_PEM_read_bio_Parameters_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EVP_PKEY ** x), REG(a2, OSSL_LIB_CTX * libctx), REG(a3, const char * propq));
EC_GROUP * SAVEDS ASM LIB_EC_GROUP_new_from_params(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PARAM * params), REG(a1, OSSL_LIB_CTX * libctx), REG(a2, const char * propq));
OSSL_STORE_LOADER * SAVEDS ASM LIB_OSSL_STORE_LOADER_fetch(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * scheme), REG(a2, const char * properties));
int SAVEDS ASM LIB_OSSL_STORE_LOADER_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_STORE_LOADER * loader));
const OSSL_PROVIDER * SAVEDS ASM LIB_OSSL_STORE_LOADER_get0_provider(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_LOADER * loader));
const char * SAVEDS ASM LIB_OSSL_STORE_LOADER_get0_properties(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_LOADER * loader));
int SAVEDS ASM LIB_OSSL_STORE_LOADER_is_a(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_LOADER * loader), REG(a1, const char * scheme));
void SAVEDS ASM LIB_OSSL_STORE_LOADER_do_all_provided(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, void (*fn)(OSSL_STORE_LOADER *loader, void *arg)), REG(a2, void * arg));
int SAVEDS ASM LIB_OSSL_STORE_LOADER_names_do_all(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_LOADER * loader), REG(a1, void (*fn)(const char *name, void *data)), REG(a2, void * data));
int SAVEDS ASM LIB_OSSL_PARAM_get_utf8_string_ptr(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PARAM * p), REG(a1, const char ** val));
int SAVEDS ASM LIB_OSSL_PARAM_get_octet_string_ptr(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PARAM * p), REG(a1, const void ** val), REG(a2, size_t * used_len));
int SAVEDS ASM LIB_OSSL_DECODER_CTX_set_passphrase_cb(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER_CTX * ctx), REG(a1, OSSL_PASSPHRASE_CALLBACK * cb), REG(a2, void * cbarg));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_mac_key(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const unsigned char * key), REG(d0, int keylen));
OSSL_STORE_INFO * SAVEDS ASM LIB_OSSL_STORE_INFO_new(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, void * data));
void * SAVEDS ASM LIB_OSSL_STORE_INFO_get0_data(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, const OSSL_STORE_INFO * info));
EVP_PKEY * SAVEDS ASM LIB_EVP_PKCS82PKEY_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS8_PRIV_KEY_INFO * p8), REG(a1, OSSL_LIB_CTX * libctx), REG(a2, const char * propq));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set1_id(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const void * id), REG(d0, int len));
int SAVEDS ASM LIB_EVP_PKEY_CTX_get1_id(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, void * id));
int SAVEDS ASM LIB_EVP_PKEY_CTX_get1_id_len(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, size_t * id_len));
CMS_ContentInfo * SAVEDS ASM LIB_CMS_AuthEnvelopedData_create(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
CMS_ContentInfo * SAVEDS ASM LIB_CMS_AuthEnvelopedData_create_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher), REG(a1, OSSL_LIB_CTX * ctx), REG(a2, const char * propq));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_ec_param_enc(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int param_enc));
const char * SAVEDS ASM LIB_EVP_PKEY_get0_type_name(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * key));
const char * SAVEDS ASM LIB_EVP_KEYMGMT_get0_name(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KEYMGMT * keymgmt));
void SAVEDS ASM LIB_EVP_KEM_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_KEM * wrap));
int SAVEDS ASM LIB_EVP_KEM_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_KEM * wrap));
OSSL_PROVIDER * SAVEDS ASM LIB_EVP_KEM_get0_provider(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KEM * wrap));
EVP_KEM * SAVEDS ASM LIB_EVP_KEM_fetch(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * ctx), REG(a1, const char * algorithm), REG(a2, const char * properties));
int SAVEDS ASM LIB_EVP_KEM_is_a(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KEM * wrap), REG(a1, const char * name));
void SAVEDS ASM LIB_EVP_KEM_do_all_provided(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, void (*fn)(EVP_KEM *wrap, void *arg)), REG(a2, void * arg));
int SAVEDS ASM LIB_EVP_KEM_names_do_all(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KEM * wrap), REG(a1, void (*fn)(const char *name, void *data)), REG(a2, void * data));
int SAVEDS ASM LIB_EVP_PKEY_encapsulate_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const OSSL_PARAM * params));
int SAVEDS ASM LIB_EVP_PKEY_encapsulate(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, unsigned char * wrappedkey), REG(a2, size_t * wrappedkeylen), REG(a3, unsigned char * genkey), REG(d0, size_t * genkeylen));
int SAVEDS ASM LIB_EVP_PKEY_decapsulate_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const OSSL_PARAM * params));
int SAVEDS ASM LIB_EVP_PKEY_decapsulate(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, unsigned char * unwrapped), REG(a2, size_t * unwrappedlen), REG(a3, const unsigned char * wrapped), REG(d0, size_t wrappedlen));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_kem_op(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const char * op));
const OSSL_PARAM * SAVEDS ASM LIB_OSSL_ENCODER_gettable_params(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_ENCODER * encoder));
int SAVEDS ASM LIB_OSSL_ENCODER_get_params(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_ENCODER * encoder), REG(a1, OSSL_PARAM * params));
int SAVEDS ASM LIB_OSSL_ENCODER_CTX_set_output_type(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_ENCODER_CTX * ctx), REG(a1, const char * output_type));
int SAVEDS ASM LIB_OSSL_ENCODER_CTX_add_encoder(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_ENCODER_CTX * ctx), REG(a1, OSSL_ENCODER * encoder));
int SAVEDS ASM LIB_OSSL_ENCODER_CTX_add_extra(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_ENCODER_CTX * ctx), REG(a1, OSSL_LIB_CTX * libctx), REG(a2, const char * propq));
int SAVEDS ASM LIB_OSSL_ENCODER_CTX_get_num_encoders(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_ENCODER_CTX * ctx));
int SAVEDS ASM LIB_OSSL_ENCODER_CTX_set_selection(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_ENCODER_CTX * ctx), REG(d0, int selection));
OSSL_ENCODER * SAVEDS ASM LIB_OSSL_ENCODER_INSTANCE_get_encoder(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_ENCODER_INSTANCE * encoder_inst));
void * SAVEDS ASM LIB_OSSL_ENCODER_INSTANCE_get_encoder_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_ENCODER_INSTANCE * encoder_inst));
const char * SAVEDS ASM LIB_OSSL_ENCODER_INSTANCE_get_output_type(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_ENCODER_INSTANCE * encoder_inst));
int SAVEDS ASM LIB_OSSL_ENCODER_CTX_set_construct(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_ENCODER_CTX * ctx), REG(a1, OSSL_ENCODER_CONSTRUCT * construct));
int SAVEDS ASM LIB_OSSL_ENCODER_CTX_set_construct_data(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_ENCODER_CTX * ctx), REG(a1, void * construct_data));
int SAVEDS ASM LIB_OSSL_ENCODER_CTX_set_cleanup(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_ENCODER_CTX * ctx), REG(a1, OSSL_ENCODER_CLEANUP * cleanup));
int SAVEDS ASM LIB_OSSL_ENCODER_CTX_set_passphrase_cb(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_ENCODER_CTX * ctx), REG(a1, OSSL_PASSPHRASE_CALLBACK * cb), REG(a2, void * cbarg));
int SAVEDS ASM LIB_EVP_PKEY_type_names_do_all(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey), REG(a1, void (*fn)(const char *name, void *data)), REG(a2, void * data));
const char * SAVEDS ASM LIB_OSSL_DECODER_INSTANCE_get_input_type(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER_INSTANCE * decoder_inst));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_ASYM_CIPHER_gettable_ctx_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_ASYM_CIPHER * ciph));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_ASYM_CIPHER_settable_ctx_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_ASYM_CIPHER * ciph));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_KEM_gettable_ctx_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KEM * kem));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_KEM_settable_ctx_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KEM * kem));
int SAVEDS ASM LIB_PKCS7_type_is_other(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7));
ASN1_OCTET_STRING * SAVEDS ASM LIB_PKCS7_get_octet_string(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7));
int SAVEDS ASM LIB_OSSL_DECODER_from_data(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER_CTX * ctx), REG(a1, const unsigned char ** pdata), REG(a2, size_t * pdata_len));
int SAVEDS ASM LIB_OSSL_ENCODER_to_data(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_ENCODER_CTX * ctx), REG(a1, unsigned char ** pdata), REG(a2, size_t * pdata_len));
OSSL_LIB_CTX * SAVEDS ASM LIB_EVP_PKEY_CTX_get0_libctx(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
const char * SAVEDS ASM LIB_EVP_PKEY_CTX_get0_propq(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_CTX * ctx));
int SAVEDS ASM LIB_EVP_PKEY_set1_encoded_public_key(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, const unsigned char * pub), REG(d0, size_t publen));
size_t SAVEDS ASM LIB_EVP_PKEY_get1_encoded_public_key(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, unsigned char ** ppub));
int SAVEDS ASM LIB_OSSL_DECODER_CTX_set_selection(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER_CTX * ctx), REG(d0, int selection));
int SAVEDS ASM LIB_OSSL_DECODER_CTX_set_input_structure(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER_CTX * ctx), REG(a1, const char * input_structure));
const char * SAVEDS ASM LIB_OSSL_DECODER_INSTANCE_get_input_structure(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_DECODER_INSTANCE * decoder_inst), REG(a1, int * was_set));
int SAVEDS ASM LIB_OSSL_ENCODER_CTX_set_output_structure(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_ENCODER_CTX * ctx), REG(a1, const char * output_structure));
const char * SAVEDS ASM LIB_OSSL_ENCODER_INSTANCE_get_output_structure(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_ENCODER_INSTANCE * encoder_inst));
int SAVEDS ASM LIB_PEM_write_bio_PrivateKey_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, const EVP_PKEY * x), REG(a2, const EVP_CIPHER * enc), REG(a3, const unsigned char * kstr), REG(d0, int klen), REG(d1, pem_password_cb * cb), REG(d2, void * u), REG(d3, OSSL_LIB_CTX * libctx), REG(d4, const char * propq));
int SAVEDS ASM LIB_PEM_write_bio_PUBKEY_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, const EVP_PKEY * x), REG(a2, OSSL_LIB_CTX * libctx), REG(a3, const char * propq));
int SAVEDS ASM LIB_EVP_PKEY_get_group_name(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey), REG(a1, char * name), REG(d0, size_t name_sz), REG(a2, size_t * gname_len));
int SAVEDS ASM LIB_CRYPTO_atomic_or(REG(a6, __IFACE_OR_BASE), REG(a0, uint64_t * val), REG(d0, uint64_t op), REG(a1, uint64_t * ret), REG(a2, CRYPTO_RWLOCK * lock));
int SAVEDS ASM LIB_CRYPTO_atomic_load(REG(a6, __IFACE_OR_BASE), REG(a0, uint64_t * val), REG(a1, uint64_t * ret), REG(a2, CRYPTO_RWLOCK * lock));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_rsa_pss_keygen_md(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const EVP_MD * md));
int SAVEDS ASM LIB_EVP_PKEY_CTX_set_rsa_pss_keygen_md_name(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const char * mdname), REG(a2, const char * mdprops));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_PKEY_settable_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey));
int SAVEDS ASM LIB_EVP_PKEY_set_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, OSSL_PARAM * params));
int SAVEDS ASM LIB_EVP_PKEY_set_int_param(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, const char * key_name), REG(d0, int in));
int SAVEDS ASM LIB_EVP_PKEY_set_size_t_param(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, const char * key_name), REG(d0, size_t in));
int SAVEDS ASM LIB_EVP_PKEY_set_bn_param(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, const char * key_name), REG(a2, const BIGNUM * bn));
int SAVEDS ASM LIB_EVP_PKEY_set_utf8_string_param(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, const char * key_name), REG(a2, const char * str));
int SAVEDS ASM LIB_EVP_PKEY_set_octet_string_param(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, const char * key_name), REG(a2, const unsigned char * buf), REG(d0, size_t bsize));
int SAVEDS ASM LIB_EVP_PKEY_get_ec_point_conv_form(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey));
int SAVEDS ASM LIB_EVP_PKEY_get_field_type(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey));
int SAVEDS ASM LIB_EVP_PKEY_get_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey), REG(a1, OSSL_PARAM * params));
int SAVEDS ASM LIB_EVP_PKEY_fromdata_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_PKEY_fromdata_settable(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int selection));
int SAVEDS ASM LIB_EVP_PKEY_param_check_quick(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
int SAVEDS ASM LIB_EVP_PKEY_public_check_quick(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
int SAVEDS ASM LIB_EVP_PKEY_CTX_is_a(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const char * keytype));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_CIPHER_CTX_settable_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_CIPHER_CTX_gettable_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_KDF_CTX_gettable_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_KDF_CTX * ctx));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_KDF_CTX_settable_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_KDF_CTX * ctx));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_MAC_CTX_gettable_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MAC_CTX * ctx));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_MAC_CTX_settable_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MAC_CTX * ctx));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_RAND_CTX_gettable_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_RAND_CTX * ctx));
const OSSL_PARAM * SAVEDS ASM LIB_EVP_RAND_CTX_settable_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_RAND_CTX * ctx));
int SAVEDS ASM LIB_RAND_set_DRBG_type(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * ctx), REG(a1, const char * drbg), REG(a2, const char * propq), REG(a3, const char * cipher), REG(d0, const char * digest));
int SAVEDS ASM LIB_RAND_set_seed_source_type(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * ctx), REG(a1, const char * seed), REG(a2, const char * propq));
int SAVEDS ASM LIB_BN_mod_exp_mont_consttime_x2(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * rr1), REG(a1, const BIGNUM * a1), REG(a2, const BIGNUM * p1), REG(a3, const BIGNUM * m1), REG(d0, BN_MONT_CTX * in_mont1), REG(d1, BIGNUM * rr2), REG(d2, const BIGNUM * a2), REG(d3, const BIGNUM * p2), REG(d4, const BIGNUM * m2), REG(d5, BN_MONT_CTX * in_mont2), REG(d6, BN_CTX * ctx));
const BIO_METHOD * SAVEDS ASM LIB_BIO_f_readbuffer(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_OSSL_ESS_check_signing_certs(REG(a6, __IFACE_OR_BASE), REG(a0, const ESS_SIGNING_CERT * ss), REG(a1, const ESS_SIGNING_CERT_V2 * ssv2), REG(a2, const struct stack_st_X509 * chain), REG(d0, int require_signing_cert));
ESS_SIGNING_CERT * SAVEDS ASM LIB_OSSL_ESS_signing_cert_new_init(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * signcert), REG(a1, const struct stack_st_X509 * certs), REG(d0, int set_issuer_serial));
ESS_SIGNING_CERT_V2 * SAVEDS ASM LIB_OSSL_ESS_signing_cert_v2_new_init(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * hash_alg), REG(a1, const X509 * signcert), REG(a2, const struct stack_st_X509 * certs), REG(d0, int set_issuer_serial));
const ASN1_ITEM * SAVEDS ASM LIB_ESS_SIGNING_CERT_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_ESS_SIGNING_CERT_V2_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_EVP_Q_digest(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * name), REG(a2, const char * propq), REG(a3, const void * data), REG(d0, size_t datalen), REG(d1, unsigned char * md), REG(d2, size_t * mdlen));
int SAVEDS ASM LIB_EVP_DigestInit_ex2(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, const EVP_MD * type), REG(a2, const OSSL_PARAM * params));
int SAVEDS ASM LIB_EVP_EncryptInit_ex2(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const EVP_CIPHER * cipher), REG(a2, const unsigned char * key), REG(a3, const unsigned char * iv), REG(d0, const OSSL_PARAM * params));
int SAVEDS ASM LIB_EVP_DecryptInit_ex2(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const EVP_CIPHER * cipher), REG(a2, const unsigned char * key), REG(a3, const unsigned char * iv), REG(d0, const OSSL_PARAM * params));
int SAVEDS ASM LIB_EVP_CipherInit_ex2(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const EVP_CIPHER * cipher), REG(a2, const unsigned char * key), REG(a3, const unsigned char * iv), REG(d0, int enc), REG(d1, const OSSL_PARAM * params));
int SAVEDS ASM LIB_EVP_PKEY_sign_init_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const OSSL_PARAM * params));
int SAVEDS ASM LIB_EVP_PKEY_verify_init_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const OSSL_PARAM * params));
int SAVEDS ASM LIB_EVP_PKEY_verify_recover_init_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const OSSL_PARAM * params));
int SAVEDS ASM LIB_EVP_PKEY_encrypt_init_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const OSSL_PARAM * params));
int SAVEDS ASM LIB_EVP_PKEY_decrypt_init_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const OSSL_PARAM * params));
int SAVEDS ASM LIB_EVP_PKEY_derive_init_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const OSSL_PARAM * params));
TS_RESP_CTX * SAVEDS ASM LIB_TS_RESP_CTX_new_ex(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * propq));
X509_REQ * SAVEDS ASM LIB_X509_REQ_new_ex(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * propq));
EVP_PKEY * SAVEDS ASM LIB_EVP_PKEY_dup(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey));
RSA_PSS_PARAMS * SAVEDS ASM LIB_RSA_PSS_PARAMS_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA_PSS_PARAMS * a));
int SAVEDS ASM LIB_EVP_PKEY_derive_set_peer_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, EVP_PKEY * peer), REG(d0, int validate_peer));
const char * SAVEDS ASM LIB_OSSL_DECODER_get0_name(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_DECODER * decoder));
const char * SAVEDS ASM LIB_OSSL_ENCODER_get0_name(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_ENCODER * kdf));
const char * SAVEDS ASM LIB_OSSL_DECODER_get0_description(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_DECODER * decoder));
const char * SAVEDS ASM LIB_OSSL_ENCODER_get0_description(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_ENCODER * kdf));
const char * SAVEDS ASM LIB_OSSL_STORE_LOADER_get0_description(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_LOADER * loader));
const char * SAVEDS ASM LIB_EVP_MD_get0_description(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md));
const char * SAVEDS ASM LIB_EVP_CIPHER_get0_description(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
const char * SAVEDS ASM LIB_EVP_MAC_get0_description(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MAC * mac));
const char * SAVEDS ASM LIB_EVP_RAND_get0_description(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_RAND * md));
const char * SAVEDS ASM LIB_EVP_PKEY_get0_description(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey));
const char * SAVEDS ASM LIB_EVP_KEYMGMT_get0_description(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KEYMGMT * keymgmt));
const char * SAVEDS ASM LIB_EVP_SIGNATURE_get0_description(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_SIGNATURE * signature));
const char * SAVEDS ASM LIB_EVP_ASYM_CIPHER_get0_description(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_ASYM_CIPHER * cipher));
const char * SAVEDS ASM LIB_EVP_KEM_get0_description(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KEM * wrap));
const char * SAVEDS ASM LIB_EVP_KEYEXCH_get0_description(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KEYEXCH * keyexch));
const char * SAVEDS ASM LIB_EVP_KDF_get0_description(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KDF * kdf));
int SAVEDS ASM LIB_OPENSSL_sk_find_all(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_STACK * st), REG(a1, const void * data), REG(a2, int * pnum));
X509_CRL * SAVEDS ASM LIB_X509_CRL_new_ex(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * propq));
OSSL_PARAM * SAVEDS ASM LIB_OSSL_PARAM_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PARAM * p));
OSSL_PARAM * SAVEDS ASM LIB_OSSL_PARAM_merge(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PARAM * p1), REG(a1, const OSSL_PARAM * p2));
void SAVEDS ASM LIB_OSSL_PARAM_free(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_PARAM * p));
int SAVEDS ASM LIB_EVP_PKEY_todata(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey), REG(d0, int selection), REG(a1, OSSL_PARAM ** params));
int SAVEDS ASM LIB_EVP_PKEY_export(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey), REG(d0, int selection), REG(a1, OSSL_CALLBACK * export_cb), REG(a2, void * export_cbarg));
const EVP_MD * SAVEDS ASM LIB_EVP_MD_CTX_get0_md(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD_CTX * ctx));
EVP_MD * SAVEDS ASM LIB_EVP_MD_CTX_get1_md(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_CIPHER_CTX_get0_cipher(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx));
EVP_CIPHER * SAVEDS ASM LIB_EVP_CIPHER_CTX_get1_cipher(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx));
OSSL_LIB_CTX * SAVEDS ASM LIB_OSSL_LIB_CTX_get0_global_default(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_EVP_SIGNATURE_get0_name(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_SIGNATURE * signature));
const char * SAVEDS ASM LIB_EVP_ASYM_CIPHER_get0_name(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_ASYM_CIPHER * cipher));
const char * SAVEDS ASM LIB_EVP_KEM_get0_name(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KEM * wrap));
const char * SAVEDS ASM LIB_EVP_KEYEXCH_get0_name(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KEYEXCH * keyexch));
int SAVEDS ASM LIB_PKCS5_v2_PBE_keyivgen_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const char * pass), REG(d0, int passlen), REG(a2, ASN1_TYPE * param), REG(a3, const EVP_CIPHER * cipher), REG(d1, const EVP_MD * md), REG(d2, int en_de), REG(d3, OSSL_LIB_CTX * libctx), REG(d4, const char * propq));
int SAVEDS ASM LIB_EVP_PBE_scrypt_ex_amiga_1(REG(a6, __IFACE_OR_BASE), REG(a0, const char * pass), REG(a1, size_t passlen), REG(a2, const unsigned char * salt), REG(d0, uint64_t N), REG(d2, uint64_t r), REG(d4, uint64_t p), REG(d6, uint64_t maxmem), REG(a3, void * moreargs));
void * SAVEDS ASM LIB_EVP_PBE_scrypt_ex_amiga_2(REG(a6, __IFACE_OR_BASE), REG(d0, size_t saltlen), REG(a0, unsigned char * key), REG(d1, size_t keylen), REG(a1, OSSL_LIB_CTX * ctx), REG(a2, const char * propq));
int SAVEDS ASM LIB_PKCS5_v2_scrypt_keyivgen_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const char * pass), REG(d0, int passlen), REG(a2, ASN1_TYPE * param), REG(a3, const EVP_CIPHER * c), REG(d1, const EVP_MD * md), REG(d2, int en_de), REG(d3, OSSL_LIB_CTX * libctx), REG(d4, const char * propq));
int SAVEDS ASM LIB_EVP_PBE_CipherInit_ex(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_OBJECT * pbe_obj), REG(a1, const char * pass), REG(d0, int passlen), REG(a2, ASN1_TYPE * param), REG(a3, EVP_CIPHER_CTX * ctx), REG(d1, int en_de), REG(d2, OSSL_LIB_CTX * libctx), REG(d3, const char * propq));
int SAVEDS ASM LIB_EVP_PBE_find_ex(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(d1, int pbe_nid), REG(a0, int * pcnid), REG(a1, int * pmnid), REG(a2, EVP_PBE_KEYGEN ** pkeygen), REG(a3, EVP_PBE_KEYGEN_EX ** pkeygen_ex));
PKCS12_SAFEBAG * SAVEDS ASM LIB_PKCS12_SAFEBAG_create_pkcs8_encrypt_ex(REG(a6, __IFACE_OR_BASE), REG(d0, int pbe_nid), REG(a0, const char * pass), REG(d1, int passlen), REG(a1, unsigned char * salt), REG(d2, int saltlen), REG(d3, int iter), REG(a2, PKCS8_PRIV_KEY_INFO * p8inf), REG(a3, OSSL_LIB_CTX * ctx), REG(d4, const char * propq));
PKCS8_PRIV_KEY_INFO * SAVEDS ASM LIB_PKCS8_decrypt_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_SIG * p8), REG(a1, const char * pass), REG(d0, int passlen), REG(a2, OSSL_LIB_CTX * ctx), REG(a3, const char * propq));
PKCS8_PRIV_KEY_INFO * SAVEDS ASM LIB_PKCS12_decrypt_skey_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS12_SAFEBAG * bag), REG(a1, const char * pass), REG(d0, int passlen), REG(a2, OSSL_LIB_CTX * ctx), REG(a3, const char * propq));
X509_SIG * SAVEDS ASM LIB_PKCS8_encrypt_ex(REG(a6, __IFACE_OR_BASE), REG(d0, int pbe_nid), REG(a0, const EVP_CIPHER * cipher), REG(a1, const char * pass), REG(d1, int passlen), REG(a2, unsigned char * salt), REG(d2, int saltlen), REG(d3, int iter), REG(a3, PKCS8_PRIV_KEY_INFO * p8), REG(d4, OSSL_LIB_CTX * ctx), REG(d5, const char * propq));
X509_SIG * SAVEDS ASM LIB_PKCS8_set0_pbe_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const char * pass), REG(d0, int passlen), REG(a1, PKCS8_PRIV_KEY_INFO * p8inf), REG(a2, X509_ALGOR * pbe), REG(a3, OSSL_LIB_CTX * ctx), REG(d1, const char * propq));
PKCS7 * SAVEDS ASM LIB_PKCS12_pack_p7encdata_ex(REG(a6, __IFACE_OR_BASE), REG(d0, int pbe_nid), REG(a0, const char * pass), REG(d1, int passlen), REG(a1, unsigned char * salt), REG(d2, int saltlen), REG(d3, int iter), REG(a2, struct stack_st_PKCS12_SAFEBAG * bags), REG(a3, OSSL_LIB_CTX * ctx), REG(d4, const char * propq));
unsigned char * SAVEDS ASM LIB_PKCS12_pbe_crypt_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_ALGOR * algor), REG(a1, const char * pass), REG(d0, int passlen), REG(a2, const unsigned char * in), REG(d1, int inlen), REG(a3, unsigned char ** data), REG(d2, int * datalen), REG(d3, int en_de), REG(d4, OSSL_LIB_CTX * libctx), REG(d5, const char * propq));
void * SAVEDS ASM LIB_PKCS12_item_decrypt_d2i_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_ALGOR * algor), REG(a1, const ASN1_ITEM * it), REG(a2, const char * pass), REG(d0, int passlen), REG(a3, const ASN1_OCTET_STRING * oct), REG(d1, int zbuf), REG(d2, OSSL_LIB_CTX * libctx), REG(d3, const char * propq));
ASN1_OCTET_STRING * SAVEDS ASM LIB_PKCS12_item_i2d_encrypt_ex(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ALGOR * algor), REG(a1, const ASN1_ITEM * it), REG(a2, const char * pass), REG(d0, int passlen), REG(a3, void * obj), REG(d1, int zbuf), REG(d2, OSSL_LIB_CTX * ctx), REG(d3, const char * propq));
PKCS12 * SAVEDS ASM LIB_PKCS12_init_ex(REG(a6, __IFACE_OR_BASE), REG(d0, int mode), REG(a0, OSSL_LIB_CTX * ctx), REG(a1, const char * propq));
int SAVEDS ASM LIB_PKCS12_key_gen_asc_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const char * pass), REG(d0, int passlen), REG(a1, unsigned char * salt), REG(d1, int saltlen), REG(d2, int id), REG(d3, int iter), REG(d4, int n), REG(a2, unsigned char * out), REG(a3, const EVP_MD * md_type), REG(d5, OSSL_LIB_CTX * ctx), REG(d6, const char * propq));
int SAVEDS ASM LIB_PKCS12_key_gen_uni_ex(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * pass), REG(d0, int passlen), REG(a1, unsigned char * salt), REG(d1, int saltlen), REG(d2, int id), REG(d3, int iter), REG(d4, int n), REG(a2, unsigned char * out), REG(a3, const EVP_MD * md_type), REG(d5, OSSL_LIB_CTX * ctx), REG(d6, const char * propq));
int SAVEDS ASM LIB_PKCS12_key_gen_utf8_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const char * pass), REG(d0, int passlen), REG(a1, unsigned char * salt), REG(d1, int saltlen), REG(d2, int id), REG(d3, int iter), REG(d4, int n), REG(a2, unsigned char * out), REG(a3, const EVP_MD * md_type), REG(d5, OSSL_LIB_CTX * ctx), REG(d6, const char * propq));
int SAVEDS ASM LIB_PKCS12_PBE_keyivgen_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const char * pass), REG(d0, int passlen), REG(a2, ASN1_TYPE * param), REG(a3, const EVP_CIPHER * cipher), REG(d1, const EVP_MD * md_type), REG(d2, int en_de), REG(d3, OSSL_LIB_CTX * libctx), REG(d4, const char * propq));
PKCS12 * SAVEDS ASM LIB_PKCS12_create_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const char * pass), REG(a1, const char * name), REG(a2, EVP_PKEY * pkey), REG(a3, X509 * cert), REG(d0, struct stack_st_X509 * ca), REG(d1, int nid_key), REG(d2, int nid_cert), REG(d3, int iter), REG(d4, int mac_iter), REG(d5, int keytype), REG(d6, OSSL_LIB_CTX * ctx), REG(d7, const char * propq));
PKCS12_SAFEBAG * SAVEDS ASM LIB_PKCS12_add_key_ex(REG(a6, __IFACE_OR_BASE), REG(a0, struct stack_st_PKCS12_SAFEBAG ** pbags), REG(a1, EVP_PKEY * key), REG(d0, int key_usage), REG(d1, int iter), REG(d2, int key_nid), REG(a2, const char * pass), REG(a3, OSSL_LIB_CTX * ctx), REG(d3, const char * propq));
int SAVEDS ASM LIB_PKCS12_add_safe_ex(REG(a6, __IFACE_OR_BASE), REG(a0, struct stack_st_PKCS7 ** psafes), REG(a1, struct stack_st_PKCS12_SAFEBAG * bags), REG(d0, int safe_nid), REG(d1, int iter), REG(a2, const char * pass), REG(a3, OSSL_LIB_CTX * ctx), REG(d2, const char * propq));
PKCS12 * SAVEDS ASM LIB_PKCS12_add_safes_ex(REG(a6, __IFACE_OR_BASE), REG(a0, struct stack_st_PKCS7 * safes), REG(d0, int p7_nid), REG(a1, OSSL_LIB_CTX * ctx), REG(a2, const char * propq));
int SAVEDS ASM LIB_PKCS5_pbe_set0_algor_ex(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ALGOR * algor), REG(d0, int alg), REG(d1, int iter), REG(a1, const unsigned char * salt), REG(d2, int saltlen), REG(a2, OSSL_LIB_CTX * libctx));
X509_ALGOR * SAVEDS ASM LIB_PKCS5_pbe_set_ex(REG(a6, __IFACE_OR_BASE), REG(d0, int alg), REG(d1, int iter), REG(a0, const unsigned char * salt), REG(d2, int saltlen), REG(a1, OSSL_LIB_CTX * libctx));
X509_ALGOR * SAVEDS ASM LIB_PKCS5_pbe2_set_iv_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher), REG(d0, int iter), REG(a1, unsigned char * salt), REG(d1, int saltlen), REG(a2, unsigned char * aiv), REG(d2, int prf_nid), REG(a3, OSSL_LIB_CTX * libctx));
X509_ALGOR * SAVEDS ASM LIB_PKCS5_pbkdf2_set_ex(REG(a6, __IFACE_OR_BASE), REG(d0, int iter), REG(a0, unsigned char * salt), REG(d1, int saltlen), REG(d2, int prf_nid), REG(d3, int keylen), REG(a1, OSSL_LIB_CTX * libctx));
BIO * SAVEDS ASM LIB_BIO_new_from_core_bio(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, OSSL_CORE_BIO * corebio));
BIO * SAVEDS ASM LIB_BIO_new_ex(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const BIO_METHOD * method));
const BIO_METHOD * SAVEDS ASM LIB_BIO_s_core(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_BIO_get_line(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, char * buf), REG(d0, int size));
OSSL_LIB_CTX * SAVEDS ASM LIB_OSSL_LIB_CTX_new_from_dispatch(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CORE_HANDLE * handle), REG(a1, const OSSL_DISPATCH * in));
OSSL_LIB_CTX * SAVEDS ASM LIB_OSSL_LIB_CTX_new_child(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_CORE_HANDLE * handle), REG(a1, const OSSL_DISPATCH * in));
const OSSL_DISPATCH * SAVEDS ASM LIB_OSSL_PROVIDER_get0_dispatch(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_PROVIDER * prov));
int SAVEDS ASM LIB_PKCS5_PBE_keyivgen_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * cctx), REG(a1, const char * pass), REG(d0, int passlen), REG(a2, ASN1_TYPE * param), REG(a3, const EVP_CIPHER * cipher), REG(d1, const EVP_MD * md), REG(d2, int en_de), REG(d3, OSSL_LIB_CTX * libctx), REG(d4, const char * propq));
size_t SAVEDS ASM LIB_EVP_MAC_CTX_get_block_size(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MAC_CTX * ctx));
long SAVEDS ASM LIB_BIO_debug_callback_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(d0, int oper), REG(a1, const char * argp), REG(d1, size_t len), REG(d2, int argi), REG(d3, long argl), REG(d4, int ret), REG(a2, size_t * processed));
EVP_PKEY * SAVEDS ASM LIB_b2i_PVK_bio_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in), REG(a1, pem_password_cb * cb), REG(a2, void * u), REG(a3, OSSL_LIB_CTX * libctx), REG(d0, const char * propq));
int SAVEDS ASM LIB_i2b_PVK_bio_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, const EVP_PKEY * pk), REG(d0, int enclevel), REG(a2, pem_password_cb * cb), REG(a3, void * u), REG(d1, OSSL_LIB_CTX * libctx), REG(d2, const char * propq));
OSSL_LIB_CTX * SAVEDS ASM LIB_NCONF_get0_libctx(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF * conf));
struct stack_st_OPENSSL_CSTRING * SAVEDS ASM LIB_NCONF_get_section_names(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF * conf));
X509_PUBKEY * SAVEDS ASM LIB_X509_PUBKEY_new_ex(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * propq));
ASN1_VALUE * SAVEDS ASM LIB_ASN1_item_new_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_ITEM * it), REG(a1, OSSL_LIB_CTX * libctx), REG(a2, const char * propq));
void * SAVEDS ASM LIB_ASN1_item_d2i_bio_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_ITEM * it), REG(a1, BIO * in), REG(a2, void * pval), REG(a3, OSSL_LIB_CTX * libctx), REG(d0, const char * propq));
ASN1_VALUE * SAVEDS ASM LIB_ASN1_item_d2i_ex(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE ** val), REG(a1, const unsigned char ** in), REG(d0, long len), REG(a2, const ASN1_ITEM * it), REG(a3, OSSL_LIB_CTX * libctx), REG(d1, const char * propq));
int SAVEDS ASM LIB_ASN1_TIME_print_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const ASN1_TIME * tm), REG(d0, unsigned long flags));
const OSSL_PROVIDER * SAVEDS ASM LIB_EVP_PKEY_get0_provider(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * key));
const OSSL_PROVIDER * SAVEDS ASM LIB_EVP_PKEY_CTX_get0_provider(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_CTX * ctx));

#if defined(SDI_LIB_H)
  #define SDI_LIBVECTOR_EXT \
    LFUNC_FAS(SSL_CTX_set_async_callback) \
    LFUNC_FA_(SSL_CTX_set_async_callback_arg) \
    LFUNC_FA_(SSL_set_async_callback) \
    LFUNC_FA_(SSL_set_async_callback_arg) \
    LFUNC_FA_(SSL_get_async_status) \
    LFUNC_FA_(SSL_sendfile) \
    LFUNC_FA_(OSSL_default_cipher_list) \
    LFUNC_FA_(OSSL_default_ciphersuites) \
    LFUNC_FA_(SSL_add_store_cert_subjects_to_stack) \
    LFUNC_FA_(SSL_CTX_set_default_verify_store) \
    LFUNC_FA_(SSL_CTX_load_verify_file) \
    LFUNC_FA_(SSL_CTX_load_verify_dir) \
    LFUNC_FA_(SSL_CTX_load_verify_store) \
    LFUNC_FA_(SSL_CTX_set_tlsext_ticket_key_evp_cb) \
    LFUNC_FA_(SSL_CTX_new_ex) \
    LFUNC_FA_(SSL_new_session_ticket) \
    LFUNC_FA_(SSL_get0_peer_certificate) \
    LFUNC_FA_(SSL_get1_peer_certificate) \
    LFUNC_FA_(SSL_load_client_CA_file_ex) \
    LFUNC_FA_(SSL_set0_tmp_dh_pkey) \
    LFUNC_FA_(SSL_CTX_set0_tmp_dh_pkey) \
    LFUNC_FA_(SSL_group_to_name) \
    LFUNC_FA_(OSSL_HTTP_REQ_CTX_free) \
    LFUNC_FA_(EVP_MD_get_type) \
    LFUNC_FA_(EVP_CIPHER_CTX_get_key_length) \
    LFUNC_FA_(EVP_CIPHER_get_flags) \
    LFUNC_FA_(X509_CRL_load_http) \
    LFUNC_FA_(OSSL_HTTP_parse_url) \
    LFUNC_FA_(EVP_CIPHER_get_block_size) \
    LFUNC_FA_(OSSL_HTTP_REQ_CTX_exchange) \
    LFUNC_FA_(EVP_MD_get_pkey_type) \
    LFUNC_FA_(EVP_PKEY_get_security_bits) \
    LFUNC_FA_(TS_VERIFY_CTX_set_certs) \
    LFUNC_FA_(OSSL_HTTP_REQ_CTX_new) \
    LFUNC_FA_(X509_load_http) \
    LFUNC_FA_(X509_NAME_hash_ex) \
    LFUNC_FA_(OSSL_HTTP_REQ_CTX_set_request_line) \
    LFUNC_FA_(EVP_CIPHER_get_key_length) \
    LFUNC_FA_(EVP_CIPHER_CTX_get_block_size) \
    LFUNC_FA_(EVP_CIPHER_CTX_get_nid) \
    LFUNC_FA_(OSSL_HTTP_REQ_CTX_set1_req) \
    LFUNC_FA_(OSSL_HTTP_REQ_CTX_set_max_response_length) \
    LFUNC_FA_(OSSL_HTTP_REQ_CTX_nbio) \
    LFUNC_FA_(EVP_PKEY_get_base_id) \
    LFUNC_FA_(EVP_MD_get_flags) \
    LFUNC_FA_(EVP_MD_get_size) \
    LFUNC_FA_(EVP_MD_CTX_get_pkey_ctx) \
    LFUNC_FA_(EVP_PKEY_get_bits) \
    LFUNC_FA_(EVP_MD_CTX_get0_md_data) \
    LFUNC_FA_(OSSL_HTTP_REQ_CTX_add1_header) \
    LFUNC_FA_(EVP_CIPHER_get_type) \
    LFUNC_FA_(EVP_CIPHER_CTX_get_iv_length) \
    LFUNC_FA_(EVP_PKEY_get_id) \
    LFUNC_FA_(EVP_PKEY_get_size) \
    LFUNC_FA_(EVP_MD_get_block_size) \
    LFUNC_FA_(EVP_CIPHER_CTX_is_encrypting) \
    LFUNC_FA_(OSSL_HTTP_REQ_CTX_nbio_d2i) \
    LFUNC_FA_(EVP_CIPHER_get_nid) \
    LFUNC_FA_(EVP_CIPHER_get_iv_length) \
    LFUNC_FA_(OSSL_HTTP_REQ_CTX_get0_mem_bio) \
    LFUNC_FA_(EVP_CIPHER_CTX_get_num) \
    LFUNC_FA_(EVP_MAC_CTX_new) \
    LFUNC_FA_(EVP_MAC_CTX_free) \
    LFUNC_FA_(EVP_MAC_CTX_dup) \
    LFUNC_FA_(EVP_MAC_CTX_get0_mac) \
    LFUNC_FA_(EVP_MAC_CTX_get_mac_size) \
    LFUNC_FA_(EVP_Q_mac) \
    LFUNC_FA_(EVP_MAC_init) \
    LFUNC_FA_(EVP_MAC_update) \
    LFUNC_FA_(EVP_MAC_final) \
    LFUNC_FA_(EVP_MAC_finalXOF) \
    LFUNC_FA_(OSSL_EC_curve_nid2name) \
    LFUNC_FA_(EVP_PKEY_digestsign_supports_digest) \
    LFUNC_FA_(OPENSSL_version_major) \
    LFUNC_FA_(OPENSSL_version_minor) \
    LFUNC_FA_(OPENSSL_version_patch) \
    LFUNC_FA_(OPENSSL_version_pre_release) \
    LFUNC_FA_(OPENSSL_version_build_metadata) \
    LFUNC_FA_(ASYNC_WAIT_CTX_get_callback) \
    LFUNC_FA_(ASYNC_WAIT_CTX_set_callback) \
    LFUNC_FA_(ASYNC_WAIT_CTX_set_status) \
    LFUNC_FA_(ASYNC_WAIT_CTX_get_status) \
    LFUNC_FA_(EVP_KDF_CTX_free) \
    LFUNC_FA_(EVP_KDF_CTX_reset) \
    LFUNC_FA_(EVP_KDF_CTX_get_kdf_size) \
    LFUNC_FA_(EVP_KDF_derive) \
    LFUNC_FA_(EVP_KDF_get0_name) \
    LFUNC_FA_(EC_GROUP_get0_field) \
    LFUNC_FA_(CRYPTO_alloc_ex_data) \
    LFUNC_FA_(OSSL_LIB_CTX_new) \
    LFUNC_FA_(OSSL_LIB_CTX_free) \
    LFUNC_FA_(OPENSSL_LH_flush) \
    LFUNC_FA_(BN_native2bn) \
    LFUNC_FA_(BN_bn2nativepad) \
    LFUNC_FA_(OSSL_trace_get_category_num) \
    LFUNC_FA_(OSSL_trace_get_category_name) \
    LFUNC_FA_(OSSL_trace_set_channel) \
    LFUNC_FA_(OSSL_trace_set_prefix) \
    LFUNC_FA_(OSSL_trace_set_suffix) \
    LFUNC_FA_(OSSL_trace_set_callback) \
    LFUNC_FA_(OSSL_trace_enabled) \
    LFUNC_FA_(OSSL_trace_begin) \
    LFUNC_FA_(OSSL_trace_end) \
    LFUNC_FA_(OSSL_PROVIDER_load) \
    LFUNC_FA_(OSSL_PROVIDER_try_load) \
    LFUNC_FA_(OSSL_PROVIDER_unload) \
    LFUNC_FA_(OSSL_PROVIDER_add_builtin) \
    LFUNC_FA_(OSSL_PROVIDER_gettable_params) \
    LFUNC_FA_(OSSL_PROVIDER_get_params) \
    LFUNC_FA_(d2i_OSSL_CRMF_ENCRYPTEDVALUE) \
    LFUNC_FA_(i2d_OSSL_CRMF_ENCRYPTEDVALUE) \
    LFUNC_FA_(OSSL_CRMF_ENCRYPTEDVALUE_it) \
    LFUNC_FA_(d2i_OSSL_CRMF_MSG) \
    LFUNC_FA_(i2d_OSSL_CRMF_MSG) \
    LFUNC_FA_(OSSL_CRMF_MSG_dup) \
    LFUNC_FA_(OSSL_CRMF_MSG_it) \
    LFUNC_FA_(d2i_OSSL_CRMF_PBMPARAMETER) \
    LFUNC_FA_(i2d_OSSL_CRMF_PBMPARAMETER) \
    LFUNC_FA_(OSSL_CRMF_PBMPARAMETER_it) \
    LFUNC_FA_(d2i_OSSL_CRMF_CERTID) \
    LFUNC_FA_(i2d_OSSL_CRMF_CERTID) \
    LFUNC_FA_(OSSL_CRMF_CERTID_dup) \
    LFUNC_FA_(OSSL_CRMF_CERTID_it) \
    LFUNC_FA_(d2i_OSSL_CRMF_PKIPUBLICATIONINFO) \
    LFUNC_FA_(i2d_OSSL_CRMF_PKIPUBLICATIONINFO) \
    LFUNC_FA_(OSSL_CRMF_PKIPUBLICATIONINFO_it) \
    LFUNC_FA_(d2i_OSSL_CRMF_SINGLEPUBINFO) \
    LFUNC_FA_(i2d_OSSL_CRMF_SINGLEPUBINFO) \
    LFUNC_FA_(OSSL_CRMF_SINGLEPUBINFO_it) \
    LFUNC_FA_(d2i_OSSL_CRMF_CERTTEMPLATE) \
    LFUNC_FA_(i2d_OSSL_CRMF_CERTTEMPLATE) \
    LFUNC_FA_(OSSL_CRMF_CERTTEMPLATE_it) \
    LFUNC_FA_(d2i_OSSL_CRMF_MSGS) \
    LFUNC_FA_(i2d_OSSL_CRMF_MSGS) \
    LFUNC_FA_(OSSL_CRMF_MSGS_it) \
    LFUNC_FA_(OSSL_CRMF_pbmp_new) \
    LFUNC_FA_(OSSL_CRMF_pbm_new) \
    LFUNC_FA_(OSSL_CRMF_MSG_get0_regCtrl_regToken) \
    LFUNC_FA_(OSSL_CRMF_MSG_set1_regCtrl_regToken) \
    LFUNC_FA_(OSSL_CRMF_MSG_get0_regCtrl_authenticator) \
    LFUNC_FA_(OSSL_CRMF_MSG_set1_regCtrl_authenticator) \
    LFUNC_FA_(OSSL_CRMF_MSG_PKIPublicationInfo_push0_SinglePubInfo) \
    LFUNC_FA_(OSSL_CRMF_MSG_set0_SinglePubInfo) \
    LFUNC_FA_(OSSL_CRMF_MSG_get0_regCtrl_pkiPublicationInfo) \
    LFUNC_FA_(OSSL_CRMF_MSG_set_PKIPublicationInfo_action) \
    LFUNC_FA_(OSSL_CRMF_MSG_set1_regCtrl_pkiPublicationInfo) \
    LFUNC_FA_(OSSL_CRMF_MSG_get0_regCtrl_protocolEncrKey) \
    LFUNC_FA_(OSSL_CRMF_MSG_set1_regCtrl_protocolEncrKey) \
    LFUNC_FA_(OSSL_CRMF_MSG_get0_regCtrl_oldCertID) \
    LFUNC_FA_(OSSL_CRMF_MSG_set1_regCtrl_oldCertID) \
    LFUNC_FA_(OSSL_CRMF_CERTID_gen) \
    LFUNC_FA_(OSSL_CRMF_MSG_get0_regInfo_utf8Pairs) \
    LFUNC_FA_(OSSL_CRMF_MSG_set1_regInfo_utf8Pairs) \
    LFUNC_FA_(OSSL_CRMF_MSG_get0_regInfo_certReq) \
    LFUNC_FA_(OSSL_CRMF_MSG_set1_regInfo_certReq) \
    LFUNC_FA_(OSSL_CRMF_MSG_set0_validity) \
    LFUNC_FA_(OSSL_CRMF_MSG_set_certReqId) \
    LFUNC_FA_(OSSL_CRMF_MSG_get_certReqId) \
    LFUNC_FA_(OSSL_CRMF_MSG_set0_extensions) \
    LFUNC_FA_(OSSL_CRMF_MSG_push0_extension) \
    LFUNC_FA_(OSSL_CRMF_MSG_create_popo) \
    LFUNC_FA_(OSSL_CRMF_MSGS_verify_popo) \
    LFUNC_FA_(OSSL_CRMF_MSG_get0_tmpl) \
    LFUNC_FA_(OSSL_CRMF_CERTTEMPLATE_get0_serialNumber) \
    LFUNC_FA_(OSSL_CRMF_CERTTEMPLATE_get0_subject) \
    LFUNC_FA_(OSSL_CRMF_CERTTEMPLATE_get0_issuer) \
    LFUNC_FA_(OSSL_CRMF_CERTTEMPLATE_get0_extensions) \
    LFUNC_FA_(OSSL_CRMF_CERTTEMPLATE_fill) \
    LFUNC_FA_(OSSL_CRMF_ENCRYPTEDVALUE_get1_encCert) \
    LFUNC_FA_(OSSL_PARAM_locate) \
    LFUNC_FA_(OSSL_PARAM_construct_int_amiga) \
    LFUNC_FA_(OSSL_PARAM_construct_uint_amiga) \
    LFUNC_FA_(OSSL_PARAM_construct_long_amiga) \
    LFUNC_FA_(OSSL_PARAM_construct_ulong_amiga) \
    LFUNC_FA_(OSSL_PARAM_construct_int32_amiga) \
    LFUNC_FA_(OSSL_PARAM_construct_uint32_amiga) \
    LFUNC_FA_(OSSL_PARAM_construct_int64_amiga) \
    LFUNC_FA_(OSSL_PARAM_construct_uint64_amiga) \
    LFUNC_FA_(OSSL_PARAM_construct_size_t_amiga) \
    LFUNC_FA_(OSSL_PARAM_construct_BN_amiga) \
    LFUNC_FA_(OSSL_PARAM_construct_double_amiga) \
    LFUNC_FA_(OSSL_PARAM_construct_utf8_string_amiga) \
    LFUNC_FA_(OSSL_PARAM_construct_utf8_ptr_amiga) \
    LFUNC_FA_(OSSL_PARAM_construct_octet_string_amiga) \
    LFUNC_FA_(OSSL_PARAM_construct_octet_ptr_amiga) \
    LFUNC_FA_(OSSL_PARAM_get_int) \
    LFUNC_FA_(OSSL_PARAM_get_uint) \
    LFUNC_FA_(OSSL_PARAM_get_long) \
    LFUNC_FA_(OSSL_PARAM_get_ulong) \
    LFUNC_FA_(OSSL_PARAM_get_int32) \
    LFUNC_FA_(OSSL_PARAM_get_uint32) \
    LFUNC_FA_(OSSL_PARAM_get_int64) \
    LFUNC_FA_(OSSL_PARAM_get_uint64) \
    LFUNC_FA_(OSSL_PARAM_get_size_t) \
    LFUNC_FA_(OSSL_PARAM_set_int) \
    LFUNC_FA_(OSSL_PARAM_set_uint) \
    LFUNC_FA_(OSSL_PARAM_set_long) \
    LFUNC_FA_(OSSL_PARAM_set_ulong) \
    LFUNC_FA_(OSSL_PARAM_set_int32) \
    LFUNC_FA_(OSSL_PARAM_set_uint32) \
    LFUNC_FA_(OSSL_PARAM_set_int64) \
    LFUNC_FA_(OSSL_PARAM_set_uint64) \
    LFUNC_FA_(OSSL_PARAM_set_size_t) \
    LFUNC_FA_(OSSL_PARAM_get_double) \
    LFUNC_FA_(OSSL_PARAM_set_double) \
    LFUNC_FA_(OSSL_PARAM_get_BN) \
    LFUNC_FA_(OSSL_PARAM_set_BN) \
    LFUNC_FA_(OSSL_PARAM_get_utf8_string) \
    LFUNC_FA_(OSSL_PARAM_set_utf8_string) \
    LFUNC_FA_(OSSL_PARAM_get_octet_string) \
    LFUNC_FA_(OSSL_PARAM_set_octet_string) \
    LFUNC_FA_(OSSL_PARAM_get_utf8_ptr) \
    LFUNC_FA_(OSSL_PARAM_set_utf8_ptr) \
    LFUNC_FA_(OSSL_PARAM_get_octet_ptr) \
    LFUNC_FA_(OSSL_PARAM_set_octet_ptr) \
    LFUNC_FA_(X509_set0_distinguishing_id) \
    LFUNC_FA_(X509_get0_distinguishing_id) \
    LFUNC_FA_(EVP_MD_up_ref) \
    LFUNC_FA_(EVP_MD_fetch) \
    LFUNC_FA_(EVP_set_default_properties) \
    LFUNC_FA_(OSSL_PARAM_construct_end_amiga) \
    LFUNC_FA_(EC_GROUP_check_named_curve) \
    LFUNC_FA_(EVP_CIPHER_up_ref) \
    LFUNC_FA_(EVP_CIPHER_fetch) \
    LFUNC_FA_(EVP_CIPHER_get_mode) \
    LFUNC_FA_(OPENSSL_info) \
    LFUNC_FA_(EVP_KDF_CTX_new) \
    LFUNC_FA_(EVP_KDF_CTX_kdf) \
    LFUNC_FA_(i2d_KeyParams) \
    LFUNC_FA_(d2i_KeyParams) \
    LFUNC_FA_(i2d_KeyParams_bio) \
    LFUNC_FA_(d2i_KeyParams_bio) \
    LFUNC_FA_(OSSL_CMP_PKISTATUS_it) \
    LFUNC_FA_(d2i_OSSL_CMP_PKIHEADER) \
    LFUNC_FA_(i2d_OSSL_CMP_PKIHEADER) \
    LFUNC_FA_(OSSL_CMP_PKIHEADER_it) \
    LFUNC_FA_(d2i_OSSL_CMP_MSG) \
    LFUNC_FA_(i2d_OSSL_CMP_MSG) \
    LFUNC_FA_(OSSL_CMP_MSG_it) \
    LFUNC_FA_(OSSL_CMP_ITAV_create) \
    LFUNC_FA_(OSSL_CMP_ITAV_set0) \
    LFUNC_FA_(OSSL_CMP_ITAV_get0_type) \
    LFUNC_FA_(OSSL_CMP_ITAV_get0_value) \
    LFUNC_FA_(OSSL_CMP_ITAV_push0_stack_item) \
    LFUNC_FA_(OSSL_CMP_ITAV_free) \
    LFUNC_FA_(OSSL_CMP_MSG_free) \
    LFUNC_FA_(EVP_MD_CTX_set_params) \
    LFUNC_FA_(EVP_MD_CTX_get_params) \
    LFUNC_FA_(BN_CTX_new_ex) \
    LFUNC_FA_(BN_CTX_secure_new_ex) \
    LFUNC_FA_(OPENSSL_thread_stop_ex) \
    LFUNC_FA_(OSSL_PARAM_locate_const) \
    LFUNC_FA_(X509_REQ_set0_distinguishing_id) \
    LFUNC_FA_(X509_REQ_get0_distinguishing_id) \
    LFUNC_FA_(BN_rand_ex) \
    LFUNC_FA_(BN_priv_rand_ex) \
    LFUNC_FA_(BN_rand_range_ex) \
    LFUNC_FA_(BN_priv_rand_range_ex) \
    LFUNC_FA_(BN_generate_prime_ex2) \
    LFUNC_FA_(EVP_KEYEXCH_free) \
    LFUNC_FA_(EVP_KEYEXCH_up_ref) \
    LFUNC_FA_(EVP_KEYEXCH_fetch) \
    LFUNC_FA_(EVP_PKEY_CTX_set_dh_pad) \
    LFUNC_FA_(EVP_PKEY_CTX_set_params) \
    LFUNC_FA_(EVP_KEYMGMT_fetch) \
    LFUNC_FA_(EVP_KEYMGMT_up_ref) \
    LFUNC_FA_(EVP_KEYMGMT_free) \
    LFUNC_FA_(EVP_KEYMGMT_get0_provider) \
    LFUNC_FA_(X509_PUBKEY_dup) \
    LFUNC_FA_(EVP_MD_get0_name) \
    LFUNC_FA_(EVP_CIPHER_get0_name) \
    LFUNC_FA_(EVP_MD_get0_provider) \
    LFUNC_FA_(EVP_CIPHER_get0_provider) \
    LFUNC_FA_(OSSL_PROVIDER_get0_name) \
    LFUNC_FA_(EVP_CIPHER_do_all_provided) \
    LFUNC_FA_(EVP_MD_do_all_provided) \
    LFUNC_FA_(EVP_KEYEXCH_get0_provider) \
    LFUNC_FA_(OSSL_PROVIDER_available) \
    LFUNC_FA_(ERR_new) \
    LFUNC_FA_(ERR_set_debug) \
    LFUNC_FA_(ERR_vset_error) \
    LFUNC_VA_(ERR_set_error) \
    LFUNC_FA_(X509_self_signed) \
    LFUNC_FA_(OPENSSL_hexstr2buf_ex) \
    LFUNC_FA_(OPENSSL_buf2hexstr_ex) \
    LFUNC_FA_(OSSL_PARAM_allocate_from_text) \
    LFUNC_FA_(EVP_MD_gettable_params) \
    LFUNC_FA_(EVP_MD_CTX_settable_params) \
    LFUNC_FA_(EVP_MD_CTX_gettable_params) \
    LFUNC_FA_(EVP_CIPHER_get_params) \
    LFUNC_FA_(EVP_CIPHER_CTX_set_params) \
    LFUNC_FA_(EVP_CIPHER_CTX_get_params) \
    LFUNC_FA_(EVP_CIPHER_gettable_params) \
    LFUNC_FA_(EVP_CIPHER_settable_ctx_params) \
    LFUNC_FA_(EVP_CIPHER_gettable_ctx_params) \
    LFUNC_FA_(EVP_MD_get_params) \
    LFUNC_FA_(EVP_MAC_fetch) \
    LFUNC_FA_(EVP_MAC_settable_ctx_params) \
    LFUNC_FA_(EVP_MAC_CTX_set_params) \
    LFUNC_FA_(EVP_MAC_CTX_get_params) \
    LFUNC_FA_(EVP_MAC_gettable_ctx_params) \
    LFUNC_FA_(EVP_MAC_free) \
    LFUNC_FA_(EVP_MAC_up_ref) \
    LFUNC_FA_(EVP_MAC_get_params) \
    LFUNC_FA_(EVP_MAC_gettable_params) \
    LFUNC_FA_(EVP_MAC_get0_provider) \
    LFUNC_FA_(EVP_MAC_do_all_provided) \
    LFUNC_FA_(EVP_MAC_get0_name) \
    LFUNC_FA_(EVP_MD_free) \
    LFUNC_FA_(EVP_CIPHER_free) \
    LFUNC_FA_(EVP_KDF_up_ref) \
    LFUNC_FA_(EVP_KDF_free) \
    LFUNC_FA_(EVP_KDF_fetch) \
    LFUNC_FA_(EVP_KDF_CTX_dup) \
    LFUNC_FA_(EVP_KDF_get0_provider) \
    LFUNC_FA_(EVP_KDF_get_params) \
    LFUNC_FA_(EVP_KDF_CTX_get_params) \
    LFUNC_FA_(EVP_KDF_CTX_set_params) \
    LFUNC_FA_(EVP_KDF_gettable_params) \
    LFUNC_FA_(EVP_KDF_gettable_ctx_params) \
    LFUNC_FA_(EVP_KDF_settable_ctx_params) \
    LFUNC_FA_(EVP_KDF_do_all_provided) \
    LFUNC_FA_(EVP_SIGNATURE_free) \
    LFUNC_FA_(EVP_SIGNATURE_up_ref) \
    LFUNC_FA_(EVP_SIGNATURE_get0_provider) \
    LFUNC_FA_(EVP_SIGNATURE_fetch) \
    LFUNC_FA_(EVP_PKEY_CTX_set_signature_md) \
    LFUNC_FA_(EVP_PKEY_CTX_get_signature_md) \
    LFUNC_FA_(EVP_PKEY_CTX_get_params) \
    LFUNC_FA_(EVP_PKEY_CTX_gettable_params) \
    LFUNC_FA_(EVP_PKEY_CTX_settable_params) \
    LFUNC_FA_(EVP_CIPHER_CTX_get_tag_length) \
    LFUNC_FA_(ERR_get_error_all) \
    LFUNC_FA_(ERR_peek_error_func) \
    LFUNC_FA_(ERR_peek_error_data) \
    LFUNC_FA_(ERR_peek_error_all) \
    LFUNC_FA_(ERR_peek_last_error_func) \
    LFUNC_FA_(ERR_peek_last_error_data) \
    LFUNC_FA_(ERR_peek_last_error_all) \
    LFUNC_FA_(EVP_CIPHER_is_a) \
    LFUNC_FA_(EVP_MAC_is_a) \
    LFUNC_FA_(EVP_MD_settable_ctx_params) \
    LFUNC_FA_(EVP_MD_gettable_ctx_params) \
    LFUNC_FA_(OSSL_CMP_CTX_new) \
    LFUNC_FA_(OSSL_CMP_CTX_free) \
    LFUNC_FA_(OSSL_CMP_CTX_reinit) \
    LFUNC_FA_(OSSL_CMP_CTX_set_option) \
    LFUNC_FA_(OSSL_CMP_CTX_get_option) \
    LFUNC_FA_(OSSL_CMP_CTX_set_log_cb) \
    LFUNC_FA_(OSSL_CMP_CTX_print_errors) \
    LFUNC_FA_(OSSL_CMP_CTX_set1_serverPath) \
    LFUNC_FA_(OSSL_CMP_CTX_set1_server) \
    LFUNC_FA_(OSSL_CMP_CTX_set_serverPort) \
    LFUNC_FA_(OSSL_CMP_CTX_set1_proxy) \
    LFUNC_FA_(OSSL_CMP_CTX_set1_no_proxy) \
    LFUNC_FA_(OSSL_CMP_CTX_set_http_cb) \
    LFUNC_FA_(OSSL_CMP_CTX_set_http_cb_arg) \
    LFUNC_FA_(OSSL_CMP_CTX_get_http_cb_arg) \
    LFUNC_FA_(OSSL_CMP_CTX_set_transfer_cb) \
    LFUNC_FA_(OSSL_CMP_CTX_set_transfer_cb_arg) \
    LFUNC_FA_(OSSL_CMP_CTX_get_transfer_cb_arg) \
    LFUNC_FA_(OSSL_CMP_CTX_set1_srvCert) \
    LFUNC_FA_(OSSL_CMP_CTX_set1_expected_sender) \
    LFUNC_FA_(OSSL_CMP_CTX_set0_trustedStore) \
    LFUNC_FA_(OSSL_CMP_CTX_get0_trustedStore) \
    LFUNC_FA_(OSSL_CMP_CTX_set1_untrusted) \
    LFUNC_FA_(OSSL_CMP_CTX_get0_untrusted) \
    LFUNC_FA_(OSSL_CMP_CTX_set1_cert) \
    LFUNC_FA_(OSSL_CMP_CTX_set1_pkey) \
    LFUNC_FA_(OSSL_CMP_CTX_build_cert_chain) \
    LFUNC_FA_(OSSL_CMP_CTX_set1_referenceValue) \
    LFUNC_FA_(OSSL_CMP_CTX_set1_secretValue) \
    LFUNC_FA_(OSSL_CMP_CTX_set1_recipient) \
    LFUNC_FA_(OSSL_CMP_CTX_push0_geninfo_ITAV) \
    LFUNC_FA_(OSSL_CMP_CTX_set1_extraCertsOut) \
    LFUNC_FA_(OSSL_CMP_CTX_set0_newPkey) \
    LFUNC_FA_(OSSL_CMP_CTX_get0_newPkey) \
    LFUNC_FA_(OSSL_CMP_CTX_set1_issuer) \
    LFUNC_FA_(OSSL_CMP_CTX_set1_subjectName) \
    LFUNC_FA_(OSSL_CMP_CTX_push1_subjectAltName) \
    LFUNC_FA_(OSSL_CMP_CTX_set0_reqExtensions) \
    LFUNC_FA_(OSSL_CMP_CTX_reqExtensions_have_SAN) \
    LFUNC_FA_(OSSL_CMP_CTX_push0_policy) \
    LFUNC_FA_(OSSL_CMP_CTX_set1_oldCert) \
    LFUNC_FA_(OSSL_CMP_CTX_set1_p10CSR) \
    LFUNC_FA_(OSSL_CMP_CTX_push0_genm_ITAV) \
    LFUNC_FA_(OSSL_CMP_CTX_set_certConf_cb) \
    LFUNC_FA_(OSSL_CMP_CTX_set_certConf_cb_arg) \
    LFUNC_FA_(OSSL_CMP_CTX_get_certConf_cb_arg) \
    LFUNC_FA_(OSSL_CMP_CTX_get_status) \
    LFUNC_FA_(OSSL_CMP_CTX_get0_statusString) \
    LFUNC_FA_(OSSL_CMP_CTX_get_failInfoCode) \
    LFUNC_FA_(OSSL_CMP_CTX_get0_newCert) \
    LFUNC_FA_(OSSL_CMP_CTX_get1_newChain) \
    LFUNC_FA_(OSSL_CMP_CTX_get1_caPubs) \
    LFUNC_FA_(OSSL_CMP_CTX_get1_extraCertsIn) \
    LFUNC_FA_(OSSL_CMP_CTX_set1_transactionID) \
    LFUNC_FA_(OSSL_CMP_CTX_set1_senderNonce) \
    LFUNC_FA_(OSSL_CMP_log_open) \
    LFUNC_FA_(OSSL_CMP_log_close) \
    LFUNC_FA_(OSSL_CMP_print_to_bio) \
    LFUNC_FA_(OSSL_CMP_print_errors_cb) \
    LFUNC_FA_(OSSL_CRMF_CERTID_get0_issuer) \
    LFUNC_FA_(OSSL_CRMF_CERTID_get0_serialNumber) \
    LFUNC_FA_(EVP_DigestSignUpdate) \
    LFUNC_FA_(EVP_DigestVerifyUpdate) \
    LFUNC_FA_(BN_check_prime) \
    LFUNC_FA_(EVP_KEYMGMT_is_a) \
    LFUNC_FA_(EVP_KEYMGMT_do_all_provided) \
    LFUNC_FA_(EVP_KEYEXCH_is_a) \
    LFUNC_FA_(EVP_KEYEXCH_do_all_provided) \
    LFUNC_FA_(EVP_KDF_is_a) \
    LFUNC_FA_(EVP_MD_is_a) \
    LFUNC_FA_(EVP_SIGNATURE_is_a) \
    LFUNC_FA_(EVP_SIGNATURE_do_all_provided) \
    LFUNC_FA_(EVP_MD_names_do_all) \
    LFUNC_FA_(EVP_CIPHER_names_do_all) \
    LFUNC_FA_(EVP_MAC_names_do_all) \
    LFUNC_FA_(EVP_KEYMGMT_names_do_all) \
    LFUNC_FA_(EVP_KEYEXCH_names_do_all) \
    LFUNC_FA_(EVP_KDF_names_do_all) \
    LFUNC_FA_(EVP_SIGNATURE_names_do_all) \
    LFUNC_FA_(OSSL_CMP_CTX_snprint_PKIStatus) \
    LFUNC_FA_(OSSL_CMP_HDR_get0_transactionID) \
    LFUNC_FA_(OSSL_CMP_HDR_get0_recipNonce) \
    LFUNC_FA_(X509_LOOKUP_store) \
    LFUNC_FA_(X509_add_cert) \
    LFUNC_FA_(X509_add_certs) \
    LFUNC_FA_(X509_STORE_load_file) \
    LFUNC_FA_(X509_STORE_load_path) \
    LFUNC_FA_(X509_STORE_load_store) \
    LFUNC_FA_(EVP_PKEY_fromdata) \
    LFUNC_FA_(EVP_ASYM_CIPHER_free) \
    LFUNC_FA_(EVP_ASYM_CIPHER_up_ref) \
    LFUNC_FA_(EVP_ASYM_CIPHER_get0_provider) \
    LFUNC_FA_(EVP_ASYM_CIPHER_fetch) \
    LFUNC_FA_(EVP_ASYM_CIPHER_is_a) \
    LFUNC_FA_(EVP_ASYM_CIPHER_do_all_provided) \
    LFUNC_FA_(EVP_ASYM_CIPHER_names_do_all) \
    LFUNC_FA_(EVP_PKEY_CTX_set_rsa_padding) \
    LFUNC_FA_(EVP_PKEY_CTX_get_rsa_padding) \
    LFUNC_FA_(EVP_PKEY_CTX_set_rsa_mgf1_md) \
    LFUNC_FA_(EVP_PKEY_CTX_set_rsa_mgf1_md_name) \
    LFUNC_FA_(EVP_PKEY_CTX_get_rsa_mgf1_md) \
    LFUNC_FA_(EVP_PKEY_CTX_set_rsa_oaep_md) \
    LFUNC_FA_(EVP_PKEY_CTX_set_rsa_oaep_md_name) \
    LFUNC_FA_(EVP_PKEY_CTX_get_rsa_oaep_md) \
    LFUNC_FA_(EVP_PKEY_CTX_set0_rsa_oaep_label) \
    LFUNC_FA_(EVP_PKEY_CTX_get0_rsa_oaep_label) \
    LFUNC_FA_(EVP_PKEY_CTX_get_rsa_mgf1_md_name) \
    LFUNC_FA_(EVP_PKEY_CTX_get_rsa_oaep_md_name) \
    LFUNC_FA_(OSSL_ENCODER_up_ref) \
    LFUNC_FA_(OSSL_ENCODER_free) \
    LFUNC_FA_(OSSL_ENCODER_fetch) \
    LFUNC_FA_(OSSL_ENCODER_is_a) \
    LFUNC_FA_(OSSL_ENCODER_get0_provider) \
    LFUNC_FA_(OSSL_ENCODER_do_all_provided) \
    LFUNC_FA_(OSSL_ENCODER_names_do_all) \
    LFUNC_FA_(OSSL_ENCODER_settable_ctx_params) \
    LFUNC_FA_(OSSL_ENCODER_CTX_new) \
    LFUNC_FA_(OSSL_ENCODER_CTX_set_params) \
    LFUNC_FA_(OSSL_ENCODER_CTX_free) \
    LFUNC_FA_(OSSL_ENCODER_get0_properties) \
    LFUNC_FA_(OSSL_ENCODER_to_bio) \
    LFUNC_FA_(OSSL_ENCODER_CTX_new_for_pkey) \
    LFUNC_FA_(OSSL_ENCODER_CTX_set_cipher) \
    LFUNC_FA_(OSSL_ENCODER_CTX_set_passphrase) \
    LFUNC_FA_(OSSL_ENCODER_CTX_set_pem_password_cb) \
    LFUNC_FA_(OSSL_ENCODER_CTX_set_passphrase_ui) \
    LFUNC_FA_(PEM_read_bio_X509_PUBKEY) \
    LFUNC_FA_(PEM_write_bio_X509_PUBKEY) \
    LFUNC_FA_(d2i_X509_PUBKEY_bio) \
    LFUNC_FA_(i2d_X509_PUBKEY_bio) \
    LFUNC_FA_(X509_cmp_timeframe) \
    LFUNC_FA_(OSSL_CMP_MSG_get0_header) \
    LFUNC_FA_(OSSL_CMP_MSG_get_bodytype) \
    LFUNC_FA_(OSSL_CMP_MSG_update_transactionID) \
    LFUNC_FA_(OSSL_CMP_CTX_setup_CRM) \
    LFUNC_FA_(BIO_f_prefix) \
    LFUNC_FA_(EVP_PKEY_CTX_new_from_name) \
    LFUNC_FA_(EVP_PKEY_CTX_new_from_pkey) \
    LFUNC_FA_(OSSL_SELF_TEST_set_callback) \
    LFUNC_FA_(OSSL_SELF_TEST_get_callback) \
    LFUNC_FA_(ASN1_TIME_dup) \
    LFUNC_FA_(ASN1_UTCTIME_dup) \
    LFUNC_FA_(ASN1_GENERALIZEDTIME_dup) \
    LFUNC_FA_(RAND_priv_bytes_ex) \
    LFUNC_FA_(RAND_bytes_ex) \
    LFUNC_FA_(EVP_PKEY_get_default_digest_name) \
    LFUNC_FA_(CMS_decrypt_set1_pkey_and_peer) \
    LFUNC_FA_(CMS_add1_recipient) \
    LFUNC_FA_(CMS_RecipientInfo_kari_set0_pkey_and_peer) \
    LFUNC_FA_(PKCS8_pkey_add1_attr) \
    LFUNC_FA_(PKCS8_pkey_add1_attr_by_OBJ) \
    LFUNC_FA_(EVP_PKEY_private_check) \
    LFUNC_FA_(EVP_PKEY_pairwise_check) \
    LFUNC_FA_(ASN1_item_verify_ctx) \
    LFUNC_FA_(ASN1_item_sign_ex) \
    LFUNC_FA_(ASN1_item_verify_ex) \
    LFUNC_FA_(BIO_socket_wait) \
    LFUNC_FA_(BIO_wait) \
    LFUNC_FA_(BIO_do_connect_retry) \
    LFUNC_FA_(OSSL_parse_url) \
    LFUNC_FA_(OSSL_HTTP_adapt_proxy) \
    LFUNC_FA_(OSSL_HTTP_REQ_CTX_get_resp_len) \
    LFUNC_FA_(OSSL_HTTP_REQ_CTX_set_expected) \
    LFUNC_FA_(OSSL_HTTP_is_alive) \
    LFUNC_FA_(OSSL_HTTP_open) \
    LFUNC_FA_(OSSL_HTTP_proxy_connect) \
    LFUNC_FA_(OSSL_HTTP_set1_request) \
    LFUNC_FA_(OSSL_HTTP_exchange) \
    LFUNC_FA_(OSSL_HTTP_get_amiga_1) \
    LFUNC_FA_(OSSL_HTTP_get_amiga_2) \
    LFUNC_FA_(OSSL_HTTP_transfer_amiga_1) \
    LFUNC_FA_(OSSL_HTTP_transfer_amiga_2) \
    LFUNC_FA_(OSSL_HTTP_close) \
    LFUNC_FA_(ASN1_item_i2d_mem_bio) \
    LFUNC_FA_(ERR_add_error_txt) \
    LFUNC_FA_(ERR_add_error_mem_bio) \
    LFUNC_FA_(X509_STORE_CTX_print_verify_cb) \
    LFUNC_FA_(X509_STORE_get1_all_certs) \
    LFUNC_FA_(OSSL_CMP_validate_msg) \
    LFUNC_FA_(OSSL_CMP_validate_cert_path) \
    LFUNC_FA_(EVP_PKEY_CTX_set_ecdh_cofactor_mode) \
    LFUNC_FA_(EVP_PKEY_CTX_get_ecdh_cofactor_mode) \
    LFUNC_FA_(EVP_PKEY_CTX_set_ecdh_kdf_type) \
    LFUNC_FA_(EVP_PKEY_CTX_get_ecdh_kdf_type) \
    LFUNC_FA_(EVP_PKEY_CTX_set_ecdh_kdf_md) \
    LFUNC_FA_(EVP_PKEY_CTX_get_ecdh_kdf_md) \
    LFUNC_FA_(EVP_PKEY_CTX_set_ecdh_kdf_outlen) \
    LFUNC_FA_(EVP_PKEY_CTX_get_ecdh_kdf_outlen) \
    LFUNC_FA_(EVP_PKEY_CTX_set0_ecdh_kdf_ukm) \
    LFUNC_FA_(EVP_PKEY_CTX_set_rsa_pss_saltlen) \
    LFUNC_FA_(EVP_PKEY_CTX_get_rsa_pss_saltlen) \
    LFUNC_FA_(d2i_ISSUER_SIGN_TOOL) \
    LFUNC_FA_(i2d_ISSUER_SIGN_TOOL) \
    LFUNC_FA_(ISSUER_SIGN_TOOL_it) \
    LFUNC_FA_(OSSL_SELF_TEST_new) \
    LFUNC_FA_(OSSL_SELF_TEST_free) \
    LFUNC_FA_(OSSL_SELF_TEST_onbegin) \
    LFUNC_FA_(OSSL_SELF_TEST_oncorrupt_byte) \
    LFUNC_FA_(OSSL_SELF_TEST_onend) \
    LFUNC_FA_(OSSL_PROVIDER_set_default_search_path) \
    LFUNC_FA_(X509_digest_sig) \
    LFUNC_FA_(OSSL_CMP_MSG_dup) \
    LFUNC_FA_(OSSL_CMP_ITAV_dup) \
    LFUNC_FA_(d2i_OSSL_CMP_PKISI) \
    LFUNC_FA_(i2d_OSSL_CMP_PKISI) \
    LFUNC_FA_(OSSL_CMP_PKISI_free) \
    LFUNC_FA_(OSSL_CMP_PKISI_new) \
    LFUNC_FA_(OSSL_CMP_PKISI_it) \
    LFUNC_FA_(OSSL_CMP_PKISI_dup) \
    LFUNC_FA_(OSSL_CMP_snprint_PKIStatusInfo) \
    LFUNC_FA_(OSSL_CMP_STATUSINFO_new) \
    LFUNC_FA_(d2i_OSSL_CMP_MSG_bio) \
    LFUNC_FA_(i2d_OSSL_CMP_MSG_bio) \
    LFUNC_FA_(OSSL_CMP_SRV_process_request) \
    LFUNC_FA_(OSSL_CMP_CTX_server_perform) \
    LFUNC_FA_(OSSL_CMP_SRV_CTX_new) \
    LFUNC_FA_(OSSL_CMP_SRV_CTX_free) \
    LFUNC_FA_(OSSL_CMP_SRV_CTX_init) \
    LFUNC_FA_(OSSL_CMP_SRV_CTX_get0_cmp_ctx) \
    LFUNC_FA_(OSSL_CMP_SRV_CTX_get0_custom_ctx) \
    LFUNC_FA_(OSSL_CMP_SRV_CTX_set_send_unprotected_errors) \
    LFUNC_FA_(OSSL_CMP_SRV_CTX_set_accept_unprotected) \
    LFUNC_FA_(OSSL_CMP_SRV_CTX_set_accept_raverified) \
    LFUNC_FA_(OSSL_CMP_SRV_CTX_set_grant_implicit_confirm) \
    LFUNC_FA_(OSSL_CMP_exec_certreq) \
    LFUNC_FA_(OSSL_CMP_try_certreq) \
    LFUNC_FA_(OSSL_CMP_certConf_cb) \
    LFUNC_FA_(OSSL_CMP_exec_RR_ses) \
    LFUNC_FA_(OSSL_CMP_exec_GENM_ses) \
    LFUNC_FA_(OSSL_CMP_MSG_http_perform) \
    LFUNC_FA_(OSSL_CMP_MSG_read) \
    LFUNC_FA_(OSSL_CMP_MSG_write) \
    LFUNC_FA_(EVP_PKEY_Q_vkeygen) \
    LFUNC_VA_(EVP_PKEY_Q_keygen) \
    LFUNC_FA_(EVP_PKEY_generate) \
    LFUNC_FA_(EVP_PKEY_CTX_set_rsa_keygen_bits) \
    LFUNC_FA_(EVP_PKEY_CTX_set1_rsa_keygen_pubexp) \
    LFUNC_FA_(EVP_PKEY_CTX_set_rsa_keygen_primes) \
    LFUNC_FA_(NCONF_new_ex) \
    LFUNC_FA_(CONF_modules_load_file_ex) \
    LFUNC_FA_(OSSL_LIB_CTX_load_config) \
    LFUNC_FA_(OSSL_PARAM_BLD_to_param) \
    LFUNC_FA_(OSSL_PARAM_BLD_push_int) \
    LFUNC_FA_(OSSL_PARAM_BLD_push_uint) \
    LFUNC_FA_(OSSL_PARAM_BLD_push_long) \
    LFUNC_FA_(OSSL_PARAM_BLD_push_ulong) \
    LFUNC_FA_(OSSL_PARAM_BLD_push_int32) \
    LFUNC_FA_(OSSL_PARAM_BLD_push_uint32) \
    LFUNC_FA_(OSSL_PARAM_BLD_push_int64) \
    LFUNC_FA_(OSSL_PARAM_BLD_push_uint64) \
    LFUNC_FA_(OSSL_PARAM_BLD_push_size_t) \
    LFUNC_FA_(OSSL_PARAM_BLD_push_double) \
    LFUNC_FA_(OSSL_PARAM_BLD_push_BN) \
    LFUNC_FA_(OSSL_PARAM_BLD_push_BN_pad) \
    LFUNC_FA_(OSSL_PARAM_BLD_push_utf8_string) \
    LFUNC_FA_(OSSL_PARAM_BLD_push_utf8_ptr) \
    LFUNC_FA_(OSSL_PARAM_BLD_push_octet_string) \
    LFUNC_FA_(OSSL_PARAM_BLD_push_octet_ptr) \
    LFUNC_FA_(OSSL_PARAM_BLD_new) \
    LFUNC_FA_(OSSL_PARAM_BLD_free) \
    LFUNC_FA_(EVP_PKEY_set_type_by_keymgmt) \
    LFUNC_FA_(OCSP_RESPID_set_by_key_ex) \
    LFUNC_FA_(OCSP_RESPID_match_ex) \
    LFUNC_FA_(SRP_create_verifier_ex) \
    LFUNC_FA_(SRP_create_verifier_BN_ex) \
    LFUNC_FA_(SRP_Calc_B_ex) \
    LFUNC_FA_(SRP_Calc_u_ex) \
    LFUNC_FA_(SRP_Calc_x_ex) \
    LFUNC_FA_(SRP_Calc_client_key_ex) \
    LFUNC_FA_(EVP_PKEY_gettable_params) \
    LFUNC_FA_(EVP_PKEY_get_int_param) \
    LFUNC_FA_(EVP_PKEY_get_size_t_param) \
    LFUNC_FA_(EVP_PKEY_get_bn_param) \
    LFUNC_FA_(EVP_PKEY_get_utf8_string_param) \
    LFUNC_FA_(EVP_PKEY_get_octet_string_param) \
    LFUNC_FA_(EVP_PKEY_is_a) \
    LFUNC_FA_(EVP_PKEY_can_sign) \
    LFUNC_FA_(X509_STORE_CTX_new_ex) \
    LFUNC_FA_(X509_STORE_CTX_verify) \
    LFUNC_FA_(CT_POLICY_EVAL_CTX_new_ex) \
    LFUNC_FA_(CTLOG_new_ex) \
    LFUNC_FA_(CTLOG_new_from_base64_ex) \
    LFUNC_FA_(CTLOG_STORE_new_ex) \
    LFUNC_FA_(EVP_PKEY_set_ex_data) \
    LFUNC_FA_(EVP_PKEY_get_ex_data) \
    LFUNC_FA_(EVP_PKEY_CTX_set_group_name) \
    LFUNC_FA_(EVP_PKEY_CTX_get_group_name) \
    LFUNC_FA_(EVP_PKEY_CTX_set_ec_paramgen_curve_nid) \
    LFUNC_FA_(d2i_PrivateKey_ex) \
    LFUNC_FA_(d2i_AutoPrivateKey_ex) \
    LFUNC_FA_(d2i_PrivateKey_ex_bio) \
    LFUNC_FA_(PEM_read_bio_PrivateKey_ex) \
    LFUNC_FA_(EVP_PKEY_CTX_set_dsa_paramgen_bits) \
    LFUNC_FA_(EVP_PKEY_CTX_set_dsa_paramgen_q_bits) \
    LFUNC_FA_(EVP_PKEY_CTX_set_dsa_paramgen_md_props) \
    LFUNC_FA_(EVP_PKEY_CTX_set_dsa_paramgen_gindex) \
    LFUNC_FA_(EVP_PKEY_CTX_set_dsa_paramgen_type) \
    LFUNC_FA_(EVP_PKEY_CTX_set_dsa_paramgen_seed) \
    LFUNC_FA_(EVP_PKEY_CTX_set_dsa_paramgen_md) \
    LFUNC_FA_(EVP_PKEY_CTX_set_dh_paramgen_type) \
    LFUNC_FA_(EVP_PKEY_CTX_set_dh_paramgen_gindex) \
    LFUNC_FA_(EVP_PKEY_CTX_set_dh_paramgen_seed) \
    LFUNC_FA_(EVP_PKEY_CTX_set_dh_paramgen_prime_len) \
    LFUNC_FA_(EVP_PKEY_CTX_set_dh_paramgen_subprime_len) \
    LFUNC_FA_(EVP_PKEY_CTX_set_dh_paramgen_generator) \
    LFUNC_FA_(EVP_PKEY_CTX_set_dh_nid) \
    LFUNC_FA_(EVP_PKEY_CTX_set_dh_rfc5114) \
    LFUNC_FA_(EVP_PKEY_CTX_set_dhx_rfc5114) \
    LFUNC_FA_(X509_VERIFY_PARAM_get0_host) \
    LFUNC_FA_(X509_VERIFY_PARAM_get0_email) \
    LFUNC_FA_(X509_VERIFY_PARAM_get1_ip_asc) \
    LFUNC_FA_(OSSL_PARAM_modified) \
    LFUNC_FA_(OSSL_PARAM_set_all_unmodified) \
    LFUNC_FA_(EVP_RAND_fetch) \
    LFUNC_FA_(EVP_RAND_up_ref) \
    LFUNC_FA_(EVP_RAND_free) \
    LFUNC_FA_(EVP_RAND_get0_name) \
    LFUNC_FA_(EVP_RAND_is_a) \
    LFUNC_FA_(EVP_RAND_get0_provider) \
    LFUNC_FA_(EVP_RAND_get_params) \
    LFUNC_FA_(EVP_RAND_CTX_new) \
    LFUNC_FA_(EVP_RAND_CTX_free) \
    LFUNC_FA_(EVP_RAND_CTX_get0_rand) \
    LFUNC_FA_(EVP_RAND_CTX_get_params) \
    LFUNC_FA_(EVP_RAND_CTX_set_params) \
    LFUNC_FA_(EVP_RAND_gettable_params) \
    LFUNC_FA_(EVP_RAND_gettable_ctx_params) \
    LFUNC_FA_(EVP_RAND_settable_ctx_params) \
    LFUNC_FA_(EVP_RAND_do_all_provided) \
    LFUNC_FA_(EVP_RAND_names_do_all) \
    LFUNC_FA_(EVP_RAND_instantiate) \
    LFUNC_FA_(EVP_RAND_uninstantiate) \
    LFUNC_FA_(EVP_RAND_generate) \
    LFUNC_FA_(EVP_RAND_reseed) \
    LFUNC_FA_(EVP_RAND_nonce) \
    LFUNC_FA_(EVP_RAND_enable_locking) \
    LFUNC_FA_(EVP_RAND_verify_zeroization) \
    LFUNC_FA_(EVP_RAND_get_strength) \
    LFUNC_FA_(EVP_RAND_get_state) \
    LFUNC_FA_(EVP_default_properties_is_fips_enabled) \
    LFUNC_FA_(EVP_default_properties_enable_fips) \
    LFUNC_FA_(EVP_PKEY_new_raw_private_key_ex) \
    LFUNC_FA_(EVP_PKEY_new_raw_public_key_ex) \
    LFUNC_FA_(OSSL_PARAM_BLD_push_time_t) \
    LFUNC_FA_(OSSL_PARAM_construct_time_t_amiga) \
    LFUNC_FA_(OSSL_PARAM_get_time_t) \
    LFUNC_FA_(OSSL_PARAM_set_time_t) \
    LFUNC_FA_(OSSL_STORE_attach) \
    LFUNC_FA_(EVP_PKEY_CTX_set_rsa_pss_keygen_saltlen) \
    LFUNC_FA_(EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md) \
    LFUNC_FA_(EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md_name) \
    LFUNC_FA_(OSSL_PROVIDER_do_all) \
    LFUNC_FA_(EC_GROUP_get_field_type) \
    LFUNC_FA_(X509_PUBKEY_eq) \
    LFUNC_FA_(EVP_PKEY_eq) \
    LFUNC_FA_(EVP_PKEY_parameters_eq) \
    LFUNC_FA_(OSSL_PROVIDER_query_operation) \
    LFUNC_FA_(OSSL_PROVIDER_unquery_operation) \
    LFUNC_FA_(OSSL_PROVIDER_get0_provider_ctx) \
    LFUNC_FA_(OSSL_PROVIDER_get_capabilities) \
    LFUNC_FA_(EC_GROUP_new_by_curve_name_ex) \
    LFUNC_FA_(OSSL_LIB_CTX_set0_default) \
    LFUNC_FA_(PEM_X509_INFO_read_bio_ex) \
    LFUNC_FA_(X509_REQ_verify_ex) \
    LFUNC_FA_(X509_new_ex) \
    LFUNC_FA_(X509_LOOKUP_ctrl_ex) \
    LFUNC_FA_(X509_load_cert_file_ex) \
    LFUNC_FA_(X509_load_cert_crl_file_ex) \
    LFUNC_FA_(X509_LOOKUP_by_subject_ex) \
    LFUNC_FA_(X509_STORE_load_file_ex) \
    LFUNC_FA_(X509_STORE_load_store_ex) \
    LFUNC_FA_(X509_STORE_load_locations_ex) \
    LFUNC_FA_(X509_STORE_set_default_paths_ex) \
    LFUNC_FA_(X509_build_chain) \
    LFUNC_FA_(X509V3_set_issuer_pkey) \
    LFUNC_FA_(i2s_ASN1_UTF8STRING) \
    LFUNC_FA_(s2i_ASN1_UTF8STRING) \
    LFUNC_FA_(OSSL_STORE_open_ex) \
    LFUNC_FA_(OSSL_DECODER_fetch) \
    LFUNC_FA_(OSSL_DECODER_up_ref) \
    LFUNC_FA_(OSSL_DECODER_free) \
    LFUNC_FA_(OSSL_DECODER_get0_provider) \
    LFUNC_FA_(OSSL_DECODER_get0_properties) \
    LFUNC_FA_(OSSL_DECODER_is_a) \
    LFUNC_FA_(OSSL_DECODER_do_all_provided) \
    LFUNC_FA_(OSSL_DECODER_names_do_all) \
    LFUNC_FA_(OSSL_DECODER_settable_ctx_params) \
    LFUNC_FA_(OSSL_DECODER_CTX_new) \
    LFUNC_FA_(OSSL_DECODER_CTX_set_params) \
    LFUNC_FA_(OSSL_DECODER_CTX_free) \
    LFUNC_FA_(OSSL_DECODER_CTX_set_passphrase) \
    LFUNC_FA_(OSSL_DECODER_CTX_set_pem_password_cb) \
    LFUNC_FA_(OSSL_DECODER_CTX_set_passphrase_ui) \
    LFUNC_FA_(OSSL_DECODER_from_bio) \
    LFUNC_FA_(OSSL_DECODER_CTX_add_decoder) \
    LFUNC_FA_(OSSL_DECODER_CTX_add_extra) \
    LFUNC_FA_(OSSL_DECODER_CTX_get_num_decoders) \
    LFUNC_FA_(OSSL_DECODER_CTX_set_input_type) \
    LFUNC_FA_(OSSL_DECODER_export) \
    LFUNC_FA_(OSSL_DECODER_INSTANCE_get_decoder) \
    LFUNC_FA_(OSSL_DECODER_INSTANCE_get_decoder_ctx) \
    LFUNC_FA_(OSSL_DECODER_gettable_params) \
    LFUNC_FA_(OSSL_DECODER_get_params) \
    LFUNC_FA_(OSSL_DECODER_CTX_new_for_pkey) \
    LFUNC_FA_(OSSL_DECODER_CTX_set_construct) \
    LFUNC_FA_(OSSL_DECODER_CTX_set_construct_data) \
    LFUNC_FA_(OSSL_DECODER_CTX_set_cleanup) \
    LFUNC_FA_(OSSL_DECODER_CTX_get_construct) \
    LFUNC_FA_(OSSL_DECODER_CTX_get_construct_data) \
    LFUNC_FA_(OSSL_DECODER_CTX_get_cleanup) \
    LFUNC_FA_(RAND_get0_primary) \
    LFUNC_FA_(RAND_get0_public) \
    LFUNC_FA_(RAND_get0_private) \
    LFUNC_FA_(PKCS12_SAFEBAG_get0_bag_obj) \
    LFUNC_FA_(PKCS12_SAFEBAG_get0_bag_type) \
    LFUNC_FA_(PKCS12_SAFEBAG_create_secret) \
    LFUNC_FA_(PKCS12_add1_attr_by_NID) \
    LFUNC_FA_(PKCS12_add1_attr_by_txt) \
    LFUNC_FA_(PKCS12_add_secret) \
    LFUNC_FA_(SMIME_write_ASN1_ex) \
    LFUNC_FA_(SMIME_read_ASN1_ex) \
    LFUNC_FA_(CMS_ContentInfo_new_ex) \
    LFUNC_FA_(SMIME_read_CMS_ex) \
    LFUNC_FA_(CMS_sign_ex) \
    LFUNC_FA_(CMS_data_create_ex) \
    LFUNC_FA_(CMS_digest_create_ex) \
    LFUNC_FA_(CMS_EncryptedData_encrypt_ex) \
    LFUNC_FA_(CMS_encrypt_ex) \
    LFUNC_FA_(CMS_EnvelopedData_create_ex) \
    LFUNC_FA_(CMS_ReceiptRequest_create0_ex) \
    LFUNC_FA_(EVP_SignFinal_ex) \
    LFUNC_FA_(EVP_VerifyFinal_ex) \
    LFUNC_FA_(EVP_DigestSignInit_ex) \
    LFUNC_FA_(EVP_DigestVerifyInit_ex) \
    LFUNC_FA_(PKCS7_new_ex) \
    LFUNC_FA_(PKCS7_sign_ex) \
    LFUNC_FA_(PKCS7_encrypt_ex) \
    LFUNC_FA_(SMIME_read_PKCS7_ex) \
    LFUNC_FA_(OSSL_PROVIDER_self_test) \
    LFUNC_FA_(EVP_PKEY_CTX_set_tls1_prf_md) \
    LFUNC_FA_(EVP_PKEY_CTX_set1_tls1_prf_secret) \
    LFUNC_FA_(EVP_PKEY_CTX_add1_tls1_prf_seed) \
    LFUNC_FA_(EVP_PKEY_CTX_set_hkdf_md) \
    LFUNC_FA_(EVP_PKEY_CTX_set1_hkdf_salt) \
    LFUNC_FA_(EVP_PKEY_CTX_set1_hkdf_key) \
    LFUNC_FA_(EVP_PKEY_CTX_add1_hkdf_info) \
    LFUNC_FA_(EVP_PKEY_CTX_set_hkdf_mode) \
    LFUNC_FA_(EVP_PKEY_CTX_set1_pbe_pass) \
    LFUNC_FA_(EVP_PKEY_CTX_set1_scrypt_salt) \
    LFUNC_FA_(EVP_PKEY_CTX_set_scrypt_N) \
    LFUNC_FA_(EVP_PKEY_CTX_set_scrypt_r) \
    LFUNC_FA_(EVP_PKEY_CTX_set_scrypt_p) \
    LFUNC_FA_(EVP_PKEY_CTX_set_scrypt_maxmem_bytes) \
    LFUNC_FA_(EVP_PKEY_CTX_set_dh_kdf_type) \
    LFUNC_FA_(EVP_PKEY_CTX_get_dh_kdf_type) \
    LFUNC_FA_(EVP_PKEY_CTX_set0_dh_kdf_oid) \
    LFUNC_FA_(EVP_PKEY_CTX_get0_dh_kdf_oid) \
    LFUNC_FA_(EVP_PKEY_CTX_set_dh_kdf_md) \
    LFUNC_FA_(EVP_PKEY_CTX_get_dh_kdf_md) \
    LFUNC_FA_(EVP_PKEY_CTX_set_dh_kdf_outlen) \
    LFUNC_FA_(EVP_PKEY_CTX_get_dh_kdf_outlen) \
    LFUNC_FA_(EVP_PKEY_CTX_set0_dh_kdf_ukm) \
    LFUNC_FA_(EVP_CIPHER_CTX_get_updated_iv) \
    LFUNC_FA_(EVP_CIPHER_CTX_get_original_iv) \
    LFUNC_FA_(EVP_KEYMGMT_gettable_params) \
    LFUNC_FA_(EVP_KEYMGMT_settable_params) \
    LFUNC_FA_(EVP_KEYMGMT_gen_settable_params) \
    LFUNC_FA_(EVP_SIGNATURE_gettable_ctx_params) \
    LFUNC_FA_(EVP_SIGNATURE_settable_ctx_params) \
    LFUNC_FA_(EVP_KEYEXCH_gettable_ctx_params) \
    LFUNC_FA_(EVP_KEYEXCH_settable_ctx_params) \
    LFUNC_FA_(d2i_PUBKEY_ex) \
    LFUNC_FA_(OSSL_STORE_INFO_new_PUBKEY) \
    LFUNC_FA_(OSSL_STORE_INFO_get0_PUBKEY) \
    LFUNC_FA_(OSSL_STORE_INFO_get1_PUBKEY) \
    LFUNC_FA_(PEM_read_bio_PUBKEY_ex) \
    LFUNC_FA_(PEM_read_bio_Parameters_ex) \
    LFUNC_FA_(EC_GROUP_new_from_params) \
    LFUNC_FA_(OSSL_STORE_LOADER_fetch) \
    LFUNC_FA_(OSSL_STORE_LOADER_up_ref) \
    LFUNC_FA_(OSSL_STORE_LOADER_get0_provider) \
    LFUNC_FA_(OSSL_STORE_LOADER_get0_properties) \
    LFUNC_FA_(OSSL_STORE_LOADER_is_a) \
    LFUNC_FA_(OSSL_STORE_LOADER_do_all_provided) \
    LFUNC_FA_(OSSL_STORE_LOADER_names_do_all) \
    LFUNC_FA_(OSSL_PARAM_get_utf8_string_ptr) \
    LFUNC_FA_(OSSL_PARAM_get_octet_string_ptr) \
    LFUNC_FA_(OSSL_DECODER_CTX_set_passphrase_cb) \
    LFUNC_FA_(EVP_PKEY_CTX_set_mac_key) \
    LFUNC_FA_(OSSL_STORE_INFO_new) \
    LFUNC_FA_(OSSL_STORE_INFO_get0_data) \
    LFUNC_FA_(EVP_PKCS82PKEY_ex) \
    LFUNC_FA_(EVP_PKEY_CTX_set1_id) \
    LFUNC_FA_(EVP_PKEY_CTX_get1_id) \
    LFUNC_FA_(EVP_PKEY_CTX_get1_id_len) \
    LFUNC_FA_(CMS_AuthEnvelopedData_create) \
    LFUNC_FA_(CMS_AuthEnvelopedData_create_ex) \
    LFUNC_FA_(EVP_PKEY_CTX_set_ec_param_enc) \
    LFUNC_FA_(EVP_PKEY_get0_type_name) \
    LFUNC_FA_(EVP_KEYMGMT_get0_name) \
    LFUNC_FA_(EVP_KEM_free) \
    LFUNC_FA_(EVP_KEM_up_ref) \
    LFUNC_FA_(EVP_KEM_get0_provider) \
    LFUNC_FA_(EVP_KEM_fetch) \
    LFUNC_FA_(EVP_KEM_is_a) \
    LFUNC_FA_(EVP_KEM_do_all_provided) \
    LFUNC_FA_(EVP_KEM_names_do_all) \
    LFUNC_FA_(EVP_PKEY_encapsulate_init) \
    LFUNC_FA_(EVP_PKEY_encapsulate) \
    LFUNC_FA_(EVP_PKEY_decapsulate_init) \
    LFUNC_FA_(EVP_PKEY_decapsulate) \
    LFUNC_FA_(EVP_PKEY_CTX_set_kem_op) \
    LFUNC_FA_(OSSL_ENCODER_gettable_params) \
    LFUNC_FA_(OSSL_ENCODER_get_params) \
    LFUNC_FA_(OSSL_ENCODER_CTX_set_output_type) \
    LFUNC_FA_(OSSL_ENCODER_CTX_add_encoder) \
    LFUNC_FA_(OSSL_ENCODER_CTX_add_extra) \
    LFUNC_FA_(OSSL_ENCODER_CTX_get_num_encoders) \
    LFUNC_FA_(OSSL_ENCODER_CTX_set_selection) \
    LFUNC_FA_(OSSL_ENCODER_INSTANCE_get_encoder) \
    LFUNC_FA_(OSSL_ENCODER_INSTANCE_get_encoder_ctx) \
    LFUNC_FA_(OSSL_ENCODER_INSTANCE_get_output_type) \
    LFUNC_FA_(OSSL_ENCODER_CTX_set_construct) \
    LFUNC_FA_(OSSL_ENCODER_CTX_set_construct_data) \
    LFUNC_FA_(OSSL_ENCODER_CTX_set_cleanup) \
    LFUNC_FA_(OSSL_ENCODER_CTX_set_passphrase_cb) \
    LFUNC_FA_(EVP_PKEY_type_names_do_all) \
    LFUNC_FA_(OSSL_DECODER_INSTANCE_get_input_type) \
    LFUNC_FA_(EVP_ASYM_CIPHER_gettable_ctx_params) \
    LFUNC_FA_(EVP_ASYM_CIPHER_settable_ctx_params) \
    LFUNC_FA_(EVP_KEM_gettable_ctx_params) \
    LFUNC_FA_(EVP_KEM_settable_ctx_params) \
    LFUNC_FA_(PKCS7_type_is_other) \
    LFUNC_FA_(PKCS7_get_octet_string) \
    LFUNC_FA_(OSSL_DECODER_from_data) \
    LFUNC_FA_(OSSL_ENCODER_to_data) \
    LFUNC_FA_(EVP_PKEY_CTX_get0_libctx) \
    LFUNC_FA_(EVP_PKEY_CTX_get0_propq) \
    LFUNC_FA_(EVP_PKEY_set1_encoded_public_key) \
    LFUNC_FA_(EVP_PKEY_get1_encoded_public_key) \
    LFUNC_FA_(OSSL_DECODER_CTX_set_selection) \
    LFUNC_FA_(OSSL_DECODER_CTX_set_input_structure) \
    LFUNC_FA_(OSSL_DECODER_INSTANCE_get_input_structure) \
    LFUNC_FA_(OSSL_ENCODER_CTX_set_output_structure) \
    LFUNC_FA_(OSSL_ENCODER_INSTANCE_get_output_structure) \
    LFUNC_FA_(PEM_write_bio_PrivateKey_ex) \
    LFUNC_FA_(PEM_write_bio_PUBKEY_ex) \
    LFUNC_FA_(EVP_PKEY_get_group_name) \
    LFUNC_FA_(CRYPTO_atomic_or) \
    LFUNC_FA_(CRYPTO_atomic_load) \
    LFUNC_FA_(EVP_PKEY_CTX_set_rsa_pss_keygen_md) \
    LFUNC_FA_(EVP_PKEY_CTX_set_rsa_pss_keygen_md_name) \
    LFUNC_FA_(EVP_PKEY_settable_params) \
    LFUNC_FA_(EVP_PKEY_set_params) \
    LFUNC_FA_(EVP_PKEY_set_int_param) \
    LFUNC_FA_(EVP_PKEY_set_size_t_param) \
    LFUNC_FA_(EVP_PKEY_set_bn_param) \
    LFUNC_FA_(EVP_PKEY_set_utf8_string_param) \
    LFUNC_FA_(EVP_PKEY_set_octet_string_param) \
    LFUNC_FA_(EVP_PKEY_get_ec_point_conv_form) \
    LFUNC_FA_(EVP_PKEY_get_field_type) \
    LFUNC_FA_(EVP_PKEY_get_params) \
    LFUNC_FA_(EVP_PKEY_fromdata_init) \
    LFUNC_FA_(EVP_PKEY_fromdata_settable) \
    LFUNC_FA_(EVP_PKEY_param_check_quick) \
    LFUNC_FA_(EVP_PKEY_public_check_quick) \
    LFUNC_FA_(EVP_PKEY_CTX_is_a) \
    LFUNC_FA_(EVP_CIPHER_CTX_settable_params) \
    LFUNC_FA_(EVP_CIPHER_CTX_gettable_params) \
    LFUNC_FA_(EVP_KDF_CTX_gettable_params) \
    LFUNC_FA_(EVP_KDF_CTX_settable_params) \
    LFUNC_FA_(EVP_MAC_CTX_gettable_params) \
    LFUNC_FA_(EVP_MAC_CTX_settable_params) \
    LFUNC_FA_(EVP_RAND_CTX_gettable_params) \
    LFUNC_FA_(EVP_RAND_CTX_settable_params) \
    LFUNC_FA_(RAND_set_DRBG_type) \
    LFUNC_FA_(RAND_set_seed_source_type) \
    LFUNC_FA_(BN_mod_exp_mont_consttime_x2) \
    LFUNC_FA_(BIO_f_readbuffer) \
    LFUNC_FA_(OSSL_ESS_check_signing_certs) \
    LFUNC_FA_(OSSL_ESS_signing_cert_new_init) \
    LFUNC_FA_(OSSL_ESS_signing_cert_v2_new_init) \
    LFUNC_FA_(ESS_SIGNING_CERT_it) \
    LFUNC_FA_(ESS_SIGNING_CERT_V2_it) \
    LFUNC_FA_(EVP_Q_digest) \
    LFUNC_FA_(EVP_DigestInit_ex2) \
    LFUNC_FA_(EVP_EncryptInit_ex2) \
    LFUNC_FA_(EVP_DecryptInit_ex2) \
    LFUNC_FA_(EVP_CipherInit_ex2) \
    LFUNC_FA_(EVP_PKEY_sign_init_ex) \
    LFUNC_FA_(EVP_PKEY_verify_init_ex) \
    LFUNC_FA_(EVP_PKEY_verify_recover_init_ex) \
    LFUNC_FA_(EVP_PKEY_encrypt_init_ex) \
    LFUNC_FA_(EVP_PKEY_decrypt_init_ex) \
    LFUNC_FA_(EVP_PKEY_derive_init_ex) \
    LFUNC_FA_(TS_RESP_CTX_new_ex) \
    LFUNC_FA_(X509_REQ_new_ex) \
    LFUNC_FA_(EVP_PKEY_dup) \
    LFUNC_FA_(RSA_PSS_PARAMS_dup) \
    LFUNC_FA_(EVP_PKEY_derive_set_peer_ex) \
    LFUNC_FA_(OSSL_DECODER_get0_name) \
    LFUNC_FA_(OSSL_ENCODER_get0_name) \
    LFUNC_FA_(OSSL_DECODER_get0_description) \
    LFUNC_FA_(OSSL_ENCODER_get0_description) \
    LFUNC_FA_(OSSL_STORE_LOADER_get0_description) \
    LFUNC_FA_(EVP_MD_get0_description) \
    LFUNC_FA_(EVP_CIPHER_get0_description) \
    LFUNC_FA_(EVP_MAC_get0_description) \
    LFUNC_FA_(EVP_RAND_get0_description) \
    LFUNC_FA_(EVP_PKEY_get0_description) \
    LFUNC_FA_(EVP_KEYMGMT_get0_description) \
    LFUNC_FA_(EVP_SIGNATURE_get0_description) \
    LFUNC_FA_(EVP_ASYM_CIPHER_get0_description) \
    LFUNC_FA_(EVP_KEM_get0_description) \
    LFUNC_FA_(EVP_KEYEXCH_get0_description) \
    LFUNC_FA_(EVP_KDF_get0_description) \
    LFUNC_FA_(OPENSSL_sk_find_all) \
    LFUNC_FA_(X509_CRL_new_ex) \
    LFUNC_FA_(OSSL_PARAM_dup) \
    LFUNC_FA_(OSSL_PARAM_merge) \
    LFUNC_FA_(OSSL_PARAM_free) \
    LFUNC_FA_(EVP_PKEY_todata) \
    LFUNC_FA_(EVP_PKEY_export) \
    LFUNC_FA_(EVP_MD_CTX_get0_md) \
    LFUNC_FA_(EVP_MD_CTX_get1_md) \
    LFUNC_FA_(EVP_CIPHER_CTX_get0_cipher) \
    LFUNC_FA_(EVP_CIPHER_CTX_get1_cipher) \
    LFUNC_FA_(OSSL_LIB_CTX_get0_global_default) \
    LFUNC_FA_(EVP_SIGNATURE_get0_name) \
    LFUNC_FA_(EVP_ASYM_CIPHER_get0_name) \
    LFUNC_FA_(EVP_KEM_get0_name) \
    LFUNC_FA_(EVP_KEYEXCH_get0_name) \
    LFUNC_FA_(PKCS5_v2_PBE_keyivgen_ex) \
    LFUNC_FA_(EVP_PBE_scrypt_ex_amiga_1) \
    LFUNC_FA_(EVP_PBE_scrypt_ex_amiga_2) \
    LFUNC_FA_(PKCS5_v2_scrypt_keyivgen_ex) \
    LFUNC_FA_(EVP_PBE_CipherInit_ex) \
    LFUNC_FA_(EVP_PBE_find_ex) \
    LFUNC_FA_(PKCS12_SAFEBAG_create_pkcs8_encrypt_ex) \
    LFUNC_FA_(PKCS8_decrypt_ex) \
    LFUNC_FA_(PKCS12_decrypt_skey_ex) \
    LFUNC_FA_(PKCS8_encrypt_ex) \
    LFUNC_FA_(PKCS8_set0_pbe_ex) \
    LFUNC_FA_(PKCS12_pack_p7encdata_ex) \
    LFUNC_FA_(PKCS12_pbe_crypt_ex) \
    LFUNC_FA_(PKCS12_item_decrypt_d2i_ex) \
    LFUNC_FA_(PKCS12_item_i2d_encrypt_ex) \
    LFUNC_FA_(PKCS12_init_ex) \
    LFUNC_FA_(PKCS12_key_gen_asc_ex) \
    LFUNC_FA_(PKCS12_key_gen_uni_ex) \
    LFUNC_FA_(PKCS12_key_gen_utf8_ex) \
    LFUNC_FA_(PKCS12_PBE_keyivgen_ex) \
    LFUNC_FA_(PKCS12_create_ex) \
    LFUNC_FA_(PKCS12_add_key_ex) \
    LFUNC_FA_(PKCS12_add_safe_ex) \
    LFUNC_FA_(PKCS12_add_safes_ex) \
    LFUNC_FA_(PKCS5_pbe_set0_algor_ex) \
    LFUNC_FA_(PKCS5_pbe_set_ex) \
    LFUNC_FA_(PKCS5_pbe2_set_iv_ex) \
    LFUNC_FA_(PKCS5_pbkdf2_set_ex) \
    LFUNC_FA_(BIO_new_from_core_bio) \
    LFUNC_FA_(BIO_new_ex) \
    LFUNC_FA_(BIO_s_core) \
    LFUNC_FA_(BIO_get_line) \
    LFUNC_FA_(OSSL_LIB_CTX_new_from_dispatch) \
    LFUNC_FA_(OSSL_LIB_CTX_new_child) \
    LFUNC_FA_(OSSL_PROVIDER_get0_dispatch) \
    LFUNC_FA_(PKCS5_PBE_keyivgen_ex) \
    LFUNC_FA_(EVP_MAC_CTX_get_block_size) \
    LFUNC_FA_(BIO_debug_callback_ex) \
    LFUNC_FA_(b2i_PVK_bio_ex) \
    LFUNC_FA_(i2b_PVK_bio_ex) \
    LFUNC_FA_(NCONF_get0_libctx) \
    LFUNC_FA_(NCONF_get_section_names) \
    LFUNC_FA_(X509_PUBKEY_new_ex) \
    LFUNC_FA_(ASN1_item_new_ex) \
    LFUNC_FA_(ASN1_item_d2i_bio_ex) \
    LFUNC_FA_(ASN1_item_d2i_ex) \
    LFUNC_FA_(ASN1_TIME_print_ex) \
    LFUNC_FA_(EVP_PKEY_get0_provider) \
    LFUNC_FA_(EVP_PKEY_CTX_get0_provider)
#endif /* SDI_LIB_H */

#endif /* GLUE_AMISSLEXT_H */
