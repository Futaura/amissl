#include <exec/types.h>
#include <exec/nodes.h>
#include <exec/memory.h>
#include <exec/resident.h>
#include <exec/libraries.h>
#include <exec/execbase.h>
#include <libraries/dos.h>
#include <proto/exec.h>
#include <string.h>
#include <stdlib.h>

#include <proto/exec.h>
#include <proto/utility.h>

#include <clib/dos_protos.h>
#include <pragmas/dos_pragmas.h>

#include <proto/locale.h>
#include <exec/memory.h>
#include <utility/tagitem.h>
#include <amissl/tags.h>
#include <exec/semaphores.h>

#include <libraries/amissl.h>
#include "/scmt/scmt.h"

struct ExecBase *SysBase;
struct Library *UtilityBase;

struct Library *AmiSSLBase;
struct Library *SHABase;	// Needed by rsa_intl
struct Library *MD5Base;	// Needed by rsa_us
void *__pool;
struct SignalSemaphore __mem_cs;

#define XMKSTR(x)	#x
#define MKSTR(x)	XMKSTR(x)

static const char *version = "$VER: " MKSTR(LIBNAME) " " MKSTR(LIBVER) " " __AMIGADATE__ " part of AmiSSL package, " MKSTR(CPUPREFIX) MKSTR(CPUVER) " version";

void __saveds __asm __UserLibCleanup(register __a6 struct MyLibrary *libbase)
{
	if(UtilityBase)
		CloseLibrary((struct Library *)UtilityBase);
	if(__pool)
		DeletePool(__pool);
}

void __saveds __asm __UserLibExpunge(register __a6 struct MyLibrary *libbase)
{
	donemta4();
}

int __saveds __asm __UserLibInit(register __a6 struct MyLibrary *libbase)
{
    SysBase = *(struct ExecBase **)4;

	if(initmta4())
	{
		InitSemaphore(&__mem_cs);
		if(__pool = CreatePool(MEMF_ANY, 8192, 4096))
		{
			if(UtilityBase = OpenLibrary("utility.library", 36))
			{
				goto ok;
			}
		}
	}
	goto error;
ok:
	return(0);
error:
	__UserLibCleanup(libbase);
	return(1);
}

long __saveds __asm InitRSA_AmiSSL(register __a0 struct Library *_AmiSSLBase,
									register __a1 struct Library *_SHABase,
									register __a2 struct Library *_MD5Base)
{
	AmiSSLBase = _AmiSSLBase;
	SHABase = _SHABase;
	MD5Base = _MD5Base;

	if(!addmta4user())
		return 1;
	return 0;
}

long __saveds __asm CleanupRSA_AmiSSL(void)
{
	removemta4user();
	return(0);
}

__stdargs void _CXFERR(int code)
{ /* do nothing since no one will ever look at the fp error code */
}
