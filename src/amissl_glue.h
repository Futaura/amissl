
/* This file was generated by idltool 53.10. Do not edit */


/***************************************************************************/

#ifndef GLUE_AMISSL_H
#define GLUE_AMISSL_H 1

#define PROTO_AMISSL_H // Don't include protos
#ifndef EXEC_LIBRARIES_H
#include <exec/libraries.h>
#endif
#
#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif

#ifndef DOS_DOS_H
#include <dos/dos.h>
#endif

#ifndef AMISSL_AMISSL_H
#include <amissl/amissl.h>
#endif

#if defined(__amigaos4__)
struct AmiSSLIFace;
#define __IFACE_OR_BASE struct AmiSSLIFace *Self
#else
#define __IFACE_OR_BASE struct Library *Self
#endif

ULONG SAVEDS ASM LIB_Obtain(REG(a6, __IFACE_OR_BASE));
ULONG SAVEDS ASM LIB_Release(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_InternalInitAmiSSL(REG(a6, __IFACE_OR_BASE), REG(a0, void * amisslinit));
long SAVEDS ASM LIB_InitAmiSSLA(REG(a6, __IFACE_OR_BASE), REG(a0, struct TagItem * tagList));
long SAVEDS ASM LIB_CleanupAmiSSLA(REG(a6, __IFACE_OR_BASE), REG(a0, struct TagItem * tagList));
ASN1_TYPE * SAVEDS ASM LIB_ASN1_TYPE_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_TYPE_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TYPE * a));
ASN1_TYPE * SAVEDS ASM LIB_d2i_ASN1_TYPE(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TYPE ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_TYPE(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TYPE * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_ANY_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ASN1_TYPE_get(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TYPE * a));
void SAVEDS ASM LIB_ASN1_TYPE_set(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TYPE * a), REG(d0, int type), REG(a1, void * value));
ASN1_OBJECT * SAVEDS ASM LIB_ASN1_OBJECT_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_OBJECT_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_OBJECT * a));
int SAVEDS ASM LIB_i2d_ASN1_OBJECT(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_OBJECT * a), REG(a1, unsigned char ** pp));
ASN1_OBJECT * SAVEDS ASM LIB_c2i_ASN1_OBJECT(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_OBJECT ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
ASN1_OBJECT * SAVEDS ASM LIB_d2i_ASN1_OBJECT(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_OBJECT ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_OBJECT_it(REG(a6, __IFACE_OR_BASE));
ASN1_STRING * SAVEDS ASM LIB_ASN1_STRING_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_STRING_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * a));
ASN1_STRING * SAVEDS ASM LIB_ASN1_STRING_dup(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * a));
ASN1_STRING * SAVEDS ASM LIB_ASN1_STRING_type_new(REG(a6, __IFACE_OR_BASE), REG(d0, int type));
int SAVEDS ASM LIB_ASN1_STRING_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * a), REG(a1, ASN1_STRING * b));
int SAVEDS ASM LIB_ASN1_STRING_set(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * str), REG(a1, const void * data), REG(d0, int len));
int SAVEDS ASM LIB_ASN1_STRING_length(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * x));
void SAVEDS ASM LIB_ASN1_STRING_length_set(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * x), REG(d0, int n));
int SAVEDS ASM LIB_ASN1_STRING_type(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * x));
unsigned char * SAVEDS ASM LIB_ASN1_STRING_data(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * x));
ASN1_BIT_STRING * SAVEDS ASM LIB_ASN1_BIT_STRING_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_BIT_STRING_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_BIT_STRING * a));
ASN1_BIT_STRING * SAVEDS ASM LIB_d2i_ASN1_BIT_STRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_BIT_STRING ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_BIT_STRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_BIT_STRING * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_BIT_STRING_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_i2c_ASN1_BIT_STRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_BIT_STRING * a), REG(a1, unsigned char ** pp));
ASN1_BIT_STRING * SAVEDS ASM LIB_c2i_ASN1_BIT_STRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_BIT_STRING ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
int SAVEDS ASM LIB_ASN1_BIT_STRING_set(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_BIT_STRING * a), REG(a1, unsigned char * d), REG(d0, int length));
int SAVEDS ASM LIB_ASN1_BIT_STRING_set_bit(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_BIT_STRING * a), REG(d0, int n), REG(d1, int value));
int SAVEDS ASM LIB_ASN1_BIT_STRING_get_bit(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_BIT_STRING * a), REG(d0, int n));
int SAVEDS ASM LIB_ASN1_BIT_STRING_name_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, ASN1_BIT_STRING * bs), REG(a2, BIT_STRING_BITNAME * tbl), REG(d0, int indent));
int SAVEDS ASM LIB_ASN1_BIT_STRING_num_asc(REG(a6, __IFACE_OR_BASE), REG(a0, char * name), REG(a1, BIT_STRING_BITNAME * tbl));
int SAVEDS ASM LIB_ASN1_BIT_STRING_set_asc(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_BIT_STRING * bs), REG(a1, char * name), REG(d0, int value), REG(a2, BIT_STRING_BITNAME * tbl));
int SAVEDS ASM LIB_i2d_ASN1_BOOLEAN(REG(a6, __IFACE_OR_BASE), REG(d0, int a), REG(a0, unsigned char ** pp));
int SAVEDS ASM LIB_d2i_ASN1_BOOLEAN(REG(a6, __IFACE_OR_BASE), REG(a0, int * a), REG(a1, const unsigned char ** pp), REG(d0, long length));
ASN1_INTEGER * SAVEDS ASM LIB_ASN1_INTEGER_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_INTEGER_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_INTEGER * a));
ASN1_INTEGER * SAVEDS ASM LIB_d2i_ASN1_INTEGER(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_INTEGER ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_INTEGER(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_INTEGER * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_INTEGER_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_i2c_ASN1_INTEGER(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_INTEGER * a), REG(a1, unsigned char ** pp));
ASN1_INTEGER * SAVEDS ASM LIB_c2i_ASN1_INTEGER(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_INTEGER ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
ASN1_INTEGER * SAVEDS ASM LIB_d2i_ASN1_UINTEGER(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_INTEGER ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
ASN1_INTEGER * SAVEDS ASM LIB_ASN1_INTEGER_dup(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_INTEGER * x));
int SAVEDS ASM LIB_ASN1_INTEGER_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_INTEGER * x), REG(a1, ASN1_INTEGER * y));
ASN1_ENUMERATED * SAVEDS ASM LIB_ASN1_ENUMERATED_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_ENUMERATED_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_ENUMERATED * a));
ASN1_ENUMERATED * SAVEDS ASM LIB_d2i_ASN1_ENUMERATED(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_ENUMERATED ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_ENUMERATED(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_ENUMERATED * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_ENUMERATED_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ASN1_UTCTIME_check(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_UTCTIME * a));
ASN1_UTCTIME * SAVEDS ASM LIB_ASN1_UTCTIME_set(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_UTCTIME * s), REG(d0, time_t t));
int SAVEDS ASM LIB_ASN1_UTCTIME_set_string(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_UTCTIME * s), REG(a1, char * str));
int SAVEDS ASM LIB_ASN1_UTCTIME_cmp_time_t(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_UTCTIME * s), REG(d0, time_t t));
int SAVEDS ASM LIB_ASN1_GENERALIZEDTIME_check(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_GENERALIZEDTIME * a));
ASN1_GENERALIZEDTIME * SAVEDS ASM LIB_ASN1_GENERALIZEDTIME_set(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_GENERALIZEDTIME * s), REG(d0, time_t t));
int SAVEDS ASM LIB_ASN1_GENERALIZEDTIME_set_string(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_GENERALIZEDTIME * s), REG(a1, char * str));
ASN1_OCTET_STRING * SAVEDS ASM LIB_ASN1_OCTET_STRING_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_OCTET_STRING_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_OCTET_STRING * a));
ASN1_OCTET_STRING * SAVEDS ASM LIB_d2i_ASN1_OCTET_STRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_OCTET_STRING ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_OCTET_STRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_OCTET_STRING * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_OCTET_STRING_it(REG(a6, __IFACE_OR_BASE));
ASN1_OCTET_STRING * SAVEDS ASM LIB_ASN1_OCTET_STRING_dup(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_OCTET_STRING * a));
int SAVEDS ASM LIB_ASN1_OCTET_STRING_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_OCTET_STRING * a), REG(a1, ASN1_OCTET_STRING * b));
int SAVEDS ASM LIB_ASN1_OCTET_STRING_set(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_OCTET_STRING * str), REG(a1, unsigned char * data), REG(d0, int len));
ASN1_VISIBLESTRING * SAVEDS ASM LIB_ASN1_VISIBLESTRING_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_VISIBLESTRING_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VISIBLESTRING * a));
ASN1_VISIBLESTRING * SAVEDS ASM LIB_d2i_ASN1_VISIBLESTRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VISIBLESTRING ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_VISIBLESTRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VISIBLESTRING * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_VISIBLESTRING_it(REG(a6, __IFACE_OR_BASE));
ASN1_UNIVERSALSTRING * SAVEDS ASM LIB_ASN1_UNIVERSALSTRING_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_UNIVERSALSTRING_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_UNIVERSALSTRING * a));
ASN1_UNIVERSALSTRING * SAVEDS ASM LIB_d2i_ASN1_UNIVERSALSTRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_UNIVERSALSTRING ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_UNIVERSALSTRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_UNIVERSALSTRING * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_UNIVERSALSTRING_it(REG(a6, __IFACE_OR_BASE));
ASN1_UTF8STRING * SAVEDS ASM LIB_ASN1_UTF8STRING_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_UTF8STRING_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_UTF8STRING * a));
ASN1_UTF8STRING * SAVEDS ASM LIB_d2i_ASN1_UTF8STRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_UTF8STRING ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_UTF8STRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_UTF8STRING * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_UTF8STRING_it(REG(a6, __IFACE_OR_BASE));
ASN1_NULL * SAVEDS ASM LIB_ASN1_NULL_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_NULL_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_NULL * a));
ASN1_NULL * SAVEDS ASM LIB_d2i_ASN1_NULL(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_NULL ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_NULL(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_NULL * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_NULL_it(REG(a6, __IFACE_OR_BASE));
ASN1_BMPSTRING * SAVEDS ASM LIB_ASN1_BMPSTRING_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_BMPSTRING_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_BMPSTRING * a));
ASN1_BMPSTRING * SAVEDS ASM LIB_d2i_ASN1_BMPSTRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_BMPSTRING ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_BMPSTRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_BMPSTRING * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_BMPSTRING_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_UTF8_getc(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * str), REG(d0, int len), REG(a1, unsigned long * val));
int SAVEDS ASM LIB_UTF8_putc(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * str), REG(d0, int len), REG(d1, unsigned long value));
ASN1_STRING * SAVEDS ASM LIB_ASN1_PRINTABLE_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_PRINTABLE_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * a));
ASN1_STRING * SAVEDS ASM LIB_d2i_ASN1_PRINTABLE(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_PRINTABLE(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_PRINTABLE_it(REG(a6, __IFACE_OR_BASE));
ASN1_STRING * SAVEDS ASM LIB_DIRECTORYSTRING_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_DIRECTORYSTRING_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * a));
ASN1_STRING * SAVEDS ASM LIB_d2i_DIRECTORYSTRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_DIRECTORYSTRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_DIRECTORYSTRING_it(REG(a6, __IFACE_OR_BASE));
ASN1_STRING * SAVEDS ASM LIB_DISPLAYTEXT_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_DISPLAYTEXT_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * a));
ASN1_STRING * SAVEDS ASM LIB_d2i_DISPLAYTEXT(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_DISPLAYTEXT(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_DISPLAYTEXT_it(REG(a6, __IFACE_OR_BASE));
ASN1_PRINTABLESTRING * SAVEDS ASM LIB_ASN1_PRINTABLESTRING_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_PRINTABLESTRING_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_PRINTABLESTRING * a));
ASN1_PRINTABLESTRING * SAVEDS ASM LIB_d2i_ASN1_PRINTABLESTRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_PRINTABLESTRING ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_PRINTABLESTRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_PRINTABLESTRING * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_PRINTABLESTRING_it(REG(a6, __IFACE_OR_BASE));
ASN1_T61STRING * SAVEDS ASM LIB_ASN1_T61STRING_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_T61STRING_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_T61STRING * a));
ASN1_T61STRING * SAVEDS ASM LIB_d2i_ASN1_T61STRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_T61STRING ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_T61STRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_T61STRING * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_T61STRING_it(REG(a6, __IFACE_OR_BASE));
ASN1_IA5STRING * SAVEDS ASM LIB_ASN1_IA5STRING_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_IA5STRING_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_IA5STRING * a));
ASN1_IA5STRING * SAVEDS ASM LIB_d2i_ASN1_IA5STRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_IA5STRING ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_IA5STRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_IA5STRING * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_IA5STRING_it(REG(a6, __IFACE_OR_BASE));
ASN1_GENERALSTRING * SAVEDS ASM LIB_ASN1_GENERALSTRING_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_GENERALSTRING_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_GENERALSTRING * a));
ASN1_GENERALSTRING * SAVEDS ASM LIB_d2i_ASN1_GENERALSTRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_GENERALSTRING ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_GENERALSTRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_GENERALSTRING * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_GENERALSTRING_it(REG(a6, __IFACE_OR_BASE));
ASN1_UTCTIME * SAVEDS ASM LIB_ASN1_UTCTIME_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_UTCTIME_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_UTCTIME * a));
ASN1_UTCTIME * SAVEDS ASM LIB_d2i_ASN1_UTCTIME(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_UTCTIME ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_UTCTIME(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_UTCTIME * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_UTCTIME_it(REG(a6, __IFACE_OR_BASE));
ASN1_GENERALIZEDTIME * SAVEDS ASM LIB_ASN1_GENERALIZEDTIME_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_GENERALIZEDTIME_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_GENERALIZEDTIME * a));
ASN1_GENERALIZEDTIME * SAVEDS ASM LIB_d2i_ASN1_GENERALIZEDTIME(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_GENERALIZEDTIME ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_GENERALIZEDTIME(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_GENERALIZEDTIME * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_GENERALIZEDTIME_it(REG(a6, __IFACE_OR_BASE));
ASN1_TIME * SAVEDS ASM LIB_ASN1_TIME_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_TIME_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TIME * a));
ASN1_TIME * SAVEDS ASM LIB_d2i_ASN1_TIME(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TIME ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_TIME(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TIME * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_TIME_it(REG(a6, __IFACE_OR_BASE));
ASN1_TIME * SAVEDS ASM LIB_ASN1_TIME_set(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TIME * s), REG(d0, time_t t));
int SAVEDS ASM LIB_ASN1_TIME_check(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TIME * t));
ASN1_GENERALIZEDTIME * SAVEDS ASM LIB_ASN1_TIME_to_generalizedtime(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TIME * t), REG(a1, ASN1_GENERALIZEDTIME ** out));
int SAVEDS ASM LIB_i2d_ASN1_SET(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(OPENSSL_BLOCK) * a), REG(a1, unsigned char ** pp), REG(a2, i2d_of_void * i2d), REG(d0, int ex_tag), REG(d1, int ex_class), REG(d2, int is_set));
STACK_OF(OPENSSL_BLOCK) * SAVEDS ASM LIB_d2i_ASN1_SET(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(OPENSSL_BLOCK) ** a), REG(a1, const unsigned char ** pp), REG(d0, long length), REG(a2, d2i_of_void * d2i), REG(a3, void (*free_func)(OPENSSL_BLOCK)), REG(d1, int ex_tag), REG(d2, int ex_class));
int SAVEDS ASM LIB_i2a_ASN1_INTEGER(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, ASN1_INTEGER * a));
int SAVEDS ASM LIB_a2i_ASN1_INTEGER(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, ASN1_INTEGER * bs), REG(a2, char * buf), REG(d0, int size));
int SAVEDS ASM LIB_i2a_ASN1_ENUMERATED(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, ASN1_ENUMERATED * a));
int SAVEDS ASM LIB_a2i_ASN1_ENUMERATED(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, ASN1_ENUMERATED * bs), REG(a2, char * buf), REG(d0, int size));
int SAVEDS ASM LIB_i2a_ASN1_OBJECT(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, ASN1_OBJECT * a));
int SAVEDS ASM LIB_a2i_ASN1_STRING(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, ASN1_STRING * bs), REG(a2, char * buf), REG(d0, int size));
int SAVEDS ASM LIB_i2a_ASN1_STRING(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, ASN1_STRING * a), REG(d0, int type));
int SAVEDS ASM LIB_i2t_ASN1_OBJECT(REG(a6, __IFACE_OR_BASE), REG(a0, char * buf), REG(d0, int buf_len), REG(a1, ASN1_OBJECT * a));
int SAVEDS ASM LIB_a2d_ASN1_OBJECT(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * out), REG(d0, int olen), REG(a1, const char * buf), REG(d1, int num));
ASN1_OBJECT * SAVEDS ASM LIB_ASN1_OBJECT_create(REG(a6, __IFACE_OR_BASE), REG(d0, int nid), REG(a0, unsigned char * data), REG(d1, int len), REG(a1, const char * sn), REG(a2, const char * ln));
int SAVEDS ASM LIB_ASN1_INTEGER_set(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_INTEGER * a), REG(d0, long v));
long SAVEDS ASM LIB_ASN1_INTEGER_get(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_INTEGER * a));
ASN1_INTEGER * SAVEDS ASM LIB_BN_to_ASN1_INTEGER(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * bn), REG(a1, ASN1_INTEGER * ai));
BIGNUM * SAVEDS ASM LIB_ASN1_INTEGER_to_BN(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_INTEGER * ai), REG(a1, BIGNUM * bn));
int SAVEDS ASM LIB_ASN1_ENUMERATED_set(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_ENUMERATED * a), REG(d0, long v));
long SAVEDS ASM LIB_ASN1_ENUMERATED_get(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_ENUMERATED * a));
ASN1_ENUMERATED * SAVEDS ASM LIB_BN_to_ASN1_ENUMERATED(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * bn), REG(a1, ASN1_ENUMERATED * ai));
BIGNUM * SAVEDS ASM LIB_ASN1_ENUMERATED_to_BN(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_ENUMERATED * ai), REG(a1, BIGNUM * bn));
int SAVEDS ASM LIB_ASN1_PRINTABLE_type(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * s), REG(d0, int max));
int SAVEDS ASM LIB_i2d_ASN1_bytes(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * a), REG(a1, unsigned char ** pp), REG(d0, int tag), REG(d1, int xclass));
ASN1_STRING * SAVEDS ASM LIB_d2i_ASN1_bytes(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING ** a), REG(a1, const unsigned char ** pp), REG(d0, long length), REG(d1, int Ptag), REG(d2, int Pclass));
unsigned long SAVEDS ASM LIB_ASN1_tag2bit(REG(a6, __IFACE_OR_BASE), REG(d0, int tag));
ASN1_STRING * SAVEDS ASM LIB_d2i_ASN1_type_bytes(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING ** a), REG(a1, const unsigned char ** pp), REG(d0, long length), REG(d1, int type));
int SAVEDS ASM LIB_asn1_Finish(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_CTX * c));
int SAVEDS ASM LIB_ASN1_get_object(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char ** pp), REG(a1, long * plength), REG(a2, int * ptag), REG(a3, int * pclass), REG(d0, long omax));
int SAVEDS ASM LIB_ASN1_check_infinite_end(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char ** p), REG(d0, long len));
void SAVEDS ASM LIB_ASN1_put_object(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char ** pp), REG(d0, int constructed), REG(d1, int length), REG(d2, int tag), REG(d3, int xclass));
int SAVEDS ASM LIB_ASN1_object_size(REG(a6, __IFACE_OR_BASE), REG(d0, int constructed), REG(d1, int length), REG(d2, int tag));
void * SAVEDS ASM LIB_ASN1_dup(REG(a6, __IFACE_OR_BASE), REG(a0, i2d_of_void * i2d), REG(a1, d2i_of_void * d2i), REG(a2, char * x));
void * SAVEDS ASM LIB_ASN1_item_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_ITEM * it), REG(a1, void * x));
int SAVEDS ASM LIB_ASN1_STRING_to_UTF8(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char ** out), REG(a1, ASN1_STRING * in));
void * SAVEDS ASM LIB_ASN1_d2i_bio(REG(a6, __IFACE_OR_BASE), REG(a0, void * (*xnew)(void)), REG(a1, d2i_of_void * d2i), REG(a2, BIO * in), REG(a3, void ** x));
void * SAVEDS ASM LIB_ASN1_item_d2i_bio(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_ITEM * it), REG(a1, BIO * in), REG(a2, void * x));
int SAVEDS ASM LIB_ASN1_i2d_bio(REG(a6, __IFACE_OR_BASE), REG(a0, i2d_of_void * i2d), REG(a1, BIO * out), REG(a2, unsigned char * x));
int SAVEDS ASM LIB_ASN1_item_i2d_bio(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_ITEM * it), REG(a1, BIO * out), REG(a2, void * x));
int SAVEDS ASM LIB_ASN1_UTCTIME_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * fp), REG(a1, ASN1_UTCTIME * a));
int SAVEDS ASM LIB_ASN1_GENERALIZEDTIME_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * fp), REG(a1, ASN1_GENERALIZEDTIME * a));
int SAVEDS ASM LIB_ASN1_TIME_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * fp), REG(a1, ASN1_TIME * a));
int SAVEDS ASM LIB_ASN1_STRING_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, ASN1_STRING * v));
int SAVEDS ASM LIB_ASN1_STRING_print_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, ASN1_STRING * str), REG(d0, unsigned long flags));
int SAVEDS ASM LIB_ASN1_parse(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, unsigned char * pp), REG(d0, long len), REG(d1, int indent));
int SAVEDS ASM LIB_ASN1_parse_dump(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, unsigned char * pp), REG(d0, long len), REG(d1, int indent), REG(d2, int dump));
const char * SAVEDS ASM LIB_ASN1_tag2str(REG(a6, __IFACE_OR_BASE), REG(d0, int tag));
int SAVEDS ASM LIB_ASN1_UNIVERSALSTRING_to_string(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_UNIVERSALSTRING * s));
int SAVEDS ASM LIB_ASN1_TYPE_set_octetstring(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TYPE * a), REG(a1, unsigned char * data), REG(d0, int len));
int SAVEDS ASM LIB_ASN1_TYPE_get_octetstring(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TYPE * a), REG(a1, unsigned char * data), REG(d0, int max_len));
int SAVEDS ASM LIB_ASN1_TYPE_set_int_octetstring(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TYPE * a), REG(d0, long num), REG(a1, unsigned char * data), REG(d1, int len));
int SAVEDS ASM LIB_ASN1_TYPE_get_int_octetstring(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TYPE * a), REG(a1, long * num), REG(a2, unsigned char * data), REG(d0, int max_len));
STACK_OF(OPENSSL_BLOCK) * SAVEDS ASM LIB_ASN1_seq_unpack(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * buf), REG(d0, int len), REG(a1, d2i_of_void * d2i), REG(a2, void (*free_func)(OPENSSL_BLOCK)));
unsigned char * SAVEDS ASM LIB_ASN1_seq_pack(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(OPENSSL_BLOCK) * safes), REG(a1, i2d_of_void * i2d), REG(a2, unsigned char ** buf), REG(a3, int * len));
void * SAVEDS ASM LIB_ASN1_unpack_string(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * oct), REG(a1, d2i_of_void * d2i));
void * SAVEDS ASM LIB_ASN1_item_unpack(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * oct), REG(a1, const ASN1_ITEM * it));
ASN1_STRING * SAVEDS ASM LIB_ASN1_pack_string(REG(a6, __IFACE_OR_BASE), REG(a0, void * obj), REG(a1, int (*i2d)()), REG(a2, ASN1_OCTET_STRING ** oct));
ASN1_STRING * SAVEDS ASM LIB_ASN1_item_pack(REG(a6, __IFACE_OR_BASE), REG(a0, void * obj), REG(a1, const ASN1_ITEM * it), REG(a2, ASN1_OCTET_STRING ** oct));
void SAVEDS ASM LIB_ASN1_STRING_set_default_mask(REG(a6, __IFACE_OR_BASE), REG(d0, unsigned long mask));
int SAVEDS ASM LIB_ASN1_STRING_set_default_mask_asc(REG(a6, __IFACE_OR_BASE), REG(a0, char * p));
unsigned long SAVEDS ASM LIB_ASN1_STRING_get_default_mask(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ASN1_mbstring_copy(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING ** out), REG(a1, const unsigned char * in), REG(d0, int len), REG(d1, int inform), REG(d2, unsigned long mask));
int SAVEDS ASM LIB_ASN1_mbstring_ncopy(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING ** out), REG(a1, const unsigned char * in), REG(d0, int len), REG(d1, int inform), REG(d2, unsigned long mask), REG(d3, long minsize), REG(d4, long maxsize));
ASN1_STRING * SAVEDS ASM LIB_ASN1_STRING_set_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING ** out), REG(a1, const unsigned char * in), REG(d0, int inlen), REG(d1, int inform), REG(d2, int nid));
ASN1_STRING_TABLE * SAVEDS ASM LIB_ASN1_STRING_TABLE_get(REG(a6, __IFACE_OR_BASE), REG(d0, int nid));
int SAVEDS ASM LIB_ASN1_STRING_TABLE_add(REG(a6, __IFACE_OR_BASE), REG(d0, int a), REG(d1, long b), REG(d2, long c), REG(d3, unsigned long d), REG(d4, unsigned long e));
void SAVEDS ASM LIB_ASN1_STRING_TABLE_cleanup(REG(a6, __IFACE_OR_BASE));
ASN1_VALUE * SAVEDS ASM LIB_ASN1_item_new(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_ITEM * it));
void SAVEDS ASM LIB_ASN1_item_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE * val), REG(a1, const ASN1_ITEM * it));
ASN1_VALUE * SAVEDS ASM LIB_ASN1_item_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE ** val), REG(a1, const unsigned char ** in), REG(d0, long len), REG(a2, const ASN1_ITEM * it));
int SAVEDS ASM LIB_ASN1_item_i2d(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE * val), REG(a1, unsigned char ** out), REG(a2, const ASN1_ITEM * it));
void SAVEDS ASM LIB_ASN1_add_oid_module(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ERR_load_ASN1_strings(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_asn1_GetSequence(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_const_CTX * c), REG(a1, long * length));
void SAVEDS ASM LIB_asn1_add_error(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * address), REG(d0, int offset));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_BOOLEAN_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_TBOOLEAN_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_FBOOLEAN_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_SEQUENCE_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_CBIGNUM_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_BIGNUM_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_LONG_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_ZLONG_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ASN1_item_ex_new(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE ** pval), REG(a1, const ASN1_ITEM * it));
void SAVEDS ASM LIB_ASN1_item_ex_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE ** pval), REG(a1, const ASN1_ITEM * it));
int SAVEDS ASM LIB_ASN1_template_new(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE ** pval), REG(a1, const ASN1_TEMPLATE * tt));
int SAVEDS ASM LIB_ASN1_primitive_new(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE ** pval), REG(a1, const ASN1_ITEM * it));
void SAVEDS ASM LIB_ASN1_template_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE ** pval), REG(a1, const ASN1_TEMPLATE * tt));
int SAVEDS ASM LIB_ASN1_template_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE ** pval), REG(a1, const unsigned char ** in), REG(d0, long len), REG(a2, const ASN1_TEMPLATE * tt));
int SAVEDS ASM LIB_ASN1_item_ex_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE ** pval), REG(a1, const unsigned char ** in), REG(d0, long len), REG(a2, const ASN1_ITEM * it), REG(d1, int tag), REG(d2, int aclass), REG(d3, char opt), REG(a3, ASN1_TLC * ctx));
int SAVEDS ASM LIB_ASN1_item_ex_i2d(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE ** pval), REG(a1, unsigned char ** out), REG(a2, const ASN1_ITEM * it), REG(d0, int tag), REG(d1, int aclass));
int SAVEDS ASM LIB_ASN1_template_i2d(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE ** pval), REG(a1, unsigned char ** out), REG(a2, const ASN1_TEMPLATE * tt));
void SAVEDS ASM LIB_ASN1_primitive_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE ** pval), REG(a1, const ASN1_ITEM * it));
int SAVEDS ASM LIB_asn1_ex_i2c(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE ** pval), REG(a1, unsigned char * cont), REG(a2, int * putype), REG(a3, const ASN1_ITEM * it));
int SAVEDS ASM LIB_asn1_ex_c2i(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE ** pval), REG(a1, unsigned char * cont), REG(d0, int len), REG(d1, int utype), REG(a2, char * free_cont), REG(a3, const ASN1_ITEM * it));
int SAVEDS ASM LIB_asn1_get_choice_selector(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE ** pval), REG(a1, const ASN1_ITEM * it));
int SAVEDS ASM LIB_asn1_set_choice_selector(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE ** pval), REG(d0, int value), REG(a1, const ASN1_ITEM * it));
ASN1_VALUE ** SAVEDS ASM LIB_asn1_get_field_ptr(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE ** pval), REG(a1, const ASN1_TEMPLATE * tt));
const ASN1_TEMPLATE * SAVEDS ASM LIB_asn1_do_adb(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE ** pval), REG(a1, const ASN1_TEMPLATE * tt), REG(d0, int nullerr));
int SAVEDS ASM LIB_asn1_do_lock(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE ** pval), REG(d0, int op), REG(a1, const ASN1_ITEM * it));
void SAVEDS ASM LIB_asn1_enc_init(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE ** pval), REG(a1, const ASN1_ITEM * it));
void SAVEDS ASM LIB_asn1_enc_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE ** pval), REG(a1, const ASN1_ITEM * it));
int SAVEDS ASM LIB_asn1_enc_restore(REG(a6, __IFACE_OR_BASE), REG(a0, int * len), REG(a1, unsigned char ** out), REG(a2, ASN1_VALUE ** pval), REG(a3, const ASN1_ITEM * it));
int SAVEDS ASM LIB_asn1_enc_save(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE ** pval), REG(a1, unsigned char * in), REG(d0, int inlen), REG(a2, const ASN1_ITEM * it));
size_t SAVEDS ASM LIB_BIO_ctrl_pending(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b));
size_t SAVEDS ASM LIB_BIO_ctrl_wpending(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b));
size_t SAVEDS ASM LIB_BIO_ctrl_get_write_guarantee(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b));
size_t SAVEDS ASM LIB_BIO_ctrl_get_read_request(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b));
int SAVEDS ASM LIB_BIO_ctrl_reset_read_request(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b));
int SAVEDS ASM LIB_BIO_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(d0, int idx), REG(a1, void * data));
void * SAVEDS ASM LIB_BIO_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(d0, int idx));
int SAVEDS ASM LIB_BIO_get_ex_new_index(REG(a6, __IFACE_OR_BASE), REG(d0, long argl), REG(a0, void * argp), REG(a1, CRYPTO_EX_new * new_func), REG(a2, CRYPTO_EX_dup * dup_func), REG(a3, CRYPTO_EX_free * free_func));
unsigned long SAVEDS ASM LIB_BIO_number_read(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio));
unsigned long SAVEDS ASM LIB_BIO_number_written(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio));
BIO_METHOD * SAVEDS ASM LIB_BIO_s_file(REG(a6, __IFACE_OR_BASE));
BIO * SAVEDS ASM LIB_BIO_new_file(REG(a6, __IFACE_OR_BASE), REG(a0, const char * filename), REG(a1, const char * mode));
BIO * SAVEDS ASM LIB_BIO_new_fp_amiga(REG(a6, __IFACE_OR_BASE), REG(a0, BPTR stream), REG(d0, int close_flag));
BIO * SAVEDS ASM LIB_BIO_new(REG(a6, __IFACE_OR_BASE), REG(a0, BIO_METHOD * type));
int SAVEDS ASM LIB_BIO_set(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * a), REG(a1, BIO_METHOD * type));
int SAVEDS ASM LIB_BIO_free(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * a));
void SAVEDS ASM LIB_BIO_vfree(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * a));
int SAVEDS ASM LIB_BIO_read(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, void * data), REG(d0, int len));
int SAVEDS ASM LIB_BIO_gets(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, char * buf), REG(d0, int size));
int SAVEDS ASM LIB_BIO_write(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, const void * data), REG(d0, int len));
int SAVEDS ASM LIB_BIO_puts(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const char * buf));
int SAVEDS ASM LIB_BIO_indent(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(d0, int indent), REG(d1, int max));
long SAVEDS ASM LIB_BIO_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(d0, int cmd), REG(d1, long larg), REG(a1, void * parg));
long SAVEDS ASM LIB_BIO_callback_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(d0, int cmd), REG(a1, void (*fp)(struct bio_st *, int, const char *, int, long, long)));
char * SAVEDS ASM LIB_BIO_ptr_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(d0, int cmd), REG(d1, long larg));
long SAVEDS ASM LIB_BIO_int_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(d0, int cmd), REG(d1, long larg), REG(d2, int iarg));
BIO * SAVEDS ASM LIB_BIO_push(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, BIO * append));
BIO * SAVEDS ASM LIB_BIO_pop(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b));
void SAVEDS ASM LIB_BIO_free_all(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * a));
BIO * SAVEDS ASM LIB_BIO_find_type(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(d0, int bio_type));
BIO * SAVEDS ASM LIB_BIO_next(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b));
BIO * SAVEDS ASM LIB_BIO_get_retry_BIO(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, int * reason));
int SAVEDS ASM LIB_BIO_get_retry_reason(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio));
BIO * SAVEDS ASM LIB_BIO_dup_chain(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in));
int SAVEDS ASM LIB_BIO_nread0(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, char ** buf));
int SAVEDS ASM LIB_BIO_nread(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, char ** buf), REG(d0, int num));
int SAVEDS ASM LIB_BIO_nwrite0(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, char ** buf));
int SAVEDS ASM LIB_BIO_nwrite(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, char ** buf), REG(d0, int num));
long SAVEDS ASM LIB_BIO_debug_callback(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(d0, int cmd), REG(a1, const char * argp), REG(d1, int argi), REG(d2, long argl), REG(d3, long ret));
BIO_METHOD * SAVEDS ASM LIB_BIO_s_mem(REG(a6, __IFACE_OR_BASE));
BIO * SAVEDS ASM LIB_BIO_new_mem_buf(REG(a6, __IFACE_OR_BASE), REG(a0, void * buf), REG(d0, int len));
BIO_METHOD * SAVEDS ASM LIB_BIO_s_socket(REG(a6, __IFACE_OR_BASE));
BIO_METHOD * SAVEDS ASM LIB_BIO_s_connect(REG(a6, __IFACE_OR_BASE));
BIO_METHOD * SAVEDS ASM LIB_BIO_s_accept(REG(a6, __IFACE_OR_BASE));
BIO_METHOD * SAVEDS ASM LIB_BIO_s_fd(REG(a6, __IFACE_OR_BASE));
BIO_METHOD * SAVEDS ASM LIB_BIO_s_log(REG(a6, __IFACE_OR_BASE));
BIO_METHOD * SAVEDS ASM LIB_BIO_s_bio(REG(a6, __IFACE_OR_BASE));
BIO_METHOD * SAVEDS ASM LIB_BIO_s_null(REG(a6, __IFACE_OR_BASE));
BIO_METHOD * SAVEDS ASM LIB_BIO_f_null(REG(a6, __IFACE_OR_BASE));
BIO_METHOD * SAVEDS ASM LIB_BIO_f_buffer(REG(a6, __IFACE_OR_BASE));
BIO_METHOD * SAVEDS ASM LIB_BIO_f_nbio_test(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_BIO_sock_should_retry(REG(a6, __IFACE_OR_BASE), REG(d0, int i));
int SAVEDS ASM LIB_BIO_sock_non_fatal_error(REG(a6, __IFACE_OR_BASE), REG(d0, int error));
int SAVEDS ASM LIB_BIO_fd_should_retry(REG(a6, __IFACE_OR_BASE), REG(d0, int i));
int SAVEDS ASM LIB_BIO_fd_non_fatal_error(REG(a6, __IFACE_OR_BASE), REG(d0, int error));
int SAVEDS ASM LIB_BIO_dump(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, const char * bytes), REG(d0, int len));
int SAVEDS ASM LIB_BIO_dump_indent(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, const char * bytes), REG(d0, int len), REG(d1, int indent));
struct hostent * SAVEDS ASM LIB_BIO_gethostbyname(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name));
int SAVEDS ASM LIB_BIO_sock_error(REG(a6, __IFACE_OR_BASE), REG(d0, int sock));
int SAVEDS ASM LIB_BIO_socket_ioctl(REG(a6, __IFACE_OR_BASE), REG(d0, int fd), REG(d1, long type), REG(a0, void * arg));
int SAVEDS ASM LIB_BIO_socket_nbio(REG(a6, __IFACE_OR_BASE), REG(d0, int fd), REG(d1, int mode));
int SAVEDS ASM LIB_BIO_get_port(REG(a6, __IFACE_OR_BASE), REG(a0, const char * str), REG(a1, unsigned short * port_ptr));
int SAVEDS ASM LIB_BIO_get_host_ip(REG(a6, __IFACE_OR_BASE), REG(a0, const char * str), REG(a1, unsigned char * ip));
int SAVEDS ASM LIB_BIO_get_accept_socket(REG(a6, __IFACE_OR_BASE), REG(a0, char * host_port), REG(d0, int mode));
int SAVEDS ASM LIB_BIO_accept(REG(a6, __IFACE_OR_BASE), REG(d0, int sock), REG(a0, char ** ip_port));
int SAVEDS ASM LIB_BIO_sock_init(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_BIO_sock_cleanup(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_BIO_set_tcp_ndelay(REG(a6, __IFACE_OR_BASE), REG(d0, int sock), REG(d1, int turn_on));
BIO * SAVEDS ASM LIB_BIO_new_socket(REG(a6, __IFACE_OR_BASE), REG(d0, int sock), REG(d1, int close_flag));
BIO * SAVEDS ASM LIB_BIO_new_fd(REG(a6, __IFACE_OR_BASE), REG(d0, int fd), REG(d1, int close_flag));
BIO * SAVEDS ASM LIB_BIO_new_connect(REG(a6, __IFACE_OR_BASE), REG(a0, char * host_port));
BIO * SAVEDS ASM LIB_BIO_new_accept(REG(a6, __IFACE_OR_BASE), REG(a0, char * host_port));
int SAVEDS ASM LIB_BIO_new_bio_pair(REG(a6, __IFACE_OR_BASE), REG(a0, BIO ** bio1), REG(d0, size_t writebuf1), REG(a1, BIO ** bio2), REG(d1, size_t writebuf2));
void SAVEDS ASM LIB_BIO_copy_next_retry(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b));
int SAVEDS ASM LIB_BIO_vprintf(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, const char * format), REG(a2, long * args));
int SAVEDS ASM LIB_BIO_vsnprintf(REG(a6, __IFACE_OR_BASE), REG(a0, char * buf), REG(d0, size_t n), REG(a1, const char * format), REG(a2, long * args));
void SAVEDS ASM LIB_ERR_load_BIO_strings(REG(a6, __IFACE_OR_BASE));
const BIGNUM * SAVEDS ASM LIB_BN_value_one(REG(a6, __IFACE_OR_BASE));
char * SAVEDS ASM LIB_BN_options(REG(a6, __IFACE_OR_BASE));
BN_CTX * SAVEDS ASM LIB_BN_CTX_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_BN_CTX_init(REG(a6, __IFACE_OR_BASE), REG(a0, BN_CTX * c));
void SAVEDS ASM LIB_BN_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, BN_CTX * c));
void SAVEDS ASM LIB_BN_CTX_start(REG(a6, __IFACE_OR_BASE), REG(a0, BN_CTX * ctx));
BIGNUM * SAVEDS ASM LIB_BN_CTX_get(REG(a6, __IFACE_OR_BASE), REG(a0, BN_CTX * ctx));
void SAVEDS ASM LIB_BN_CTX_end(REG(a6, __IFACE_OR_BASE), REG(a0, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_rand(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * rnd), REG(d0, int bits), REG(d1, int top), REG(d2, int bottom));
int SAVEDS ASM LIB_BN_pseudo_rand(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * rnd), REG(d0, int bits), REG(d1, int top), REG(d2, int bottom));
int SAVEDS ASM LIB_BN_rand_range(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * rnd), REG(a1, BIGNUM * range));
int SAVEDS ASM LIB_BN_pseudo_rand_range(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * rnd), REG(a1, BIGNUM * range));
int SAVEDS ASM LIB_BN_num_bits(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a));
int SAVEDS ASM LIB_BN_num_bits_word(REG(a6, __IFACE_OR_BASE), REG(d0, BN_ULONG a));
BIGNUM * SAVEDS ASM LIB_BN_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_BN_init(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a));
void SAVEDS ASM LIB_BN_clear_free(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a));
BIGNUM * SAVEDS ASM LIB_BN_copy(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a), REG(a1, const BIGNUM * b));
void SAVEDS ASM LIB_BN_swap(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a), REG(a1, BIGNUM * b));
BIGNUM * SAVEDS ASM LIB_BN_bin2bn(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * s), REG(d0, int len), REG(a1, BIGNUM * ret));
int SAVEDS ASM LIB_BN_bn2bin(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a), REG(a1, unsigned char * to));
BIGNUM * SAVEDS ASM LIB_BN_mpi2bn(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * s), REG(d0, int len), REG(a1, BIGNUM * ret));
int SAVEDS ASM LIB_BN_bn2mpi(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a), REG(a1, unsigned char * to));
int SAVEDS ASM LIB_BN_sub(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b));
int SAVEDS ASM LIB_BN_usub(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b));
int SAVEDS ASM LIB_BN_uadd(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b));
int SAVEDS ASM LIB_BN_add(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b));
int SAVEDS ASM LIB_BN_mul(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_sqr(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_div(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * dv), REG(a1, BIGNUM * rem), REG(a2, const BIGNUM * m), REG(a3, const BIGNUM * d), REG(a4, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_nnmod(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * m), REG(a2, const BIGNUM * d), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_mod_add(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, const BIGNUM * m), REG(a4, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_mod_add_quick(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, const BIGNUM * m));
int SAVEDS ASM LIB_BN_mod_sub(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, const BIGNUM * m), REG(a4, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_mod_sub_quick(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, const BIGNUM * m));
int SAVEDS ASM LIB_BN_mod_mul(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, const BIGNUM * m), REG(a4, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_mod_sqr(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * m), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_mod_lshift1(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * m), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_mod_lshift1_quick(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * m));
int SAVEDS ASM LIB_BN_mod_lshift(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(d0, int n), REG(a2, const BIGNUM * m), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_mod_lshift_quick(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(d0, int n), REG(a2, const BIGNUM * m));
BN_ULONG SAVEDS ASM LIB_BN_mod_word(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a), REG(d0, BN_ULONG w));
BN_ULONG SAVEDS ASM LIB_BN_div_word(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a), REG(d0, BN_ULONG w));
int SAVEDS ASM LIB_BN_mul_word(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a), REG(d0, BN_ULONG w));
int SAVEDS ASM LIB_BN_add_word(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a), REG(d0, BN_ULONG w));
int SAVEDS ASM LIB_BN_sub_word(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a), REG(d0, BN_ULONG w));
int SAVEDS ASM LIB_BN_set_word(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a), REG(d0, BN_ULONG w));
BN_ULONG SAVEDS ASM LIB_BN_get_word(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a));
int SAVEDS ASM LIB_BN_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a), REG(a1, const BIGNUM * b));
void SAVEDS ASM LIB_BN_free(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a));
int SAVEDS ASM LIB_BN_is_bit_set(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a), REG(d0, int n));
int SAVEDS ASM LIB_BN_lshift(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(d0, int n));
int SAVEDS ASM LIB_BN_lshift1(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a));
int SAVEDS ASM LIB_BN_exp(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_mod_exp(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, const BIGNUM * m), REG(a4, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_mod_exp_mont(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, const BIGNUM * m), REG(a4, BN_CTX * ctx), REG(d0, BN_MONT_CTX * m_ctx));
int SAVEDS ASM LIB_BN_mod_exp_mont_word(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(d0, BN_ULONG a), REG(a1, const BIGNUM * p), REG(a2, const BIGNUM * m), REG(a3, BN_CTX * ctx), REG(a4, BN_MONT_CTX * m_ctx));
int SAVEDS ASM LIB_BN_mod_exp2_mont(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a1), REG(a2, const BIGNUM * p1), REG(a3, const BIGNUM * a2), REG(a4, const BIGNUM * p2), REG(d0, const BIGNUM * m), REG(d1, BN_CTX * ctx), REG(d2, BN_MONT_CTX * m_ctx));
int SAVEDS ASM LIB_BN_mod_exp_simple(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, const BIGNUM * m), REG(a4, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_mask_bits(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a), REG(d0, int n));
int SAVEDS ASM LIB_BN_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * fp), REG(a1, const BIGNUM * a));
int SAVEDS ASM LIB_BN_reciprocal(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * m), REG(d0, int len), REG(a2, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_rshift(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(d0, int n));
int SAVEDS ASM LIB_BN_rshift1(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a));
void SAVEDS ASM LIB_BN_clear(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a));
BIGNUM * SAVEDS ASM LIB_BN_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a));
int SAVEDS ASM LIB_BN_ucmp(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a), REG(a1, const BIGNUM * b));
int SAVEDS ASM LIB_BN_set_bit(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a), REG(d0, int n));
int SAVEDS ASM LIB_BN_clear_bit(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a), REG(d0, int n));
char * SAVEDS ASM LIB_BN_bn2hex(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a));
char * SAVEDS ASM LIB_BN_bn2dec(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a));
int SAVEDS ASM LIB_BN_hex2bn(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM ** a), REG(a1, const char * str));
int SAVEDS ASM LIB_BN_dec2bn(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM ** a), REG(a1, const char * str));
int SAVEDS ASM LIB_BN_gcd(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_kronecker(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a), REG(a1, const BIGNUM * b), REG(a2, BN_CTX * ctx));
BIGNUM * SAVEDS ASM LIB_BN_mod_inverse(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * ret), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * n), REG(a3, BN_CTX * ctx));
BIGNUM * SAVEDS ASM LIB_BN_mod_sqrt(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * ret), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * n), REG(a3, BN_CTX * ctx));
BIGNUM * SAVEDS ASM LIB_BN_generate_prime(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * ret), REG(d0, int bits), REG(d1, int safe), REG(a1, const BIGNUM * add), REG(a2, const BIGNUM * rem), REG(a3, void (*callback)(int, int, void *)), REG(a4, void * cb_arg));
int SAVEDS ASM LIB_BN_is_prime(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * p), REG(d0, int nchecks), REG(a1, void (*callback)(int, int, void *)), REG(a2, BN_CTX * ctx), REG(a3, void * cb_arg));
int SAVEDS ASM LIB_BN_is_prime_fasttest(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * p), REG(d0, int nchecks), REG(a1, void (*callback)(int, int, void *)), REG(a2, BN_CTX * ctx), REG(a3, void * cb_arg), REG(d1, int do_trial_division));
BN_MONT_CTX * SAVEDS ASM LIB_BN_MONT_CTX_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_BN_MONT_CTX_init(REG(a6, __IFACE_OR_BASE), REG(a0, BN_MONT_CTX * ctx));
int SAVEDS ASM LIB_BN_mod_mul_montgomery(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, BN_MONT_CTX * mont), REG(a4, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_from_montgomery(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, BN_MONT_CTX * mont), REG(a3, BN_CTX * ctx));
void SAVEDS ASM LIB_BN_MONT_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, BN_MONT_CTX * mont));
int SAVEDS ASM LIB_BN_MONT_CTX_set(REG(a6, __IFACE_OR_BASE), REG(a0, BN_MONT_CTX * mont), REG(a1, const BIGNUM * mod), REG(a2, BN_CTX * ctx));
BN_MONT_CTX * SAVEDS ASM LIB_BN_MONT_CTX_copy(REG(a6, __IFACE_OR_BASE), REG(a0, BN_MONT_CTX * to), REG(a1, BN_MONT_CTX * from));
BN_BLINDING * SAVEDS ASM LIB_BN_BLINDING_new(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * A), REG(a1, BIGNUM * Ai), REG(a2, BIGNUM * mod));
void SAVEDS ASM LIB_BN_BLINDING_free(REG(a6, __IFACE_OR_BASE), REG(a0, BN_BLINDING * b));
int SAVEDS ASM LIB_BN_BLINDING_update(REG(a6, __IFACE_OR_BASE), REG(a0, BN_BLINDING * b), REG(a1, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_BLINDING_convert(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * n), REG(a1, BN_BLINDING * r), REG(a2, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_BLINDING_invert(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * n), REG(a1, BN_BLINDING * b), REG(a2, BN_CTX * ctx));
void SAVEDS ASM LIB_BN_set_params(REG(a6, __IFACE_OR_BASE), REG(d0, int mul), REG(d1, int high), REG(d2, int low), REG(d3, int mont));
int SAVEDS ASM LIB_BN_get_params(REG(a6, __IFACE_OR_BASE), REG(d0, int which));
void SAVEDS ASM LIB_BN_RECP_CTX_init(REG(a6, __IFACE_OR_BASE), REG(a0, BN_RECP_CTX * recp));
BN_RECP_CTX * SAVEDS ASM LIB_BN_RECP_CTX_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_BN_RECP_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, BN_RECP_CTX * recp));
int SAVEDS ASM LIB_BN_RECP_CTX_set(REG(a6, __IFACE_OR_BASE), REG(a0, BN_RECP_CTX * recp), REG(a1, const BIGNUM * rdiv), REG(a2, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_mod_mul_reciprocal(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * x), REG(a2, const BIGNUM * y), REG(a3, BN_RECP_CTX * recp), REG(a4, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_mod_exp_recp(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, const BIGNUM * m), REG(a4, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_div_recp(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * dv), REG(a1, BIGNUM * rem), REG(a2, const BIGNUM * m), REG(a3, BN_RECP_CTX * recp), REG(a4, BN_CTX * ctx));
BIGNUM * SAVEDS ASM LIB_bn_expand2(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a), REG(d0, int words));
BIGNUM * SAVEDS ASM LIB_bn_dup_expand(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a), REG(d0, int words));
BN_ULONG SAVEDS ASM LIB_bn_mul_add_words(REG(a6, __IFACE_OR_BASE), REG(a0, BN_ULONG * rp), REG(a1, const BN_ULONG * ap), REG(d0, int num), REG(d1, BN_ULONG w));
BN_ULONG SAVEDS ASM LIB_bn_mul_words(REG(a6, __IFACE_OR_BASE), REG(a0, BN_ULONG * rp), REG(a1, const BN_ULONG * ap), REG(d0, int num), REG(d1, BN_ULONG w));
void SAVEDS ASM LIB_bn_sqr_words(REG(a6, __IFACE_OR_BASE), REG(a0, BN_ULONG * rp), REG(a1, const BN_ULONG * ap), REG(d0, int num));
BN_ULONG SAVEDS ASM LIB_bn_div_words(REG(a6, __IFACE_OR_BASE), REG(d0, BN_ULONG h), REG(d1, BN_ULONG l), REG(d2, BN_ULONG d));
BN_ULONG SAVEDS ASM LIB_bn_add_words(REG(a6, __IFACE_OR_BASE), REG(a0, BN_ULONG * rp), REG(a1, const BN_ULONG * ap), REG(a2, const BN_ULONG * bp), REG(d0, int num));
BN_ULONG SAVEDS ASM LIB_bn_sub_words(REG(a6, __IFACE_OR_BASE), REG(a0, BN_ULONG * rp), REG(a1, const BN_ULONG * ap), REG(a2, const BN_ULONG * bp), REG(d0, int num));
int SAVEDS ASM LIB_BN_bntest_rand(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * rnd), REG(d0, int bits), REG(d1, int top), REG(d2, int bottom));
void SAVEDS ASM LIB_ERR_load_BN_strings(REG(a6, __IFACE_OR_BASE));
BUF_MEM * SAVEDS ASM LIB_BUF_MEM_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_BUF_MEM_free(REG(a6, __IFACE_OR_BASE), REG(a0, BUF_MEM * a));
int SAVEDS ASM LIB_BUF_MEM_grow(REG(a6, __IFACE_OR_BASE), REG(a0, BUF_MEM * str), REG(d0, int len));
int SAVEDS ASM LIB_BUF_MEM_grow_clean(REG(a6, __IFACE_OR_BASE), REG(a0, BUF_MEM * str), REG(d0, int len));
char * SAVEDS ASM LIB_BUF_strdup(REG(a6, __IFACE_OR_BASE), REG(a0, const char * str));
size_t SAVEDS ASM LIB_BUF_strlcpy(REG(a6, __IFACE_OR_BASE), REG(a0, char * dst), REG(a1, const char * src), REG(d0, size_t siz));
size_t SAVEDS ASM LIB_BUF_strlcat(REG(a6, __IFACE_OR_BASE), REG(a0, char * dst), REG(a1, const char * src), REG(d0, size_t siz));
void SAVEDS ASM LIB_ERR_load_BUF_strings(REG(a6, __IFACE_OR_BASE));
COMP_CTX * SAVEDS ASM LIB_COMP_CTX_new(REG(a6, __IFACE_OR_BASE), REG(a0, COMP_METHOD * meth));
void SAVEDS ASM LIB_COMP_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, COMP_CTX * ctx));
int SAVEDS ASM LIB_COMP_compress_block(REG(a6, __IFACE_OR_BASE), REG(a0, COMP_CTX * ctx), REG(a1, unsigned char * out), REG(d0, int olen), REG(a2, unsigned char * in), REG(d1, int ilen));
int SAVEDS ASM LIB_COMP_expand_block(REG(a6, __IFACE_OR_BASE), REG(a0, COMP_CTX * ctx), REG(a1, unsigned char * out), REG(d0, int olen), REG(a2, unsigned char * in), REG(d1, int ilen));
COMP_METHOD * SAVEDS ASM LIB_COMP_rle(REG(a6, __IFACE_OR_BASE));
COMP_METHOD * SAVEDS ASM LIB_COMP_zlib(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ERR_load_COMP_strings(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_CONF_set_default_method(REG(a6, __IFACE_OR_BASE), REG(a0, CONF_METHOD * meth));
void SAVEDS ASM LIB_CONF_set_nconf(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, LHASH_OF(CONF_VALUE) * hash));
LHASH_OF(CONF_VALUE) * SAVEDS ASM LIB_CONF_load(REG(a6, __IFACE_OR_BASE), REG(a0, LHASH_OF(CONF_VALUE) * conf), REG(a1, const char * file), REG(a2, long * eline));
LHASH_OF(CONF_VALUE) * SAVEDS ASM LIB_CONF_load_bio(REG(a6, __IFACE_OR_BASE), REG(a0, LHASH_OF(CONF_VALUE) * conf), REG(a1, BIO * bp), REG(a2, long * eline));
STACK_OF(CONF_VALUE) * SAVEDS ASM LIB_CONF_get_section(REG(a6, __IFACE_OR_BASE), REG(a0, LHASH_OF(CONF_VALUE) * conf), REG(a1, const char * section));
char * SAVEDS ASM LIB_CONF_get_string(REG(a6, __IFACE_OR_BASE), REG(a0, LHASH_OF(CONF_VALUE) * conf), REG(a1, const char * group), REG(a2, const char * name));
long SAVEDS ASM LIB_CONF_get_number(REG(a6, __IFACE_OR_BASE), REG(a0, LHASH_OF(CONF_VALUE) * conf), REG(a1, const char * group), REG(a2, const char * name));
void SAVEDS ASM LIB_CONF_free(REG(a6, __IFACE_OR_BASE), REG(a0, LHASH_OF(CONF_VALUE) * conf));
int SAVEDS ASM LIB_CONF_dump_bio(REG(a6, __IFACE_OR_BASE), REG(a0, LHASH_OF(CONF_VALUE) * conf), REG(a1, BIO * out));
void SAVEDS ASM LIB_OPENSSL_config(REG(a6, __IFACE_OR_BASE), REG(a0, const char * config_name));
void SAVEDS ASM LIB_OPENSSL_no_config(REG(a6, __IFACE_OR_BASE));
CONF * SAVEDS ASM LIB_NCONF_new(REG(a6, __IFACE_OR_BASE), REG(a0, CONF_METHOD * meth));
CONF_METHOD * SAVEDS ASM LIB_NCONF_default(REG(a6, __IFACE_OR_BASE));
CONF_METHOD * SAVEDS ASM LIB_NCONF_WIN32(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_NCONF_free(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf));
void SAVEDS ASM LIB_NCONF_free_data(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf));
int SAVEDS ASM LIB_NCONF_load(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * file), REG(a2, long * eline));
int SAVEDS ASM LIB_NCONF_load_bio(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, BIO * bp), REG(a2, long * eline));
STACK_OF(CONF_VALUE) * SAVEDS ASM LIB_NCONF_get_section(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF * conf), REG(a1, const char * section));
char * SAVEDS ASM LIB_NCONF_get_string(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF * conf), REG(a1, const char * group), REG(a2, const char * name));
int SAVEDS ASM LIB_NCONF_get_number_e(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF * conf), REG(a1, const char * group), REG(a2, const char * name), REG(a3, long * result));
int SAVEDS ASM LIB_NCONF_dump_bio(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF * conf), REG(a1, BIO * out));
int SAVEDS ASM LIB_CONF_modules_load(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF * cnf), REG(a1, const char * appname), REG(d0, unsigned long flags));
int SAVEDS ASM LIB_CONF_modules_load_file(REG(a6, __IFACE_OR_BASE), REG(a0, const char * filename), REG(a1, const char * appname), REG(d0, unsigned long flags));
void SAVEDS ASM LIB_CONF_modules_unload(REG(a6, __IFACE_OR_BASE), REG(d0, int all));
void SAVEDS ASM LIB_CONF_modules_finish(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_CONF_modules_free(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_CONF_module_add(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name), REG(a1, conf_init_func * ifunc), REG(a2, conf_finish_func * ffunc));
const char * SAVEDS ASM LIB_CONF_imodule_get_name(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF_IMODULE * md));
const char * SAVEDS ASM LIB_CONF_imodule_get_value(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF_IMODULE * md));
void * SAVEDS ASM LIB_CONF_imodule_get_usr_data(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF_IMODULE * md));
void SAVEDS ASM LIB_CONF_imodule_set_usr_data(REG(a6, __IFACE_OR_BASE), REG(a0, CONF_IMODULE * md), REG(a1, void * usr_data));
CONF_MODULE * SAVEDS ASM LIB_CONF_imodule_get_module(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF_IMODULE * md));
unsigned long SAVEDS ASM LIB_CONF_imodule_get_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF_IMODULE * md));
void SAVEDS ASM LIB_CONF_imodule_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, CONF_IMODULE * md), REG(d0, unsigned long flags));
void * SAVEDS ASM LIB_CONF_module_get_usr_data(REG(a6, __IFACE_OR_BASE), REG(a0, CONF_MODULE * pmod));
void SAVEDS ASM LIB_CONF_module_set_usr_data(REG(a6, __IFACE_OR_BASE), REG(a0, CONF_MODULE * pmod), REG(a1, void * usr_data));
char * SAVEDS ASM LIB_CONF_get1_default_config_file(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_CONF_parse_list(REG(a6, __IFACE_OR_BASE), REG(a0, const char * list), REG(d0, int sep), REG(d1, int nospc), REG(a1, int (*list_cb)(const char *elem, int len, void *usr)), REG(a2, void * arg));
void SAVEDS ASM LIB_OPENSSL_load_builtin_modules(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ERR_load_CONF_strings(REG(a6, __IFACE_OR_BASE));
CONF_VALUE * SAVEDS ASM LIB__CONF_new_section(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section));
CONF_VALUE * SAVEDS ASM LIB__CONF_get_section(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF * conf), REG(a1, const char * section));
STACK_OF(CONF_VALUE) * SAVEDS ASM LIB__CONF_get_section_values(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF * conf), REG(a1, const char * section));
int SAVEDS ASM LIB__CONF_add_string(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, CONF_VALUE * section), REG(a2, CONF_VALUE * value));
char * SAVEDS ASM LIB__CONF_get_string(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF * conf), REG(a1, const char * section), REG(a2, const char * name));
int SAVEDS ASM LIB__CONF_new_data(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf));
void SAVEDS ASM LIB__CONF_free_data(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf));
int SAVEDS ASM LIB_CRYPTO_mem_ctrl(REG(a6, __IFACE_OR_BASE), REG(d0, int mode));
int SAVEDS ASM LIB_CRYPTO_is_mem_check_on(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_SSLeay_version(REG(a6, __IFACE_OR_BASE), REG(d0, int type));
unsigned long SAVEDS ASM LIB_SSLeay(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_OPENSSL_issetugid(REG(a6, __IFACE_OR_BASE));
const CRYPTO_EX_DATA_IMPL * SAVEDS ASM LIB_CRYPTO_get_ex_data_implementation(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_CRYPTO_set_ex_data_implementation(REG(a6, __IFACE_OR_BASE), REG(a0, const CRYPTO_EX_DATA_IMPL * i));
int SAVEDS ASM LIB_CRYPTO_ex_data_new_class(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_CRYPTO_get_ex_new_index(REG(a6, __IFACE_OR_BASE), REG(d0, int class_index), REG(d1, long argl), REG(a0, void * argp), REG(a1, CRYPTO_EX_new * new_func), REG(a2, CRYPTO_EX_dup * dup_func), REG(a3, CRYPTO_EX_free * free_func));
int SAVEDS ASM LIB_CRYPTO_new_ex_data(REG(a6, __IFACE_OR_BASE), REG(d0, int class_index), REG(a0, void * obj), REG(a1, CRYPTO_EX_DATA * ad));
int SAVEDS ASM LIB_CRYPTO_dup_ex_data(REG(a6, __IFACE_OR_BASE), REG(d0, int class_index), REG(a0, CRYPTO_EX_DATA * to), REG(a1, CRYPTO_EX_DATA * from));
void SAVEDS ASM LIB_CRYPTO_free_ex_data(REG(a6, __IFACE_OR_BASE), REG(d0, int class_index), REG(a0, void * obj), REG(a1, CRYPTO_EX_DATA * ad));
int SAVEDS ASM LIB_CRYPTO_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, CRYPTO_EX_DATA * ad), REG(d0, int idx), REG(a1, void * val));
void * SAVEDS ASM LIB_CRYPTO_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, const CRYPTO_EX_DATA * ad), REG(d0, int idx));
void SAVEDS ASM LIB_CRYPTO_cleanup_all_ex_data(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_CRYPTO_get_new_lockid(REG(a6, __IFACE_OR_BASE), REG(a0, char * name));
int SAVEDS ASM LIB_CRYPTO_num_locks(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_CRYPTO_lock(REG(a6, __IFACE_OR_BASE), REG(d0, int mode), REG(d1, int type), REG(a0, const char * file), REG(d2, int line));
void SAVEDS ASM LIB_CRYPTO_set_locking_callback(REG(a6, __IFACE_OR_BASE), REG(a0, void (*func)(int mode, int type, const char *file, int line)));
void  SAVEDS ASM (*LIB_CRYPTO_get_locking_callback(REG(a6, __IFACE_OR_BASE)))(int mode, int type, const char *file, int line);
void SAVEDS ASM LIB_CRYPTO_set_add_lock_callback(REG(a6, __IFACE_OR_BASE), REG(a0, int (*func)(int *num, int mount, int type, const char *file, int line)));
int  SAVEDS ASM (*LIB_CRYPTO_get_add_lock_callback(REG(a6, __IFACE_OR_BASE)))(int *num, int mount, int type, const char *file, int line);
void SAVEDS ASM LIB_CRYPTO_set_id_callback(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned long (*func)(void)));
unsigned long  SAVEDS ASM (*LIB_CRYPTO_get_id_callback(REG(a6, __IFACE_OR_BASE)))(void);
unsigned long SAVEDS ASM LIB_CRYPTO_thread_id(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_CRYPTO_get_lock_name(REG(a6, __IFACE_OR_BASE), REG(d0, int type));
int SAVEDS ASM LIB_CRYPTO_add_lock(REG(a6, __IFACE_OR_BASE), REG(a0, int * pointer), REG(d0, int amount), REG(d1, int type), REG(a1, const char * file), REG(d2, int line));
int SAVEDS ASM LIB_CRYPTO_get_new_dynlockid(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_CRYPTO_destroy_dynlockid(REG(a6, __IFACE_OR_BASE), REG(d0, int i));
struct CRYPTO_dynlock_value * SAVEDS ASM LIB_CRYPTO_get_dynlock_value(REG(a6, __IFACE_OR_BASE), REG(d0, int i));
void SAVEDS ASM LIB_CRYPTO_set_dynlock_create_callback(REG(a6, __IFACE_OR_BASE), REG(a0, struct CRYPTO_dynlock_value * (*dyn_create_function)(const char *file, int line)));
void SAVEDS ASM LIB_CRYPTO_set_dynlock_lock_callback(REG(a6, __IFACE_OR_BASE), REG(a0, void (*dyn_lock_function)(int mode, struct CRYPTO_dynlock_value *l, const char *file, int line)));
void SAVEDS ASM LIB_CRYPTO_set_dynlock_destroy_callback(REG(a6, __IFACE_OR_BASE), REG(a0, void (*dyn_destroy_function)(struct CRYPTO_dynlock_value *l, const char *file, int line)));
struct CRYPTO_dynlock_value *  SAVEDS ASM (*LIB_CRYPTO_get_dynlock_create_callback(REG(a6, __IFACE_OR_BASE)))(const char *file, int line);
void  SAVEDS ASM (*LIB_CRYPTO_get_dynlock_lock_callback(REG(a6, __IFACE_OR_BASE)))(int mode, struct CRYPTO_dynlock_value *l, const char *file, int line);
void  SAVEDS ASM (*LIB_CRYPTO_get_dynlock_destroy_callback(REG(a6, __IFACE_OR_BASE)))(struct CRYPTO_dynlock_value *l, const char *file, int line);
int SAVEDS ASM LIB_CRYPTO_set_mem_functions(REG(a6, __IFACE_OR_BASE), REG(a0, void * (*m)(size_t)), REG(a1, void * (*r)(void *, size_t)), REG(a2, void (*f)(void *)));
int SAVEDS ASM LIB_CRYPTO_set_locked_mem_functions(REG(a6, __IFACE_OR_BASE), REG(a0, void * (*m)(size_t)), REG(a1, void (*free_func)(void *)));
int SAVEDS ASM LIB_CRYPTO_set_mem_ex_functions(REG(a6, __IFACE_OR_BASE), REG(a0, void * (*m)(size_t, const char *, int)), REG(a1, void * (*r)(void *, size_t, const char *, int)), REG(a2, void (*f)(void *)));
int SAVEDS ASM LIB_CRYPTO_set_locked_mem_ex_functions(REG(a6, __IFACE_OR_BASE), REG(a0, void * (*m)(size_t, const char *, int)), REG(a1, void (*free_func)(void *)));
int SAVEDS ASM LIB_CRYPTO_set_mem_debug_functions(REG(a6, __IFACE_OR_BASE), REG(a0, void (*m)(void *, int, const char *, int, int)), REG(a1, void (*r)(void *, void *, int, const char *, int, int)), REG(a2, void (*f)(void *, int)), REG(a3, void (*so)(long)), REG(a4, long (*go)(void)));
void SAVEDS ASM LIB_CRYPTO_get_mem_functions(REG(a6, __IFACE_OR_BASE), REG(a0, void * (**m)(size_t)), REG(a1, void * (**r)(void *, size_t)), REG(a2, void (**f)(void *)));
void SAVEDS ASM LIB_CRYPTO_get_locked_mem_functions(REG(a6, __IFACE_OR_BASE), REG(a0, void * (**m)(size_t)), REG(a1, void (**f)(void *)));
void SAVEDS ASM LIB_CRYPTO_get_mem_ex_functions(REG(a6, __IFACE_OR_BASE), REG(a0, void * (**m)(size_t, const char *, int)), REG(a1, void * (**r)(void *, size_t, const char *, int)), REG(a2, void (**f)(void *)));
void SAVEDS ASM LIB_CRYPTO_get_locked_mem_ex_functions(REG(a6, __IFACE_OR_BASE), REG(a0, void * (**m)(size_t, const char *, int)), REG(a1, void (**f)(void *)));
void SAVEDS ASM LIB_CRYPTO_get_mem_debug_functions(REG(a6, __IFACE_OR_BASE), REG(a0, void (**m)(void *, int, const char *, int, int)), REG(a1, void (**r)(void *, void *, int, const char *, int, int)), REG(a2, void (**f)(void *, int)), REG(a3, void (**so)(long)), REG(a4, long (**go)(void)));
void * SAVEDS ASM LIB_CRYPTO_malloc_locked(REG(a6, __IFACE_OR_BASE), REG(d0, int num), REG(a0, const char * file), REG(d1, int line));
void SAVEDS ASM LIB_CRYPTO_free_locked(REG(a6, __IFACE_OR_BASE), REG(a0, void * a));
void * SAVEDS ASM LIB_CRYPTO_malloc(REG(a6, __IFACE_OR_BASE), REG(d0, int num), REG(a0, const char * file), REG(d1, int line));
void SAVEDS ASM LIB_CRYPTO_free(REG(a6, __IFACE_OR_BASE), REG(a0, void * a));
void * SAVEDS ASM LIB_CRYPTO_realloc(REG(a6, __IFACE_OR_BASE), REG(a0, void * addr), REG(d0, int num), REG(a1, const char * file), REG(d1, int line));
void * SAVEDS ASM LIB_CRYPTO_realloc_clean(REG(a6, __IFACE_OR_BASE), REG(a0, void * addr), REG(d0, int old_num), REG(d1, int num), REG(a1, const char * file), REG(d2, int line));
void * SAVEDS ASM LIB_CRYPTO_remalloc(REG(a6, __IFACE_OR_BASE), REG(a0, void * addr), REG(d0, int num), REG(a1, const char * file), REG(d1, int line));
void SAVEDS ASM LIB_OPENSSL_cleanse(REG(a6, __IFACE_OR_BASE), REG(a0, void * ptr), REG(d0, size_t len));
void SAVEDS ASM LIB_CRYPTO_set_mem_debug_options(REG(a6, __IFACE_OR_BASE), REG(d0, long bits));
long SAVEDS ASM LIB_CRYPTO_get_mem_debug_options(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_CRYPTO_push_info_(REG(a6, __IFACE_OR_BASE), REG(a0, const char * info), REG(a1, const char * file), REG(d0, int line));
int SAVEDS ASM LIB_CRYPTO_pop_info(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_CRYPTO_remove_all_info(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_CRYPTO_dbg_malloc(REG(a6, __IFACE_OR_BASE), REG(a0, void * addr), REG(d0, int num), REG(a1, const char * file), REG(d1, int line), REG(d2, int before_p));
void SAVEDS ASM LIB_CRYPTO_dbg_realloc(REG(a6, __IFACE_OR_BASE), REG(a0, void * addr1), REG(a1, void * addr2), REG(d0, int num), REG(a2, const char * file), REG(d1, int line), REG(d2, int before_p));
void SAVEDS ASM LIB_CRYPTO_dbg_free(REG(a6, __IFACE_OR_BASE), REG(a0, void * addr), REG(d0, int before_p));
void SAVEDS ASM LIB_CRYPTO_dbg_set_options(REG(a6, __IFACE_OR_BASE), REG(d0, long bits));
long SAVEDS ASM LIB_CRYPTO_dbg_get_options(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_CRYPTO_mem_leaks(REG(a6, __IFACE_OR_BASE), REG(a0, struct bio_st * bio));
void SAVEDS ASM LIB_CRYPTO_mem_leaks_cb(REG(a6, __IFACE_OR_BASE), REG(a0, CRYPTO_MEM_LEAK_CB * cb));
void SAVEDS ASM LIB_OpenSSLDie(REG(a6, __IFACE_OR_BASE), REG(a0, const char * file), REG(d0, int line), REG(a1, const char * assertion));
void SAVEDS ASM LIB_ERR_load_CRYPTO_strings(REG(a6, __IFACE_OR_BASE));
DSO * SAVEDS ASM LIB_DSO_new(REG(a6, __IFACE_OR_BASE));
DSO * SAVEDS ASM LIB_DSO_new_method(REG(a6, __IFACE_OR_BASE), REG(a0, DSO_METHOD * method));
int SAVEDS ASM LIB_DSO_free(REG(a6, __IFACE_OR_BASE), REG(a0, DSO * dso));
int SAVEDS ASM LIB_DSO_flags(REG(a6, __IFACE_OR_BASE), REG(a0, DSO * dso));
int SAVEDS ASM LIB_DSO_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, DSO * dso));
long SAVEDS ASM LIB_DSO_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, DSO * dso), REG(d0, int cmd), REG(d1, long larg), REG(a1, void * parg));
int SAVEDS ASM LIB_DSO_set_name_converter(REG(a6, __IFACE_OR_BASE), REG(a0, DSO * dso), REG(d0, DSO_NAME_CONVERTER_FUNC cb), REG(a1, DSO_NAME_CONVERTER_FUNC * oldcb));
const char * SAVEDS ASM LIB_DSO_get_filename(REG(a6, __IFACE_OR_BASE), REG(a0, DSO * dso));
int SAVEDS ASM LIB_DSO_set_filename(REG(a6, __IFACE_OR_BASE), REG(a0, DSO * dso), REG(a1, const char * filename));
char * SAVEDS ASM LIB_DSO_convert_filename(REG(a6, __IFACE_OR_BASE), REG(a0, DSO * dso), REG(a1, const char * filename));
const char * SAVEDS ASM LIB_DSO_get_loaded_filename(REG(a6, __IFACE_OR_BASE), REG(a0, DSO * dso));
void SAVEDS ASM LIB_DSO_set_default_method(REG(a6, __IFACE_OR_BASE), REG(a0, DSO_METHOD * meth));
DSO_METHOD * SAVEDS ASM LIB_DSO_get_default_method(REG(a6, __IFACE_OR_BASE));
DSO_METHOD * SAVEDS ASM LIB_DSO_get_method(REG(a6, __IFACE_OR_BASE), REG(a0, DSO * dso));
DSO_METHOD * SAVEDS ASM LIB_DSO_set_method(REG(a6, __IFACE_OR_BASE), REG(a0, DSO * dso), REG(a1, DSO_METHOD * meth));
DSO * SAVEDS ASM LIB_DSO_load(REG(a6, __IFACE_OR_BASE), REG(a0, DSO * dso), REG(a1, const char * filename), REG(a2, DSO_METHOD * meth), REG(d0, int flags));
void * SAVEDS ASM LIB_DSO_bind_var(REG(a6, __IFACE_OR_BASE), REG(a0, DSO * dso), REG(a1, const char * symname));
DSO_FUNC_TYPE SAVEDS ASM LIB_DSO_bind_func(REG(a6, __IFACE_OR_BASE), REG(a0, DSO * dso), REG(a1, const char * symname));
DSO_METHOD * SAVEDS ASM LIB_DSO_METHOD_openssl(REG(a6, __IFACE_OR_BASE));
DSO_METHOD * SAVEDS ASM LIB_DSO_METHOD_null(REG(a6, __IFACE_OR_BASE));
DSO_METHOD * SAVEDS ASM LIB_DSO_METHOD_dlfcn(REG(a6, __IFACE_OR_BASE));
DSO_METHOD * SAVEDS ASM LIB_DSO_METHOD_dl(REG(a6, __IFACE_OR_BASE));
DSO_METHOD * SAVEDS ASM LIB_DSO_METHOD_win32(REG(a6, __IFACE_OR_BASE));
DSO_METHOD * SAVEDS ASM LIB_DSO_METHOD_vms(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ERR_load_DSO_strings(REG(a6, __IFACE_OR_BASE));
const EC_METHOD * SAVEDS ASM LIB_EC_GFp_simple_method(REG(a6, __IFACE_OR_BASE));
const EC_METHOD * SAVEDS ASM LIB_EC_GFp_mont_method(REG(a6, __IFACE_OR_BASE));
EC_GROUP * SAVEDS ASM LIB_EC_GROUP_new(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_METHOD * a));
void SAVEDS ASM LIB_EC_GROUP_free(REG(a6, __IFACE_OR_BASE), REG(a0, EC_GROUP * a));
void SAVEDS ASM LIB_EC_GROUP_clear_free(REG(a6, __IFACE_OR_BASE), REG(a0, EC_GROUP * a));
int SAVEDS ASM LIB_EC_GROUP_copy(REG(a6, __IFACE_OR_BASE), REG(a0, EC_GROUP * a), REG(a1, const EC_GROUP * b));
const EC_METHOD * SAVEDS ASM LIB_EC_GROUP_method_of(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a));
int SAVEDS ASM LIB_EC_GROUP_set_curve_GFp(REG(a6, __IFACE_OR_BASE), REG(a0, EC_GROUP * a1), REG(a1, const BIGNUM * p), REG(a2, const BIGNUM * a), REG(a3, const BIGNUM * b), REG(a4, BN_CTX * a2));
int SAVEDS ASM LIB_EC_GROUP_get_curve_GFp(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, BIGNUM * p), REG(a2, BIGNUM * a), REG(a3, BIGNUM * b), REG(a4, BN_CTX * a2));
EC_GROUP * SAVEDS ASM LIB_EC_GROUP_new_curve_GFp(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * p), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, BN_CTX * a1));
int SAVEDS ASM LIB_EC_GROUP_set_generator(REG(a6, __IFACE_OR_BASE), REG(a0, EC_GROUP * a1), REG(a1, const EC_POINT * generator), REG(a2, const BIGNUM * order), REG(a3, const BIGNUM * cofactor));
const EC_POINT * SAVEDS ASM LIB_EC_GROUP_get0_generator(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1));
int SAVEDS ASM LIB_EC_GROUP_get_order(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, BIGNUM * order), REG(a2, BN_CTX * a2));
int SAVEDS ASM LIB_EC_GROUP_get_cofactor(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, BIGNUM * cofactor), REG(a2, BN_CTX * a2));
EC_POINT * SAVEDS ASM LIB_EC_POINT_new(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a));
void SAVEDS ASM LIB_EC_POINT_free(REG(a6, __IFACE_OR_BASE), REG(a0, EC_POINT * a));
void SAVEDS ASM LIB_EC_POINT_clear_free(REG(a6, __IFACE_OR_BASE), REG(a0, EC_POINT * a));
int SAVEDS ASM LIB_EC_POINT_copy(REG(a6, __IFACE_OR_BASE), REG(a0, EC_POINT * a), REG(a1, const EC_POINT * b));
const EC_METHOD * SAVEDS ASM LIB_EC_POINT_method_of(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_POINT * a));
int SAVEDS ASM LIB_EC_POINT_set_to_infinity(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a), REG(a1, EC_POINT * b));
int SAVEDS ASM LIB_EC_POINT_set_Jprojective_coordinates_GFp(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, EC_POINT * a2), REG(a2, const BIGNUM * x), REG(a3, const BIGNUM * y), REG(a4, const BIGNUM * z), REG(d0, BN_CTX * a3));
int SAVEDS ASM LIB_EC_POINT_get_Jprojective_coordinates_GFp(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, const EC_POINT * a2), REG(a2, BIGNUM * x), REG(a3, BIGNUM * y), REG(a4, BIGNUM * z), REG(d0, BN_CTX * a3));
int SAVEDS ASM LIB_EC_POINT_set_affine_coordinates_GFp(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, EC_POINT * a2), REG(a2, const BIGNUM * x), REG(a3, const BIGNUM * y), REG(a4, BN_CTX * a3));
int SAVEDS ASM LIB_EC_POINT_get_affine_coordinates_GFp(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, const EC_POINT * a2), REG(a2, BIGNUM * x), REG(a3, BIGNUM * y), REG(a4, BN_CTX * a3));
int SAVEDS ASM LIB_EC_POINT_set_compressed_coordinates_GFp(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, EC_POINT * a2), REG(a2, const BIGNUM * x), REG(d0, int y_bit), REG(a3, BN_CTX * a3));
size_t SAVEDS ASM LIB_EC_POINT_point2oct(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, const EC_POINT * a2), REG(d0, point_conversion_form_t form), REG(a2, unsigned char * buf), REG(d1, size_t len), REG(a3, BN_CTX * a3));
int SAVEDS ASM LIB_EC_POINT_oct2point(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, EC_POINT * a2), REG(a2, const unsigned char * buf), REG(d0, size_t len), REG(a3, BN_CTX * a3));
int SAVEDS ASM LIB_EC_POINT_add(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, EC_POINT * r), REG(a2, const EC_POINT * a), REG(a3, const EC_POINT * b), REG(a4, BN_CTX * a2));
int SAVEDS ASM LIB_EC_POINT_dbl(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, EC_POINT * r), REG(a2, const EC_POINT * a), REG(a3, BN_CTX * a2));
int SAVEDS ASM LIB_EC_POINT_invert(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, EC_POINT * a2), REG(a2, BN_CTX * a3));
int SAVEDS ASM LIB_EC_POINT_is_at_infinity(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a), REG(a1, const EC_POINT * b));
int SAVEDS ASM LIB_EC_POINT_is_on_curve(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a), REG(a1, const EC_POINT * b), REG(a2, BN_CTX * c));
int SAVEDS ASM LIB_EC_POINT_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, const EC_POINT * a), REG(a2, const EC_POINT * b), REG(a3, BN_CTX * a2));
int SAVEDS ASM LIB_EC_POINT_make_affine(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a), REG(a1, EC_POINT * b), REG(a2, BN_CTX * c));
int SAVEDS ASM LIB_EC_POINTs_make_affine(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(d0, size_t num), REG(a1, EC_POINT ** a2), REG(a2, BN_CTX * a3));
int SAVEDS ASM LIB_EC_POINTs_mul(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, EC_POINT * r), REG(a2, const BIGNUM * a2), REG(d0, size_t num), REG(a3, const EC_POINT ** a3), REG(a4, const BIGNUM ** a4), REG(d1, BN_CTX * a5));
int SAVEDS ASM LIB_EC_POINT_mul(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, EC_POINT * r), REG(a2, const BIGNUM * a2), REG(a3, const EC_POINT * a3), REG(a4, const BIGNUM * a4), REG(d0, BN_CTX * a5));
int SAVEDS ASM LIB_EC_GROUP_precompute_mult(REG(a6, __IFACE_OR_BASE), REG(a0, EC_GROUP * a), REG(a1, BN_CTX * b));
void SAVEDS ASM LIB_ERR_load_EC_strings(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ERR_put_error(REG(a6, __IFACE_OR_BASE), REG(d0, int lib), REG(d1, int func), REG(d2, int reason), REG(a0, const char * file), REG(d3, int line));
void SAVEDS ASM LIB_ERR_set_error_data(REG(a6, __IFACE_OR_BASE), REG(a0, char * data), REG(d0, int flags));
unsigned long SAVEDS ASM LIB_ERR_get_error(REG(a6, __IFACE_OR_BASE));
unsigned long SAVEDS ASM LIB_ERR_get_error_line(REG(a6, __IFACE_OR_BASE), REG(a0, const char ** file), REG(a1, int * line));
unsigned long SAVEDS ASM LIB_ERR_get_error_line_data(REG(a6, __IFACE_OR_BASE), REG(a0, const char ** file), REG(a1, int * line), REG(a2, const char ** data), REG(a3, int * flags));
unsigned long SAVEDS ASM LIB_ERR_peek_error(REG(a6, __IFACE_OR_BASE));
unsigned long SAVEDS ASM LIB_ERR_peek_error_line(REG(a6, __IFACE_OR_BASE), REG(a0, const char ** file), REG(a1, int * line));
unsigned long SAVEDS ASM LIB_ERR_peek_error_line_data(REG(a6, __IFACE_OR_BASE), REG(a0, const char ** file), REG(a1, int * line), REG(a2, const char ** data), REG(a3, int * flags));
unsigned long SAVEDS ASM LIB_ERR_peek_last_error(REG(a6, __IFACE_OR_BASE));
unsigned long SAVEDS ASM LIB_ERR_peek_last_error_line(REG(a6, __IFACE_OR_BASE), REG(a0, const char ** file), REG(a1, int * line));
unsigned long SAVEDS ASM LIB_ERR_peek_last_error_line_data(REG(a6, __IFACE_OR_BASE), REG(a0, const char ** file), REG(a1, int * line), REG(a2, const char ** data), REG(a3, int * flags));
void SAVEDS ASM LIB_ERR_clear_error(REG(a6, __IFACE_OR_BASE));
char * SAVEDS ASM LIB_ERR_error_string(REG(a6, __IFACE_OR_BASE), REG(d0, unsigned long e), REG(a0, char * buf));
void SAVEDS ASM LIB_ERR_error_string_n(REG(a6, __IFACE_OR_BASE), REG(d0, unsigned long e), REG(a0, char * buf), REG(d1, size_t len));
const char * SAVEDS ASM LIB_ERR_lib_error_string(REG(a6, __IFACE_OR_BASE), REG(d0, unsigned long e));
const char * SAVEDS ASM LIB_ERR_func_error_string(REG(a6, __IFACE_OR_BASE), REG(d0, unsigned long e));
const char * SAVEDS ASM LIB_ERR_reason_error_string(REG(a6, __IFACE_OR_BASE), REG(d0, unsigned long e));
void SAVEDS ASM LIB_ERR_print_errors_cb(REG(a6, __IFACE_OR_BASE), REG(a0, int (*cb)(const char *str, size_t len, void *u)), REG(a1, void * u));
void SAVEDS ASM LIB_ERR_print_errors(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp));
void SAVEDS ASM LIB_ERR_load_strings(REG(a6, __IFACE_OR_BASE), REG(d0, int lib), REG(a0, ERR_STRING_DATA * str));
void SAVEDS ASM LIB_ERR_unload_strings(REG(a6, __IFACE_OR_BASE), REG(d0, int lib), REG(a0, ERR_STRING_DATA * str));
void SAVEDS ASM LIB_ERR_load_ERR_strings(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ERR_load_crypto_strings(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ERR_free_strings(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ERR_remove_state(REG(a6, __IFACE_OR_BASE), REG(d0, unsigned long pid));
ERR_STATE * SAVEDS ASM LIB_ERR_get_state(REG(a6, __IFACE_OR_BASE));
LHASH_OF(ERR_STRING_DATA) * SAVEDS ASM LIB_ERR_get_string_table(REG(a6, __IFACE_OR_BASE));
LHASH_OF(ERR_STATE) * SAVEDS ASM LIB_ERR_get_err_state_table(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ERR_release_err_state_table(REG(a6, __IFACE_OR_BASE), REG(a0, LHASH_OF(ERR_STATE) ** hash));
int SAVEDS ASM LIB_ERR_get_next_error_library(REG(a6, __IFACE_OR_BASE));
const ERR_FNS * SAVEDS ASM LIB_ERR_get_implementation(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ERR_set_implementation(REG(a6, __IFACE_OR_BASE), REG(a0, const ERR_FNS * fns));
void SAVEDS ASM LIB_EVP_MD_CTX_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx));
int SAVEDS ASM LIB_EVP_MD_CTX_cleanup(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx));
EVP_MD_CTX * SAVEDS ASM LIB_EVP_MD_CTX_create(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_EVP_MD_CTX_destroy(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx));
int SAVEDS ASM LIB_EVP_MD_CTX_copy_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * out), REG(a1, const EVP_MD_CTX * in));
int SAVEDS ASM LIB_EVP_DigestInit_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, const EVP_MD * type), REG(a2, ENGINE * impl));
int SAVEDS ASM LIB_EVP_DigestUpdate(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, const void * d), REG(d0, unsigned int cnt));
int SAVEDS ASM LIB_EVP_DigestFinal_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, unsigned char * md), REG(a2, unsigned int * s));
int SAVEDS ASM LIB_EVP_Digest(REG(a6, __IFACE_OR_BASE), REG(a0, void * data), REG(d0, unsigned int count), REG(a1, unsigned char * md), REG(a2, unsigned int * size), REG(a3, const EVP_MD * type), REG(a4, ENGINE * impl));
int SAVEDS ASM LIB_EVP_MD_CTX_copy(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * out), REG(a1, const EVP_MD_CTX * in));
int SAVEDS ASM LIB_EVP_DigestInit(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, const EVP_MD * type));
int SAVEDS ASM LIB_EVP_DigestFinal(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, unsigned char * md), REG(a2, unsigned int * s));
int SAVEDS ASM LIB_EVP_read_pw_string(REG(a6, __IFACE_OR_BASE), REG(a0, char * buf), REG(d0, int length), REG(a1, const char * prompt), REG(d1, int verify));
void SAVEDS ASM LIB_EVP_set_pw_prompt(REG(a6, __IFACE_OR_BASE), REG(a0, char * prompt));
char * SAVEDS ASM LIB_EVP_get_pw_prompt(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_EVP_BytesToKey(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * type), REG(a1, const EVP_MD * md), REG(a2, const unsigned char * salt), REG(a3, const unsigned char * data), REG(d0, int datal), REG(d1, int count), REG(a4, unsigned char * key), REG(d2, unsigned char * iv));
int SAVEDS ASM LIB_EVP_EncryptInit(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const EVP_CIPHER * cipher), REG(a2, const unsigned char * key), REG(a3, const unsigned char * iv));
int SAVEDS ASM LIB_EVP_EncryptInit_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const EVP_CIPHER * cipher), REG(a2, ENGINE * impl), REG(a3, const unsigned char * key), REG(a4, const unsigned char * iv));
int SAVEDS ASM LIB_EVP_EncryptUpdate(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, unsigned char * out), REG(a2, int * outl), REG(a3, const unsigned char * in), REG(d0, int inl));
int SAVEDS ASM LIB_EVP_EncryptFinal_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, unsigned char * out), REG(a2, int * outl));
int SAVEDS ASM LIB_EVP_EncryptFinal(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, unsigned char * out), REG(a2, int * outl));
int SAVEDS ASM LIB_EVP_DecryptInit(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const EVP_CIPHER * cipher), REG(a2, const unsigned char * key), REG(a3, const unsigned char * iv));
int SAVEDS ASM LIB_EVP_DecryptInit_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const EVP_CIPHER * cipher), REG(a2, ENGINE * impl), REG(a3, const unsigned char * key), REG(a4, const unsigned char * iv));
int SAVEDS ASM LIB_EVP_DecryptUpdate(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, unsigned char * out), REG(a2, int * outl), REG(a3, const unsigned char * in), REG(d0, int inl));
int SAVEDS ASM LIB_EVP_DecryptFinal(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, unsigned char * outm), REG(a2, int * outl));
int SAVEDS ASM LIB_EVP_DecryptFinal_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, unsigned char * outm), REG(a2, int * outl));
int SAVEDS ASM LIB_EVP_CipherInit(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const EVP_CIPHER * cipher), REG(a2, const unsigned char * key), REG(a3, const unsigned char * iv), REG(d0, int enc));
int SAVEDS ASM LIB_EVP_CipherInit_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const EVP_CIPHER * cipher), REG(a2, ENGINE * impl), REG(a3, const unsigned char * key), REG(a4, const unsigned char * iv), REG(d0, int enc));
int SAVEDS ASM LIB_EVP_CipherUpdate(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, unsigned char * out), REG(a2, int * outl), REG(a3, const unsigned char * in), REG(d0, int inl));
int SAVEDS ASM LIB_EVP_CipherFinal(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, unsigned char * outm), REG(a2, int * outl));
int SAVEDS ASM LIB_EVP_CipherFinal_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, unsigned char * outm), REG(a2, int * outl));
int SAVEDS ASM LIB_EVP_SignFinal(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, unsigned char * md), REG(a2, unsigned int * s), REG(a3, EVP_PKEY * pkey));
int SAVEDS ASM LIB_EVP_VerifyFinal(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, unsigned char * sigbuf), REG(d0, unsigned int siglen), REG(a2, EVP_PKEY * pkey));
int SAVEDS ASM LIB_EVP_OpenInit(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const EVP_CIPHER * type), REG(a2, unsigned char * ek), REG(d0, int ekl), REG(a3, unsigned char * iv), REG(a4, EVP_PKEY * priv));
int SAVEDS ASM LIB_EVP_OpenFinal(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, unsigned char * out), REG(a2, int * outl));
int SAVEDS ASM LIB_EVP_SealInit(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const EVP_CIPHER * type), REG(a2, unsigned char ** ek), REG(a3, int * ekl), REG(a4, unsigned char * iv), REG(d0, EVP_PKEY ** pubk), REG(d1, int npubk));
int SAVEDS ASM LIB_EVP_SealFinal(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, unsigned char * out), REG(a2, int * outl));
void SAVEDS ASM LIB_EVP_EncodeInit(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_ENCODE_CTX * ctx));
void SAVEDS ASM LIB_EVP_EncodeUpdate(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_ENCODE_CTX * ctx), REG(a1, unsigned char * out), REG(a2, int * outl), REG(a3, unsigned char * in), REG(d0, int inl));
void SAVEDS ASM LIB_EVP_EncodeFinal(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_ENCODE_CTX * ctx), REG(a1, unsigned char * out), REG(a2, int * outl));
int SAVEDS ASM LIB_EVP_EncodeBlock(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * t), REG(a1, const unsigned char * f), REG(d0, int n));
void SAVEDS ASM LIB_EVP_DecodeInit(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_ENCODE_CTX * ctx));
int SAVEDS ASM LIB_EVP_DecodeUpdate(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_ENCODE_CTX * ctx), REG(a1, unsigned char * out), REG(a2, int * outl), REG(a3, unsigned char * in), REG(d0, int inl));
int SAVEDS ASM LIB_EVP_DecodeFinal(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_ENCODE_CTX * ctx), REG(a1, unsigned char * out), REG(a2, int * outl));
int SAVEDS ASM LIB_EVP_DecodeBlock(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * t), REG(a1, const unsigned char * f), REG(d0, int n));
void SAVEDS ASM LIB_EVP_CIPHER_CTX_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * a));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_cleanup(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * a));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_set_key_length(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * x), REG(d0, int keylen));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_set_padding(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * c), REG(d0, int pad));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(d0, int type), REG(d1, int arg), REG(a1, void * ptr));
BIO_METHOD * SAVEDS ASM LIB_BIO_f_md(REG(a6, __IFACE_OR_BASE));
BIO_METHOD * SAVEDS ASM LIB_BIO_f_base64(REG(a6, __IFACE_OR_BASE));
BIO_METHOD * SAVEDS ASM LIB_BIO_f_cipher(REG(a6, __IFACE_OR_BASE));
BIO_METHOD * SAVEDS ASM LIB_BIO_f_reliable(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_BIO_set_cipher(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, const EVP_CIPHER * c), REG(a2, unsigned char * k), REG(a3, unsigned char * i), REG(d0, int enc));
const EVP_MD * SAVEDS ASM LIB_EVP_md_null(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_md2(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_md4(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_md5(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_sha(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_sha1(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_dss(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_dss1(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_mdc2(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_ripemd160(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_enc_null(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ede(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ede3(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ede_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ede3_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_cfb64(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_cfb1(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_cfb8(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ede_cfb64(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ede3_cfb64(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ede3_cfb1(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ede3_cfb8(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ede_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ede3_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ede_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ede3_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_desx_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_rc4(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_rc4_40(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_idea_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_idea_cfb64(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_idea_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_idea_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_rc2_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_rc2_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_rc2_40_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_rc2_64_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_rc2_cfb64(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_rc2_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_bf_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_bf_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_bf_cfb64(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_bf_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_cast5_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_cast5_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_cast5_cfb64(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_cast5_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_rc5_32_12_16_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_rc5_32_12_16_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_rc5_32_12_16_cfb64(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_rc5_32_12_16_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_128_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_128_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_128_cfb1(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_128_cfb8(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_128_cfb128(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_128_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_192_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_192_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_192_cfb1(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_192_cfb8(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_192_cfb128(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_192_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_256_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_256_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_256_cfb1(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_256_cfb8(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_256_cfb128(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_256_ofb(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OPENSSL_add_all_algorithms_noconf(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OPENSSL_add_all_algorithms_conf(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OpenSSL_add_all_ciphers(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OpenSSL_add_all_digests(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_EVP_add_cipher(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
int SAVEDS ASM LIB_EVP_add_digest(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * digest));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_get_cipherbyname(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name));
const EVP_MD * SAVEDS ASM LIB_EVP_get_digestbyname(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name));
void SAVEDS ASM LIB_EVP_cleanup(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_EVP_PKEY_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, unsigned char * out), REG(a2, size_t * outlen), REG(a3, const unsigned char * in), REG(d0, size_t inlen));
int SAVEDS ASM LIB_EVP_PKEY_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, unsigned char * out), REG(a2, size_t * outlen), REG(a3, const unsigned char * in), REG(d0, size_t inlen));
int SAVEDS ASM LIB_EVP_PKEY_type(REG(a6, __IFACE_OR_BASE), REG(d0, int type));
int SAVEDS ASM LIB_EVP_PKEY_bits(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey));
int SAVEDS ASM LIB_EVP_PKEY_size(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey));
int SAVEDS ASM LIB_EVP_PKEY_assign(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(d0, int type), REG(a1, char * key));
int SAVEDS ASM LIB_EVP_PKEY_set1_RSA(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, struct rsa_st * key));
struct rsa_st * SAVEDS ASM LIB_EVP_PKEY_get1_RSA(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey));
int SAVEDS ASM LIB_EVP_PKEY_set1_DSA(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, struct dsa_st * key));
struct dsa_st * SAVEDS ASM LIB_EVP_PKEY_get1_DSA(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey));
int SAVEDS ASM LIB_EVP_PKEY_set1_DH(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, struct dh_st * key));
struct dh_st * SAVEDS ASM LIB_EVP_PKEY_get1_DH(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey));
EVP_PKEY * SAVEDS ASM LIB_EVP_PKEY_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_EVP_PKEY_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey));
EVP_PKEY * SAVEDS ASM LIB_d2i_PublicKey(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, EVP_PKEY ** a), REG(a1, const unsigned char ** pp), REG(d1, long length));
int SAVEDS ASM LIB_i2d_PublicKey(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * a), REG(a1, unsigned char ** pp));
EVP_PKEY * SAVEDS ASM LIB_d2i_PrivateKey(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, EVP_PKEY ** a), REG(a1, const unsigned char ** pp), REG(d1, long length));
EVP_PKEY * SAVEDS ASM LIB_d2i_AutoPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
int SAVEDS ASM LIB_i2d_PrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * a), REG(a1, unsigned char ** pp));
int SAVEDS ASM LIB_EVP_PKEY_copy_parameters(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * to), REG(a1, EVP_PKEY * from));
int SAVEDS ASM LIB_EVP_PKEY_missing_parameters(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey));
int SAVEDS ASM LIB_EVP_PKEY_save_parameters(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(d0, int mode));
int SAVEDS ASM LIB_EVP_PKEY_cmp_parameters(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * a), REG(a1, EVP_PKEY * b));
int SAVEDS ASM LIB_EVP_CIPHER_type(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * ctx));
int SAVEDS ASM LIB_EVP_CIPHER_param_to_asn1(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * c), REG(a1, ASN1_TYPE * type));
int SAVEDS ASM LIB_EVP_CIPHER_asn1_to_param(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * c), REG(a1, ASN1_TYPE * type));
int SAVEDS ASM LIB_EVP_CIPHER_set_asn1_iv(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * c), REG(a1, ASN1_TYPE * type));
int SAVEDS ASM LIB_EVP_CIPHER_get_asn1_iv(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * c), REG(a1, ASN1_TYPE * type));
int SAVEDS ASM LIB_PKCS5_PBE_keyivgen(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const char * pass), REG(d0, int passlen), REG(a2, ASN1_TYPE * param), REG(a3, const EVP_CIPHER * cipher), REG(a4, const EVP_MD * md), REG(d1, int en_de));
int SAVEDS ASM LIB_PKCS5_PBKDF2_HMAC_SHA1(REG(a6, __IFACE_OR_BASE), REG(a0, const char * pass), REG(d0, int passlen), REG(a1, unsigned char * salt), REG(d1, int saltlen), REG(d2, int iter), REG(d3, int keylen), REG(a2, unsigned char * out));
int SAVEDS ASM LIB_PKCS5_v2_PBE_keyivgen(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const char * pass), REG(d0, int passlen), REG(a2, ASN1_TYPE * param), REG(a3, const EVP_CIPHER * cipher), REG(a4, const EVP_MD * md), REG(d1, int en_de));
void SAVEDS ASM LIB_PKCS5_PBE_add(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_EVP_PBE_CipherInit(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_OBJECT * pbe_obj), REG(a1, const char * pass), REG(d0, int passlen), REG(a2, ASN1_TYPE * param), REG(a3, EVP_CIPHER_CTX * ctx), REG(d1, int en_de));
int SAVEDS ASM LIB_EVP_PBE_alg_add(REG(a6, __IFACE_OR_BASE), REG(d0, int nid), REG(a0, const EVP_CIPHER * cipher), REG(a1, const EVP_MD * md), REG(a2, EVP_PBE_KEYGEN * keygen));
void SAVEDS ASM LIB_EVP_PBE_cleanup(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ERR_load_EVP_strings(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_HMAC_CTX_init(REG(a6, __IFACE_OR_BASE), REG(a0, HMAC_CTX * ctx));
void SAVEDS ASM LIB_HMAC_CTX_cleanup(REG(a6, __IFACE_OR_BASE), REG(a0, HMAC_CTX * ctx));
void SAVEDS ASM LIB_HMAC_Init(REG(a6, __IFACE_OR_BASE), REG(a0, HMAC_CTX * ctx), REG(a1, const void * key), REG(d0, int len), REG(a2, const EVP_MD * md));
void SAVEDS ASM LIB_HMAC_Init_ex(REG(a6, __IFACE_OR_BASE), REG(a0, HMAC_CTX * ctx), REG(a1, const void * key), REG(d0, int len), REG(a2, const EVP_MD * md), REG(a3, ENGINE * impl));
void SAVEDS ASM LIB_HMAC_Update(REG(a6, __IFACE_OR_BASE), REG(a0, HMAC_CTX * ctx), REG(a1, const unsigned char * data), REG(d0, int len));
void SAVEDS ASM LIB_HMAC_Final(REG(a6, __IFACE_OR_BASE), REG(a0, HMAC_CTX * ctx), REG(a1, unsigned char * md), REG(a2, unsigned int * len));
unsigned char * SAVEDS ASM LIB_HMAC(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * evp_md), REG(a1, const void * key), REG(d0, int key_len), REG(a2, const unsigned char * d), REG(d1, int n), REG(a3, unsigned char * md), REG(a4, unsigned int * md_len));
KRB5_ENCDATA * SAVEDS ASM LIB_KRB5_ENCDATA_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_KRB5_ENCDATA_free(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_ENCDATA * a));
KRB5_ENCDATA * SAVEDS ASM LIB_d2i_KRB5_ENCDATA(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_ENCDATA ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_KRB5_ENCDATA(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_ENCDATA * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_KRB5_ENCDATA_it(REG(a6, __IFACE_OR_BASE));
KRB5_PRINCNAME * SAVEDS ASM LIB_KRB5_PRINCNAME_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_KRB5_PRINCNAME_free(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_PRINCNAME * a));
KRB5_PRINCNAME * SAVEDS ASM LIB_d2i_KRB5_PRINCNAME(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_PRINCNAME ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_KRB5_PRINCNAME(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_PRINCNAME * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_KRB5_PRINCNAME_it(REG(a6, __IFACE_OR_BASE));
KRB5_TKTBODY * SAVEDS ASM LIB_KRB5_TKTBODY_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_KRB5_TKTBODY_free(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_TKTBODY * a));
KRB5_TKTBODY * SAVEDS ASM LIB_d2i_KRB5_TKTBODY(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_TKTBODY ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_KRB5_TKTBODY(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_TKTBODY * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_KRB5_TKTBODY_it(REG(a6, __IFACE_OR_BASE));
KRB5_APREQBODY * SAVEDS ASM LIB_KRB5_APREQBODY_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_KRB5_APREQBODY_free(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_APREQBODY * a));
KRB5_APREQBODY * SAVEDS ASM LIB_d2i_KRB5_APREQBODY(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_APREQBODY ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_KRB5_APREQBODY(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_APREQBODY * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_KRB5_APREQBODY_it(REG(a6, __IFACE_OR_BASE));
KRB5_TICKET * SAVEDS ASM LIB_KRB5_TICKET_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_KRB5_TICKET_free(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_TICKET * a));
KRB5_TICKET * SAVEDS ASM LIB_d2i_KRB5_TICKET(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_TICKET ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_KRB5_TICKET(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_TICKET * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_KRB5_TICKET_it(REG(a6, __IFACE_OR_BASE));
KRB5_APREQ * SAVEDS ASM LIB_KRB5_APREQ_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_KRB5_APREQ_free(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_APREQ * a));
KRB5_APREQ * SAVEDS ASM LIB_d2i_KRB5_APREQ(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_APREQ ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_KRB5_APREQ(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_APREQ * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_KRB5_APREQ_it(REG(a6, __IFACE_OR_BASE));
KRB5_CHECKSUM * SAVEDS ASM LIB_KRB5_CHECKSUM_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_KRB5_CHECKSUM_free(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_CHECKSUM * a));
KRB5_CHECKSUM * SAVEDS ASM LIB_d2i_KRB5_CHECKSUM(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_CHECKSUM ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_KRB5_CHECKSUM(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_CHECKSUM * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_KRB5_CHECKSUM_it(REG(a6, __IFACE_OR_BASE));
KRB5_ENCKEY * SAVEDS ASM LIB_KRB5_ENCKEY_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_KRB5_ENCKEY_free(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_ENCKEY * a));
KRB5_ENCKEY * SAVEDS ASM LIB_d2i_KRB5_ENCKEY(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_ENCKEY ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_KRB5_ENCKEY(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_ENCKEY * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_KRB5_ENCKEY_it(REG(a6, __IFACE_OR_BASE));
KRB5_AUTHDATA * SAVEDS ASM LIB_KRB5_AUTHDATA_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_KRB5_AUTHDATA_free(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_AUTHDATA * a));
KRB5_AUTHDATA * SAVEDS ASM LIB_d2i_KRB5_AUTHDATA(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_AUTHDATA ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_KRB5_AUTHDATA(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_AUTHDATA * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_KRB5_AUTHDATA_it(REG(a6, __IFACE_OR_BASE));
KRB5_AUTHENTBODY * SAVEDS ASM LIB_KRB5_AUTHENTBODY_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_KRB5_AUTHENTBODY_free(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_AUTHENTBODY * a));
KRB5_AUTHENTBODY * SAVEDS ASM LIB_d2i_KRB5_AUTHENTBODY(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_AUTHENTBODY ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_KRB5_AUTHENTBODY(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_AUTHENTBODY * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_KRB5_AUTHENTBODY_it(REG(a6, __IFACE_OR_BASE));
KRB5_AUTHENT * SAVEDS ASM LIB_KRB5_AUTHENT_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_KRB5_AUTHENT_free(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_AUTHENT * a));
KRB5_AUTHENT * SAVEDS ASM LIB_d2i_KRB5_AUTHENT(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_AUTHENT ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_KRB5_AUTHENT(REG(a6, __IFACE_OR_BASE), REG(a0, KRB5_AUTHENT * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_KRB5_AUTHENT_it(REG(a6, __IFACE_OR_BASE));
_LHASH * SAVEDS ASM LIB_lh_new(REG(a6, __IFACE_OR_BASE), REG(d0, LHASH_HASH_FN_TYPE h), REG(d1, LHASH_COMP_FN_TYPE c));
void SAVEDS ASM LIB_lh_free(REG(a6, __IFACE_OR_BASE), REG(a0, _LHASH * lh));
void * SAVEDS ASM LIB_lh_insert(REG(a6, __IFACE_OR_BASE), REG(a0, _LHASH * lh), REG(a1, void * data));
void * SAVEDS ASM LIB_lh_delete(REG(a6, __IFACE_OR_BASE), REG(a0, _LHASH * lh), REG(a1, const void * data));
void * SAVEDS ASM LIB_lh_retrieve(REG(a6, __IFACE_OR_BASE), REG(a0, _LHASH * lh), REG(a1, const void * data));
void SAVEDS ASM LIB_lh_doall(REG(a6, __IFACE_OR_BASE), REG(a0, _LHASH * lh), REG(d0, LHASH_DOALL_FN_TYPE func));
void SAVEDS ASM LIB_lh_doall_arg(REG(a6, __IFACE_OR_BASE), REG(a0, _LHASH * lh), REG(d0, LHASH_DOALL_ARG_FN_TYPE func), REG(a1, void * arg));
unsigned long SAVEDS ASM LIB_lh_strhash(REG(a6, __IFACE_OR_BASE), REG(a0, const char * c));
unsigned long SAVEDS ASM LIB_lh_num_items(REG(a6, __IFACE_OR_BASE), REG(a0, const _LHASH * lh));
void SAVEDS ASM LIB_lh_stats_bio(REG(a6, __IFACE_OR_BASE), REG(a0, const _LHASH * lh), REG(a1, BIO * out));
void SAVEDS ASM LIB_lh_node_stats_bio(REG(a6, __IFACE_OR_BASE), REG(a0, const _LHASH * lh), REG(a1, BIO * out));
void SAVEDS ASM LIB_lh_node_usage_stats_bio(REG(a6, __IFACE_OR_BASE), REG(a0, const _LHASH * lh), REG(a1, BIO * out));
int SAVEDS ASM LIB_OBJ_NAME_init(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_OBJ_NAME_new_index(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned long (*hash_func)(const char *)), REG(a1, int (*cmp_func)(const char *, const char *)), REG(a2, void (*free_func)(const char *, int, const char *)));
const char * SAVEDS ASM LIB_OBJ_NAME_get(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name), REG(d0, int type));
int SAVEDS ASM LIB_OBJ_NAME_add(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name), REG(d0, int type), REG(a1, const char * data));
int SAVEDS ASM LIB_OBJ_NAME_remove(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name), REG(d0, int type));
void SAVEDS ASM LIB_OBJ_NAME_cleanup(REG(a6, __IFACE_OR_BASE), REG(d0, int type));
void SAVEDS ASM LIB_OBJ_NAME_do_all(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, void (*fn)(const OBJ_NAME *, void *arg)), REG(a1, void * arg));
void SAVEDS ASM LIB_OBJ_NAME_do_all_sorted(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, void (*fn)(const OBJ_NAME *, void *arg)), REG(a1, void * arg));
ASN1_OBJECT * SAVEDS ASM LIB_OBJ_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_OBJECT * o));
ASN1_OBJECT * SAVEDS ASM LIB_OBJ_nid2obj(REG(a6, __IFACE_OR_BASE), REG(d0, int n));
const char * SAVEDS ASM LIB_OBJ_nid2ln(REG(a6, __IFACE_OR_BASE), REG(d0, int n));
const char * SAVEDS ASM LIB_OBJ_nid2sn(REG(a6, __IFACE_OR_BASE), REG(d0, int n));
int SAVEDS ASM LIB_OBJ_obj2nid(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_OBJECT * o));
ASN1_OBJECT * SAVEDS ASM LIB_OBJ_txt2obj(REG(a6, __IFACE_OR_BASE), REG(a0, const char * s), REG(d0, int no_name));
int SAVEDS ASM LIB_OBJ_obj2txt(REG(a6, __IFACE_OR_BASE), REG(a0, char * buf), REG(d0, int buf_len), REG(a1, const ASN1_OBJECT * a), REG(d1, int no_name));
int SAVEDS ASM LIB_OBJ_txt2nid(REG(a6, __IFACE_OR_BASE), REG(a0, const char * s));
int SAVEDS ASM LIB_OBJ_ln2nid(REG(a6, __IFACE_OR_BASE), REG(a0, const char * s));
int SAVEDS ASM LIB_OBJ_sn2nid(REG(a6, __IFACE_OR_BASE), REG(a0, const char * s));
int SAVEDS ASM LIB_OBJ_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_OBJECT * a), REG(a1, const ASN1_OBJECT * b));
int SAVEDS ASM LIB_OBJ_new_nid(REG(a6, __IFACE_OR_BASE), REG(d0, int num));
int SAVEDS ASM LIB_OBJ_add_object(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_OBJECT * obj));
int SAVEDS ASM LIB_OBJ_create(REG(a6, __IFACE_OR_BASE), REG(a0, const char * oid), REG(a1, const char * sn), REG(a2, const char * ln));
void SAVEDS ASM LIB_OBJ_cleanup(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_OBJ_create_objects(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in));
void SAVEDS ASM LIB_ERR_load_OBJ_strings(REG(a6, __IFACE_OR_BASE));
OCSP_RESPONSE * SAVEDS ASM LIB_OCSP_sendreq_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, char * path), REG(a2, OCSP_REQUEST * req));
OCSP_CERTID * SAVEDS ASM LIB_OCSP_cert_to_id(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * dgst), REG(a1, X509 * subject), REG(a2, X509 * issuer));
OCSP_CERTID * SAVEDS ASM LIB_OCSP_cert_id_new(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * dgst), REG(a1, X509_NAME * issuerName), REG(a2, ASN1_BIT_STRING * issuerKey), REG(a3, ASN1_INTEGER * serialNumber));
OCSP_ONEREQ * SAVEDS ASM LIB_OCSP_request_add0_id(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * req), REG(a1, OCSP_CERTID * cid));
int SAVEDS ASM LIB_OCSP_request_add1_nonce(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * req), REG(a1, unsigned char * val), REG(d0, int len));
int SAVEDS ASM LIB_OCSP_basic_add1_nonce(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * resp), REG(a1, unsigned char * val), REG(d0, int len));
int SAVEDS ASM LIB_OCSP_check_nonce(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * req), REG(a1, OCSP_BASICRESP * bs));
int SAVEDS ASM LIB_OCSP_copy_nonce(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * resp), REG(a1, OCSP_REQUEST * req));
int SAVEDS ASM LIB_OCSP_request_set1_name(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * req), REG(a1, X509_NAME * nm));
int SAVEDS ASM LIB_OCSP_request_add1_cert(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * req), REG(a1, X509 * cert));
int SAVEDS ASM LIB_OCSP_request_sign(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * req), REG(a1, X509 * signer), REG(a2, EVP_PKEY * key), REG(a3, const EVP_MD * dgst), REG(a4, STACK_OF(X509) * certs), REG(d0, unsigned long flags));
int SAVEDS ASM LIB_OCSP_response_status(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPONSE * resp));
OCSP_BASICRESP * SAVEDS ASM LIB_OCSP_response_get1_basic(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPONSE * resp));
int SAVEDS ASM LIB_OCSP_resp_count(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * bs));
OCSP_SINGLERESP * SAVEDS ASM LIB_OCSP_resp_get0(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * bs), REG(d0, int idx));
int SAVEDS ASM LIB_OCSP_resp_find(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * bs), REG(a1, OCSP_CERTID * id), REG(d0, int last));
int SAVEDS ASM LIB_OCSP_single_get0_status(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SINGLERESP * single), REG(a1, int * reason), REG(a2, ASN1_GENERALIZEDTIME ** revtime), REG(a3, ASN1_GENERALIZEDTIME ** thisupd), REG(a4, ASN1_GENERALIZEDTIME ** nextupd));
int SAVEDS ASM LIB_OCSP_resp_find_status(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * bs), REG(a1, OCSP_CERTID * id), REG(a2, int * status), REG(a3, int * reason), REG(a4, ASN1_GENERALIZEDTIME ** revtime), REG(d0, ASN1_GENERALIZEDTIME ** thisupd), REG(d1, ASN1_GENERALIZEDTIME ** nextupd));
int SAVEDS ASM LIB_OCSP_check_validity(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_GENERALIZEDTIME * thisupd), REG(a1, ASN1_GENERALIZEDTIME * nextupd), REG(d0, long sec), REG(d1, long maxsec));
int SAVEDS ASM LIB_OCSP_request_verify(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * req), REG(a1, STACK_OF(X509) * certs), REG(a2, X509_STORE * store), REG(d0, unsigned long flags));
int SAVEDS ASM LIB_OCSP_parse_url(REG(a6, __IFACE_OR_BASE), REG(a0, char * url), REG(a1, char ** phost), REG(a2, char ** pport), REG(a3, char ** ppath), REG(a4, int * pssl));
int SAVEDS ASM LIB_OCSP_id_issuer_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_CERTID * a), REG(a1, OCSP_CERTID * b));
int SAVEDS ASM LIB_OCSP_id_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_CERTID * a), REG(a1, OCSP_CERTID * b));
int SAVEDS ASM LIB_OCSP_request_onereq_count(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * req));
OCSP_ONEREQ * SAVEDS ASM LIB_OCSP_request_onereq_get0(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * req), REG(d0, int i));
OCSP_CERTID * SAVEDS ASM LIB_OCSP_onereq_get0_id(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_ONEREQ * one));
int SAVEDS ASM LIB_OCSP_id_get0_info(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_OCTET_STRING ** piNameHash), REG(a1, ASN1_OBJECT ** pmd), REG(a2, ASN1_OCTET_STRING ** pikeyHash), REG(a3, ASN1_INTEGER ** pserial), REG(a4, OCSP_CERTID * cid));
int SAVEDS ASM LIB_OCSP_request_is_signed(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * req));
OCSP_RESPONSE * SAVEDS ASM LIB_OCSP_response_create(REG(a6, __IFACE_OR_BASE), REG(d0, int status), REG(a0, OCSP_BASICRESP * bs));
OCSP_SINGLERESP * SAVEDS ASM LIB_OCSP_basic_add1_status(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * rsp), REG(a1, OCSP_CERTID * cid), REG(d0, int status), REG(d1, int reason), REG(a2, ASN1_TIME * revtime), REG(a3, ASN1_TIME * thisupd), REG(a4, ASN1_TIME * nextupd));
int SAVEDS ASM LIB_OCSP_basic_add1_cert(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * resp), REG(a1, X509 * cert));
int SAVEDS ASM LIB_OCSP_basic_sign(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * brsp), REG(a1, X509 * signer), REG(a2, EVP_PKEY * key), REG(a3, const EVP_MD * dgst), REG(a4, STACK_OF(X509) * certs), REG(d0, unsigned long flags));
X509_EXTENSION * SAVEDS ASM LIB_OCSP_crlID_new(REG(a6, __IFACE_OR_BASE), REG(a0, char * url), REG(a1, long * n), REG(a2, char * tim));
X509_EXTENSION * SAVEDS ASM LIB_OCSP_accept_responses_new(REG(a6, __IFACE_OR_BASE), REG(a0, char ** oids));
X509_EXTENSION * SAVEDS ASM LIB_OCSP_archive_cutoff_new(REG(a6, __IFACE_OR_BASE), REG(a0, char * tim));
X509_EXTENSION * SAVEDS ASM LIB_OCSP_url_svcloc_new(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * issuer), REG(a1, char ** urls));
int SAVEDS ASM LIB_OCSP_REQUEST_get_ext_count(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * x));
int SAVEDS ASM LIB_OCSP_REQUEST_get_ext_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * x), REG(d0, int nid), REG(d1, int lastpos));
int SAVEDS ASM LIB_OCSP_REQUEST_get_ext_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * x), REG(a1, ASN1_OBJECT * obj), REG(d0, int lastpos));
int SAVEDS ASM LIB_OCSP_REQUEST_get_ext_by_critical(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * x), REG(d0, int crit), REG(d1, int lastpos));
X509_EXTENSION * SAVEDS ASM LIB_OCSP_REQUEST_get_ext(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * x), REG(d0, int loc));
X509_EXTENSION * SAVEDS ASM LIB_OCSP_REQUEST_delete_ext(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * x), REG(d0, int loc));
void * SAVEDS ASM LIB_OCSP_REQUEST_get1_ext_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * x), REG(d0, int nid), REG(a1, int * crit), REG(a2, int * idx));
int SAVEDS ASM LIB_OCSP_REQUEST_add1_ext_i2d(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * x), REG(d0, int nid), REG(a1, void * value), REG(d1, int crit), REG(d2, unsigned long flags));
int SAVEDS ASM LIB_OCSP_REQUEST_add_ext(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * x), REG(a1, X509_EXTENSION * ex), REG(d0, int loc));
int SAVEDS ASM LIB_OCSP_ONEREQ_get_ext_count(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_ONEREQ * x));
int SAVEDS ASM LIB_OCSP_ONEREQ_get_ext_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_ONEREQ * x), REG(d0, int nid), REG(d1, int lastpos));
int SAVEDS ASM LIB_OCSP_ONEREQ_get_ext_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_ONEREQ * x), REG(a1, ASN1_OBJECT * obj), REG(d0, int lastpos));
int SAVEDS ASM LIB_OCSP_ONEREQ_get_ext_by_critical(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_ONEREQ * x), REG(d0, int crit), REG(d1, int lastpos));
X509_EXTENSION * SAVEDS ASM LIB_OCSP_ONEREQ_get_ext(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_ONEREQ * x), REG(d0, int loc));
X509_EXTENSION * SAVEDS ASM LIB_OCSP_ONEREQ_delete_ext(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_ONEREQ * x), REG(d0, int loc));
void * SAVEDS ASM LIB_OCSP_ONEREQ_get1_ext_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_ONEREQ * x), REG(d0, int nid), REG(a1, int * crit), REG(a2, int * idx));
int SAVEDS ASM LIB_OCSP_ONEREQ_add1_ext_i2d(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_ONEREQ * x), REG(d0, int nid), REG(a1, void * value), REG(d1, int crit), REG(d2, unsigned long flags));
int SAVEDS ASM LIB_OCSP_ONEREQ_add_ext(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_ONEREQ * x), REG(a1, X509_EXTENSION * ex), REG(d0, int loc));
int SAVEDS ASM LIB_OCSP_BASICRESP_get_ext_count(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * x));
int SAVEDS ASM LIB_OCSP_BASICRESP_get_ext_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * x), REG(d0, int nid), REG(d1, int lastpos));
int SAVEDS ASM LIB_OCSP_BASICRESP_get_ext_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * x), REG(a1, ASN1_OBJECT * obj), REG(d0, int lastpos));
int SAVEDS ASM LIB_OCSP_BASICRESP_get_ext_by_critical(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * x), REG(d0, int crit), REG(d1, int lastpos));
X509_EXTENSION * SAVEDS ASM LIB_OCSP_BASICRESP_get_ext(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * x), REG(d0, int loc));
X509_EXTENSION * SAVEDS ASM LIB_OCSP_BASICRESP_delete_ext(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * x), REG(d0, int loc));
void * SAVEDS ASM LIB_OCSP_BASICRESP_get1_ext_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * x), REG(d0, int nid), REG(a1, int * crit), REG(a2, int * idx));
int SAVEDS ASM LIB_OCSP_BASICRESP_add1_ext_i2d(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * x), REG(d0, int nid), REG(a1, void * value), REG(d1, int crit), REG(d2, unsigned long flags));
int SAVEDS ASM LIB_OCSP_BASICRESP_add_ext(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * x), REG(a1, X509_EXTENSION * ex), REG(d0, int loc));
int SAVEDS ASM LIB_OCSP_SINGLERESP_get_ext_count(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SINGLERESP * x));
int SAVEDS ASM LIB_OCSP_SINGLERESP_get_ext_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SINGLERESP * x), REG(d0, int nid), REG(d1, int lastpos));
int SAVEDS ASM LIB_OCSP_SINGLERESP_get_ext_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SINGLERESP * x), REG(a1, ASN1_OBJECT * obj), REG(d0, int lastpos));
int SAVEDS ASM LIB_OCSP_SINGLERESP_get_ext_by_critical(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SINGLERESP * x), REG(d0, int crit), REG(d1, int lastpos));
X509_EXTENSION * SAVEDS ASM LIB_OCSP_SINGLERESP_get_ext(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SINGLERESP * x), REG(d0, int loc));
X509_EXTENSION * SAVEDS ASM LIB_OCSP_SINGLERESP_delete_ext(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SINGLERESP * x), REG(d0, int loc));
void * SAVEDS ASM LIB_OCSP_SINGLERESP_get1_ext_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SINGLERESP * x), REG(d0, int nid), REG(a1, int * crit), REG(a2, int * idx));
int SAVEDS ASM LIB_OCSP_SINGLERESP_add1_ext_i2d(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SINGLERESP * x), REG(d0, int nid), REG(a1, void * value), REG(d1, int crit), REG(d2, unsigned long flags));
int SAVEDS ASM LIB_OCSP_SINGLERESP_add_ext(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SINGLERESP * x), REG(a1, X509_EXTENSION * ex), REG(d0, int loc));
OCSP_SINGLERESP * SAVEDS ASM LIB_OCSP_SINGLERESP_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_SINGLERESP_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SINGLERESP * a));
OCSP_SINGLERESP * SAVEDS ASM LIB_d2i_OCSP_SINGLERESP(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SINGLERESP ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_SINGLERESP(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SINGLERESP * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_SINGLERESP_it(REG(a6, __IFACE_OR_BASE));
OCSP_CERTSTATUS * SAVEDS ASM LIB_OCSP_CERTSTATUS_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_CERTSTATUS_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_CERTSTATUS * a));
OCSP_CERTSTATUS * SAVEDS ASM LIB_d2i_OCSP_CERTSTATUS(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_CERTSTATUS ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_CERTSTATUS(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_CERTSTATUS * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_CERTSTATUS_it(REG(a6, __IFACE_OR_BASE));
OCSP_REVOKEDINFO * SAVEDS ASM LIB_OCSP_REVOKEDINFO_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_REVOKEDINFO_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REVOKEDINFO * a));
OCSP_REVOKEDINFO * SAVEDS ASM LIB_d2i_OCSP_REVOKEDINFO(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REVOKEDINFO ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_REVOKEDINFO(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REVOKEDINFO * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_REVOKEDINFO_it(REG(a6, __IFACE_OR_BASE));
OCSP_BASICRESP * SAVEDS ASM LIB_OCSP_BASICRESP_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_BASICRESP_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * a));
OCSP_BASICRESP * SAVEDS ASM LIB_d2i_OCSP_BASICRESP(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_BASICRESP(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_BASICRESP_it(REG(a6, __IFACE_OR_BASE));
OCSP_RESPDATA * SAVEDS ASM LIB_OCSP_RESPDATA_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_RESPDATA_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPDATA * a));
OCSP_RESPDATA * SAVEDS ASM LIB_d2i_OCSP_RESPDATA(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPDATA ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_RESPDATA(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPDATA * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_RESPDATA_it(REG(a6, __IFACE_OR_BASE));
OCSP_RESPID * SAVEDS ASM LIB_OCSP_RESPID_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_RESPID_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPID * a));
OCSP_RESPID * SAVEDS ASM LIB_d2i_OCSP_RESPID(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPID ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_RESPID(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPID * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_RESPID_it(REG(a6, __IFACE_OR_BASE));
OCSP_RESPONSE * SAVEDS ASM LIB_OCSP_RESPONSE_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_RESPONSE_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPONSE * a));
OCSP_RESPONSE * SAVEDS ASM LIB_d2i_OCSP_RESPONSE(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPONSE ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_RESPONSE(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPONSE * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_RESPONSE_it(REG(a6, __IFACE_OR_BASE));
OCSP_RESPBYTES * SAVEDS ASM LIB_OCSP_RESPBYTES_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_RESPBYTES_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPBYTES * a));
OCSP_RESPBYTES * SAVEDS ASM LIB_d2i_OCSP_RESPBYTES(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPBYTES ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_RESPBYTES(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPBYTES * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_RESPBYTES_it(REG(a6, __IFACE_OR_BASE));
OCSP_ONEREQ * SAVEDS ASM LIB_OCSP_ONEREQ_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_ONEREQ_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_ONEREQ * a));
OCSP_ONEREQ * SAVEDS ASM LIB_d2i_OCSP_ONEREQ(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_ONEREQ ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_ONEREQ(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_ONEREQ * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_ONEREQ_it(REG(a6, __IFACE_OR_BASE));
OCSP_CERTID * SAVEDS ASM LIB_OCSP_CERTID_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_CERTID_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_CERTID * a));
OCSP_CERTID * SAVEDS ASM LIB_d2i_OCSP_CERTID(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_CERTID ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_CERTID(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_CERTID * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_CERTID_it(REG(a6, __IFACE_OR_BASE));
OCSP_REQUEST * SAVEDS ASM LIB_OCSP_REQUEST_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_REQUEST_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * a));
OCSP_REQUEST * SAVEDS ASM LIB_d2i_OCSP_REQUEST(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_REQUEST(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_REQUEST_it(REG(a6, __IFACE_OR_BASE));
OCSP_SIGNATURE * SAVEDS ASM LIB_OCSP_SIGNATURE_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_SIGNATURE_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SIGNATURE * a));
OCSP_SIGNATURE * SAVEDS ASM LIB_d2i_OCSP_SIGNATURE(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SIGNATURE ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_SIGNATURE(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SIGNATURE * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_SIGNATURE_it(REG(a6, __IFACE_OR_BASE));
OCSP_REQINFO * SAVEDS ASM LIB_OCSP_REQINFO_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_REQINFO_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQINFO * a));
OCSP_REQINFO * SAVEDS ASM LIB_d2i_OCSP_REQINFO(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQINFO ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_REQINFO(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQINFO * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_REQINFO_it(REG(a6, __IFACE_OR_BASE));
OCSP_CRLID * SAVEDS ASM LIB_OCSP_CRLID_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_CRLID_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_CRLID * a));
OCSP_CRLID * SAVEDS ASM LIB_d2i_OCSP_CRLID(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_CRLID ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_CRLID(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_CRLID * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_CRLID_it(REG(a6, __IFACE_OR_BASE));
OCSP_SERVICELOC * SAVEDS ASM LIB_OCSP_SERVICELOC_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_SERVICELOC_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SERVICELOC * a));
OCSP_SERVICELOC * SAVEDS ASM LIB_d2i_OCSP_SERVICELOC(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SERVICELOC ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_SERVICELOC(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SERVICELOC * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_SERVICELOC_it(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_OCSP_response_status_str(REG(a6, __IFACE_OR_BASE), REG(d0, long s));
const char * SAVEDS ASM LIB_OCSP_cert_status_str(REG(a6, __IFACE_OR_BASE), REG(d0, long s));
const char * SAVEDS ASM LIB_OCSP_crl_reason_str(REG(a6, __IFACE_OR_BASE), REG(d0, long s));
int SAVEDS ASM LIB_OCSP_REQUEST_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, OCSP_REQUEST * a), REG(d0, unsigned long flags));
int SAVEDS ASM LIB_OCSP_RESPONSE_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, OCSP_RESPONSE * o), REG(d0, unsigned long flags));
int SAVEDS ASM LIB_OCSP_basic_verify(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * bs), REG(a1, STACK_OF(X509) * certs), REG(a2, X509_STORE * st), REG(d0, unsigned long flags));
void SAVEDS ASM LIB_ERR_load_OCSP_strings(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_PEM_get_EVP_CIPHER_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, char * header), REG(a1, EVP_CIPHER_INFO * cipher));
int SAVEDS ASM LIB_PEM_do_header(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_INFO * cipher), REG(a1, unsigned char * data), REG(a2, long * len), REG(a3, pem_password_cb * callback), REG(a4, void * u));
int SAVEDS ASM LIB_PEM_read_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, char ** name), REG(a2, char ** header), REG(a3, unsigned char ** data), REG(a4, long * len));
int SAVEDS ASM LIB_PEM_write_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const char * name), REG(a2, char * hdr), REG(a3, unsigned char * data), REG(d0, long len));
int SAVEDS ASM LIB_PEM_bytes_read_bio(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char ** pdata), REG(a1, long * plen), REG(a2, char ** pnm), REG(a3, const char * name), REG(a4, BIO * bp), REG(d0, pem_password_cb * cb), REG(d1, void * u));
void * SAVEDS ASM LIB_PEM_ASN1_read_bio(REG(a6, __IFACE_OR_BASE), REG(a0, d2i_of_void * d2i), REG(a1, const char * name), REG(a2, BIO * bp), REG(a3, void ** x), REG(a4, pem_password_cb * cb), REG(d0, void * u));
int SAVEDS ASM LIB_PEM_ASN1_write_bio(REG(a6, __IFACE_OR_BASE), REG(a0, i2d_of_void * i2d), REG(a1, const char * name), REG(a2, BIO * bp), REG(a3, char * x), REG(a4, const EVP_CIPHER * enc), REG(d0, unsigned char * kstr), REG(d1, int klen), REG(d2, pem_password_cb * cb), REG(d3, void * u));
STACK_OF(X509_INFO) * SAVEDS ASM LIB_PEM_X509_INFO_read_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, STACK_OF(X509_INFO) * sk), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_X509_INFO_write_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_INFO * xi), REG(a2, EVP_CIPHER * enc), REG(a3, unsigned char * kstr), REG(d0, int klen), REG(a4, pem_password_cb * cd), REG(d1, void * u));
int SAVEDS ASM LIB_PEM_SealInit(REG(a6, __IFACE_OR_BASE), REG(a0, PEM_ENCODE_SEAL_CTX * ctx), REG(a1, EVP_CIPHER * type), REG(a2, EVP_MD * md_type), REG(a3, unsigned char ** ek), REG(a4, int * ekl), REG(d0, unsigned char * iv), REG(d1, EVP_PKEY ** pubk), REG(d2, int npubk));
void SAVEDS ASM LIB_PEM_SealUpdate(REG(a6, __IFACE_OR_BASE), REG(a0, PEM_ENCODE_SEAL_CTX * ctx), REG(a1, unsigned char * out), REG(a2, int * outl), REG(a3, unsigned char * in), REG(d0, int inl));
int SAVEDS ASM LIB_PEM_SealFinal(REG(a6, __IFACE_OR_BASE), REG(a0, PEM_ENCODE_SEAL_CTX * ctx), REG(a1, unsigned char * sig), REG(a2, int * sigl), REG(a3, unsigned char * out), REG(a4, int * outl), REG(d0, EVP_PKEY * priv));
void SAVEDS ASM LIB_PEM_SignInit(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, EVP_MD * type));
void SAVEDS ASM LIB_PEM_SignUpdate(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, unsigned char * d), REG(d0, unsigned int cnt));
int SAVEDS ASM LIB_PEM_SignFinal(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, unsigned char * sigret), REG(a2, unsigned int * siglen), REG(a3, EVP_PKEY * pkey));
int SAVEDS ASM LIB_PEM_def_callback(REG(a6, __IFACE_OR_BASE), REG(a0, char * buf), REG(d0, int num), REG(d1, int w), REG(a1, void * key));
void SAVEDS ASM LIB_PEM_proc_type(REG(a6, __IFACE_OR_BASE), REG(a0, char * buf), REG(d0, int type));
void SAVEDS ASM LIB_PEM_dek_info(REG(a6, __IFACE_OR_BASE), REG(a0, char * buf), REG(a1, const char * type), REG(d0, int len), REG(a2, char * str));
X509 * SAVEDS ASM LIB_PEM_read_bio_X509(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509 ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_X509(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509 * x));
X509 * SAVEDS ASM LIB_PEM_read_bio_X509_AUX(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509 ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_X509_AUX(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509 * x));
X509_REQ * SAVEDS ASM LIB_PEM_read_bio_X509_REQ(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_REQ ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_X509_REQ(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_REQ * x));
int SAVEDS ASM LIB_PEM_write_bio_X509_REQ_NEW(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_REQ * x));
X509_CRL * SAVEDS ASM LIB_PEM_read_bio_X509_CRL(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_CRL ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_X509_CRL(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_CRL * x));
PKCS7 * SAVEDS ASM LIB_PEM_read_bio_PKCS7(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, PKCS7 ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_PKCS7(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, PKCS7 * x));
NETSCAPE_CERT_SEQUENCE * SAVEDS ASM LIB_PEM_read_bio_NETSCAPE_CERT_SEQUENCE(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, NETSCAPE_CERT_SEQUENCE ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_NETSCAPE_CERT_SEQUENCE(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, NETSCAPE_CERT_SEQUENCE * x));
X509_SIG * SAVEDS ASM LIB_PEM_read_bio_PKCS8(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_SIG ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_PKCS8(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_SIG * x));
PKCS8_PRIV_KEY_INFO * SAVEDS ASM LIB_PEM_read_bio_PKCS8_PRIV_KEY_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, PKCS8_PRIV_KEY_INFO ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_PKCS8_PRIV_KEY_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, PKCS8_PRIV_KEY_INFO * x));
RSA * SAVEDS ASM LIB_PEM_read_bio_RSAPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, RSA ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_RSAPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, RSA * x), REG(a2, const EVP_CIPHER * enc), REG(a3, unsigned char * kstr), REG(d0, int klen), REG(a4, pem_password_cb * cb), REG(d1, void * u));
RSA * SAVEDS ASM LIB_PEM_read_bio_RSAPublicKey(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, RSA ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_RSAPublicKey(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, RSA * x));
RSA * SAVEDS ASM LIB_PEM_read_bio_RSA_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, RSA ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_RSA_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, RSA * x));
DSA * SAVEDS ASM LIB_PEM_read_bio_DSAPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, DSA ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_DSAPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, DSA * x), REG(a2, const EVP_CIPHER * enc), REG(a3, unsigned char * kstr), REG(d0, int klen), REG(a4, pem_password_cb * cb), REG(d1, void * u));
DSA * SAVEDS ASM LIB_PEM_read_bio_DSA_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, DSA ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_DSA_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, DSA * x));
DSA * SAVEDS ASM LIB_PEM_read_bio_DSAparams(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, DSA ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_DSAparams(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, DSA * x));
DH * SAVEDS ASM LIB_PEM_read_bio_DHparams(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, DH ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_DHparams(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, DH * x));
EVP_PKEY * SAVEDS ASM LIB_PEM_read_bio_PrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EVP_PKEY ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_PrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EVP_PKEY * x), REG(a2, const EVP_CIPHER * enc), REG(a3, unsigned char * kstr), REG(d0, int klen), REG(a4, pem_password_cb * cb), REG(d1, void * u));
EVP_PKEY * SAVEDS ASM LIB_PEM_read_bio_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EVP_PKEY ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EVP_PKEY * x));
int SAVEDS ASM LIB_PEM_write_bio_PKCS8PrivateKey_nid(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EVP_PKEY * x), REG(d0, int nid), REG(a2, char * kstr), REG(d1, int klen), REG(a3, pem_password_cb * cb), REG(a4, void * u));
int SAVEDS ASM LIB_PEM_write_bio_PKCS8PrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * a), REG(a1, EVP_PKEY * b), REG(a2, const EVP_CIPHER * c), REG(a3, char * d), REG(d0, int a1), REG(a4, pem_password_cb * e), REG(d1, void * f));
int SAVEDS ASM LIB_i2d_PKCS8PrivateKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EVP_PKEY * x), REG(a2, const EVP_CIPHER * enc), REG(a3, char * kstr), REG(d0, int klen), REG(a4, pem_password_cb * cb), REG(d1, void * u));
int SAVEDS ASM LIB_i2d_PKCS8PrivateKey_nid_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EVP_PKEY * x), REG(d0, int nid), REG(a2, char * kstr), REG(d1, int klen), REG(a3, pem_password_cb * cb), REG(a4, void * u));
EVP_PKEY * SAVEDS ASM LIB_d2i_PKCS8PrivateKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EVP_PKEY ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
void SAVEDS ASM LIB_ERR_load_PEM_strings(REG(a6, __IFACE_OR_BASE));
PKCS12_SAFEBAG * SAVEDS ASM LIB_PKCS12_x5092certbag(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x509));
PKCS12_SAFEBAG * SAVEDS ASM LIB_PKCS12_x509crl2certbag(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * crl));
X509 * SAVEDS ASM LIB_PKCS12_certbag2x509(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_SAFEBAG * bag));
X509_CRL * SAVEDS ASM LIB_PKCS12_certbag2x509crl(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_SAFEBAG * bag));
PKCS12_SAFEBAG * SAVEDS ASM LIB_PKCS12_item_pack_safebag(REG(a6, __IFACE_OR_BASE), REG(a0, void * obj), REG(a1, const ASN1_ITEM * it), REG(d0, int nid1), REG(d1, int nid2));
PKCS12_SAFEBAG * SAVEDS ASM LIB_PKCS12_MAKE_KEYBAG(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS8_PRIV_KEY_INFO * p8));
PKCS8_PRIV_KEY_INFO * SAVEDS ASM LIB_PKCS8_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, X509_SIG * p8), REG(a1, const char * pass), REG(d0, int passlen));
PKCS8_PRIV_KEY_INFO * SAVEDS ASM LIB_PKCS12_decrypt_skey(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_SAFEBAG * bag), REG(a1, const char * pass), REG(d0, int passlen));
X509_SIG * SAVEDS ASM LIB_PKCS8_encrypt(REG(a6, __IFACE_OR_BASE), REG(d0, int pbe_nid), REG(a0, const EVP_CIPHER * cipher), REG(a1, const char * pass), REG(d1, int passlen), REG(a2, unsigned char * salt), REG(d2, int saltlen), REG(d3, int iter), REG(a3, PKCS8_PRIV_KEY_INFO * p8));
PKCS12_SAFEBAG * SAVEDS ASM LIB_PKCS12_MAKE_SHKEYBAG(REG(a6, __IFACE_OR_BASE), REG(d0, int pbe_nid), REG(a0, const char * pass), REG(d1, int passlen), REG(a1, unsigned char * salt), REG(d2, int saltlen), REG(d3, int iter), REG(a2, PKCS8_PRIV_KEY_INFO * p8));
PKCS7 * SAVEDS ASM LIB_PKCS12_pack_p7data(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(PKCS12_SAFEBAG) * sk));
STACK_OF(PKCS12_SAFEBAG) * SAVEDS ASM LIB_PKCS12_unpack_p7data(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7));
PKCS7 * SAVEDS ASM LIB_PKCS12_pack_p7encdata(REG(a6, __IFACE_OR_BASE), REG(d0, int pbe_nid), REG(a0, const char * pass), REG(d1, int passlen), REG(a1, unsigned char * salt), REG(d2, int saltlen), REG(d3, int iter), REG(a2, STACK_OF(PKCS12_SAFEBAG) * bags));
STACK_OF(PKCS12_SAFEBAG) * SAVEDS ASM LIB_PKCS12_unpack_p7encdata(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, const char * pass), REG(d0, int passlen));
int SAVEDS ASM LIB_PKCS12_pack_authsafes(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12 * p12), REG(a1, STACK_OF(PKCS7) * safes));
STACK_OF(PKCS7) * SAVEDS ASM LIB_PKCS12_unpack_authsafes(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12 * p12));
int SAVEDS ASM LIB_PKCS12_add_localkeyid(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_SAFEBAG * bag), REG(a1, unsigned char * name), REG(d0, int namelen));
int SAVEDS ASM LIB_PKCS12_add_friendlyname_asc(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_SAFEBAG * bag), REG(a1, const char * name), REG(d0, int namelen));
int SAVEDS ASM LIB_PKCS12_add_CSPName_asc(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_SAFEBAG * bag), REG(a1, const char * name), REG(d0, int namelen));
int SAVEDS ASM LIB_PKCS12_add_friendlyname_uni(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_SAFEBAG * bag), REG(a1, const unsigned char * name), REG(d0, int namelen));
int SAVEDS ASM LIB_PKCS8_add_keyusage(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS8_PRIV_KEY_INFO * p8), REG(d0, int usage));
ASN1_TYPE * SAVEDS ASM LIB_PKCS12_get_attr_gen(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_ATTRIBUTE) * attrs), REG(d0, int attr_nid));
char * SAVEDS ASM LIB_PKCS12_get_friendlyname(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_SAFEBAG * bag));
unsigned char * SAVEDS ASM LIB_PKCS12_pbe_crypt(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ALGOR * algor), REG(a1, const char * pass), REG(d0, int passlen), REG(a2, unsigned char * in), REG(d1, int inlen), REG(a3, unsigned char ** data), REG(a4, int * datalen), REG(d2, int en_de));
void * SAVEDS ASM LIB_PKCS12_item_decrypt_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ALGOR * algor), REG(a1, const ASN1_ITEM * it), REG(a2, const char * pass), REG(d0, int passlen), REG(a3, ASN1_OCTET_STRING * oct), REG(d1, int zbuf));
ASN1_OCTET_STRING * SAVEDS ASM LIB_PKCS12_item_i2d_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ALGOR * algor), REG(a1, const ASN1_ITEM * it), REG(a2, const char * pass), REG(d0, int passlen), REG(a3, void * obj), REG(d1, int zbuf));
PKCS12 * SAVEDS ASM LIB_PKCS12_init(REG(a6, __IFACE_OR_BASE), REG(d0, int mode));
int SAVEDS ASM LIB_PKCS12_key_gen_asc(REG(a6, __IFACE_OR_BASE), REG(a0, const char * pass), REG(d0, int passlen), REG(a1, unsigned char * salt), REG(d1, int saltlen), REG(d2, int id), REG(d3, int iter), REG(d4, int n), REG(a2, unsigned char * out), REG(a3, const EVP_MD * md_type));
int SAVEDS ASM LIB_PKCS12_key_gen_uni(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * pass), REG(d0, int passlen), REG(a1, unsigned char * salt), REG(d1, int saltlen), REG(d2, int id), REG(d3, int iter), REG(d4, int n), REG(a2, unsigned char * out), REG(a3, const EVP_MD * md_type));
int SAVEDS ASM LIB_PKCS12_PBE_keyivgen(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const char * pass), REG(d0, int passlen), REG(a2, ASN1_TYPE * param), REG(a3, const EVP_CIPHER * cipher), REG(a4, const EVP_MD * md_type), REG(d1, int en_de));
int SAVEDS ASM LIB_PKCS12_gen_mac(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12 * p12), REG(a1, const char * pass), REG(d0, int passlen), REG(a2, unsigned char * mac), REG(a3, unsigned int * maclen));
int SAVEDS ASM LIB_PKCS12_verify_mac(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12 * p12), REG(a1, const char * pass), REG(d0, int passlen));
int SAVEDS ASM LIB_PKCS12_set_mac(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12 * p12), REG(a1, const char * pass), REG(d0, int passlen), REG(a2, unsigned char * salt), REG(d1, int saltlen), REG(d2, int iter), REG(a3, const EVP_MD * md_type));
int SAVEDS ASM LIB_PKCS12_setup_mac(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12 * p12), REG(d0, int iter), REG(a1, unsigned char * salt), REG(d1, int saltlen), REG(a2, const EVP_MD * md_type));
unsigned char * SAVEDS ASM LIB_OPENSSL_asc2uni(REG(a6, __IFACE_OR_BASE), REG(a0, const char * asc), REG(d0, int asclen), REG(a1, unsigned char ** uni), REG(a2, int * unilen));
char * SAVEDS ASM LIB_OPENSSL_uni2asc(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * uni), REG(d0, int unilen));
PKCS12 * SAVEDS ASM LIB_PKCS12_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS12_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12 * a));
PKCS12 * SAVEDS ASM LIB_d2i_PKCS12(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12 ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS12(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12 * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS12_it(REG(a6, __IFACE_OR_BASE));
PKCS12_MAC_DATA * SAVEDS ASM LIB_PKCS12_MAC_DATA_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS12_MAC_DATA_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_MAC_DATA * a));
PKCS12_MAC_DATA * SAVEDS ASM LIB_d2i_PKCS12_MAC_DATA(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_MAC_DATA ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS12_MAC_DATA(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_MAC_DATA * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS12_MAC_DATA_it(REG(a6, __IFACE_OR_BASE));
PKCS12_SAFEBAG * SAVEDS ASM LIB_PKCS12_SAFEBAG_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS12_SAFEBAG_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_SAFEBAG * a));
PKCS12_SAFEBAG * SAVEDS ASM LIB_d2i_PKCS12_SAFEBAG(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_SAFEBAG ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS12_SAFEBAG(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_SAFEBAG * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS12_SAFEBAG_it(REG(a6, __IFACE_OR_BASE));
PKCS12_BAGS * SAVEDS ASM LIB_PKCS12_BAGS_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS12_BAGS_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_BAGS * a));
PKCS12_BAGS * SAVEDS ASM LIB_d2i_PKCS12_BAGS(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_BAGS ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS12_BAGS(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_BAGS * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS12_BAGS_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS12_SAFEBAGS_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS12_AUTHSAFES_it(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS12_PBE_add(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_PKCS12_parse(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12 * p12), REG(a1, const char * pass), REG(a2, EVP_PKEY ** pkey), REG(a3, X509 ** cert), REG(a4, STACK_OF(X509) ** ca));
PKCS12 * SAVEDS ASM LIB_PKCS12_create(REG(a6, __IFACE_OR_BASE), REG(a0, char * pass), REG(a1, char * name), REG(a2, EVP_PKEY * pkey), REG(a3, X509 * cert), REG(a4, STACK_OF(X509) * ca), REG(d0, int nid_key), REG(d1, int nid_cert), REG(d2, int iter), REG(d3, int mac_iter), REG(d4, int keytype));
int SAVEDS ASM LIB_i2d_PKCS12_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, PKCS12 * p12));
PKCS12 * SAVEDS ASM LIB_d2i_PKCS12_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, PKCS12 ** p12));
int SAVEDS ASM LIB_PKCS12_newpass(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12 * p12), REG(a1, char * oldpass), REG(a2, char * newpass));
void SAVEDS ASM LIB_ERR_load_PKCS12_strings(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_PKCS7_ISSUER_AND_SERIAL_digest(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_ISSUER_AND_SERIAL * data), REG(a1, const EVP_MD * type), REG(a2, unsigned char * md), REG(a3, unsigned int * len));
PKCS7 * SAVEDS ASM LIB_PKCS7_dup(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7));
PKCS7 * SAVEDS ASM LIB_d2i_PKCS7_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, PKCS7 ** p7));
int SAVEDS ASM LIB_i2d_PKCS7_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, PKCS7 * p7));
PKCS7_ISSUER_AND_SERIAL * SAVEDS ASM LIB_PKCS7_ISSUER_AND_SERIAL_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS7_ISSUER_AND_SERIAL_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_ISSUER_AND_SERIAL * a));
PKCS7_ISSUER_AND_SERIAL * SAVEDS ASM LIB_d2i_PKCS7_ISSUER_AND_SERIAL(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_ISSUER_AND_SERIAL ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS7_ISSUER_AND_SERIAL(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_ISSUER_AND_SERIAL * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS7_ISSUER_AND_SERIAL_it(REG(a6, __IFACE_OR_BASE));
PKCS7_SIGNER_INFO * SAVEDS ASM LIB_PKCS7_SIGNER_INFO_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS7_SIGNER_INFO_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * a));
PKCS7_SIGNER_INFO * SAVEDS ASM LIB_d2i_PKCS7_SIGNER_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS7_SIGNER_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS7_SIGNER_INFO_it(REG(a6, __IFACE_OR_BASE));
PKCS7_RECIP_INFO * SAVEDS ASM LIB_PKCS7_RECIP_INFO_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS7_RECIP_INFO_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_RECIP_INFO * a));
PKCS7_RECIP_INFO * SAVEDS ASM LIB_d2i_PKCS7_RECIP_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_RECIP_INFO ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS7_RECIP_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_RECIP_INFO * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS7_RECIP_INFO_it(REG(a6, __IFACE_OR_BASE));
PKCS7_SIGNED * SAVEDS ASM LIB_PKCS7_SIGNED_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS7_SIGNED_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNED * a));
PKCS7_SIGNED * SAVEDS ASM LIB_d2i_PKCS7_SIGNED(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNED ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS7_SIGNED(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNED * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS7_SIGNED_it(REG(a6, __IFACE_OR_BASE));
PKCS7_ENC_CONTENT * SAVEDS ASM LIB_PKCS7_ENC_CONTENT_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS7_ENC_CONTENT_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_ENC_CONTENT * a));
PKCS7_ENC_CONTENT * SAVEDS ASM LIB_d2i_PKCS7_ENC_CONTENT(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_ENC_CONTENT ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS7_ENC_CONTENT(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_ENC_CONTENT * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS7_ENC_CONTENT_it(REG(a6, __IFACE_OR_BASE));
PKCS7_ENVELOPE * SAVEDS ASM LIB_PKCS7_ENVELOPE_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS7_ENVELOPE_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_ENVELOPE * a));
PKCS7_ENVELOPE * SAVEDS ASM LIB_d2i_PKCS7_ENVELOPE(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_ENVELOPE ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS7_ENVELOPE(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_ENVELOPE * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS7_ENVELOPE_it(REG(a6, __IFACE_OR_BASE));
PKCS7_SIGN_ENVELOPE * SAVEDS ASM LIB_PKCS7_SIGN_ENVELOPE_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS7_SIGN_ENVELOPE_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGN_ENVELOPE * a));
PKCS7_SIGN_ENVELOPE * SAVEDS ASM LIB_d2i_PKCS7_SIGN_ENVELOPE(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGN_ENVELOPE ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS7_SIGN_ENVELOPE(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGN_ENVELOPE * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS7_SIGN_ENVELOPE_it(REG(a6, __IFACE_OR_BASE));
PKCS7_DIGEST * SAVEDS ASM LIB_PKCS7_DIGEST_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS7_DIGEST_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_DIGEST * a));
PKCS7_DIGEST * SAVEDS ASM LIB_d2i_PKCS7_DIGEST(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_DIGEST ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS7_DIGEST(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_DIGEST * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS7_DIGEST_it(REG(a6, __IFACE_OR_BASE));
PKCS7_ENCRYPT * SAVEDS ASM LIB_PKCS7_ENCRYPT_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS7_ENCRYPT_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_ENCRYPT * a));
PKCS7_ENCRYPT * SAVEDS ASM LIB_d2i_PKCS7_ENCRYPT(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_ENCRYPT ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS7_ENCRYPT(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_ENCRYPT * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS7_ENCRYPT_it(REG(a6, __IFACE_OR_BASE));
PKCS7 * SAVEDS ASM LIB_PKCS7_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS7_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * a));
PKCS7 * SAVEDS ASM LIB_d2i_PKCS7(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS7(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS7_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS7_ATTR_SIGN_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS7_ATTR_VERIFY_it(REG(a6, __IFACE_OR_BASE));
long SAVEDS ASM LIB_PKCS7_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(d0, int cmd), REG(d1, long larg), REG(a1, char * parg));
int SAVEDS ASM LIB_PKCS7_set_type(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(d0, int type));
int SAVEDS ASM LIB_PKCS7_set_content(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, PKCS7 * p7_data));
int SAVEDS ASM LIB_PKCS7_SIGNER_INFO_set(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * p7i), REG(a1, X509 * x509), REG(a2, EVP_PKEY * pkey), REG(a3, const EVP_MD * dgst));
int SAVEDS ASM LIB_PKCS7_add_signer(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, PKCS7_SIGNER_INFO * p7i));
int SAVEDS ASM LIB_PKCS7_add_certificate(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, X509 * x509));
int SAVEDS ASM LIB_PKCS7_add_crl(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, X509_CRL * x509));
int SAVEDS ASM LIB_PKCS7_content_new(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(d0, int nid));
int SAVEDS ASM LIB_PKCS7_dataVerify(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * cert_store), REG(a1, X509_STORE_CTX * ctx), REG(a2, BIO * bio), REG(a3, PKCS7 * p7), REG(a4, PKCS7_SIGNER_INFO * si));
int SAVEDS ASM LIB_PKCS7_signatureVerify(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, PKCS7 * p7), REG(a2, PKCS7_SIGNER_INFO * si), REG(a3, X509 * x509));
BIO * SAVEDS ASM LIB_PKCS7_dataInit(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, BIO * bio));
int SAVEDS ASM LIB_PKCS7_dataFinal(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, BIO * bio));
BIO * SAVEDS ASM LIB_PKCS7_dataDecode(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, EVP_PKEY * pkey), REG(a2, BIO * in_bio), REG(a3, X509 * pcert));
PKCS7_SIGNER_INFO * SAVEDS ASM LIB_PKCS7_add_signature(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, X509 * x509), REG(a2, EVP_PKEY * pkey), REG(a3, const EVP_MD * dgst));
X509 * SAVEDS ASM LIB_PKCS7_cert_from_signer_info(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, PKCS7_SIGNER_INFO * si));
STACK_OF(PKCS7_SIGNER_INFO) * SAVEDS ASM LIB_PKCS7_get_signer_info(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7));
PKCS7_RECIP_INFO * SAVEDS ASM LIB_PKCS7_add_recipient(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, X509 * x509));
int SAVEDS ASM LIB_PKCS7_add_recipient_info(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, PKCS7_RECIP_INFO * ri));
int SAVEDS ASM LIB_PKCS7_RECIP_INFO_set(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_RECIP_INFO * p7i), REG(a1, X509 * x509));
int SAVEDS ASM LIB_PKCS7_set_cipher(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, const EVP_CIPHER * cipher));
PKCS7_ISSUER_AND_SERIAL * SAVEDS ASM LIB_PKCS7_get_issuer_and_serial(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(d0, int idx));
ASN1_OCTET_STRING * SAVEDS ASM LIB_PKCS7_digest_from_attributes(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_ATTRIBUTE) * sk));
int SAVEDS ASM LIB_PKCS7_add_signed_attribute(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * p7si), REG(d0, int nid), REG(d1, int type), REG(a1, void * data));
int SAVEDS ASM LIB_PKCS7_add_attribute(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * p7si), REG(d0, int nid), REG(d1, int atrtype), REG(a1, void * value));
ASN1_TYPE * SAVEDS ASM LIB_PKCS7_get_attribute(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * si), REG(d0, int nid));
ASN1_TYPE * SAVEDS ASM LIB_PKCS7_get_signed_attribute(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * si), REG(d0, int nid));
int SAVEDS ASM LIB_PKCS7_set_signed_attributes(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * p7si), REG(a1, STACK_OF(X509_ATTRIBUTE) * sk));
int SAVEDS ASM LIB_PKCS7_set_attributes(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * p7si), REG(a1, STACK_OF(X509_ATTRIBUTE) * sk));
PKCS7 * SAVEDS ASM LIB_PKCS7_sign(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * signcert), REG(a1, EVP_PKEY * pkey), REG(a2, STACK_OF(X509) * certs), REG(a3, BIO * data), REG(d0, int flags));
int SAVEDS ASM LIB_PKCS7_verify(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, STACK_OF(X509) * certs), REG(a2, X509_STORE * store), REG(a3, BIO * indata), REG(a4, BIO * out), REG(d0, int flags));
STACK_OF(X509) * SAVEDS ASM LIB_PKCS7_get0_signers(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, STACK_OF(X509) * certs), REG(d0, int flags));
PKCS7 * SAVEDS ASM LIB_PKCS7_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509) * certs), REG(a1, BIO * in), REG(a2, const EVP_CIPHER * cipher), REG(d0, int flags));
int SAVEDS ASM LIB_PKCS7_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, EVP_PKEY * pkey), REG(a2, X509 * cert), REG(a3, BIO * data), REG(d0, int flags));
int SAVEDS ASM LIB_PKCS7_add_attrib_smimecap(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * si), REG(a1, STACK_OF(X509_ALGOR) * cap));
STACK_OF(X509_ALGOR) * SAVEDS ASM LIB_PKCS7_get_smimecap(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * si));
int SAVEDS ASM LIB_PKCS7_simple_smimecap(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_ALGOR) * sk), REG(d0, int nid), REG(d1, int arg));
int SAVEDS ASM LIB_SMIME_write_PKCS7(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, PKCS7 * p7), REG(a2, BIO * data), REG(d0, int flags));
PKCS7 * SAVEDS ASM LIB_SMIME_read_PKCS7(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, BIO ** bcont));
int SAVEDS ASM LIB_SMIME_crlf_copy(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in), REG(a1, BIO * out), REG(d0, int flags));
int SAVEDS ASM LIB_SMIME_text(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in), REG(a1, BIO * out));
void SAVEDS ASM LIB_ERR_load_PKCS7_strings(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_RAND_set_rand_method(REG(a6, __IFACE_OR_BASE), REG(a0, const RAND_METHOD * meth));
const RAND_METHOD * SAVEDS ASM LIB_RAND_get_rand_method(REG(a6, __IFACE_OR_BASE));
RAND_METHOD * SAVEDS ASM LIB_RAND_SSLeay(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_RAND_cleanup(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_RAND_bytes(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * buf), REG(d0, int num));
int SAVEDS ASM LIB_RAND_pseudo_bytes(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * buf), REG(d0, int num));
void SAVEDS ASM LIB_RAND_seed(REG(a6, __IFACE_OR_BASE), REG(a0, const void * buf), REG(d0, int num));
void SAVEDS ASM LIB_RAND_add(REG(a6, __IFACE_OR_BASE), REG(a0, const void * buf), REG(d0, int num), REG(d1, double entropy));
int SAVEDS ASM LIB_RAND_load_file(REG(a6, __IFACE_OR_BASE), REG(a0, const char * file), REG(d0, long max_bytes));
int SAVEDS ASM LIB_RAND_write_file(REG(a6, __IFACE_OR_BASE), REG(a0, const char * file));
const char * SAVEDS ASM LIB_RAND_file_name(REG(a6, __IFACE_OR_BASE), REG(a0, char * file), REG(d0, size_t num));
int SAVEDS ASM LIB_RAND_status(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_RAND_query_egd_bytes(REG(a6, __IFACE_OR_BASE), REG(a0, const char * path), REG(a1, unsigned char * buf), REG(d0, int bytes));
int SAVEDS ASM LIB_RAND_egd(REG(a6, __IFACE_OR_BASE), REG(a0, const char * path));
int SAVEDS ASM LIB_RAND_egd_bytes(REG(a6, __IFACE_OR_BASE), REG(a0, const char * path), REG(d0, int bytes));
int SAVEDS ASM LIB_RAND_poll(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ERR_load_RAND_strings(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_SSL_CTX_set_msg_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, void (*cb)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg)));
void SAVEDS ASM LIB_SSL_set_msg_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, void (*cb)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg)));
LHASH_OF(SSL_SESSION) * SAVEDS ASM LIB_SSL_CTX_sessions(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx));
size_t SAVEDS ASM LIB_SSL_get_finished(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s), REG(a1, void * buf), REG(d0, size_t count));
size_t SAVEDS ASM LIB_SSL_get_peer_finished(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s), REG(a1, void * buf), REG(d0, size_t count));
BIO_METHOD * SAVEDS ASM LIB_BIO_f_ssl(REG(a6, __IFACE_OR_BASE));
BIO * SAVEDS ASM LIB_BIO_new_ssl(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, int client));
BIO * SAVEDS ASM LIB_BIO_new_ssl_connect(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx));
BIO * SAVEDS ASM LIB_BIO_new_buffer_ssl_connect(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx));
int SAVEDS ASM LIB_BIO_ssl_copy_session_id(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * to), REG(a1, BIO * from));
void SAVEDS ASM LIB_BIO_ssl_shutdown(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * ssl_bio));
int SAVEDS ASM LIB_SSL_CTX_set_cipher_list(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * a), REG(a1, const char * str));
SSL_CTX * SAVEDS ASM LIB_SSL_CTX_new(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_METHOD * meth));
void SAVEDS ASM LIB_SSL_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * a));
long SAVEDS ASM LIB_SSL_CTX_set_timeout(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, long t));
long SAVEDS ASM LIB_SSL_CTX_get_timeout(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx));
X509_STORE * SAVEDS ASM LIB_SSL_CTX_get_cert_store(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * a));
void SAVEDS ASM LIB_SSL_CTX_set_cert_store(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * a), REG(a1, X509_STORE * b));
int SAVEDS ASM LIB_SSL_want(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_clear(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
void SAVEDS ASM LIB_SSL_CTX_flush_sessions(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, long tm));
const SSL_CIPHER * SAVEDS ASM LIB_SSL_get_current_cipher(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_CIPHER_get_bits(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CIPHER * c), REG(a1, int * alg_bits));
char * SAVEDS ASM LIB_SSL_CIPHER_get_version(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CIPHER * c));
const char * SAVEDS ASM LIB_SSL_CIPHER_get_name(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CIPHER * c));
const char * SAVEDS ASM LIB_SSL_CIPHER_get_mac(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CIPHER * cipher));
const char * SAVEDS ASM LIB_SSL_CIPHER_get_encryption(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CIPHER * cipher));
const char * SAVEDS ASM LIB_SSL_CIPHER_get_authentication(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CIPHER * cipher));
const char * SAVEDS ASM LIB_SSL_CIPHER_get_key_exchange(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CIPHER * cipher));
const char * SAVEDS ASM LIB_SSL_CIPHER_get_export(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CIPHER * cipher));
int SAVEDS ASM LIB_SSL_get_fd(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_get_rfd(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_get_wfd(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
const char * SAVEDS ASM LIB_SSL_get_cipher_list(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s), REG(d0, int n));
char * SAVEDS ASM LIB_SSL_get_shared_ciphers(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s), REG(a1, char * buf), REG(d0, int len));
int SAVEDS ASM LIB_SSL_get_read_ahead(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_pending(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_set_fd(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, int fd));
int SAVEDS ASM LIB_SSL_set_rfd(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, int fd));
int SAVEDS ASM LIB_SSL_set_wfd(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, int fd));
void SAVEDS ASM LIB_SSL_set_bio(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, BIO * rbio), REG(a2, BIO * wbio));
BIO * SAVEDS ASM LIB_SSL_get_rbio(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
BIO * SAVEDS ASM LIB_SSL_get_wbio(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_set_cipher_list(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, const char * str));
void SAVEDS ASM LIB_SSL_set_read_ahead(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, int yes));
int SAVEDS ASM LIB_SSL_get_verify_mode(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_get_verify_depth(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int  SAVEDS ASM (*LIB_SSL_get_verify_callback(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s)))(int, X509_STORE_CTX *);
void SAVEDS ASM LIB_SSL_set_verify(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, int mode), REG(a1, int (*callback)(int ok, X509_STORE_CTX *ctx)));
void SAVEDS ASM LIB_SSL_set_verify_depth(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, int depth));
int SAVEDS ASM LIB_SSL_use_RSAPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, RSA * rsa));
int SAVEDS ASM LIB_SSL_use_RSAPrivateKey_ASN1(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, unsigned char * d), REG(d0, long len));
int SAVEDS ASM LIB_SSL_use_PrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, EVP_PKEY * pkey));
int SAVEDS ASM LIB_SSL_use_PrivateKey_ASN1(REG(a6, __IFACE_OR_BASE), REG(d0, int pk), REG(a0, SSL * ssl), REG(a1, unsigned char * d), REG(d1, long len));
int SAVEDS ASM LIB_SSL_use_certificate(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, X509 * x));
int SAVEDS ASM LIB_SSL_use_certificate_ASN1(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, unsigned char * d), REG(d0, int len));
int SAVEDS ASM LIB_SSL_use_RSAPrivateKey_file(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, const char * file), REG(d0, int type));
int SAVEDS ASM LIB_SSL_use_PrivateKey_file(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, const char * file), REG(d0, int type));
int SAVEDS ASM LIB_SSL_use_certificate_file(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, const char * file), REG(d0, int type));
int SAVEDS ASM LIB_SSL_CTX_use_RSAPrivateKey_file(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const char * file), REG(d0, int type));
int SAVEDS ASM LIB_SSL_CTX_use_PrivateKey_file(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const char * file), REG(d0, int type));
int SAVEDS ASM LIB_SSL_CTX_use_certificate_file(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const char * file), REG(d0, int type));
int SAVEDS ASM LIB_SSL_CTX_use_certificate_chain_file(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const char * file));
STACK_OF(X509_NAME) * SAVEDS ASM LIB_SSL_load_client_CA_file(REG(a6, __IFACE_OR_BASE), REG(a0, const char * file));
int SAVEDS ASM LIB_SSL_add_file_cert_subjects_to_stack(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_NAME) * stackCAs), REG(a1, const char * file));
int SAVEDS ASM LIB_SSL_add_dir_cert_subjects_to_stack(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_NAME) * stackCAs), REG(a1, const char * dir));
void SAVEDS ASM LIB_SSL_load_error_strings(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_SSL_state_string(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
const char * SAVEDS ASM LIB_SSL_rstate_string(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
const char * SAVEDS ASM LIB_SSL_state_string_long(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
const char * SAVEDS ASM LIB_SSL_rstate_string_long(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
long SAVEDS ASM LIB_SSL_SESSION_get_time(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_SESSION * s));
long SAVEDS ASM LIB_SSL_SESSION_set_time(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_SESSION * s), REG(d0, long t));
long SAVEDS ASM LIB_SSL_SESSION_get_timeout(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_SESSION * s));
long SAVEDS ASM LIB_SSL_SESSION_set_timeout(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_SESSION * s), REG(d0, long t));
void SAVEDS ASM LIB_SSL_copy_session_id(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * to), REG(a1, const SSL * from));
SSL_SESSION * SAVEDS ASM LIB_SSL_SESSION_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_SSL_SESSION_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * fp), REG(a1, const SSL_SESSION * ses));
void SAVEDS ASM LIB_SSL_SESSION_free(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_SESSION * ses));
int SAVEDS ASM LIB_i2d_SSL_SESSION(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_SESSION * in), REG(a1, unsigned char ** pp));
int SAVEDS ASM LIB_SSL_set_session(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * to), REG(a1, SSL_SESSION * session));
int SAVEDS ASM LIB_SSL_CTX_add_session(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * s), REG(a1, SSL_SESSION * c));
int SAVEDS ASM LIB_SSL_CTX_remove_session(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * a1), REG(a1, SSL_SESSION * c));
int SAVEDS ASM LIB_SSL_CTX_set_generate_session_id(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * a), REG(d0, GEN_SESSION_CB b));
int SAVEDS ASM LIB_SSL_set_generate_session_id(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * a), REG(d0, GEN_SESSION_CB b));
int SAVEDS ASM LIB_SSL_has_matching_session_id(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * ssl), REG(a1, const unsigned char * id), REG(d0, unsigned int id_len));
SSL_SESSION * SAVEDS ASM LIB_d2i_SSL_SESSION(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_SESSION ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
X509 * SAVEDS ASM LIB_SSL_get_peer_certificate(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
STACK_OF(X509) * SAVEDS ASM LIB_SSL_get_peer_cert_chain(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_CTX_get_verify_mode(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx));
int SAVEDS ASM LIB_SSL_CTX_get_verify_depth(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx));
int  SAVEDS ASM (*LIB_SSL_CTX_get_verify_callback(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx)))(int, X509_STORE_CTX *);
void SAVEDS ASM LIB_SSL_CTX_set_verify(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, int mode), REG(a1, int (*callback)(int, X509_STORE_CTX *)));
void SAVEDS ASM LIB_SSL_CTX_set_verify_depth(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, int depth));
void SAVEDS ASM LIB_SSL_CTX_set_cert_verify_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, int (*cb)(X509_STORE_CTX *, void *)), REG(a2, void * arg));
int SAVEDS ASM LIB_SSL_CTX_use_RSAPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, RSA * rsa));
int SAVEDS ASM LIB_SSL_CTX_use_RSAPrivateKey_ASN1(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, unsigned char * d), REG(d0, long len));
int SAVEDS ASM LIB_SSL_CTX_use_PrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, EVP_PKEY * pkey));
int SAVEDS ASM LIB_SSL_CTX_use_PrivateKey_ASN1(REG(a6, __IFACE_OR_BASE), REG(d0, int pk), REG(a0, SSL_CTX * ctx), REG(a1, unsigned char * d), REG(d1, long len));
int SAVEDS ASM LIB_SSL_CTX_use_certificate(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, X509 * x));
int SAVEDS ASM LIB_SSL_CTX_use_certificate_ASN1(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, int len), REG(a1, unsigned char * d));
void SAVEDS ASM LIB_SSL_CTX_set_default_passwd_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, pem_password_cb * cb));
void SAVEDS ASM LIB_SSL_CTX_set_default_passwd_cb_userdata(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, void * u));
int SAVEDS ASM LIB_SSL_CTX_check_private_key(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx));
int SAVEDS ASM LIB_SSL_check_private_key(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * ctx));
int SAVEDS ASM LIB_SSL_CTX_set_session_id_context(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const unsigned char * sid_ctx), REG(d0, unsigned int sid_ctx_len));
SSL * SAVEDS ASM LIB_SSL_new(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx));
int SAVEDS ASM LIB_SSL_set_session_id_context(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, const unsigned char * sid_ctx), REG(d0, unsigned int sid_ctx_len));
int SAVEDS ASM LIB_SSL_CTX_set_purpose(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * s), REG(d0, int purpose));
int SAVEDS ASM LIB_SSL_set_purpose(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, int purpose));
int SAVEDS ASM LIB_SSL_CTX_set_trust(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * s), REG(d0, int trust));
int SAVEDS ASM LIB_SSL_set_trust(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, int trust));
void SAVEDS ASM LIB_SSL_free(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl));
int SAVEDS ASM LIB_SSL_accept(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl));
int SAVEDS ASM LIB_SSL_connect(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl));
int SAVEDS ASM LIB_SSL_read(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, void * buf), REG(d0, int num));
int SAVEDS ASM LIB_SSL_peek(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, void * buf), REG(d0, int num));
int SAVEDS ASM LIB_SSL_write(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, const void * buf), REG(d0, int num));
long SAVEDS ASM LIB_SSL_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(d0, int cmd), REG(d1, long larg), REG(a1, void * parg));
long SAVEDS ASM LIB_SSL_callback_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * a), REG(d0, int a1), REG(a1, void (*b)()));
long SAVEDS ASM LIB_SSL_CTX_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, int cmd), REG(d1, long larg), REG(a1, void * parg));
long SAVEDS ASM LIB_SSL_CTX_callback_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * a1), REG(d0, int a2), REG(a1, void (*a3)(void)));
int SAVEDS ASM LIB_SSL_get_error(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s), REG(d0, int ret_code));
const char * SAVEDS ASM LIB_SSL_get_version(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_CTX_set_ssl_version(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const SSL_METHOD * meth));
const SSL_METHOD * SAVEDS ASM LIB_SSLv2_method(REG(a6, __IFACE_OR_BASE));
const SSL_METHOD * SAVEDS ASM LIB_SSLv2_server_method(REG(a6, __IFACE_OR_BASE));
const SSL_METHOD * SAVEDS ASM LIB_SSLv2_client_method(REG(a6, __IFACE_OR_BASE));
const SSL_METHOD * SAVEDS ASM LIB_SSLv3_method(REG(a6, __IFACE_OR_BASE));
const SSL_METHOD * SAVEDS ASM LIB_SSLv3_server_method(REG(a6, __IFACE_OR_BASE));
const SSL_METHOD * SAVEDS ASM LIB_SSLv3_client_method(REG(a6, __IFACE_OR_BASE));
const SSL_METHOD * SAVEDS ASM LIB_SSLv23_method(REG(a6, __IFACE_OR_BASE));
const SSL_METHOD * SAVEDS ASM LIB_SSLv23_server_method(REG(a6, __IFACE_OR_BASE));
const SSL_METHOD * SAVEDS ASM LIB_SSLv23_client_method(REG(a6, __IFACE_OR_BASE));
const SSL_METHOD * SAVEDS ASM LIB_TLSv1_method(REG(a6, __IFACE_OR_BASE));
const SSL_METHOD * SAVEDS ASM LIB_TLSv1_server_method(REG(a6, __IFACE_OR_BASE));
const SSL_METHOD * SAVEDS ASM LIB_TLSv1_client_method(REG(a6, __IFACE_OR_BASE));
STACK_OF(SSL_CIPHER) * SAVEDS ASM LIB_SSL_get_ciphers(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_do_handshake(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
int SAVEDS ASM LIB_SSL_renegotiate(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
int SAVEDS ASM LIB_SSL_renegotiate_pending(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
int SAVEDS ASM LIB_SSL_shutdown(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
const SSL_METHOD * SAVEDS ASM LIB_SSL_get_ssl_method(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
int SAVEDS ASM LIB_SSL_set_ssl_method(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, SSL_METHOD * method));
const char * SAVEDS ASM LIB_SSL_alert_type_string_long(REG(a6, __IFACE_OR_BASE), REG(d0, int value));
const char * SAVEDS ASM LIB_SSL_alert_type_string(REG(a6, __IFACE_OR_BASE), REG(d0, int value));
const char * SAVEDS ASM LIB_SSL_alert_desc_string_long(REG(a6, __IFACE_OR_BASE), REG(d0, int value));
const char * SAVEDS ASM LIB_SSL_alert_desc_string(REG(a6, __IFACE_OR_BASE), REG(d0, int value));
void SAVEDS ASM LIB_SSL_set_client_CA_list(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, STACK_OF(X509_NAME) * name_list));
void SAVEDS ASM LIB_SSL_CTX_set_client_CA_list(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, STACK_OF(X509_NAME) * name_list));
STACK_OF(X509_NAME) * SAVEDS ASM LIB_SSL_get_client_CA_list(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
STACK_OF(X509_NAME) * SAVEDS ASM LIB_SSL_CTX_get_client_CA_list(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * s));
int SAVEDS ASM LIB_SSL_add_client_CA(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, X509 * x));
int SAVEDS ASM LIB_SSL_CTX_add_client_CA(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, X509 * x));
void SAVEDS ASM LIB_SSL_set_connect_state(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
void SAVEDS ASM LIB_SSL_set_accept_state(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
long SAVEDS ASM LIB_SSL_get_default_timeout(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_library_init(REG(a6, __IFACE_OR_BASE));
char * SAVEDS ASM LIB_SSL_CIPHER_description(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CIPHER * a1), REG(a1, char * buf), REG(d0, int size));
STACK_OF(X509_NAME) * SAVEDS ASM LIB_SSL_dup_CA_list(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_NAME) * sk));
SSL * SAVEDS ASM LIB_SSL_dup(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl));
X509 * SAVEDS ASM LIB_SSL_get_certificate(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * ssl));
struct evp_pkey_st * SAVEDS ASM LIB_SSL_get_privatekey(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl));
void SAVEDS ASM LIB_SSL_CTX_set_quiet_shutdown(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, int mode));
int SAVEDS ASM LIB_SSL_CTX_get_quiet_shutdown(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx));
void SAVEDS ASM LIB_SSL_set_quiet_shutdown(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(d0, int mode));
int SAVEDS ASM LIB_SSL_get_quiet_shutdown(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * ssl));
void SAVEDS ASM LIB_SSL_set_shutdown(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(d0, int mode));
int SAVEDS ASM LIB_SSL_get_shutdown(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * ssl));
int SAVEDS ASM LIB_SSL_version(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * ssl));
int SAVEDS ASM LIB_SSL_CTX_set_default_verify_paths(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx));
int SAVEDS ASM LIB_SSL_CTX_load_verify_locations(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const char * CAfile), REG(a2, const char * CApath));
SSL_SESSION * SAVEDS ASM LIB_SSL_get_session(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * ssl));
SSL_SESSION * SAVEDS ASM LIB_SSL_get1_session(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl));
SSL_CTX * SAVEDS ASM LIB_SSL_get_SSL_CTX(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * ssl));
void SAVEDS ASM LIB_SSL_set_info_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, void (*cb)(const SSL *ssl, int type, int val)));
void  SAVEDS ASM (*LIB_SSL_get_info_callback(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * ssl)))(const SSL *ssl, int type, int val);
int SAVEDS ASM LIB_SSL_state(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * ssl));
void SAVEDS ASM LIB_SSL_set_verify_result(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(d0, long v));
long SAVEDS ASM LIB_SSL_get_verify_result(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * ssl));
int SAVEDS ASM LIB_SSL_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(d0, int idx), REG(a1, void * data));
void * SAVEDS ASM LIB_SSL_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * ssl), REG(d0, int idx));
int SAVEDS ASM LIB_SSL_get_ex_new_index(REG(a6, __IFACE_OR_BASE), REG(d0, long argl), REG(a0, void * argp), REG(a1, CRYPTO_EX_new * new_func), REG(a2, CRYPTO_EX_dup * dup_func), REG(a3, CRYPTO_EX_free * free_func));
int SAVEDS ASM LIB_SSL_SESSION_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_SESSION * ss), REG(d0, int idx), REG(a1, void * data));
void * SAVEDS ASM LIB_SSL_SESSION_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_SESSION * ss), REG(d0, int idx));
int SAVEDS ASM LIB_SSL_SESSION_get_ex_new_index(REG(a6, __IFACE_OR_BASE), REG(d0, long argl), REG(a0, void * argp), REG(a1, CRYPTO_EX_new * new_func), REG(a2, CRYPTO_EX_dup * dup_func), REG(a3, CRYPTO_EX_free * free_func));
int SAVEDS ASM LIB_SSL_CTX_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ssl), REG(d0, int idx), REG(a1, void * data));
void * SAVEDS ASM LIB_SSL_CTX_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ssl), REG(d0, int idx));
int SAVEDS ASM LIB_SSL_CTX_get_ex_new_index(REG(a6, __IFACE_OR_BASE), REG(d0, long argl), REG(a0, void * argp), REG(a1, CRYPTO_EX_new * new_func), REG(a2, CRYPTO_EX_dup * dup_func), REG(a3, CRYPTO_EX_free * free_func));
int SAVEDS ASM LIB_SSL_get_ex_data_X509_STORE_CTX_idx(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_SSL_CTX_set_tmp_rsa_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, RSA * (*cb)(SSL *ssl, int is_export, int keylength)));
void SAVEDS ASM LIB_SSL_set_tmp_rsa_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, RSA * (*cb)(SSL *ssl, int is_export, int keylength)));
void SAVEDS ASM LIB_SSL_CTX_set_tmp_dh_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, DH * (*dh)(SSL *ssl, int is_export, int keylength)));
void SAVEDS ASM LIB_SSL_set_tmp_dh_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, DH * (*dh)(SSL *ssl, int is_export, int keylength)));
int SAVEDS ASM LIB_SSL_COMP_add_compression_method(REG(a6, __IFACE_OR_BASE), REG(d0, int id), REG(a0, COMP_METHOD * cm));
void SAVEDS ASM LIB_ERR_load_SSL_strings(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_sk_num(REG(a6, __IFACE_OR_BASE), REG(a0, const _STACK * a));
char * SAVEDS ASM LIB_sk_value(REG(a6, __IFACE_OR_BASE), REG(a0, const _STACK * a), REG(d0, int b));
char * SAVEDS ASM LIB_sk_set(REG(a6, __IFACE_OR_BASE), REG(a0, _STACK * a), REG(d0, int b), REG(a1, char * c));
_STACK * SAVEDS ASM LIB_sk_new(REG(a6, __IFACE_OR_BASE), REG(a0, int (*cmp)(const void *, const void *)));
_STACK * SAVEDS ASM LIB_sk_new_null(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_sk_free(REG(a6, __IFACE_OR_BASE), REG(a0, _STACK * a));
void SAVEDS ASM LIB_sk_pop_free(REG(a6, __IFACE_OR_BASE), REG(a0, _STACK * st), REG(a1, void (*func)(void *)));
int SAVEDS ASM LIB_sk_insert(REG(a6, __IFACE_OR_BASE), REG(a0, _STACK * sk), REG(a1, char * data), REG(d0, int where));
char * SAVEDS ASM LIB_sk_delete(REG(a6, __IFACE_OR_BASE), REG(a0, _STACK * st), REG(d0, int loc));
char * SAVEDS ASM LIB_sk_delete_ptr(REG(a6, __IFACE_OR_BASE), REG(a0, _STACK * st), REG(a1, char * p));
int SAVEDS ASM LIB_sk_find(REG(a6, __IFACE_OR_BASE), REG(a0, _STACK * st), REG(a1, char * data));
int SAVEDS ASM LIB_sk_push(REG(a6, __IFACE_OR_BASE), REG(a0, _STACK * st), REG(a1, char * data));
int SAVEDS ASM LIB_sk_unshift(REG(a6, __IFACE_OR_BASE), REG(a0, _STACK * st), REG(a1, char * data));
char * SAVEDS ASM LIB_sk_shift(REG(a6, __IFACE_OR_BASE), REG(a0, _STACK * st));
char * SAVEDS ASM LIB_sk_pop(REG(a6, __IFACE_OR_BASE), REG(a0, _STACK * st));
void SAVEDS ASM LIB_sk_zero(REG(a6, __IFACE_OR_BASE), REG(a0, _STACK * st));
int  SAVEDS ASM (*LIB_sk_set_cmp_func(REG(a6, __IFACE_OR_BASE), REG(a0, _STACK * sk), REG(a1, int (*c)(const void *, const void *))))(const void *, const void *);
_STACK * SAVEDS ASM LIB_sk_dup(REG(a6, __IFACE_OR_BASE), REG(a0, _STACK * st));
void SAVEDS ASM LIB_sk_sort(REG(a6, __IFACE_OR_BASE), REG(a0, _STACK * st));
int SAVEDS ASM LIB_FIPS_mode(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_sk_is_sorted(REG(a6, __IFACE_OR_BASE), REG(a0, const _STACK * st));
TXT_DB * SAVEDS ASM LIB_TXT_DB_read(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in), REG(d0, int num));
long SAVEDS ASM LIB_TXT_DB_write(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, TXT_DB * db));
int SAVEDS ASM LIB_TXT_DB_create_index(REG(a6, __IFACE_OR_BASE), REG(a0, TXT_DB * db), REG(d0, int field), REG(a1, int (*qual)()), REG(d1, LHASH_HASH_FN_TYPE hash), REG(d2, LHASH_COMP_FN_TYPE cmp));
void SAVEDS ASM LIB_TXT_DB_free(REG(a6, __IFACE_OR_BASE), REG(a0, TXT_DB * db));
char ** SAVEDS ASM LIB_TXT_DB_get_by_index(REG(a6, __IFACE_OR_BASE), REG(a0, TXT_DB * db), REG(d0, int idx), REG(a1, char ** value));
int SAVEDS ASM LIB_TXT_DB_insert(REG(a6, __IFACE_OR_BASE), REG(a0, TXT_DB * db), REG(a1, char ** value));
UI * SAVEDS ASM LIB_UI_new(REG(a6, __IFACE_OR_BASE));
UI * SAVEDS ASM LIB_UI_new_method(REG(a6, __IFACE_OR_BASE), REG(a0, const UI_METHOD * method));
void SAVEDS ASM LIB_UI_free(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui));
int SAVEDS ASM LIB_UI_add_input_string(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, const char * prompt), REG(d0, int flags), REG(a2, char * result_buf), REG(d1, int minsize), REG(d2, int maxsize));
int SAVEDS ASM LIB_UI_dup_input_string(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, const char * prompt), REG(d0, int flags), REG(a2, char * result_buf), REG(d1, int minsize), REG(d2, int maxsize));
int SAVEDS ASM LIB_UI_add_verify_string(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, const char * prompt), REG(d0, int flags), REG(a2, char * result_buf), REG(d1, int minsize), REG(d2, int maxsize), REG(a3, const char * test_buf));
int SAVEDS ASM LIB_UI_dup_verify_string(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, const char * prompt), REG(d0, int flags), REG(a2, char * result_buf), REG(d1, int minsize), REG(d2, int maxsize), REG(a3, const char * test_buf));
int SAVEDS ASM LIB_UI_add_input_boolean(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, const char * prompt), REG(a2, const char * action_desc), REG(a3, const char * ok_chars), REG(a4, const char * cancel_chars), REG(d0, int flags), REG(d1, char * result_buf));
int SAVEDS ASM LIB_UI_dup_input_boolean(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, const char * prompt), REG(a2, const char * action_desc), REG(a3, const char * ok_chars), REG(a4, const char * cancel_chars), REG(d0, int flags), REG(d1, char * result_buf));
int SAVEDS ASM LIB_UI_add_info_string(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, const char * text));
int SAVEDS ASM LIB_UI_dup_info_string(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, const char * text));
int SAVEDS ASM LIB_UI_add_error_string(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, const char * text));
int SAVEDS ASM LIB_UI_dup_error_string(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, const char * text));
char * SAVEDS ASM LIB_UI_construct_prompt(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui_method), REG(a1, const char * object_desc), REG(a2, const char * object_name));
void * SAVEDS ASM LIB_UI_add_user_data(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, void * user_data));
void * SAVEDS ASM LIB_UI_get0_user_data(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui));
const char * SAVEDS ASM LIB_UI_get0_result(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(d0, int i));
int SAVEDS ASM LIB_UI_process(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui));
int SAVEDS ASM LIB_UI_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(d0, int cmd), REG(d1, long i), REG(a1, void * p), REG(a2, void (*f)()));
int SAVEDS ASM LIB_UI_get_ex_new_index(REG(a6, __IFACE_OR_BASE), REG(d0, long argl), REG(a0, void * argp), REG(a1, CRYPTO_EX_new * new_func), REG(a2, CRYPTO_EX_dup * dup_func), REG(a3, CRYPTO_EX_free * free_func));
int SAVEDS ASM LIB_UI_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, UI * r), REG(d0, int idx), REG(a1, void * arg));
void * SAVEDS ASM LIB_UI_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, UI * r), REG(d0, int idx));
void SAVEDS ASM LIB_UI_set_default_method(REG(a6, __IFACE_OR_BASE), REG(a0, const UI_METHOD * meth));
const UI_METHOD * SAVEDS ASM LIB_UI_get_default_method(REG(a6, __IFACE_OR_BASE));
const UI_METHOD * SAVEDS ASM LIB_UI_get_method(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui));
const UI_METHOD * SAVEDS ASM LIB_UI_set_method(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, const UI_METHOD * meth));
UI_METHOD * SAVEDS ASM LIB_UI_OpenSSL(REG(a6, __IFACE_OR_BASE));
UI_METHOD * SAVEDS ASM LIB_UI_create_method(REG(a6, __IFACE_OR_BASE), REG(a0, char * name));
void SAVEDS ASM LIB_UI_destroy_method(REG(a6, __IFACE_OR_BASE), REG(a0, UI_METHOD * ui_method));
int SAVEDS ASM LIB_UI_method_set_opener(REG(a6, __IFACE_OR_BASE), REG(a0, UI_METHOD * method), REG(a1, int (*opener)(UI *ui)));
int SAVEDS ASM LIB_UI_method_set_writer(REG(a6, __IFACE_OR_BASE), REG(a0, UI_METHOD * method), REG(a1, int (*writer)(UI *ui, UI_STRING *uis)));
int SAVEDS ASM LIB_UI_method_set_flusher(REG(a6, __IFACE_OR_BASE), REG(a0, UI_METHOD * method), REG(a1, int (*flusher)(UI *ui)));
int SAVEDS ASM LIB_UI_method_set_reader(REG(a6, __IFACE_OR_BASE), REG(a0, UI_METHOD * method), REG(a1, int (*reader)(UI *ui, UI_STRING *uis)));
int SAVEDS ASM LIB_UI_method_set_closer(REG(a6, __IFACE_OR_BASE), REG(a0, UI_METHOD * method), REG(a1, int (*closer)(UI *ui)));
int  SAVEDS ASM (*LIB_UI_method_get_opener(REG(a6, __IFACE_OR_BASE), REG(a0, UI_METHOD * method)))(UI *);
int  SAVEDS ASM (*LIB_UI_method_get_writer(REG(a6, __IFACE_OR_BASE), REG(a0, UI_METHOD * method)))(UI *, UI_STRING *);
int  SAVEDS ASM (*LIB_UI_method_get_flusher(REG(a6, __IFACE_OR_BASE), REG(a0, UI_METHOD * method)))(UI *);
int  SAVEDS ASM (*LIB_UI_method_get_reader(REG(a6, __IFACE_OR_BASE), REG(a0, UI_METHOD * method)))(UI *, UI_STRING *);
int  SAVEDS ASM (*LIB_UI_method_get_closer(REG(a6, __IFACE_OR_BASE), REG(a0, UI_METHOD * method)))(UI *);
enum UI_string_types SAVEDS ASM LIB_UI_get_string_type(REG(a6, __IFACE_OR_BASE), REG(a0, UI_STRING * uis));
int SAVEDS ASM LIB_UI_get_input_flags(REG(a6, __IFACE_OR_BASE), REG(a0, UI_STRING * uis));
const char * SAVEDS ASM LIB_UI_get0_output_string(REG(a6, __IFACE_OR_BASE), REG(a0, UI_STRING * uis));
const char * SAVEDS ASM LIB_UI_get0_action_string(REG(a6, __IFACE_OR_BASE), REG(a0, UI_STRING * uis));
const char * SAVEDS ASM LIB_UI_get0_result_string(REG(a6, __IFACE_OR_BASE), REG(a0, UI_STRING * uis));
const char * SAVEDS ASM LIB_UI_get0_test_string(REG(a6, __IFACE_OR_BASE), REG(a0, UI_STRING * uis));
int SAVEDS ASM LIB_UI_get_result_minsize(REG(a6, __IFACE_OR_BASE), REG(a0, UI_STRING * uis));
int SAVEDS ASM LIB_UI_get_result_maxsize(REG(a6, __IFACE_OR_BASE), REG(a0, UI_STRING * uis));
int SAVEDS ASM LIB_UI_set_result(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, UI_STRING * uis), REG(a2, const char * result));
int SAVEDS ASM LIB_UI_UTIL_read_pw_string(REG(a6, __IFACE_OR_BASE), REG(a0, char * buf), REG(d0, int length), REG(a1, const char * prompt), REG(d1, int verify));
int SAVEDS ASM LIB_UI_UTIL_read_pw(REG(a6, __IFACE_OR_BASE), REG(a0, char * buf), REG(a1, char * buff), REG(d0, int size), REG(a2, const char * prompt), REG(d1, int verify));
void SAVEDS ASM LIB_ERR_load_UI_strings(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB__ossl_old_des_read_pw_string(REG(a6, __IFACE_OR_BASE), REG(a0, char * buf), REG(d0, int length), REG(a1, const char * prompt), REG(d1, int verify));
int SAVEDS ASM LIB__ossl_old_des_read_pw(REG(a6, __IFACE_OR_BASE), REG(a0, char * buf), REG(a1, char * buff), REG(d0, int size), REG(a2, const char * prompt), REG(d1, int verify));
const char * SAVEDS ASM LIB_X509_verify_cert_error_string(REG(a6, __IFACE_OR_BASE), REG(d0, long n));
int SAVEDS ASM LIB_X509_verify(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * a), REG(a1, EVP_PKEY * r));
int SAVEDS ASM LIB_X509_REQ_verify(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * a), REG(a1, EVP_PKEY * r));
int SAVEDS ASM LIB_X509_CRL_verify(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * a), REG(a1, EVP_PKEY * r));
int SAVEDS ASM LIB_NETSCAPE_SPKI_verify(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_SPKI * a), REG(a1, EVP_PKEY * r));
NETSCAPE_SPKI * SAVEDS ASM LIB_NETSCAPE_SPKI_b64_decode(REG(a6, __IFACE_OR_BASE), REG(a0, const char * str), REG(d0, int len));
char * SAVEDS ASM LIB_NETSCAPE_SPKI_b64_encode(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_SPKI * x));
EVP_PKEY * SAVEDS ASM LIB_NETSCAPE_SPKI_get_pubkey(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_SPKI * x));
int SAVEDS ASM LIB_NETSCAPE_SPKI_set_pubkey(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_SPKI * x), REG(a1, EVP_PKEY * pkey));
int SAVEDS ASM LIB_NETSCAPE_SPKI_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, NETSCAPE_SPKI * spki));
int SAVEDS ASM LIB_X509_signature_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_ALGOR * alg), REG(a2, ASN1_STRING * sig));
int SAVEDS ASM LIB_X509_sign(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, EVP_PKEY * pkey), REG(a2, const EVP_MD * md));
int SAVEDS ASM LIB_X509_REQ_sign(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * x), REG(a1, EVP_PKEY * pkey), REG(a2, const EVP_MD * md));
int SAVEDS ASM LIB_X509_CRL_sign(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * x), REG(a1, EVP_PKEY * pkey), REG(a2, const EVP_MD * md));
int SAVEDS ASM LIB_NETSCAPE_SPKI_sign(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_SPKI * x), REG(a1, EVP_PKEY * pkey), REG(a2, const EVP_MD * md));
int SAVEDS ASM LIB_X509_pubkey_digest(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * data), REG(a1, const EVP_MD * type), REG(a2, unsigned char * md), REG(a3, unsigned int * len));
int SAVEDS ASM LIB_X509_digest(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * data), REG(a1, const EVP_MD * type), REG(a2, unsigned char * md), REG(a3, unsigned int * len));
int SAVEDS ASM LIB_X509_CRL_digest(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_CRL * data), REG(a1, const EVP_MD * type), REG(a2, unsigned char * md), REG(a3, unsigned int * len));
int SAVEDS ASM LIB_X509_REQ_digest(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REQ * data), REG(a1, const EVP_MD * type), REG(a2, unsigned char * md), REG(a3, unsigned int * len));
int SAVEDS ASM LIB_X509_NAME_digest(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_NAME * data), REG(a1, const EVP_MD * type), REG(a2, unsigned char * md), REG(a3, unsigned int * len));
X509 * SAVEDS ASM LIB_d2i_X509_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509 ** x509));
int SAVEDS ASM LIB_i2d_X509_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509 * x509));
X509_CRL * SAVEDS ASM LIB_d2i_X509_CRL_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_CRL ** crl));
int SAVEDS ASM LIB_i2d_X509_CRL_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_CRL * crl));
X509_REQ * SAVEDS ASM LIB_d2i_X509_REQ_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_REQ ** req));
int SAVEDS ASM LIB_i2d_X509_REQ_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_REQ * req));
RSA * SAVEDS ASM LIB_d2i_RSAPrivateKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, RSA ** rsa));
int SAVEDS ASM LIB_i2d_RSAPrivateKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, RSA * rsa));
RSA * SAVEDS ASM LIB_d2i_RSAPublicKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, RSA ** rsa));
int SAVEDS ASM LIB_i2d_RSAPublicKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, RSA * rsa));
RSA * SAVEDS ASM LIB_d2i_RSA_PUBKEY_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, RSA ** rsa));
int SAVEDS ASM LIB_i2d_RSA_PUBKEY_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, RSA * rsa));
DSA * SAVEDS ASM LIB_d2i_DSA_PUBKEY_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, DSA ** dsa));
int SAVEDS ASM LIB_i2d_DSA_PUBKEY_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, DSA * dsa));
DSA * SAVEDS ASM LIB_d2i_DSAPrivateKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, DSA ** dsa));
int SAVEDS ASM LIB_i2d_DSAPrivateKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, DSA * dsa));
X509_SIG * SAVEDS ASM LIB_d2i_PKCS8_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_SIG ** p8));
int SAVEDS ASM LIB_i2d_PKCS8_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_SIG * p8));
PKCS8_PRIV_KEY_INFO * SAVEDS ASM LIB_d2i_PKCS8_PRIV_KEY_INFO_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, PKCS8_PRIV_KEY_INFO ** p8inf));
int SAVEDS ASM LIB_i2d_PKCS8_PRIV_KEY_INFO_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, PKCS8_PRIV_KEY_INFO * p8inf));
int SAVEDS ASM LIB_i2d_PKCS8PrivateKeyInfo_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EVP_PKEY * key));
int SAVEDS ASM LIB_i2d_PrivateKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EVP_PKEY * pkey));
EVP_PKEY * SAVEDS ASM LIB_d2i_PrivateKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EVP_PKEY ** a));
int SAVEDS ASM LIB_i2d_PUBKEY_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EVP_PKEY * pkey));
EVP_PKEY * SAVEDS ASM LIB_d2i_PUBKEY_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EVP_PKEY ** a));
X509 * SAVEDS ASM LIB_X509_dup(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x509));
X509_ATTRIBUTE * SAVEDS ASM LIB_X509_ATTRIBUTE_dup(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ATTRIBUTE * xa));
X509_EXTENSION * SAVEDS ASM LIB_X509_EXTENSION_dup(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSION * ex));
X509_CRL * SAVEDS ASM LIB_X509_CRL_dup(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * crl));
X509_REQ * SAVEDS ASM LIB_X509_REQ_dup(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * req));
X509_ALGOR * SAVEDS ASM LIB_X509_ALGOR_dup(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ALGOR * xn));
X509_NAME * SAVEDS ASM LIB_X509_NAME_dup(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * xn));
X509_NAME_ENTRY * SAVEDS ASM LIB_X509_NAME_ENTRY_dup(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME_ENTRY * ne));
int SAVEDS ASM LIB_X509_cmp_time(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TIME * s), REG(a1, time_t * t));
int SAVEDS ASM LIB_X509_cmp_current_time(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TIME * s));
ASN1_TIME * SAVEDS ASM LIB_X509_time_adj(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TIME * s), REG(d0, long adj), REG(a1, time_t * t));
ASN1_TIME * SAVEDS ASM LIB_X509_gmtime_adj(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TIME * s), REG(d0, long adj));
const char * SAVEDS ASM LIB_X509_get_default_cert_area(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_X509_get_default_cert_dir(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_X509_get_default_cert_file(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_X509_get_default_cert_dir_env(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_X509_get_default_cert_file_env(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_X509_get_default_private_dir(REG(a6, __IFACE_OR_BASE));
X509_REQ * SAVEDS ASM LIB_X509_to_X509_REQ(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, EVP_PKEY * pkey), REG(a2, const EVP_MD * md));
X509 * SAVEDS ASM LIB_X509_REQ_to_X509(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * r), REG(d0, int days), REG(a1, EVP_PKEY * pkey));
X509_ALGOR * SAVEDS ASM LIB_X509_ALGOR_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_ALGOR_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ALGOR * a));
X509_ALGOR * SAVEDS ASM LIB_d2i_X509_ALGOR(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ALGOR ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_ALGOR(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ALGOR * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_ALGOR_it(REG(a6, __IFACE_OR_BASE));
X509_VAL * SAVEDS ASM LIB_X509_VAL_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_VAL_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VAL * a));
X509_VAL * SAVEDS ASM LIB_d2i_X509_VAL(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VAL ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_VAL(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VAL * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_VAL_it(REG(a6, __IFACE_OR_BASE));
X509_PUBKEY * SAVEDS ASM LIB_X509_PUBKEY_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_PUBKEY_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_PUBKEY * a));
X509_PUBKEY * SAVEDS ASM LIB_d2i_X509_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, X509_PUBKEY ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, X509_PUBKEY * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_PUBKEY_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_X509_PUBKEY_set(REG(a6, __IFACE_OR_BASE), REG(a0, X509_PUBKEY ** x), REG(a1, EVP_PKEY * pkey));
EVP_PKEY * SAVEDS ASM LIB_X509_PUBKEY_get(REG(a6, __IFACE_OR_BASE), REG(a0, X509_PUBKEY * key));
int SAVEDS ASM LIB_X509_get_pubkey_parameters(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, STACK_OF(X509) * chain));
int SAVEDS ASM LIB_i2d_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * a), REG(a1, unsigned char ** pp));
EVP_PKEY * SAVEDS ASM LIB_d2i_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
int SAVEDS ASM LIB_i2d_RSA_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * a), REG(a1, unsigned char ** pp));
RSA * SAVEDS ASM LIB_d2i_RSA_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, RSA ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
int SAVEDS ASM LIB_i2d_DSA_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, DSA * a), REG(a1, unsigned char ** pp));
DSA * SAVEDS ASM LIB_d2i_DSA_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, DSA ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
X509_SIG * SAVEDS ASM LIB_X509_SIG_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_SIG_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_SIG * a));
X509_SIG * SAVEDS ASM LIB_d2i_X509_SIG(REG(a6, __IFACE_OR_BASE), REG(a0, X509_SIG ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_SIG(REG(a6, __IFACE_OR_BASE), REG(a0, X509_SIG * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_SIG_it(REG(a6, __IFACE_OR_BASE));
X509_REQ_INFO * SAVEDS ASM LIB_X509_REQ_INFO_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_REQ_INFO_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ_INFO * a));
X509_REQ_INFO * SAVEDS ASM LIB_d2i_X509_REQ_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ_INFO ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_REQ_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ_INFO * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_REQ_INFO_it(REG(a6, __IFACE_OR_BASE));
X509_REQ * SAVEDS ASM LIB_X509_REQ_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_REQ_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * a));
X509_REQ * SAVEDS ASM LIB_d2i_X509_REQ(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_REQ(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_REQ_it(REG(a6, __IFACE_OR_BASE));
X509_ATTRIBUTE * SAVEDS ASM LIB_X509_ATTRIBUTE_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_ATTRIBUTE_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ATTRIBUTE * a));
X509_ATTRIBUTE * SAVEDS ASM LIB_d2i_X509_ATTRIBUTE(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ATTRIBUTE ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_ATTRIBUTE(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ATTRIBUTE * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_ATTRIBUTE_it(REG(a6, __IFACE_OR_BASE));
X509_ATTRIBUTE * SAVEDS ASM LIB_X509_ATTRIBUTE_create(REG(a6, __IFACE_OR_BASE), REG(d0, int nid), REG(d1, int atrtype), REG(a0, void * value));
X509_EXTENSION * SAVEDS ASM LIB_X509_EXTENSION_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_EXTENSION_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSION * a));
X509_EXTENSION * SAVEDS ASM LIB_d2i_X509_EXTENSION(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSION ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_EXTENSION(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSION * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_EXTENSION_it(REG(a6, __IFACE_OR_BASE));
X509_NAME_ENTRY * SAVEDS ASM LIB_X509_NAME_ENTRY_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_NAME_ENTRY_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME_ENTRY * a));
X509_NAME_ENTRY * SAVEDS ASM LIB_d2i_X509_NAME_ENTRY(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME_ENTRY ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_NAME_ENTRY(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME_ENTRY * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_NAME_ENTRY_it(REG(a6, __IFACE_OR_BASE));
X509_NAME * SAVEDS ASM LIB_X509_NAME_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_NAME_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * a));
X509_NAME * SAVEDS ASM LIB_d2i_X509_NAME(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_NAME(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_NAME_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_X509_NAME_set(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME ** xn), REG(a1, X509_NAME * name));
X509_CINF * SAVEDS ASM LIB_X509_CINF_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_CINF_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CINF * a));
X509_CINF * SAVEDS ASM LIB_d2i_X509_CINF(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CINF ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_CINF(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CINF * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_CINF_it(REG(a6, __IFACE_OR_BASE));
X509 * SAVEDS ASM LIB_X509_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * a));
X509 * SAVEDS ASM LIB_d2i_X509(REG(a6, __IFACE_OR_BASE), REG(a0, X509 ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_it(REG(a6, __IFACE_OR_BASE));
X509_CERT_AUX * SAVEDS ASM LIB_X509_CERT_AUX_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_CERT_AUX_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CERT_AUX * a));
X509_CERT_AUX * SAVEDS ASM LIB_d2i_X509_CERT_AUX(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CERT_AUX ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_CERT_AUX(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CERT_AUX * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_CERT_AUX_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_X509_get_ex_new_index(REG(a6, __IFACE_OR_BASE), REG(d0, long argl), REG(a0, void * argp), REG(a1, CRYPTO_EX_new * new_func), REG(a2, CRYPTO_EX_dup * dup_func), REG(a3, CRYPTO_EX_free * free_func));
int SAVEDS ASM LIB_X509_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * r), REG(d0, int idx), REG(a1, void * arg));
void * SAVEDS ASM LIB_X509_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * r), REG(d0, int idx));
int SAVEDS ASM LIB_i2d_X509_AUX(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * a), REG(a1, unsigned char ** pp));
X509 * SAVEDS ASM LIB_d2i_X509_AUX(REG(a6, __IFACE_OR_BASE), REG(a0, X509 ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
int SAVEDS ASM LIB_X509_alias_set1(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, unsigned char * name), REG(d0, int len));
int SAVEDS ASM LIB_X509_keyid_set1(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, unsigned char * id), REG(d0, int len));
unsigned char * SAVEDS ASM LIB_X509_alias_get0(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, int * len));
int  SAVEDS ASM (*LIB_X509_TRUST_set_default(REG(a6, __IFACE_OR_BASE), REG(a0, int (*trust)(int, X509 *, int))))(int, X509 *, int);
int SAVEDS ASM LIB_X509_TRUST_set(REG(a6, __IFACE_OR_BASE), REG(a0, int * t), REG(d0, int trust));
int SAVEDS ASM LIB_X509_add1_trust_object(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, ASN1_OBJECT * obj));
int SAVEDS ASM LIB_X509_add1_reject_object(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, ASN1_OBJECT * obj));
void SAVEDS ASM LIB_X509_trust_clear(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
void SAVEDS ASM LIB_X509_reject_clear(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
X509_REVOKED * SAVEDS ASM LIB_X509_REVOKED_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_REVOKED_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REVOKED * a));
X509_REVOKED * SAVEDS ASM LIB_d2i_X509_REVOKED(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REVOKED ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_REVOKED(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REVOKED * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_REVOKED_it(REG(a6, __IFACE_OR_BASE));
X509_CRL_INFO * SAVEDS ASM LIB_X509_CRL_INFO_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_CRL_INFO_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL_INFO * a));
X509_CRL_INFO * SAVEDS ASM LIB_d2i_X509_CRL_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL_INFO ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_CRL_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL_INFO * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_CRL_INFO_it(REG(a6, __IFACE_OR_BASE));
X509_CRL * SAVEDS ASM LIB_X509_CRL_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_CRL_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * a));
X509_CRL * SAVEDS ASM LIB_d2i_X509_CRL(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_CRL(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_CRL_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_X509_CRL_add0_revoked(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * crl), REG(a1, X509_REVOKED * rev));
X509_PKEY * SAVEDS ASM LIB_X509_PKEY_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_PKEY_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_PKEY * a));
int SAVEDS ASM LIB_i2d_X509_PKEY(REG(a6, __IFACE_OR_BASE), REG(a0, X509_PKEY * a), REG(a1, unsigned char ** pp));
X509_PKEY * SAVEDS ASM LIB_d2i_X509_PKEY(REG(a6, __IFACE_OR_BASE), REG(a0, X509_PKEY ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
NETSCAPE_SPKI * SAVEDS ASM LIB_NETSCAPE_SPKI_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_NETSCAPE_SPKI_free(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_SPKI * a));
NETSCAPE_SPKI * SAVEDS ASM LIB_d2i_NETSCAPE_SPKI(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_SPKI ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_NETSCAPE_SPKI(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_SPKI * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_NETSCAPE_SPKI_it(REG(a6, __IFACE_OR_BASE));
NETSCAPE_SPKAC * SAVEDS ASM LIB_NETSCAPE_SPKAC_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_NETSCAPE_SPKAC_free(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_SPKAC * a));
NETSCAPE_SPKAC * SAVEDS ASM LIB_d2i_NETSCAPE_SPKAC(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_SPKAC ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_NETSCAPE_SPKAC(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_SPKAC * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_NETSCAPE_SPKAC_it(REG(a6, __IFACE_OR_BASE));
NETSCAPE_CERT_SEQUENCE * SAVEDS ASM LIB_NETSCAPE_CERT_SEQUENCE_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_NETSCAPE_CERT_SEQUENCE_free(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_CERT_SEQUENCE * a));
NETSCAPE_CERT_SEQUENCE * SAVEDS ASM LIB_d2i_NETSCAPE_CERT_SEQUENCE(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_CERT_SEQUENCE ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_NETSCAPE_CERT_SEQUENCE(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_CERT_SEQUENCE * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_NETSCAPE_CERT_SEQUENCE_it(REG(a6, __IFACE_OR_BASE));
X509_INFO * SAVEDS ASM LIB_X509_INFO_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_INFO_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_INFO * a));
char * SAVEDS ASM LIB_X509_NAME_oneline(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * a), REG(a1, char * buf), REG(d0, int size));
int SAVEDS ASM LIB_ASN1_verify(REG(a6, __IFACE_OR_BASE), REG(a0, int (*i2d)()), REG(a1, X509_ALGOR * algor1), REG(a2, ASN1_BIT_STRING * signature), REG(a3, char * data), REG(a4, EVP_PKEY * pkey));
int SAVEDS ASM LIB_ASN1_digest(REG(a6, __IFACE_OR_BASE), REG(a0, int (*i2d)()), REG(a1, const EVP_MD * type), REG(a2, char * data), REG(a3, unsigned char * md), REG(a4, unsigned int * len));
int SAVEDS ASM LIB_ASN1_sign(REG(a6, __IFACE_OR_BASE), REG(a0, int (*i2d)()), REG(a1, X509_ALGOR * algor1), REG(a2, X509_ALGOR * algor2), REG(a3, ASN1_BIT_STRING * signature), REG(a4, char * data), REG(d0, EVP_PKEY * pkey), REG(d1, const EVP_MD * type));
int SAVEDS ASM LIB_ASN1_item_digest(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_ITEM * it), REG(a1, const EVP_MD * type), REG(a2, void * data), REG(a3, unsigned char * md), REG(a4, unsigned int * len));
int SAVEDS ASM LIB_ASN1_item_verify(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_ITEM * it), REG(a1, X509_ALGOR * algor1), REG(a2, ASN1_BIT_STRING * signature), REG(a3, void * data), REG(a4, EVP_PKEY * pkey));
int SAVEDS ASM LIB_ASN1_item_sign(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_ITEM * it), REG(a1, X509_ALGOR * algor1), REG(a2, X509_ALGOR * algor2), REG(a3, ASN1_BIT_STRING * signature), REG(a4, void * data), REG(d0, EVP_PKEY * pkey), REG(d1, const EVP_MD * type));
int SAVEDS ASM LIB_X509_set_version(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(d0, long version));
int SAVEDS ASM LIB_X509_set_serialNumber(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, ASN1_INTEGER * serial));
ASN1_INTEGER * SAVEDS ASM LIB_X509_get_serialNumber(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
int SAVEDS ASM LIB_X509_set_issuer_name(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, X509_NAME * name));
X509_NAME * SAVEDS ASM LIB_X509_get_issuer_name(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * a));
int SAVEDS ASM LIB_X509_set_subject_name(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, X509_NAME * name));
X509_NAME * SAVEDS ASM LIB_X509_get_subject_name(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * a));
int SAVEDS ASM LIB_X509_set_notBefore(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, ASN1_TIME * tm));
int SAVEDS ASM LIB_X509_set_notAfter(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, ASN1_TIME * tm));
int SAVEDS ASM LIB_X509_set_pubkey(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, EVP_PKEY * pkey));
EVP_PKEY * SAVEDS ASM LIB_X509_get_pubkey(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
ASN1_BIT_STRING * SAVEDS ASM LIB_X509_get0_pubkey_bitstr(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * x));
int SAVEDS ASM LIB_X509_certificate_type(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, EVP_PKEY * pubkey));
int SAVEDS ASM LIB_X509_REQ_set_version(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * x), REG(d0, long version));
int SAVEDS ASM LIB_X509_REQ_set_subject_name(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * req), REG(a1, X509_NAME * name));
int SAVEDS ASM LIB_X509_REQ_set_pubkey(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * x), REG(a1, EVP_PKEY * pkey));
EVP_PKEY * SAVEDS ASM LIB_X509_REQ_get_pubkey(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * req));
int SAVEDS ASM LIB_X509_REQ_extension_nid(REG(a6, __IFACE_OR_BASE), REG(d0, int nid));
int * SAVEDS ASM LIB_X509_REQ_get_extension_nids(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_REQ_set_extension_nids(REG(a6, __IFACE_OR_BASE), REG(a0, int * nids));
STACK_OF(X509_EXTENSION) * SAVEDS ASM LIB_X509_REQ_get_extensions(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * req));
int SAVEDS ASM LIB_X509_REQ_add_extensions_nid(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * req), REG(a1, STACK_OF(X509_EXTENSION) * exts), REG(d0, int nid));
int SAVEDS ASM LIB_X509_REQ_add_extensions(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * req), REG(a1, STACK_OF(X509_EXTENSION) * exts));
int SAVEDS ASM LIB_X509_REQ_get_attr_count(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REQ * req));
int SAVEDS ASM LIB_X509_REQ_get_attr_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REQ * req), REG(d0, int nid), REG(d1, int lastpos));
int SAVEDS ASM LIB_X509_REQ_get_attr_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REQ * req), REG(a1, ASN1_OBJECT * obj), REG(d0, int lastpos));
X509_ATTRIBUTE * SAVEDS ASM LIB_X509_REQ_get_attr(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REQ * req), REG(d0, int loc));
X509_ATTRIBUTE * SAVEDS ASM LIB_X509_REQ_delete_attr(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * req), REG(d0, int loc));
int SAVEDS ASM LIB_X509_REQ_add1_attr(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * req), REG(a1, X509_ATTRIBUTE * attr));
int SAVEDS ASM LIB_X509_REQ_add1_attr_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * req), REG(a1, const ASN1_OBJECT * obj), REG(d0, int type), REG(a2, const unsigned char * bytes), REG(d1, int len));
int SAVEDS ASM LIB_X509_REQ_add1_attr_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * req), REG(d0, int nid), REG(d1, int type), REG(a1, const unsigned char * bytes), REG(d2, int len));
int SAVEDS ASM LIB_X509_REQ_add1_attr_by_txt(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * req), REG(a1, const char * attrname), REG(d0, int type), REG(a2, const unsigned char * bytes), REG(d1, int len));
int SAVEDS ASM LIB_X509_CRL_set_version(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * x), REG(d0, long version));
int SAVEDS ASM LIB_X509_CRL_set_issuer_name(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * x), REG(a1, X509_NAME * name));
int SAVEDS ASM LIB_X509_CRL_set_lastUpdate(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * x), REG(a1, ASN1_TIME * tm));
int SAVEDS ASM LIB_X509_CRL_set_nextUpdate(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * x), REG(a1, ASN1_TIME * tm));
int SAVEDS ASM LIB_X509_CRL_sort(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * crl));
int SAVEDS ASM LIB_X509_REVOKED_set_serialNumber(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REVOKED * x), REG(a1, ASN1_INTEGER * serial));
int SAVEDS ASM LIB_X509_REVOKED_set_revocationDate(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REVOKED * r), REG(a1, ASN1_TIME * tm));
int SAVEDS ASM LIB_X509_check_private_key(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x509), REG(a1, EVP_PKEY * pkey));
int SAVEDS ASM LIB_X509_issuer_and_serial_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * a), REG(a1, const X509 * b));
unsigned long SAVEDS ASM LIB_X509_issuer_and_serial_hash(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * a));
int SAVEDS ASM LIB_X509_issuer_name_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * a), REG(a1, const X509 * b));
unsigned long SAVEDS ASM LIB_X509_issuer_name_hash(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * a));
int SAVEDS ASM LIB_X509_subject_name_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * a), REG(a1, const X509 * b));
unsigned long SAVEDS ASM LIB_X509_subject_name_hash(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
int SAVEDS ASM LIB_X509_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * a), REG(a1, const X509 * b));
int SAVEDS ASM LIB_X509_NAME_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_NAME * a), REG(a1, const X509_NAME * b));
unsigned long SAVEDS ASM LIB_X509_NAME_hash(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * x));
int SAVEDS ASM LIB_X509_CRL_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_CRL * a), REG(a1, const X509_CRL * b));
int SAVEDS ASM LIB_X509_NAME_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_NAME * name), REG(d0, int obase));
int SAVEDS ASM LIB_X509_NAME_print_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, X509_NAME * nm), REG(d0, int indent), REG(d1, unsigned long flags));
int SAVEDS ASM LIB_X509_print_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509 * x), REG(d0, unsigned long nmflag), REG(d1, unsigned long cflag));
int SAVEDS ASM LIB_X509_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509 * x));
int SAVEDS ASM LIB_X509_ocspid_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509 * x));
int SAVEDS ASM LIB_X509_CERT_AUX_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_CERT_AUX * x), REG(d0, int indent));
int SAVEDS ASM LIB_X509_CRL_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_CRL * x));
int SAVEDS ASM LIB_X509_REQ_print_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_REQ * x), REG(d0, unsigned long nmflag), REG(d1, unsigned long cflag));
int SAVEDS ASM LIB_X509_REQ_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_REQ * req));
int SAVEDS ASM LIB_X509_NAME_entry_count(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * name));
int SAVEDS ASM LIB_X509_NAME_get_text_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * name), REG(d0, int nid), REG(a1, char * buf), REG(d1, int len));
int SAVEDS ASM LIB_X509_NAME_get_text_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * name), REG(a1, ASN1_OBJECT * obj), REG(a2, char * buf), REG(d0, int len));
int SAVEDS ASM LIB_X509_NAME_get_index_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * name), REG(d0, int nid), REG(d1, int lastpos));
int SAVEDS ASM LIB_X509_NAME_get_index_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * name), REG(a1, ASN1_OBJECT * obj), REG(d0, int lastpos));
X509_NAME_ENTRY * SAVEDS ASM LIB_X509_NAME_get_entry(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * name), REG(d0, int loc));
X509_NAME_ENTRY * SAVEDS ASM LIB_X509_NAME_delete_entry(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * name), REG(d0, int loc));
int SAVEDS ASM LIB_X509_NAME_add_entry(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * name), REG(a1, X509_NAME_ENTRY * ne), REG(d0, int loc), REG(d1, int set));
int SAVEDS ASM LIB_X509_NAME_add_entry_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * name), REG(a1, ASN1_OBJECT * obj), REG(d0, int type), REG(a2, unsigned char * bytes), REG(d1, int len), REG(d2, int loc), REG(d3, int set));
int SAVEDS ASM LIB_X509_NAME_add_entry_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * name), REG(d0, int nid), REG(d1, int type), REG(a1, unsigned char * bytes), REG(d2, int len), REG(d3, int loc), REG(d4, int set));
X509_NAME_ENTRY * SAVEDS ASM LIB_X509_NAME_ENTRY_create_by_txt(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME_ENTRY ** ne), REG(a1, const char * field), REG(d0, int type), REG(a2, const unsigned char * bytes), REG(d1, int len));
X509_NAME_ENTRY * SAVEDS ASM LIB_X509_NAME_ENTRY_create_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME_ENTRY ** ne), REG(d0, int nid), REG(d1, int type), REG(a1, unsigned char * bytes), REG(d2, int len));
int SAVEDS ASM LIB_X509_NAME_add_entry_by_txt(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * name), REG(a1, const char * field), REG(d0, int type), REG(a2, const unsigned char * bytes), REG(d1, int len), REG(d2, int loc), REG(d3, int set));
X509_NAME_ENTRY * SAVEDS ASM LIB_X509_NAME_ENTRY_create_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME_ENTRY ** ne), REG(a1, ASN1_OBJECT * obj), REG(d0, int type), REG(a2, const unsigned char * bytes), REG(d1, int len));
int SAVEDS ASM LIB_X509_NAME_ENTRY_set_object(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME_ENTRY * ne), REG(a1, ASN1_OBJECT * obj));
int SAVEDS ASM LIB_X509_NAME_ENTRY_set_data(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME_ENTRY * ne), REG(d0, int type), REG(a1, const unsigned char * bytes), REG(d1, int len));
ASN1_OBJECT * SAVEDS ASM LIB_X509_NAME_ENTRY_get_object(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME_ENTRY * ne));
ASN1_STRING * SAVEDS ASM LIB_X509_NAME_ENTRY_get_data(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME_ENTRY * ne));
int SAVEDS ASM LIB_X509v3_get_ext_count(REG(a6, __IFACE_OR_BASE), REG(a0, const STACK_OF(X509_EXTENSION) * x));
int SAVEDS ASM LIB_X509v3_get_ext_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, const STACK_OF(X509_EXTENSION) * x), REG(d0, int nid), REG(d1, int lastpos));
int SAVEDS ASM LIB_X509v3_get_ext_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, const STACK_OF(X509_EXTENSION) * x), REG(a1, ASN1_OBJECT * obj), REG(d0, int lastpos));
int SAVEDS ASM LIB_X509v3_get_ext_by_critical(REG(a6, __IFACE_OR_BASE), REG(a0, const STACK_OF(X509_EXTENSION) * x), REG(d0, int crit), REG(d1, int lastpos));
X509_EXTENSION * SAVEDS ASM LIB_X509v3_get_ext(REG(a6, __IFACE_OR_BASE), REG(a0, const STACK_OF(X509_EXTENSION) * x), REG(d0, int loc));
X509_EXTENSION * SAVEDS ASM LIB_X509v3_delete_ext(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_EXTENSION) * x), REG(d0, int loc));
STACK_OF(X509_EXTENSION) * SAVEDS ASM LIB_X509v3_add_ext(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_EXTENSION) ** x), REG(a1, X509_EXTENSION * ex), REG(d0, int loc));
int SAVEDS ASM LIB_X509_get_ext_count(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
int SAVEDS ASM LIB_X509_get_ext_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(d0, int nid), REG(d1, int lastpos));
int SAVEDS ASM LIB_X509_get_ext_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, ASN1_OBJECT * obj), REG(d0, int lastpos));
int SAVEDS ASM LIB_X509_get_ext_by_critical(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(d0, int crit), REG(d1, int lastpos));
X509_EXTENSION * SAVEDS ASM LIB_X509_get_ext(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(d0, int loc));
X509_EXTENSION * SAVEDS ASM LIB_X509_delete_ext(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(d0, int loc));
int SAVEDS ASM LIB_X509_add_ext(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, X509_EXTENSION * ex), REG(d0, int loc));
void * SAVEDS ASM LIB_X509_get_ext_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(d0, int nid), REG(a1, int * crit), REG(a2, int * idx));
int SAVEDS ASM LIB_X509_add1_ext_i2d(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(d0, int nid), REG(a1, void * value), REG(d1, int crit), REG(d2, unsigned long flags));
int SAVEDS ASM LIB_X509_CRL_get_ext_count(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * x));
int SAVEDS ASM LIB_X509_CRL_get_ext_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * x), REG(d0, int nid), REG(d1, int lastpos));
int SAVEDS ASM LIB_X509_CRL_get_ext_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * x), REG(a1, ASN1_OBJECT * obj), REG(d0, int lastpos));
int SAVEDS ASM LIB_X509_CRL_get_ext_by_critical(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * x), REG(d0, int crit), REG(d1, int lastpos));
X509_EXTENSION * SAVEDS ASM LIB_X509_CRL_get_ext(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * x), REG(d0, int loc));
X509_EXTENSION * SAVEDS ASM LIB_X509_CRL_delete_ext(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * x), REG(d0, int loc));
int SAVEDS ASM LIB_X509_CRL_add_ext(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * x), REG(a1, X509_EXTENSION * ex), REG(d0, int loc));
void * SAVEDS ASM LIB_X509_CRL_get_ext_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * x), REG(d0, int nid), REG(a1, int * crit), REG(a2, int * idx));
int SAVEDS ASM LIB_X509_CRL_add1_ext_i2d(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * x), REG(d0, int nid), REG(a1, void * value), REG(d1, int crit), REG(d2, unsigned long flags));
int SAVEDS ASM LIB_X509_REVOKED_get_ext_count(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REVOKED * x));
int SAVEDS ASM LIB_X509_REVOKED_get_ext_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REVOKED * x), REG(d0, int nid), REG(d1, int lastpos));
int SAVEDS ASM LIB_X509_REVOKED_get_ext_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REVOKED * x), REG(a1, ASN1_OBJECT * obj), REG(d0, int lastpos));
int SAVEDS ASM LIB_X509_REVOKED_get_ext_by_critical(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REVOKED * x), REG(d0, int crit), REG(d1, int lastpos));
X509_EXTENSION * SAVEDS ASM LIB_X509_REVOKED_get_ext(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REVOKED * x), REG(d0, int loc));
X509_EXTENSION * SAVEDS ASM LIB_X509_REVOKED_delete_ext(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REVOKED * x), REG(d0, int loc));
int SAVEDS ASM LIB_X509_REVOKED_add_ext(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REVOKED * x), REG(a1, X509_EXTENSION * ex), REG(d0, int loc));
void * SAVEDS ASM LIB_X509_REVOKED_get_ext_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REVOKED * x), REG(d0, int nid), REG(a1, int * crit), REG(a2, int * idx));
int SAVEDS ASM LIB_X509_REVOKED_add1_ext_i2d(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REVOKED * x), REG(d0, int nid), REG(a1, void * value), REG(d1, int crit), REG(d2, unsigned long flags));
X509_EXTENSION * SAVEDS ASM LIB_X509_EXTENSION_create_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSION ** ex), REG(d0, int nid), REG(d1, int crit), REG(a1, ASN1_OCTET_STRING * data));
X509_EXTENSION * SAVEDS ASM LIB_X509_EXTENSION_create_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSION ** ex), REG(a1, ASN1_OBJECT * obj), REG(d0, int crit), REG(a2, ASN1_OCTET_STRING * data));
int SAVEDS ASM LIB_X509_EXTENSION_set_object(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSION * ex), REG(a1, ASN1_OBJECT * obj));
int SAVEDS ASM LIB_X509_EXTENSION_set_critical(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSION * ex), REG(d0, int crit));
int SAVEDS ASM LIB_X509_EXTENSION_set_data(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSION * ex), REG(a1, ASN1_OCTET_STRING * data));
ASN1_OBJECT * SAVEDS ASM LIB_X509_EXTENSION_get_object(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSION * ex));
ASN1_OCTET_STRING * SAVEDS ASM LIB_X509_EXTENSION_get_data(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSION * ne));
int SAVEDS ASM LIB_X509_EXTENSION_get_critical(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSION * ex));
int SAVEDS ASM LIB_X509at_get_attr_count(REG(a6, __IFACE_OR_BASE), REG(a0, const STACK_OF(X509_ATTRIBUTE) * x));
int SAVEDS ASM LIB_X509at_get_attr_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, const STACK_OF(X509_ATTRIBUTE) * x), REG(d0, int nid), REG(d1, int lastpos));
int SAVEDS ASM LIB_X509at_get_attr_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, const STACK_OF(X509_ATTRIBUTE) * sk), REG(a1, ASN1_OBJECT * obj), REG(d0, int lastpos));
X509_ATTRIBUTE * SAVEDS ASM LIB_X509at_get_attr(REG(a6, __IFACE_OR_BASE), REG(a0, const STACK_OF(X509_ATTRIBUTE) * x), REG(d0, int loc));
X509_ATTRIBUTE * SAVEDS ASM LIB_X509at_delete_attr(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_ATTRIBUTE) * x), REG(d0, int loc));
STACK_OF(X509_ATTRIBUTE) * SAVEDS ASM LIB_X509at_add1_attr(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_ATTRIBUTE) ** x), REG(a1, X509_ATTRIBUTE * attr));
STACK_OF(X509_ATTRIBUTE) * SAVEDS ASM LIB_X509at_add1_attr_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_ATTRIBUTE) ** x), REG(a1, const ASN1_OBJECT * obj), REG(d0, int type), REG(a2, const unsigned char * bytes), REG(d1, int len));
STACK_OF(X509_ATTRIBUTE) * SAVEDS ASM LIB_X509at_add1_attr_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_ATTRIBUTE) ** x), REG(d0, int nid), REG(d1, int type), REG(a1, const unsigned char * bytes), REG(d2, int len));
STACK_OF(X509_ATTRIBUTE) * SAVEDS ASM LIB_X509at_add1_attr_by_txt(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_ATTRIBUTE) ** x), REG(a1, const char * attrname), REG(d0, int type), REG(a2, const unsigned char * bytes), REG(d1, int len));
X509_ATTRIBUTE * SAVEDS ASM LIB_X509_ATTRIBUTE_create_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ATTRIBUTE ** attr), REG(d0, int nid), REG(d1, int atrtype), REG(a1, const void * data), REG(d2, int len));
X509_ATTRIBUTE * SAVEDS ASM LIB_X509_ATTRIBUTE_create_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ATTRIBUTE ** attr), REG(a1, const ASN1_OBJECT * obj), REG(d0, int atrtype), REG(a2, const void * data), REG(d1, int len));
X509_ATTRIBUTE * SAVEDS ASM LIB_X509_ATTRIBUTE_create_by_txt(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ATTRIBUTE ** attr), REG(a1, const char * atrname), REG(d0, int type), REG(a2, const unsigned char * bytes), REG(d1, int len));
int SAVEDS ASM LIB_X509_ATTRIBUTE_set1_object(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ATTRIBUTE * attr), REG(a1, const ASN1_OBJECT * obj));
int SAVEDS ASM LIB_X509_ATTRIBUTE_set1_data(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ATTRIBUTE * attr), REG(d0, int attrtype), REG(a1, const void * data), REG(d1, int len));
void * SAVEDS ASM LIB_X509_ATTRIBUTE_get0_data(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ATTRIBUTE * attr), REG(d0, int idx), REG(d1, int atrtype), REG(a1, void * data));
int SAVEDS ASM LIB_X509_ATTRIBUTE_count(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ATTRIBUTE * attr));
ASN1_OBJECT * SAVEDS ASM LIB_X509_ATTRIBUTE_get0_object(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ATTRIBUTE * attr));
ASN1_TYPE * SAVEDS ASM LIB_X509_ATTRIBUTE_get0_type(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ATTRIBUTE * attr), REG(d0, int idx));
int SAVEDS ASM LIB_X509_verify_cert(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx));
X509 * SAVEDS ASM LIB_X509_find_by_issuer_and_serial(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509) * sk), REG(a1, X509_NAME * name), REG(a2, ASN1_INTEGER * serial));
X509 * SAVEDS ASM LIB_X509_find_by_subject(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509) * sk), REG(a1, X509_NAME * name));
PBEPARAM * SAVEDS ASM LIB_PBEPARAM_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PBEPARAM_free(REG(a6, __IFACE_OR_BASE), REG(a0, PBEPARAM * a));
PBEPARAM * SAVEDS ASM LIB_d2i_PBEPARAM(REG(a6, __IFACE_OR_BASE), REG(a0, PBEPARAM ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PBEPARAM(REG(a6, __IFACE_OR_BASE), REG(a0, PBEPARAM * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PBEPARAM_it(REG(a6, __IFACE_OR_BASE));
PBE2PARAM * SAVEDS ASM LIB_PBE2PARAM_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PBE2PARAM_free(REG(a6, __IFACE_OR_BASE), REG(a0, PBE2PARAM * a));
PBE2PARAM * SAVEDS ASM LIB_d2i_PBE2PARAM(REG(a6, __IFACE_OR_BASE), REG(a0, PBE2PARAM ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PBE2PARAM(REG(a6, __IFACE_OR_BASE), REG(a0, PBE2PARAM * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PBE2PARAM_it(REG(a6, __IFACE_OR_BASE));
PBKDF2PARAM * SAVEDS ASM LIB_PBKDF2PARAM_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PBKDF2PARAM_free(REG(a6, __IFACE_OR_BASE), REG(a0, PBKDF2PARAM * a));
PBKDF2PARAM * SAVEDS ASM LIB_d2i_PBKDF2PARAM(REG(a6, __IFACE_OR_BASE), REG(a0, PBKDF2PARAM ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PBKDF2PARAM(REG(a6, __IFACE_OR_BASE), REG(a0, PBKDF2PARAM * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PBKDF2PARAM_it(REG(a6, __IFACE_OR_BASE));
X509_ALGOR * SAVEDS ASM LIB_PKCS5_pbe_set(REG(a6, __IFACE_OR_BASE), REG(d0, int alg), REG(d1, int iter), REG(a0, unsigned char * salt), REG(d2, int saltlen));
X509_ALGOR * SAVEDS ASM LIB_PKCS5_pbe2_set(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher), REG(d0, int iter), REG(a1, unsigned char * salt), REG(d1, int saltlen));
PKCS8_PRIV_KEY_INFO * SAVEDS ASM LIB_PKCS8_PRIV_KEY_INFO_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS8_PRIV_KEY_INFO_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS8_PRIV_KEY_INFO * a));
PKCS8_PRIV_KEY_INFO * SAVEDS ASM LIB_d2i_PKCS8_PRIV_KEY_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS8_PRIV_KEY_INFO ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS8_PRIV_KEY_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS8_PRIV_KEY_INFO * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS8_PRIV_KEY_INFO_it(REG(a6, __IFACE_OR_BASE));
EVP_PKEY * SAVEDS ASM LIB_EVP_PKCS82PKEY(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS8_PRIV_KEY_INFO * p8));
PKCS8_PRIV_KEY_INFO * SAVEDS ASM LIB_EVP_PKEY2PKCS8(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey));
PKCS8_PRIV_KEY_INFO * SAVEDS ASM LIB_EVP_PKEY2PKCS8_broken(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(d0, int broken));
PKCS8_PRIV_KEY_INFO * SAVEDS ASM LIB_PKCS8_set_broken(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS8_PRIV_KEY_INFO * p8), REG(d0, int broken));
int SAVEDS ASM LIB_X509_check_trust(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(d0, int id), REG(d1, int flags));
int SAVEDS ASM LIB_X509_TRUST_get_count(REG(a6, __IFACE_OR_BASE));
X509_TRUST * SAVEDS ASM LIB_X509_TRUST_get0(REG(a6, __IFACE_OR_BASE), REG(d0, int idx));
int SAVEDS ASM LIB_X509_TRUST_get_by_id(REG(a6, __IFACE_OR_BASE), REG(d0, int id));
int SAVEDS ASM LIB_X509_TRUST_add(REG(a6, __IFACE_OR_BASE), REG(d0, int id), REG(d1, int flags), REG(a0, int (*ck)(X509_TRUST *, X509 *, int)), REG(a1, char * name), REG(d2, int arg1), REG(a2, void * arg2));
void SAVEDS ASM LIB_X509_TRUST_cleanup(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_X509_TRUST_get_flags(REG(a6, __IFACE_OR_BASE), REG(a0, X509_TRUST * xp));
char * SAVEDS ASM LIB_X509_TRUST_get0_name(REG(a6, __IFACE_OR_BASE), REG(a0, X509_TRUST * xp));
int SAVEDS ASM LIB_X509_TRUST_get_trust(REG(a6, __IFACE_OR_BASE), REG(a0, X509_TRUST * xp));
void SAVEDS ASM LIB_ERR_load_X509_strings(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_X509_OBJECT_idx_by_subject(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_OBJECT) * h), REG(d0, int type), REG(a1, X509_NAME * name));
X509_OBJECT * SAVEDS ASM LIB_X509_OBJECT_retrieve_by_subject(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_OBJECT) * h), REG(d0, int type), REG(a1, X509_NAME * name));
X509_OBJECT * SAVEDS ASM LIB_X509_OBJECT_retrieve_match(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_OBJECT) * h), REG(a1, X509_OBJECT * x));
void SAVEDS ASM LIB_X509_OBJECT_up_ref_count(REG(a6, __IFACE_OR_BASE), REG(a0, X509_OBJECT * a));
void SAVEDS ASM LIB_X509_OBJECT_free_contents(REG(a6, __IFACE_OR_BASE), REG(a0, X509_OBJECT * a));
X509_STORE * SAVEDS ASM LIB_X509_STORE_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_STORE_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * v));
void SAVEDS ASM LIB_X509_STORE_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * ctx), REG(d0, long flags));
int SAVEDS ASM LIB_X509_STORE_set_purpose(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * ctx), REG(d0, int purpose));
int SAVEDS ASM LIB_X509_STORE_set_trust(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * ctx), REG(d0, int trust));
X509_STORE_CTX * SAVEDS ASM LIB_X509_STORE_CTX_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_X509_STORE_CTX_get1_issuer(REG(a6, __IFACE_OR_BASE), REG(a0, X509 ** issuer), REG(a1, X509_STORE_CTX * ctx), REG(a2, X509 * x));
void SAVEDS ASM LIB_X509_STORE_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx));
int SAVEDS ASM LIB_X509_STORE_CTX_init(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(a1, X509_STORE * store), REG(a2, X509 * x509), REG(a3, STACK_OF(X509) * chain));
void SAVEDS ASM LIB_X509_STORE_CTX_trusted_stack(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(a1, STACK_OF(X509) * sk));
void SAVEDS ASM LIB_X509_STORE_CTX_cleanup(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx));
X509_LOOKUP * SAVEDS ASM LIB_X509_STORE_add_lookup(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * v), REG(a1, X509_LOOKUP_METHOD * m));
X509_LOOKUP_METHOD * SAVEDS ASM LIB_X509_LOOKUP_hash_dir(REG(a6, __IFACE_OR_BASE));
X509_LOOKUP_METHOD * SAVEDS ASM LIB_X509_LOOKUP_file(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_X509_STORE_add_cert(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * ctx), REG(a1, X509 * x));
int SAVEDS ASM LIB_X509_STORE_add_crl(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * ctx), REG(a1, X509_CRL * x));
int SAVEDS ASM LIB_X509_STORE_get_by_subject(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * vs), REG(d0, int type), REG(a1, X509_NAME * name), REG(a2, X509_OBJECT * ret));
int SAVEDS ASM LIB_X509_LOOKUP_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP * ctx), REG(d0, int cmd), REG(a1, const char * argc), REG(d1, long argl), REG(a2, char ** ret));
int SAVEDS ASM LIB_X509_load_cert_file(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP * ctx), REG(a1, const char * file), REG(d0, int type));
int SAVEDS ASM LIB_X509_load_crl_file(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP * ctx), REG(a1, const char * file), REG(d0, int type));
int SAVEDS ASM LIB_X509_load_cert_crl_file(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP * ctx), REG(a1, const char * file), REG(d0, int type));
X509_LOOKUP * SAVEDS ASM LIB_X509_LOOKUP_new(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP_METHOD * method));
void SAVEDS ASM LIB_X509_LOOKUP_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP * ctx));
int SAVEDS ASM LIB_X509_LOOKUP_init(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP * ctx));
int SAVEDS ASM LIB_X509_LOOKUP_by_subject(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP * ctx), REG(d0, int type), REG(a1, X509_NAME * name), REG(a2, X509_OBJECT * ret));
int SAVEDS ASM LIB_X509_LOOKUP_by_issuer_serial(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP * ctx), REG(d0, int type), REG(a1, X509_NAME * name), REG(a2, ASN1_INTEGER * serial), REG(a3, X509_OBJECT * ret));
int SAVEDS ASM LIB_X509_LOOKUP_by_fingerprint(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP * ctx), REG(d0, int type), REG(a1, unsigned char * bytes), REG(d1, int len), REG(a2, X509_OBJECT * ret));
int SAVEDS ASM LIB_X509_LOOKUP_by_alias(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP * ctx), REG(d0, int type), REG(a1, char * str), REG(d1, int len), REG(a2, X509_OBJECT * ret));
int SAVEDS ASM LIB_X509_LOOKUP_shutdown(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP * ctx));
int SAVEDS ASM LIB_X509_STORE_load_locations(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * ctx), REG(a1, const char * file), REG(a2, const char * dir));
int SAVEDS ASM LIB_X509_STORE_set_default_paths(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * ctx));
int SAVEDS ASM LIB_X509_STORE_CTX_get_ex_new_index(REG(a6, __IFACE_OR_BASE), REG(d0, long argl), REG(a0, void * argp), REG(a1, CRYPTO_EX_new * new_func), REG(a2, CRYPTO_EX_dup * dup_func), REG(a3, CRYPTO_EX_free * free_func));
int SAVEDS ASM LIB_X509_STORE_CTX_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(d0, int idx), REG(a1, void * data));
void * SAVEDS ASM LIB_X509_STORE_CTX_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(d0, int idx));
int SAVEDS ASM LIB_X509_STORE_CTX_get_error(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx));
void SAVEDS ASM LIB_X509_STORE_CTX_set_error(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(d0, int s));
int SAVEDS ASM LIB_X509_STORE_CTX_get_error_depth(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx));
X509 * SAVEDS ASM LIB_X509_STORE_CTX_get_current_cert(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx));
STACK_OF(X509) * SAVEDS ASM LIB_X509_STORE_CTX_get_chain(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx));
STACK_OF(X509) * SAVEDS ASM LIB_X509_STORE_CTX_get1_chain(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx));
void SAVEDS ASM LIB_X509_STORE_CTX_set_cert(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * c), REG(a1, X509 * x));
void SAVEDS ASM LIB_X509_STORE_CTX_set_chain(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * c), REG(a1, STACK_OF(X509) * sk));
int SAVEDS ASM LIB_X509_STORE_CTX_set_purpose(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(d0, int purpose));
int SAVEDS ASM LIB_X509_STORE_CTX_set_trust(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(d0, int trust));
int SAVEDS ASM LIB_X509_STORE_CTX_purpose_inherit(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(d0, int def_purpose), REG(d1, int purpose), REG(d2, int trust));
void SAVEDS ASM LIB_X509_STORE_CTX_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(d0, long flags));
void SAVEDS ASM LIB_X509_STORE_CTX_set_time(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(d0, long flags), REG(d1, time_t t));
void SAVEDS ASM LIB_X509_STORE_CTX_set_verify_cb(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(a1, int (*verify_cb)(int, X509_STORE_CTX *)));
BASIC_CONSTRAINTS * SAVEDS ASM LIB_BASIC_CONSTRAINTS_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_BASIC_CONSTRAINTS_free(REG(a6, __IFACE_OR_BASE), REG(a0, BASIC_CONSTRAINTS * a));
BASIC_CONSTRAINTS * SAVEDS ASM LIB_d2i_BASIC_CONSTRAINTS(REG(a6, __IFACE_OR_BASE), REG(a0, BASIC_CONSTRAINTS ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_BASIC_CONSTRAINTS(REG(a6, __IFACE_OR_BASE), REG(a0, BASIC_CONSTRAINTS * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_BASIC_CONSTRAINTS_it(REG(a6, __IFACE_OR_BASE));
SXNET * SAVEDS ASM LIB_SXNET_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_SXNET_free(REG(a6, __IFACE_OR_BASE), REG(a0, SXNET * a));
SXNET * SAVEDS ASM LIB_d2i_SXNET(REG(a6, __IFACE_OR_BASE), REG(a0, SXNET ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_SXNET(REG(a6, __IFACE_OR_BASE), REG(a0, SXNET * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_SXNET_it(REG(a6, __IFACE_OR_BASE));
SXNETID * SAVEDS ASM LIB_SXNETID_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_SXNETID_free(REG(a6, __IFACE_OR_BASE), REG(a0, SXNETID * a));
SXNETID * SAVEDS ASM LIB_d2i_SXNETID(REG(a6, __IFACE_OR_BASE), REG(a0, SXNETID ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_SXNETID(REG(a6, __IFACE_OR_BASE), REG(a0, SXNETID * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_SXNETID_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_SXNET_add_id_asc(REG(a6, __IFACE_OR_BASE), REG(a0, SXNET ** psx), REG(a1, char * zone), REG(a2, char * user), REG(d0, int userlen));
int SAVEDS ASM LIB_SXNET_add_id_ulong(REG(a6, __IFACE_OR_BASE), REG(a0, SXNET ** psx), REG(d0, unsigned long lzone), REG(a1, char * user), REG(d1, int userlen));
int SAVEDS ASM LIB_SXNET_add_id_INTEGER(REG(a6, __IFACE_OR_BASE), REG(a0, SXNET ** psx), REG(a1, ASN1_INTEGER * izone), REG(a2, char * user), REG(d0, int userlen));
ASN1_OCTET_STRING * SAVEDS ASM LIB_SXNET_get_id_asc(REG(a6, __IFACE_OR_BASE), REG(a0, SXNET * sx), REG(a1, char * zone));
ASN1_OCTET_STRING * SAVEDS ASM LIB_SXNET_get_id_ulong(REG(a6, __IFACE_OR_BASE), REG(a0, SXNET * sx), REG(d0, unsigned long lzone));
ASN1_OCTET_STRING * SAVEDS ASM LIB_SXNET_get_id_INTEGER(REG(a6, __IFACE_OR_BASE), REG(a0, SXNET * sx), REG(a1, ASN1_INTEGER * zone));
AUTHORITY_KEYID * SAVEDS ASM LIB_AUTHORITY_KEYID_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_AUTHORITY_KEYID_free(REG(a6, __IFACE_OR_BASE), REG(a0, AUTHORITY_KEYID * a));
AUTHORITY_KEYID * SAVEDS ASM LIB_d2i_AUTHORITY_KEYID(REG(a6, __IFACE_OR_BASE), REG(a0, AUTHORITY_KEYID ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_AUTHORITY_KEYID(REG(a6, __IFACE_OR_BASE), REG(a0, AUTHORITY_KEYID * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_AUTHORITY_KEYID_it(REG(a6, __IFACE_OR_BASE));
PKEY_USAGE_PERIOD * SAVEDS ASM LIB_PKEY_USAGE_PERIOD_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKEY_USAGE_PERIOD_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKEY_USAGE_PERIOD * a));
PKEY_USAGE_PERIOD * SAVEDS ASM LIB_d2i_PKEY_USAGE_PERIOD(REG(a6, __IFACE_OR_BASE), REG(a0, PKEY_USAGE_PERIOD ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKEY_USAGE_PERIOD(REG(a6, __IFACE_OR_BASE), REG(a0, PKEY_USAGE_PERIOD * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKEY_USAGE_PERIOD_it(REG(a6, __IFACE_OR_BASE));
GENERAL_NAME * SAVEDS ASM LIB_GENERAL_NAME_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_GENERAL_NAME_free(REG(a6, __IFACE_OR_BASE), REG(a0, GENERAL_NAME * a));
GENERAL_NAME * SAVEDS ASM LIB_d2i_GENERAL_NAME(REG(a6, __IFACE_OR_BASE), REG(a0, GENERAL_NAME ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_GENERAL_NAME(REG(a6, __IFACE_OR_BASE), REG(a0, GENERAL_NAME * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_GENERAL_NAME_it(REG(a6, __IFACE_OR_BASE));
STACK_OF(CONF_VALUE) * SAVEDS ASM LIB_i2v_GENERAL_NAME(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * method), REG(a1, GENERAL_NAME * gen), REG(a2, STACK_OF(CONF_VALUE) * ret));
int SAVEDS ASM LIB_GENERAL_NAME_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, GENERAL_NAME * gen));
GENERAL_NAMES * SAVEDS ASM LIB_GENERAL_NAMES_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_GENERAL_NAMES_free(REG(a6, __IFACE_OR_BASE), REG(a0, GENERAL_NAMES * a));
GENERAL_NAMES * SAVEDS ASM LIB_d2i_GENERAL_NAMES(REG(a6, __IFACE_OR_BASE), REG(a0, GENERAL_NAMES ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_GENERAL_NAMES(REG(a6, __IFACE_OR_BASE), REG(a0, GENERAL_NAMES * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_GENERAL_NAMES_it(REG(a6, __IFACE_OR_BASE));
STACK_OF(CONF_VALUE) * SAVEDS ASM LIB_i2v_GENERAL_NAMES(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * method), REG(a1, GENERAL_NAMES * gen), REG(a2, STACK_OF(CONF_VALUE) * extlist));
GENERAL_NAMES * SAVEDS ASM LIB_v2i_GENERAL_NAMES(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * method), REG(a1, X509V3_CTX * ctx), REG(a2, STACK_OF(CONF_VALUE) * nval));
OTHERNAME * SAVEDS ASM LIB_OTHERNAME_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OTHERNAME_free(REG(a6, __IFACE_OR_BASE), REG(a0, OTHERNAME * a));
OTHERNAME * SAVEDS ASM LIB_d2i_OTHERNAME(REG(a6, __IFACE_OR_BASE), REG(a0, OTHERNAME ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OTHERNAME(REG(a6, __IFACE_OR_BASE), REG(a0, OTHERNAME * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OTHERNAME_it(REG(a6, __IFACE_OR_BASE));
EDIPARTYNAME * SAVEDS ASM LIB_EDIPARTYNAME_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_EDIPARTYNAME_free(REG(a6, __IFACE_OR_BASE), REG(a0, EDIPARTYNAME * a));
EDIPARTYNAME * SAVEDS ASM LIB_d2i_EDIPARTYNAME(REG(a6, __IFACE_OR_BASE), REG(a0, EDIPARTYNAME ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_EDIPARTYNAME(REG(a6, __IFACE_OR_BASE), REG(a0, EDIPARTYNAME * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_EDIPARTYNAME_it(REG(a6, __IFACE_OR_BASE));
char * SAVEDS ASM LIB_i2s_ASN1_OCTET_STRING(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * method), REG(a1, ASN1_OCTET_STRING * ia5));
ASN1_OCTET_STRING * SAVEDS ASM LIB_s2i_ASN1_OCTET_STRING(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * method), REG(a1, X509V3_CTX * ctx), REG(a2, char * str));
EXTENDED_KEY_USAGE * SAVEDS ASM LIB_EXTENDED_KEY_USAGE_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_EXTENDED_KEY_USAGE_free(REG(a6, __IFACE_OR_BASE), REG(a0, EXTENDED_KEY_USAGE * a));
EXTENDED_KEY_USAGE * SAVEDS ASM LIB_d2i_EXTENDED_KEY_USAGE(REG(a6, __IFACE_OR_BASE), REG(a0, EXTENDED_KEY_USAGE ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_EXTENDED_KEY_USAGE(REG(a6, __IFACE_OR_BASE), REG(a0, EXTENDED_KEY_USAGE * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_EXTENDED_KEY_USAGE_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_i2a_ACCESS_DESCRIPTION(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, ACCESS_DESCRIPTION * a));
CERTIFICATEPOLICIES * SAVEDS ASM LIB_CERTIFICATEPOLICIES_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_CERTIFICATEPOLICIES_free(REG(a6, __IFACE_OR_BASE), REG(a0, CERTIFICATEPOLICIES * a));
CERTIFICATEPOLICIES * SAVEDS ASM LIB_d2i_CERTIFICATEPOLICIES(REG(a6, __IFACE_OR_BASE), REG(a0, CERTIFICATEPOLICIES ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_CERTIFICATEPOLICIES(REG(a6, __IFACE_OR_BASE), REG(a0, CERTIFICATEPOLICIES * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_CERTIFICATEPOLICIES_it(REG(a6, __IFACE_OR_BASE));
POLICYINFO * SAVEDS ASM LIB_POLICYINFO_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_POLICYINFO_free(REG(a6, __IFACE_OR_BASE), REG(a0, POLICYINFO * a));
POLICYINFO * SAVEDS ASM LIB_d2i_POLICYINFO(REG(a6, __IFACE_OR_BASE), REG(a0, POLICYINFO ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_POLICYINFO(REG(a6, __IFACE_OR_BASE), REG(a0, POLICYINFO * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_POLICYINFO_it(REG(a6, __IFACE_OR_BASE));
POLICYQUALINFO * SAVEDS ASM LIB_POLICYQUALINFO_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_POLICYQUALINFO_free(REG(a6, __IFACE_OR_BASE), REG(a0, POLICYQUALINFO * a));
POLICYQUALINFO * SAVEDS ASM LIB_d2i_POLICYQUALINFO(REG(a6, __IFACE_OR_BASE), REG(a0, POLICYQUALINFO ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_POLICYQUALINFO(REG(a6, __IFACE_OR_BASE), REG(a0, POLICYQUALINFO * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_POLICYQUALINFO_it(REG(a6, __IFACE_OR_BASE));
USERNOTICE * SAVEDS ASM LIB_USERNOTICE_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_USERNOTICE_free(REG(a6, __IFACE_OR_BASE), REG(a0, USERNOTICE * a));
USERNOTICE * SAVEDS ASM LIB_d2i_USERNOTICE(REG(a6, __IFACE_OR_BASE), REG(a0, USERNOTICE ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_USERNOTICE(REG(a6, __IFACE_OR_BASE), REG(a0, USERNOTICE * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_USERNOTICE_it(REG(a6, __IFACE_OR_BASE));
NOTICEREF * SAVEDS ASM LIB_NOTICEREF_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_NOTICEREF_free(REG(a6, __IFACE_OR_BASE), REG(a0, NOTICEREF * a));
NOTICEREF * SAVEDS ASM LIB_d2i_NOTICEREF(REG(a6, __IFACE_OR_BASE), REG(a0, NOTICEREF ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_NOTICEREF(REG(a6, __IFACE_OR_BASE), REG(a0, NOTICEREF * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_NOTICEREF_it(REG(a6, __IFACE_OR_BASE));
CRL_DIST_POINTS * SAVEDS ASM LIB_CRL_DIST_POINTS_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_CRL_DIST_POINTS_free(REG(a6, __IFACE_OR_BASE), REG(a0, CRL_DIST_POINTS * a));
CRL_DIST_POINTS * SAVEDS ASM LIB_d2i_CRL_DIST_POINTS(REG(a6, __IFACE_OR_BASE), REG(a0, CRL_DIST_POINTS ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_CRL_DIST_POINTS(REG(a6, __IFACE_OR_BASE), REG(a0, CRL_DIST_POINTS * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_CRL_DIST_POINTS_it(REG(a6, __IFACE_OR_BASE));
DIST_POINT * SAVEDS ASM LIB_DIST_POINT_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_DIST_POINT_free(REG(a6, __IFACE_OR_BASE), REG(a0, DIST_POINT * a));
DIST_POINT * SAVEDS ASM LIB_d2i_DIST_POINT(REG(a6, __IFACE_OR_BASE), REG(a0, DIST_POINT ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_DIST_POINT(REG(a6, __IFACE_OR_BASE), REG(a0, DIST_POINT * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_DIST_POINT_it(REG(a6, __IFACE_OR_BASE));
DIST_POINT_NAME * SAVEDS ASM LIB_DIST_POINT_NAME_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_DIST_POINT_NAME_free(REG(a6, __IFACE_OR_BASE), REG(a0, DIST_POINT_NAME * a));
DIST_POINT_NAME * SAVEDS ASM LIB_d2i_DIST_POINT_NAME(REG(a6, __IFACE_OR_BASE), REG(a0, DIST_POINT_NAME ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_DIST_POINT_NAME(REG(a6, __IFACE_OR_BASE), REG(a0, DIST_POINT_NAME * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_DIST_POINT_NAME_it(REG(a6, __IFACE_OR_BASE));
ACCESS_DESCRIPTION * SAVEDS ASM LIB_ACCESS_DESCRIPTION_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ACCESS_DESCRIPTION_free(REG(a6, __IFACE_OR_BASE), REG(a0, ACCESS_DESCRIPTION * a));
ACCESS_DESCRIPTION * SAVEDS ASM LIB_d2i_ACCESS_DESCRIPTION(REG(a6, __IFACE_OR_BASE), REG(a0, ACCESS_DESCRIPTION ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ACCESS_DESCRIPTION(REG(a6, __IFACE_OR_BASE), REG(a0, ACCESS_DESCRIPTION * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ACCESS_DESCRIPTION_it(REG(a6, __IFACE_OR_BASE));
AUTHORITY_INFO_ACCESS * SAVEDS ASM LIB_AUTHORITY_INFO_ACCESS_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_AUTHORITY_INFO_ACCESS_free(REG(a6, __IFACE_OR_BASE), REG(a0, AUTHORITY_INFO_ACCESS * a));
AUTHORITY_INFO_ACCESS * SAVEDS ASM LIB_d2i_AUTHORITY_INFO_ACCESS(REG(a6, __IFACE_OR_BASE), REG(a0, AUTHORITY_INFO_ACCESS ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_AUTHORITY_INFO_ACCESS(REG(a6, __IFACE_OR_BASE), REG(a0, AUTHORITY_INFO_ACCESS * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_AUTHORITY_INFO_ACCESS_it(REG(a6, __IFACE_OR_BASE));
GENERAL_NAME * SAVEDS ASM LIB_v2i_GENERAL_NAME(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * method), REG(a1, X509V3_CTX * ctx), REG(a2, CONF_VALUE * cnf));
void SAVEDS ASM LIB_X509V3_conf_free(REG(a6, __IFACE_OR_BASE), REG(a0, CONF_VALUE * val));
X509_EXTENSION * SAVEDS ASM LIB_X509V3_EXT_nconf_nid(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, X509V3_CTX * ctx), REG(d0, int ext_nid), REG(a2, char * value));
X509_EXTENSION * SAVEDS ASM LIB_X509V3_EXT_nconf(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, X509V3_CTX * ctx), REG(a2, char * name), REG(a3, char * value));
int SAVEDS ASM LIB_X509V3_EXT_add_nconf_sk(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, X509V3_CTX * ctx), REG(a2, char * section), REG(a3, STACK_OF(X509_EXTENSION) ** sk));
int SAVEDS ASM LIB_X509V3_EXT_add_nconf(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, X509V3_CTX * ctx), REG(a2, char * section), REG(a3, X509 * cert));
int SAVEDS ASM LIB_X509V3_EXT_REQ_add_nconf(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, X509V3_CTX * ctx), REG(a2, char * section), REG(a3, X509_REQ * req));
int SAVEDS ASM LIB_X509V3_EXT_CRL_add_nconf(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, X509V3_CTX * ctx), REG(a2, char * section), REG(a3, X509_CRL * crl));
X509_EXTENSION * SAVEDS ASM LIB_X509V3_EXT_conf_nid(REG(a6, __IFACE_OR_BASE), REG(a0, LHASH_OF(CONF_VALUE) * conf), REG(a1, X509V3_CTX * ctx), REG(d0, int ext_nid), REG(a2, char * value));
X509_EXTENSION * SAVEDS ASM LIB_X509V3_EXT_conf(REG(a6, __IFACE_OR_BASE), REG(a0, LHASH_OF(CONF_VALUE) * conf), REG(a1, X509V3_CTX * ctx), REG(a2, char * name), REG(a3, char * value));
int SAVEDS ASM LIB_X509V3_EXT_add_conf(REG(a6, __IFACE_OR_BASE), REG(a0, LHASH_OF(CONF_VALUE) * conf), REG(a1, X509V3_CTX * ctx), REG(a2, char * section), REG(a3, X509 * cert));
int SAVEDS ASM LIB_X509V3_EXT_REQ_add_conf(REG(a6, __IFACE_OR_BASE), REG(a0, LHASH_OF(CONF_VALUE) * conf), REG(a1, X509V3_CTX * ctx), REG(a2, char * section), REG(a3, X509_REQ * req));
int SAVEDS ASM LIB_X509V3_EXT_CRL_add_conf(REG(a6, __IFACE_OR_BASE), REG(a0, LHASH_OF(CONF_VALUE) * conf), REG(a1, X509V3_CTX * ctx), REG(a2, char * section), REG(a3, X509_CRL * crl));
int SAVEDS ASM LIB_X509V3_add_value_bool_nf(REG(a6, __IFACE_OR_BASE), REG(a0, char * name), REG(d0, int asn1_bool), REG(a1, STACK_OF(CONF_VALUE) ** extlist));
int SAVEDS ASM LIB_X509V3_get_value_bool(REG(a6, __IFACE_OR_BASE), REG(a0, CONF_VALUE * value), REG(a1, int * asn1_bool));
int SAVEDS ASM LIB_X509V3_get_value_int(REG(a6, __IFACE_OR_BASE), REG(a0, CONF_VALUE * value), REG(a1, ASN1_INTEGER ** aint));
void SAVEDS ASM LIB_X509V3_set_nconf(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_CTX * ctx), REG(a1, CONF * conf));
void SAVEDS ASM LIB_X509V3_set_conf_lhash(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_CTX * ctx), REG(a1, LHASH_OF(CONF_VALUE) * lhash));
char * SAVEDS ASM LIB_X509V3_get_string(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_CTX * ctx), REG(a1, char * name), REG(a2, char * section));
STACK_OF(CONF_VALUE) * SAVEDS ASM LIB_X509V3_get_section(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_CTX * ctx), REG(a1, char * section));
void SAVEDS ASM LIB_X509V3_string_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_CTX * ctx), REG(a1, char * str));
void SAVEDS ASM LIB_X509V3_section_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_CTX * ctx), REG(a1, STACK_OF(CONF_VALUE) * section));
void SAVEDS ASM LIB_X509V3_set_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_CTX * ctx), REG(a1, X509 * issuer), REG(a2, X509 * subject), REG(a3, X509_REQ * req), REG(a4, X509_CRL * crl), REG(d0, int flags));
int SAVEDS ASM LIB_X509V3_add_value(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name), REG(a1, const char * value), REG(a2, STACK_OF(CONF_VALUE) ** extlist));
int SAVEDS ASM LIB_X509V3_add_value_uchar(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name), REG(a1, const unsigned char * value), REG(a2, STACK_OF(CONF_VALUE) ** extlist));
int SAVEDS ASM LIB_X509V3_add_value_bool(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name), REG(d0, int asn1_bool), REG(a1, STACK_OF(CONF_VALUE) ** extlist));
int SAVEDS ASM LIB_X509V3_add_value_int(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name), REG(a1, ASN1_INTEGER * aint), REG(a2, STACK_OF(CONF_VALUE) ** extlist));
char * SAVEDS ASM LIB_i2s_ASN1_INTEGER(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * meth), REG(a1, ASN1_INTEGER * aint));
ASN1_INTEGER * SAVEDS ASM LIB_s2i_ASN1_INTEGER(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * meth), REG(a1, char * value));
char * SAVEDS ASM LIB_i2s_ASN1_ENUMERATED(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * meth), REG(a1, ASN1_ENUMERATED * aint));
char * SAVEDS ASM LIB_i2s_ASN1_ENUMERATED_TABLE(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * meth), REG(a1, ASN1_ENUMERATED * aint));
int SAVEDS ASM LIB_X509V3_EXT_add(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * ext));
int SAVEDS ASM LIB_X509V3_EXT_add_list(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * extlist));
int SAVEDS ASM LIB_X509V3_EXT_add_alias(REG(a6, __IFACE_OR_BASE), REG(d0, int nid_to), REG(d1, int nid_from));
void SAVEDS ASM LIB_X509V3_EXT_cleanup(REG(a6, __IFACE_OR_BASE));
const X509V3_EXT_METHOD * SAVEDS ASM LIB_X509V3_EXT_get(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSION * ext));
const X509V3_EXT_METHOD * SAVEDS ASM LIB_X509V3_EXT_get_nid(REG(a6, __IFACE_OR_BASE), REG(d0, int nid));
int SAVEDS ASM LIB_X509V3_add_standard_extensions(REG(a6, __IFACE_OR_BASE));
STACK_OF(CONF_VALUE) * SAVEDS ASM LIB_X509V3_parse_list(REG(a6, __IFACE_OR_BASE), REG(a0, const char * line));
void * SAVEDS ASM LIB_X509V3_EXT_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSION * ext));
void * SAVEDS ASM LIB_X509V3_get_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_EXTENSION) * x), REG(d0, int nid), REG(a1, int * crit), REG(a2, int * idx));
X509_EXTENSION * SAVEDS ASM LIB_X509V3_EXT_i2d(REG(a6, __IFACE_OR_BASE), REG(d0, int ext_nid), REG(d1, int crit), REG(a0, void * ext_struc));
int SAVEDS ASM LIB_X509V3_add1_i2d(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_EXTENSION) ** x), REG(d0, int nid), REG(a1, void * value), REG(d1, int crit), REG(d2, unsigned long flags));
char * SAVEDS ASM LIB_hex_to_string(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * buffer), REG(d0, long len));
unsigned char * SAVEDS ASM LIB_string_to_hex(REG(a6, __IFACE_OR_BASE), REG(a0, char * str), REG(a1, long * len));
int SAVEDS ASM LIB_name_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name), REG(a1, const char * cmp));
void SAVEDS ASM LIB_X509V3_EXT_val_prn(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, STACK_OF(CONF_VALUE) * val), REG(d0, int indent), REG(d1, int ml));
int SAVEDS ASM LIB_X509V3_EXT_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, X509_EXTENSION * ext), REG(d0, unsigned long flag), REG(d1, int indent));
int SAVEDS ASM LIB_X509V3_extensions_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, char * title), REG(a2, STACK_OF(X509_EXTENSION) * exts), REG(d0, unsigned long flag), REG(d1, int indent));
int SAVEDS ASM LIB_X509_check_purpose(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(d0, int id), REG(d1, int ca));
int SAVEDS ASM LIB_X509_supported_extension(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSION * ex));
int SAVEDS ASM LIB_X509_PURPOSE_set(REG(a6, __IFACE_OR_BASE), REG(a0, int * p), REG(d0, int purpose));
int SAVEDS ASM LIB_X509_check_issued(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * issuer), REG(a1, X509 * subject));
int SAVEDS ASM LIB_X509_PURPOSE_get_count(REG(a6, __IFACE_OR_BASE));
X509_PURPOSE * SAVEDS ASM LIB_X509_PURPOSE_get0(REG(a6, __IFACE_OR_BASE), REG(d0, int idx));
int SAVEDS ASM LIB_X509_PURPOSE_get_by_sname(REG(a6, __IFACE_OR_BASE), REG(a0, char * sname));
int SAVEDS ASM LIB_X509_PURPOSE_get_by_id(REG(a6, __IFACE_OR_BASE), REG(d0, int id));
int SAVEDS ASM LIB_X509_PURPOSE_add(REG(a6, __IFACE_OR_BASE), REG(d0, int id), REG(d1, int trust), REG(d2, int flags), REG(a0, int (*ck)(const X509_PURPOSE *, const X509 *, int)), REG(a1, char * name), REG(a2, char * sname), REG(a3, void * arg));
char * SAVEDS ASM LIB_X509_PURPOSE_get0_name(REG(a6, __IFACE_OR_BASE), REG(a0, X509_PURPOSE * xp));
char * SAVEDS ASM LIB_X509_PURPOSE_get0_sname(REG(a6, __IFACE_OR_BASE), REG(a0, X509_PURPOSE * xp));
int SAVEDS ASM LIB_X509_PURPOSE_get_trust(REG(a6, __IFACE_OR_BASE), REG(a0, X509_PURPOSE * xp));
void SAVEDS ASM LIB_X509_PURPOSE_cleanup(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_X509_PURPOSE_get_id(REG(a6, __IFACE_OR_BASE), REG(a0, X509_PURPOSE * a));
STACK_OF(OPENSSL_STRING) * SAVEDS ASM LIB_X509_get1_email(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
STACK_OF(OPENSSL_STRING) * SAVEDS ASM LIB_X509_REQ_get1_email(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * x));
void SAVEDS ASM LIB_X509_email_free(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(OPENSSL_STRING) * sk));
void SAVEDS ASM LIB_ERR_load_X509V3_strings(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_AES_options(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_AES_set_encrypt_key(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * userKey), REG(d0, const int bits), REG(a1, AES_KEY * key));
int SAVEDS ASM LIB_AES_set_decrypt_key(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * userKey), REG(d0, const int bits), REG(a1, AES_KEY * key));
void SAVEDS ASM LIB_AES_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(a2, const AES_KEY * key));
void SAVEDS ASM LIB_AES_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(a2, const AES_KEY * key));
void SAVEDS ASM LIB_AES_ecb_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(a2, const AES_KEY * key), REG(d0, const int enc));
void SAVEDS ASM LIB_AES_cbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, const unsigned long length), REG(a2, const AES_KEY * key), REG(a3, unsigned char * ivec), REG(d1, const int enc));
void SAVEDS ASM LIB_AES_cfb128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, const unsigned long length), REG(a2, const AES_KEY * key), REG(a3, unsigned char * ivec), REG(a4, int * num), REG(d1, const int enc));
void SAVEDS ASM LIB_AES_cfb1_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, const unsigned long length), REG(a2, const AES_KEY * key), REG(a3, unsigned char * ivec), REG(a4, int * num), REG(d1, const int enc));
void SAVEDS ASM LIB_AES_cfb8_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, const unsigned long length), REG(a2, const AES_KEY * key), REG(a3, unsigned char * ivec), REG(a4, int * num), REG(d1, const int enc));
void SAVEDS ASM LIB_AES_ofb128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, const unsigned long length), REG(a2, const AES_KEY * key), REG(a3, unsigned char * ivec), REG(a4, int * num));
void SAVEDS ASM LIB_AES_ctr128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, const unsigned long length), REG(a2, const AES_KEY * key), REG(d1, unsigned char * ivec), REG(d2, unsigned char * ecount_buf), REG(a3, unsigned int * num));
void SAVEDS ASM LIB_BF_set_key(REG(a6, __IFACE_OR_BASE), REG(a0, BF_KEY * key), REG(d0, int len), REG(a1, const unsigned char * data));
void SAVEDS ASM LIB_BF_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, BF_LONG * data), REG(a1, const BF_KEY * key));
void SAVEDS ASM LIB_BF_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, BF_LONG * data), REG(a1, const BF_KEY * key));
void SAVEDS ASM LIB_BF_ecb_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(a2, const BF_KEY * key), REG(d0, int enc));
void SAVEDS ASM LIB_BF_cbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, const BF_KEY * schedule), REG(a3, unsigned char * ivec), REG(d1, int enc));
void SAVEDS ASM LIB_BF_cfb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, const BF_KEY * schedule), REG(a3, unsigned char * ivec), REG(a4, int * num), REG(d1, int enc));
void SAVEDS ASM LIB_BF_ofb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, const BF_KEY * schedule), REG(a3, unsigned char * ivec), REG(a4, int * num));
const char * SAVEDS ASM LIB_BF_options(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_CAST_set_key(REG(a6, __IFACE_OR_BASE), REG(a0, CAST_KEY * key), REG(d0, int len), REG(a1, const unsigned char * data));
void SAVEDS ASM LIB_CAST_ecb_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(a2, CAST_KEY * key), REG(d0, int enc));
void SAVEDS ASM LIB_CAST_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, CAST_LONG * data), REG(a1, CAST_KEY * key));
void SAVEDS ASM LIB_CAST_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, CAST_LONG * data), REG(a1, CAST_KEY * key));
void SAVEDS ASM LIB_CAST_cbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, CAST_KEY * ks), REG(a3, unsigned char * iv), REG(d1, int enc));
void SAVEDS ASM LIB_CAST_cfb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, CAST_KEY * schedule), REG(a3, unsigned char * ivec), REG(a4, int * num), REG(d1, int enc));
void SAVEDS ASM LIB_CAST_ofb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, CAST_KEY * schedule), REG(a3, unsigned char * ivec), REG(a4, int * num));
void SAVEDS ASM LIB_DES_ecb3_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const_DES_cblock * input), REG(a1, DES_cblock * output), REG(a2, DES_key_schedule * ks1), REG(a3, DES_key_schedule * ks2), REG(a4, DES_key_schedule * ks3), REG(d0, int enc));
DES_LONG SAVEDS ASM LIB_DES_cbc_cksum(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * input), REG(a1, DES_cblock * output), REG(d0, long length), REG(a2, DES_key_schedule * schedule), REG(a3, const_DES_cblock * ivec));
void SAVEDS ASM LIB_DES_cbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * input), REG(a1, unsigned char * output), REG(d0, long length), REG(a2, DES_key_schedule * schedule), REG(a3, DES_cblock * ivec), REG(d1, int enc));
void SAVEDS ASM LIB_DES_ncbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * input), REG(a1, unsigned char * output), REG(d0, long length), REG(a2, DES_key_schedule * schedule), REG(a3, DES_cblock * ivec), REG(d1, int enc));
void SAVEDS ASM LIB_DES_xcbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * input), REG(a1, unsigned char * output), REG(d0, long length), REG(a2, DES_key_schedule * schedule), REG(a3, DES_cblock * ivec), REG(a4, const_DES_cblock * inw), REG(d1, const_DES_cblock * outw), REG(d2, int enc));
void SAVEDS ASM LIB_DES_cfb_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, int numbits), REG(d1, long length), REG(a2, DES_key_schedule * schedule), REG(a3, DES_cblock * ivec), REG(d2, int enc));
void SAVEDS ASM LIB_DES_ecb_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const_DES_cblock * input), REG(a1, DES_cblock * output), REG(a2, DES_key_schedule * ks), REG(d0, int enc));
void SAVEDS ASM LIB_DES_encrypt1(REG(a6, __IFACE_OR_BASE), REG(a0, DES_LONG * data), REG(a1, DES_key_schedule * ks), REG(d0, int enc));
void SAVEDS ASM LIB_DES_encrypt2(REG(a6, __IFACE_OR_BASE), REG(a0, DES_LONG * data), REG(a1, DES_key_schedule * ks), REG(d0, int enc));
void SAVEDS ASM LIB_DES_encrypt3(REG(a6, __IFACE_OR_BASE), REG(a0, DES_LONG * data), REG(a1, DES_key_schedule * ks1), REG(a2, DES_key_schedule * ks2), REG(a3, DES_key_schedule * ks3));
void SAVEDS ASM LIB_DES_decrypt3(REG(a6, __IFACE_OR_BASE), REG(a0, DES_LONG * data), REG(a1, DES_key_schedule * ks1), REG(a2, DES_key_schedule * ks2), REG(a3, DES_key_schedule * ks3));
void SAVEDS ASM LIB_DES_ede3_cbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * input), REG(a1, unsigned char * output), REG(d0, long length), REG(a2, DES_key_schedule * ks1), REG(a3, DES_key_schedule * ks2), REG(a4, DES_key_schedule * ks3), REG(d1, DES_cblock * ivec), REG(d2, int enc));
void SAVEDS ASM LIB_DES_ede3_cbcm_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, DES_key_schedule * ks1), REG(a3, DES_key_schedule * ks2), REG(a4, DES_key_schedule * ks3), REG(d1, DES_cblock * ivec1), REG(d2, DES_cblock * ivec2), REG(d3, int enc));
void SAVEDS ASM LIB_DES_ede3_cfb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, DES_key_schedule * ks1), REG(a3, DES_key_schedule * ks2), REG(a4, DES_key_schedule * ks3), REG(d1, DES_cblock * ivec), REG(d2, int * num), REG(d3, int enc));
void SAVEDS ASM LIB_DES_ede3_cfb_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, int numbits), REG(d1, long length), REG(a2, DES_key_schedule * ks1), REG(a3, DES_key_schedule * ks2), REG(a4, DES_key_schedule * ks3), REG(d2, DES_cblock * ivec), REG(d3, int enc));
void SAVEDS ASM LIB_DES_ede3_ofb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, DES_key_schedule * ks1), REG(a3, DES_key_schedule * ks2), REG(a4, DES_key_schedule * ks3), REG(d1, DES_cblock * ivec), REG(d2, int * num));
int SAVEDS ASM LIB_DES_enc_read(REG(a6, __IFACE_OR_BASE), REG(d0, int fd), REG(a0, void * buf), REG(d1, int len), REG(a1, DES_key_schedule * sched), REG(a2, DES_cblock * iv));
int SAVEDS ASM LIB_DES_enc_write(REG(a6, __IFACE_OR_BASE), REG(d0, int fd), REG(a0, const void * buf), REG(d1, int len), REG(a1, DES_key_schedule * sched), REG(a2, DES_cblock * iv));
char * SAVEDS ASM LIB_DES_fcrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const char * buf), REG(a1, const char * salt), REG(a2, char * ret));
char * SAVEDS ASM LIB_DES_crypt(REG(a6, __IFACE_OR_BASE), REG(a0, const char * buf), REG(a1, const char * salt));
void SAVEDS ASM LIB_DES_ofb_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, int numbits), REG(d1, long length), REG(a2, DES_key_schedule * schedule), REG(a3, DES_cblock * ivec));
void SAVEDS ASM LIB_DES_pcbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * input), REG(a1, unsigned char * output), REG(d0, long length), REG(a2, DES_key_schedule * schedule), REG(a3, DES_cblock * ivec), REG(d1, int enc));
DES_LONG SAVEDS ASM LIB_DES_quad_cksum(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * input), REG(a1, DES_cblock * output), REG(d0, long length), REG(d1, int out_count), REG(a2, DES_cblock * seed));
int SAVEDS ASM LIB_DES_random_key(REG(a6, __IFACE_OR_BASE), REG(a0, DES_cblock * ret));
void SAVEDS ASM LIB_DES_set_odd_parity(REG(a6, __IFACE_OR_BASE), REG(a0, DES_cblock * key));
int SAVEDS ASM LIB_DES_check_key_parity(REG(a6, __IFACE_OR_BASE), REG(a0, const_DES_cblock * key));
int SAVEDS ASM LIB_DES_is_weak_key(REG(a6, __IFACE_OR_BASE), REG(a0, const_DES_cblock * key));
int SAVEDS ASM LIB_DES_set_key(REG(a6, __IFACE_OR_BASE), REG(a0, const_DES_cblock * key), REG(a1, DES_key_schedule * schedule));
int SAVEDS ASM LIB_DES_key_sched(REG(a6, __IFACE_OR_BASE), REG(a0, const_DES_cblock * key), REG(a1, DES_key_schedule * schedule));
int SAVEDS ASM LIB_DES_set_key_checked(REG(a6, __IFACE_OR_BASE), REG(a0, const_DES_cblock * key), REG(a1, DES_key_schedule * schedule));
void SAVEDS ASM LIB_DES_set_key_unchecked(REG(a6, __IFACE_OR_BASE), REG(a0, const_DES_cblock * key), REG(a1, DES_key_schedule * schedule));
void SAVEDS ASM LIB_DES_string_to_key(REG(a6, __IFACE_OR_BASE), REG(a0, const char * str), REG(a1, DES_cblock * key));
void SAVEDS ASM LIB_DES_string_to_2keys(REG(a6, __IFACE_OR_BASE), REG(a0, const char * str), REG(a1, DES_cblock * key1), REG(a2, DES_cblock * key2));
void SAVEDS ASM LIB_DES_cfb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, DES_key_schedule * schedule), REG(a3, DES_cblock * ivec), REG(a4, int * num), REG(d1, int enc));
void SAVEDS ASM LIB_DES_ofb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, DES_key_schedule * schedule), REG(a3, DES_cblock * ivec), REG(a4, int * num));
int SAVEDS ASM LIB_DES_read_password(REG(a6, __IFACE_OR_BASE), REG(a0, DES_cblock * key), REG(a1, const char * prompt), REG(d0, int verify));
int SAVEDS ASM LIB_DES_read_2passwords(REG(a6, __IFACE_OR_BASE), REG(a0, DES_cblock * key1), REG(a1, DES_cblock * key2), REG(a2, const char * prompt), REG(d0, int verify));
const char * SAVEDS ASM LIB__ossl_old_des_options(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB__ossl_old_des_ecb3_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, _ossl_old_des_cblock * input), REG(a1, _ossl_old_des_cblock * output), REG(d0, _ossl_old_des_key_schedule ks1), REG(d1, _ossl_old_des_key_schedule ks2), REG(d2, _ossl_old_des_key_schedule ks3), REG(d3, int enc));
DES_LONG SAVEDS ASM LIB__ossl_old_des_cbc_cksum(REG(a6, __IFACE_OR_BASE), REG(a0, _ossl_old_des_cblock * input), REG(a1, _ossl_old_des_cblock * output), REG(d0, long length), REG(d1, _ossl_old_des_key_schedule schedule), REG(a2, _ossl_old_des_cblock * ivec));
void SAVEDS ASM LIB__ossl_old_des_cbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, _ossl_old_des_cblock * input), REG(a1, _ossl_old_des_cblock * output), REG(d0, long length), REG(d1, _ossl_old_des_key_schedule schedule), REG(a2, _ossl_old_des_cblock * ivec), REG(d2, int enc));
void SAVEDS ASM LIB__ossl_old_des_ncbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, _ossl_old_des_cblock * input), REG(a1, _ossl_old_des_cblock * output), REG(d0, long length), REG(d1, _ossl_old_des_key_schedule schedule), REG(a2, _ossl_old_des_cblock * ivec), REG(d2, int enc));
void SAVEDS ASM LIB__ossl_old_des_xcbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, _ossl_old_des_cblock * input), REG(a1, _ossl_old_des_cblock * output), REG(d0, long length), REG(d1, _ossl_old_des_key_schedule schedule), REG(a2, _ossl_old_des_cblock * ivec), REG(a3, _ossl_old_des_cblock * inw), REG(a4, _ossl_old_des_cblock * outw), REG(d2, int enc));
void SAVEDS ASM LIB__ossl_old_des_cfb_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * in), REG(a1, unsigned char * out), REG(d0, int numbits), REG(d1, long length), REG(d2, _ossl_old_des_key_schedule schedule), REG(a2, _ossl_old_des_cblock * ivec), REG(d3, int enc));
void SAVEDS ASM LIB__ossl_old_des_ecb_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, _ossl_old_des_cblock * input), REG(a1, _ossl_old_des_cblock * output), REG(d0, _ossl_old_des_key_schedule ks), REG(d1, int enc));
void SAVEDS ASM LIB__ossl_old_des_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, DES_LONG * data), REG(d0, _ossl_old_des_key_schedule ks), REG(d1, int enc));
void SAVEDS ASM LIB__ossl_old_des_encrypt2(REG(a6, __IFACE_OR_BASE), REG(a0, DES_LONG * data), REG(d0, _ossl_old_des_key_schedule ks), REG(d1, int enc));
void SAVEDS ASM LIB__ossl_old_des_encrypt3(REG(a6, __IFACE_OR_BASE), REG(a0, DES_LONG * data), REG(d0, _ossl_old_des_key_schedule ks1), REG(d1, _ossl_old_des_key_schedule ks2), REG(d2, _ossl_old_des_key_schedule ks3));
void SAVEDS ASM LIB__ossl_old_des_decrypt3(REG(a6, __IFACE_OR_BASE), REG(a0, DES_LONG * data), REG(d0, _ossl_old_des_key_schedule ks1), REG(d1, _ossl_old_des_key_schedule ks2), REG(d2, _ossl_old_des_key_schedule ks3));
void SAVEDS ASM LIB__ossl_old_des_ede3_cbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, _ossl_old_des_cblock * input), REG(a1, _ossl_old_des_cblock * output), REG(d0, long length), REG(d1, _ossl_old_des_key_schedule ks1), REG(d2, _ossl_old_des_key_schedule ks2), REG(d3, _ossl_old_des_key_schedule ks3), REG(a2, _ossl_old_des_cblock * ivec), REG(d4, int enc));
void SAVEDS ASM LIB__ossl_old_des_ede3_cfb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(d1, _ossl_old_des_key_schedule ks1), REG(d2, _ossl_old_des_key_schedule ks2), REG(d3, _ossl_old_des_key_schedule ks3), REG(a2, _ossl_old_des_cblock * ivec), REG(a3, int * num), REG(d4, int enc));
void SAVEDS ASM LIB__ossl_old_des_ede3_ofb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(d1, _ossl_old_des_key_schedule ks1), REG(d2, _ossl_old_des_key_schedule ks2), REG(d3, _ossl_old_des_key_schedule ks3), REG(a2, _ossl_old_des_cblock * ivec), REG(a3, int * num));
int SAVEDS ASM LIB__ossl_old_des_enc_read(REG(a6, __IFACE_OR_BASE), REG(d0, int fd), REG(a0, char * buf), REG(d1, int len), REG(d2, _ossl_old_des_key_schedule sched), REG(a1, _ossl_old_des_cblock * iv));
int SAVEDS ASM LIB__ossl_old_des_enc_write(REG(a6, __IFACE_OR_BASE), REG(d0, int fd), REG(a0, char * buf), REG(d1, int len), REG(d2, _ossl_old_des_key_schedule sched), REG(a1, _ossl_old_des_cblock * iv));
char * SAVEDS ASM LIB__ossl_old_des_fcrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const char * buf), REG(a1, const char * salt), REG(a2, char * ret));
char * SAVEDS ASM LIB__ossl_old_des_crypt(REG(a6, __IFACE_OR_BASE), REG(a0, const char * buf), REG(a1, const char * salt));
char * SAVEDS ASM LIB__ossl_old_crypt(REG(a6, __IFACE_OR_BASE), REG(a0, const char * buf), REG(a1, const char * salt));
void SAVEDS ASM LIB__ossl_old_des_ofb_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * in), REG(a1, unsigned char * out), REG(d0, int numbits), REG(d1, long length), REG(d2, _ossl_old_des_key_schedule schedule), REG(a2, _ossl_old_des_cblock * ivec));
void SAVEDS ASM LIB__ossl_old_des_pcbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, _ossl_old_des_cblock * input), REG(a1, _ossl_old_des_cblock * output), REG(d0, long length), REG(d1, _ossl_old_des_key_schedule schedule), REG(a2, _ossl_old_des_cblock * ivec), REG(d2, int enc));
DES_LONG SAVEDS ASM LIB__ossl_old_des_quad_cksum(REG(a6, __IFACE_OR_BASE), REG(a0, _ossl_old_des_cblock * input), REG(a1, _ossl_old_des_cblock * output), REG(d0, long length), REG(d1, int out_count), REG(a2, _ossl_old_des_cblock * seed));
void SAVEDS ASM LIB__ossl_old_des_random_seed(REG(a6, __IFACE_OR_BASE), REG(d0, _ossl_old_des_cblock key));
void SAVEDS ASM LIB__ossl_old_des_random_key(REG(a6, __IFACE_OR_BASE), REG(d0, _ossl_old_des_cblock ret));
int SAVEDS ASM LIB__ossl_old_des_read_password(REG(a6, __IFACE_OR_BASE), REG(a0, _ossl_old_des_cblock * key), REG(a1, const char * prompt), REG(d0, int verify));
int SAVEDS ASM LIB__ossl_old_des_read_2passwords(REG(a6, __IFACE_OR_BASE), REG(a0, _ossl_old_des_cblock * key1), REG(a1, _ossl_old_des_cblock * key2), REG(a2, const char * prompt), REG(d0, int verify));
void SAVEDS ASM LIB__ossl_old_des_set_odd_parity(REG(a6, __IFACE_OR_BASE), REG(a0, _ossl_old_des_cblock * key));
int SAVEDS ASM LIB__ossl_old_des_is_weak_key(REG(a6, __IFACE_OR_BASE), REG(a0, _ossl_old_des_cblock * key));
int SAVEDS ASM LIB__ossl_old_des_set_key(REG(a6, __IFACE_OR_BASE), REG(a0, _ossl_old_des_cblock * key), REG(d0, _ossl_old_des_key_schedule schedule));
int SAVEDS ASM LIB__ossl_old_des_key_sched(REG(a6, __IFACE_OR_BASE), REG(a0, _ossl_old_des_cblock * key), REG(d0, _ossl_old_des_key_schedule schedule));
void SAVEDS ASM LIB__ossl_old_des_string_to_key(REG(a6, __IFACE_OR_BASE), REG(a0, char * str), REG(a1, _ossl_old_des_cblock * key));
void SAVEDS ASM LIB__ossl_old_des_string_to_2keys(REG(a6, __IFACE_OR_BASE), REG(a0, char * str), REG(a1, _ossl_old_des_cblock * key1), REG(a2, _ossl_old_des_cblock * key2));
void SAVEDS ASM LIB__ossl_old_des_cfb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(d1, _ossl_old_des_key_schedule schedule), REG(a2, _ossl_old_des_cblock * ivec), REG(a3, int * num), REG(d2, int enc));
void SAVEDS ASM LIB__ossl_old_des_ofb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(d1, _ossl_old_des_key_schedule schedule), REG(a2, _ossl_old_des_cblock * ivec), REG(a3, int * num));
void SAVEDS ASM LIB__ossl_096_des_random_seed(REG(a6, __IFACE_OR_BASE), REG(a0, des_cblock * key));
const DH_METHOD * SAVEDS ASM LIB_DH_OpenSSL(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_DH_set_default_method(REG(a6, __IFACE_OR_BASE), REG(a0, const DH_METHOD * meth));
const DH_METHOD * SAVEDS ASM LIB_DH_get_default_method(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_DH_set_method(REG(a6, __IFACE_OR_BASE), REG(a0, DH * dh), REG(a1, const DH_METHOD * meth));
DH * SAVEDS ASM LIB_DH_new_method(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * engine));
DH * SAVEDS ASM LIB_DH_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_DH_free(REG(a6, __IFACE_OR_BASE), REG(a0, DH * dh));
int SAVEDS ASM LIB_DH_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, DH * dh));
int SAVEDS ASM LIB_DH_size(REG(a6, __IFACE_OR_BASE), REG(a0, const DH * dh));
int SAVEDS ASM LIB_DH_get_ex_new_index(REG(a6, __IFACE_OR_BASE), REG(d0, long argl), REG(a0, void * argp), REG(a1, CRYPTO_EX_new * new_func), REG(a2, CRYPTO_EX_dup * dup_func), REG(a3, CRYPTO_EX_free * free_func));
int SAVEDS ASM LIB_DH_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, DH * d), REG(d0, int idx), REG(a1, void * arg));
void * SAVEDS ASM LIB_DH_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, DH * d), REG(d0, int idx));
DH * SAVEDS ASM LIB_DH_generate_parameters(REG(a6, __IFACE_OR_BASE), REG(d0, int prime_len), REG(d1, int generator), REG(a0, void (*callback)(int, int, void *)), REG(a1, void * cb_arg));
int SAVEDS ASM LIB_DH_check(REG(a6, __IFACE_OR_BASE), REG(a0, const DH * dh), REG(a1, int * codes));
int SAVEDS ASM LIB_DH_generate_key(REG(a6, __IFACE_OR_BASE), REG(a0, DH * dh));
int SAVEDS ASM LIB_DH_compute_key(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * key), REG(a1, const BIGNUM * pub_key), REG(a2, DH * dh));
DH * SAVEDS ASM LIB_d2i_DHparams(REG(a6, __IFACE_OR_BASE), REG(a0, DH ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
int SAVEDS ASM LIB_i2d_DHparams(REG(a6, __IFACE_OR_BASE), REG(a0, const DH * a), REG(a1, unsigned char ** pp));
int SAVEDS ASM LIB_DHparams_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const DH * x));
void SAVEDS ASM LIB_ERR_load_DH_strings(REG(a6, __IFACE_OR_BASE));
DSA_SIG * SAVEDS ASM LIB_DSA_SIG_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_DSA_SIG_free(REG(a6, __IFACE_OR_BASE), REG(a0, DSA_SIG * sig));
int SAVEDS ASM LIB_i2d_DSA_SIG(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA_SIG * a), REG(a1, unsigned char ** pp));
DSA_SIG * SAVEDS ASM LIB_d2i_DSA_SIG(REG(a6, __IFACE_OR_BASE), REG(a0, DSA_SIG ** v), REG(a1, const unsigned char ** pp), REG(d0, long length));
DSA_SIG * SAVEDS ASM LIB_DSA_do_sign(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * dgst), REG(d0, int dlen), REG(a1, DSA * dsa));
int SAVEDS ASM LIB_DSA_do_verify(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * dgst), REG(d0, int dgst_len), REG(a1, DSA_SIG * sig), REG(a2, DSA * dsa));
const DSA_METHOD * SAVEDS ASM LIB_DSA_OpenSSL(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_DSA_set_default_method(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA_METHOD * a));
const DSA_METHOD * SAVEDS ASM LIB_DSA_get_default_method(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_DSA_set_method(REG(a6, __IFACE_OR_BASE), REG(a0, DSA * dsa), REG(a1, const DSA_METHOD * a));
DSA * SAVEDS ASM LIB_DSA_new(REG(a6, __IFACE_OR_BASE));
DSA * SAVEDS ASM LIB_DSA_new_method(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * engine));
void SAVEDS ASM LIB_DSA_free(REG(a6, __IFACE_OR_BASE), REG(a0, DSA * r));
int SAVEDS ASM LIB_DSA_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, DSA * r));
int SAVEDS ASM LIB_DSA_size(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA * a));
int SAVEDS ASM LIB_DSA_sign_setup(REG(a6, __IFACE_OR_BASE), REG(a0, DSA * dsa), REG(a1, BN_CTX * ctx_in), REG(a2, BIGNUM ** kinvp), REG(a3, BIGNUM ** rp));
int SAVEDS ASM LIB_DSA_sign(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, const unsigned char * dgst), REG(d1, int dlen), REG(a1, unsigned char * sig), REG(a2, unsigned int * siglen), REG(a3, DSA * dsa));
int SAVEDS ASM LIB_DSA_verify(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, const unsigned char * dgst), REG(d1, int dgst_len), REG(a1, const unsigned char * sigbuf), REG(d2, int siglen), REG(a2, DSA * dsa));
int SAVEDS ASM LIB_DSA_get_ex_new_index(REG(a6, __IFACE_OR_BASE), REG(d0, long argl), REG(a0, void * argp), REG(a1, CRYPTO_EX_new * new_func), REG(a2, CRYPTO_EX_dup * dup_func), REG(a3, CRYPTO_EX_free * free_func));
int SAVEDS ASM LIB_DSA_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, DSA * d), REG(d0, int idx), REG(a1, void * arg));
void * SAVEDS ASM LIB_DSA_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, DSA * d), REG(d0, int idx));
DSA * SAVEDS ASM LIB_d2i_DSAPublicKey(REG(a6, __IFACE_OR_BASE), REG(a0, DSA ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
DSA * SAVEDS ASM LIB_d2i_DSAPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, DSA ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
DSA * SAVEDS ASM LIB_d2i_DSAparams(REG(a6, __IFACE_OR_BASE), REG(a0, DSA ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
DSA * SAVEDS ASM LIB_DSA_generate_parameters(REG(a6, __IFACE_OR_BASE), REG(d0, int bits), REG(a0, unsigned char * seed), REG(d1, int seed_len), REG(a1, int * counter_ret), REG(a2, unsigned long * h_ret), REG(a3, void (*callback)(int, int, void *)), REG(a4, void * cb_arg));
int SAVEDS ASM LIB_DSA_generate_key(REG(a6, __IFACE_OR_BASE), REG(a0, DSA * a));
int SAVEDS ASM LIB_i2d_DSAPublicKey(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA * a), REG(a1, unsigned char ** pp));
int SAVEDS ASM LIB_i2d_DSAPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA * a), REG(a1, unsigned char ** pp));
int SAVEDS ASM LIB_i2d_DSAparams(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA * a), REG(a1, unsigned char ** pp));
int SAVEDS ASM LIB_DSAparams_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const DSA * x));
int SAVEDS ASM LIB_DSA_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const DSA * x), REG(d0, int off));
DH * SAVEDS ASM LIB_DSA_dup_DH(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA * r));
void SAVEDS ASM LIB_ERR_load_DSA_strings(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_idea_options(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_idea_ecb_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(a2, IDEA_KEY_SCHEDULE * ks));
void SAVEDS ASM LIB_idea_set_encrypt_key(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * key), REG(a1, IDEA_KEY_SCHEDULE * ks));
void SAVEDS ASM LIB_idea_set_decrypt_key(REG(a6, __IFACE_OR_BASE), REG(a0, IDEA_KEY_SCHEDULE * ek), REG(a1, IDEA_KEY_SCHEDULE * dk));
void SAVEDS ASM LIB_idea_cbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, IDEA_KEY_SCHEDULE * ks), REG(a3, unsigned char * iv), REG(d1, int enc));
void SAVEDS ASM LIB_idea_cfb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, IDEA_KEY_SCHEDULE * ks), REG(a3, unsigned char * iv), REG(a4, int * num), REG(d1, int enc));
void SAVEDS ASM LIB_idea_ofb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, IDEA_KEY_SCHEDULE * ks), REG(a3, unsigned char * iv), REG(a4, int * num));
void SAVEDS ASM LIB_idea_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned long * in), REG(a1, IDEA_KEY_SCHEDULE * ks));
const char * SAVEDS ASM LIB_MD2_options(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_MD2_Init(REG(a6, __IFACE_OR_BASE), REG(a0, MD2_CTX * c));
int SAVEDS ASM LIB_MD2_Update(REG(a6, __IFACE_OR_BASE), REG(a0, MD2_CTX * c), REG(a1, const unsigned char * data), REG(d0, unsigned long len));
int SAVEDS ASM LIB_MD2_Final(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * md), REG(a1, MD2_CTX * c));
unsigned char * SAVEDS ASM LIB_MD2(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * d), REG(d0, unsigned long n), REG(a1, unsigned char * md));
int SAVEDS ASM LIB_MD4_Init(REG(a6, __IFACE_OR_BASE), REG(a0, MD4_CTX * c));
int SAVEDS ASM LIB_MD4_Update(REG(a6, __IFACE_OR_BASE), REG(a0, MD4_CTX * c), REG(a1, const void * data), REG(d0, unsigned long len));
int SAVEDS ASM LIB_MD4_Final(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * md), REG(a1, MD4_CTX * c));
unsigned char * SAVEDS ASM LIB_MD4(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * d), REG(d0, unsigned long n), REG(a1, unsigned char * md));
void SAVEDS ASM LIB_MD4_Transform(REG(a6, __IFACE_OR_BASE), REG(a0, MD4_CTX * c), REG(a1, const unsigned char * b));
int SAVEDS ASM LIB_MD5_Init(REG(a6, __IFACE_OR_BASE), REG(a0, MD5_CTX * c));
int SAVEDS ASM LIB_MD5_Update(REG(a6, __IFACE_OR_BASE), REG(a0, MD5_CTX * c), REG(a1, const void * data), REG(d0, unsigned long len));
int SAVEDS ASM LIB_MD5_Final(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * md), REG(a1, MD5_CTX * c));
unsigned char * SAVEDS ASM LIB_MD5(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * d), REG(d0, unsigned long n), REG(a1, unsigned char * md));
void SAVEDS ASM LIB_MD5_Transform(REG(a6, __IFACE_OR_BASE), REG(a0, MD5_CTX * c), REG(a1, const unsigned char * b));
int SAVEDS ASM LIB_MDC2_Init(REG(a6, __IFACE_OR_BASE), REG(a0, MDC2_CTX * c));
int SAVEDS ASM LIB_MDC2_Update(REG(a6, __IFACE_OR_BASE), REG(a0, MDC2_CTX * c), REG(a1, const unsigned char * data), REG(d0, unsigned long len));
int SAVEDS ASM LIB_MDC2_Final(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * md), REG(a1, MDC2_CTX * c));
unsigned char * SAVEDS ASM LIB_MDC2(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * d), REG(d0, unsigned long n), REG(a1, unsigned char * md));
void SAVEDS ASM LIB_RC2_set_key(REG(a6, __IFACE_OR_BASE), REG(a0, RC2_KEY * key), REG(d0, int len), REG(a1, const unsigned char * data), REG(d1, int bits));
void SAVEDS ASM LIB_RC2_ecb_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(a2, RC2_KEY * key), REG(d0, int enc));
void SAVEDS ASM LIB_RC2_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned long * data), REG(a1, RC2_KEY * key));
void SAVEDS ASM LIB_RC2_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned long * data), REG(a1, RC2_KEY * key));
void SAVEDS ASM LIB_RC2_cbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, RC2_KEY * ks), REG(a3, unsigned char * iv), REG(d1, int enc));
void SAVEDS ASM LIB_RC2_cfb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, RC2_KEY * schedule), REG(a3, unsigned char * ivec), REG(a4, int * num), REG(d1, int enc));
void SAVEDS ASM LIB_RC2_ofb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, RC2_KEY * schedule), REG(a3, unsigned char * ivec), REG(a4, int * num));
const char * SAVEDS ASM LIB_RC4_options(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_RC4_set_key(REG(a6, __IFACE_OR_BASE), REG(a0, RC4_KEY * key), REG(d0, int len), REG(a1, const unsigned char * data));
void SAVEDS ASM LIB_RC4(REG(a6, __IFACE_OR_BASE), REG(a0, RC4_KEY * key), REG(d0, unsigned long len), REG(a1, const unsigned char * indata), REG(a2, unsigned char * outdata));
void SAVEDS ASM LIB_RC5_32_set_key(REG(a6, __IFACE_OR_BASE), REG(a0, RC5_32_KEY * key), REG(d0, int len), REG(a1, const unsigned char * data), REG(d1, int rounds));
void SAVEDS ASM LIB_RC5_32_ecb_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(a2, RC5_32_KEY * key), REG(d0, int enc));
void SAVEDS ASM LIB_RC5_32_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned long * data), REG(a1, RC5_32_KEY * key));
void SAVEDS ASM LIB_RC5_32_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned long * data), REG(a1, RC5_32_KEY * key));
void SAVEDS ASM LIB_RC5_32_cbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, RC5_32_KEY * ks), REG(a3, unsigned char * iv), REG(d1, int enc));
void SAVEDS ASM LIB_RC5_32_cfb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, RC5_32_KEY * schedule), REG(a3, unsigned char * ivec), REG(a4, int * num), REG(d1, int enc));
void SAVEDS ASM LIB_RC5_32_ofb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, RC5_32_KEY * schedule), REG(a3, unsigned char * ivec), REG(a4, int * num));
int SAVEDS ASM LIB_RIPEMD160_Init(REG(a6, __IFACE_OR_BASE), REG(a0, RIPEMD160_CTX * c));
int SAVEDS ASM LIB_RIPEMD160_Update(REG(a6, __IFACE_OR_BASE), REG(a0, RIPEMD160_CTX * c), REG(a1, const void * data), REG(d0, unsigned long len));
int SAVEDS ASM LIB_RIPEMD160_Final(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * md), REG(a1, RIPEMD160_CTX * c));
unsigned char * SAVEDS ASM LIB_RIPEMD160(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * d), REG(d0, unsigned long n), REG(a1, unsigned char * md));
void SAVEDS ASM LIB_RIPEMD160_Transform(REG(a6, __IFACE_OR_BASE), REG(a0, RIPEMD160_CTX * c), REG(a1, const unsigned char * b));
RSA * SAVEDS ASM LIB_RSA_new(REG(a6, __IFACE_OR_BASE));
RSA * SAVEDS ASM LIB_RSA_new_method(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * engine));
int SAVEDS ASM LIB_RSA_size(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * a));
RSA * SAVEDS ASM LIB_RSA_generate_key(REG(a6, __IFACE_OR_BASE), REG(d0, int bits), REG(d1, unsigned long e), REG(a0, void (*callback)(int, int, void *)), REG(a1, void * cb_arg));
int SAVEDS ASM LIB_RSA_check_key(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * a));
int SAVEDS ASM LIB_RSA_public_encrypt(REG(a6, __IFACE_OR_BASE), REG(d0, int flen), REG(a0, const unsigned char * from), REG(a1, unsigned char * to), REG(a2, RSA * rsa), REG(d1, int padding));
int SAVEDS ASM LIB_RSA_private_encrypt(REG(a6, __IFACE_OR_BASE), REG(d0, int flen), REG(a0, const unsigned char * from), REG(a1, unsigned char * to), REG(a2, RSA * rsa), REG(d1, int padding));
int SAVEDS ASM LIB_RSA_public_decrypt(REG(a6, __IFACE_OR_BASE), REG(d0, int flen), REG(a0, const unsigned char * from), REG(a1, unsigned char * to), REG(a2, RSA * rsa), REG(d1, int padding));
int SAVEDS ASM LIB_RSA_private_decrypt(REG(a6, __IFACE_OR_BASE), REG(d0, int flen), REG(a0, const unsigned char * from), REG(a1, unsigned char * to), REG(a2, RSA * rsa), REG(d1, int padding));
void SAVEDS ASM LIB_RSA_free(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * r));
int SAVEDS ASM LIB_RSA_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * r));
int SAVEDS ASM LIB_RSA_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * r));
void SAVEDS ASM LIB_RSA_set_default_method(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA_METHOD * meth));
const RSA_METHOD * SAVEDS ASM LIB_RSA_get_default_method(REG(a6, __IFACE_OR_BASE));
const RSA_METHOD * SAVEDS ASM LIB_RSA_get_method(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * rsa));
int SAVEDS ASM LIB_RSA_set_method(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * rsa), REG(a1, const RSA_METHOD * meth));
int SAVEDS ASM LIB_RSA_memory_lock(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * r));
const RSA_METHOD * SAVEDS ASM LIB_RSA_PKCS1_SSLeay(REG(a6, __IFACE_OR_BASE));
const RSA_METHOD * SAVEDS ASM LIB_RSA_null_method(REG(a6, __IFACE_OR_BASE));
RSA * SAVEDS ASM LIB_d2i_RSAPublicKey(REG(a6, __IFACE_OR_BASE), REG(a0, RSA ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_RSAPublicKey(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_RSAPublicKey_it(REG(a6, __IFACE_OR_BASE));
RSA * SAVEDS ASM LIB_d2i_RSAPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, RSA ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_RSAPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_RSAPrivateKey_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_RSA_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const RSA * r), REG(d0, int offset));
int SAVEDS ASM LIB_i2d_RSA_NET(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * a), REG(a1, unsigned char ** pp), REG(a2, int (*cb)()), REG(d0, int sgckey));
RSA * SAVEDS ASM LIB_d2i_RSA_NET(REG(a6, __IFACE_OR_BASE), REG(a0, RSA ** a), REG(a1, const unsigned char ** pp), REG(d0, long length), REG(a2, int (*cb)()), REG(d1, int sgckey));
int SAVEDS ASM LIB_i2d_Netscape_RSA(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * a), REG(a1, unsigned char ** pp), REG(a2, int (*cb)()));
RSA * SAVEDS ASM LIB_d2i_Netscape_RSA(REG(a6, __IFACE_OR_BASE), REG(a0, RSA ** a), REG(a1, const unsigned char ** pp), REG(d0, long length), REG(a2, int (*cb)()));
int SAVEDS ASM LIB_RSA_sign(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, const unsigned char * m), REG(d1, unsigned int m_length), REG(a1, unsigned char * sigret), REG(a2, unsigned int * siglen), REG(a3, RSA * rsa));
int SAVEDS ASM LIB_RSA_verify(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, const unsigned char * m), REG(d1, unsigned int m_length), REG(a1, unsigned char * sigbuf), REG(d2, unsigned int siglen), REG(a2, RSA * rsa));
int SAVEDS ASM LIB_RSA_sign_ASN1_OCTET_STRING(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, const unsigned char * m), REG(d1, unsigned int m_length), REG(a1, unsigned char * sigret), REG(a2, unsigned int * siglen), REG(a3, RSA * rsa));
int SAVEDS ASM LIB_RSA_verify_ASN1_OCTET_STRING(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, const unsigned char * m), REG(d1, unsigned int m_length), REG(a1, unsigned char * sigbuf), REG(d2, unsigned int siglen), REG(a2, RSA * rsa));
int SAVEDS ASM LIB_RSA_blinding_on(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * rsa), REG(a1, BN_CTX * ctx));
void SAVEDS ASM LIB_RSA_blinding_off(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * rsa));
int SAVEDS ASM LIB_RSA_padding_add_PKCS1_type_1(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * to), REG(d0, int tlen), REG(a1, const unsigned char * f), REG(d1, int fl));
int SAVEDS ASM LIB_RSA_padding_check_PKCS1_type_1(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * to), REG(d0, int tlen), REG(a1, const unsigned char * f), REG(d1, int fl), REG(d2, int rsa_len));
int SAVEDS ASM LIB_RSA_padding_add_PKCS1_type_2(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * to), REG(d0, int tlen), REG(a1, const unsigned char * f), REG(d1, int fl));
int SAVEDS ASM LIB_RSA_padding_check_PKCS1_type_2(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * to), REG(d0, int tlen), REG(a1, const unsigned char * f), REG(d1, int fl), REG(d2, int rsa_len));
int SAVEDS ASM LIB_RSA_padding_add_PKCS1_OAEP(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * to), REG(d0, int tlen), REG(a1, const unsigned char * f), REG(d1, int fl), REG(a2, const unsigned char * p), REG(d2, int pl));
int SAVEDS ASM LIB_RSA_padding_check_PKCS1_OAEP(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * to), REG(d0, int tlen), REG(a1, const unsigned char * f), REG(d1, int fl), REG(d2, int rsa_len), REG(a2, const unsigned char * p), REG(d3, int pl));
int SAVEDS ASM LIB_RSA_padding_add_SSLv23(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * to), REG(d0, int tlen), REG(a1, const unsigned char * f), REG(d1, int fl));
int SAVEDS ASM LIB_RSA_padding_check_SSLv23(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * to), REG(d0, int tlen), REG(a1, const unsigned char * f), REG(d1, int fl), REG(d2, int rsa_len));
int SAVEDS ASM LIB_RSA_padding_add_none(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * to), REG(d0, int tlen), REG(a1, const unsigned char * f), REG(d1, int fl));
int SAVEDS ASM LIB_RSA_padding_check_none(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * to), REG(d0, int tlen), REG(a1, const unsigned char * f), REG(d1, int fl), REG(d2, int rsa_len));
int SAVEDS ASM LIB_RSA_get_ex_new_index(REG(a6, __IFACE_OR_BASE), REG(d0, long argl), REG(a0, void * argp), REG(a1, CRYPTO_EX_new * new_func), REG(a2, CRYPTO_EX_dup * dup_func), REG(a3, CRYPTO_EX_free * free_func));
int SAVEDS ASM LIB_RSA_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * r), REG(d0, int idx), REG(a1, void * arg));
void * SAVEDS ASM LIB_RSA_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * r), REG(d0, int idx));
RSA * SAVEDS ASM LIB_RSAPublicKey_dup(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * rsa));
RSA * SAVEDS ASM LIB_RSAPrivateKey_dup(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * rsa));
void SAVEDS ASM LIB_ERR_load_RSA_strings(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_SHA_Init(REG(a6, __IFACE_OR_BASE), REG(a0, SHA_CTX * c));
int SAVEDS ASM LIB_SHA_Update(REG(a6, __IFACE_OR_BASE), REG(a0, SHA_CTX * c), REG(a1, const void * data), REG(d0, unsigned long len));
int SAVEDS ASM LIB_SHA_Final(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * md), REG(a1, SHA_CTX * c));
unsigned char * SAVEDS ASM LIB_SHA(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * d), REG(d0, unsigned long n), REG(a1, unsigned char * md));
void SAVEDS ASM LIB_SHA_Transform(REG(a6, __IFACE_OR_BASE), REG(a0, SHA_CTX * c), REG(a1, const unsigned char * data));
int SAVEDS ASM LIB_SHA1_Init(REG(a6, __IFACE_OR_BASE), REG(a0, SHA_CTX * c));
int SAVEDS ASM LIB_SHA1_Update(REG(a6, __IFACE_OR_BASE), REG(a0, SHA_CTX * c), REG(a1, const void * data), REG(d0, unsigned long len));
int SAVEDS ASM LIB_SHA1_Final(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * md), REG(a1, SHA_CTX * c));
unsigned char * SAVEDS ASM LIB_SHA1(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * d), REG(d0, unsigned long n), REG(a1, unsigned char * md));
void SAVEDS ASM LIB_SHA1_Transform(REG(a6, __IFACE_OR_BASE), REG(a0, SHA_CTX * c), REG(a1, const unsigned char * data));
int SAVEDS ASM LIB_UI_read_string_lib(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, UI_STRING * uis));
int SAVEDS ASM LIB_UI_write_string_lib(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, UI_STRING * uis));
void SAVEDS ASM LIB_HMAC_CTX_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, HMAC_CTX * ctx), REG(d0, unsigned long flags));
void SAVEDS ASM LIB_private_RC4_set_key(REG(a6, __IFACE_OR_BASE), REG(a0, RC4_KEY * key), REG(d0, int len), REG(a1, const unsigned char * data));
int SAVEDS ASM LIB_X509_check_ca(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
PROXY_POLICY * SAVEDS ASM LIB_PROXY_POLICY_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PROXY_POLICY_free(REG(a6, __IFACE_OR_BASE), REG(a0, PROXY_POLICY * a));
PROXY_POLICY * SAVEDS ASM LIB_d2i_PROXY_POLICY(REG(a6, __IFACE_OR_BASE), REG(a0, PROXY_POLICY ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PROXY_POLICY(REG(a6, __IFACE_OR_BASE), REG(a0, PROXY_POLICY * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PROXY_POLICY_it(REG(a6, __IFACE_OR_BASE));
PROXY_CERT_INFO_EXTENSION * SAVEDS ASM LIB_PROXY_CERT_INFO_EXTENSION_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PROXY_CERT_INFO_EXTENSION_free(REG(a6, __IFACE_OR_BASE), REG(a0, PROXY_CERT_INFO_EXTENSION * a));
PROXY_CERT_INFO_EXTENSION * SAVEDS ASM LIB_d2i_PROXY_CERT_INFO_EXTENSION(REG(a6, __IFACE_OR_BASE), REG(a0, PROXY_CERT_INFO_EXTENSION ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PROXY_CERT_INFO_EXTENSION(REG(a6, __IFACE_OR_BASE), REG(a0, PROXY_CERT_INFO_EXTENSION * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PROXY_CERT_INFO_EXTENSION_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_BN_mod_exp_mont_consttime(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * rr), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, const BIGNUM * m), REG(a4, BN_CTX * ctx), REG(d0, BN_MONT_CTX * in_mont));
BN_MONT_CTX * SAVEDS ASM LIB_BN_MONT_CTX_set_locked(REG(a6, __IFACE_OR_BASE), REG(a0, BN_MONT_CTX ** pmont), REG(d0, int lock), REG(a1, const BIGNUM * mod), REG(a2, BN_CTX * ctx));
int SAVEDS ASM LIB_PKCS1_MGF1(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * mask), REG(d0, long len), REG(a1, const unsigned char * seed), REG(d1, long seedlen), REG(a2, const EVP_MD * dgst));
int SAVEDS ASM LIB_RSA_padding_add_X931(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * to), REG(d0, int tlen), REG(a1, const unsigned char * from), REG(d1, int flen));
int SAVEDS ASM LIB_RSA_padding_check_X931(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * to), REG(d0, int tlen), REG(a1, const unsigned char * from), REG(d1, int flen), REG(d2, int num));
int SAVEDS ASM LIB_RSA_X931_hash_id(REG(a6, __IFACE_OR_BASE), REG(d0, int nid));
int SAVEDS ASM LIB_RSA_verify_PKCS1_PSS(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * rsa), REG(a1, const unsigned char * mHash), REG(a2, const EVP_MD * Hash), REG(a3, const unsigned char * EM), REG(d0, int sLen));
int SAVEDS ASM LIB_RSA_padding_add_PKCS1_PSS(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * rsa), REG(a1, unsigned char * EM), REG(a2, const unsigned char * mHash), REG(a3, const EVP_MD * Hash), REG(d0, int sLen));
const EVP_MD * SAVEDS ASM LIB_EVP_sha224(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_sha256(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_sha384(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_sha512(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_BN_GF2m_add(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b));
int SAVEDS ASM LIB_BN_GF2m_arr2poly(REG(a6, __IFACE_OR_BASE), REG(a0, const int * p), REG(a1, BIGNUM * a));
int SAVEDS ASM LIB_BN_GF2m_mod(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p));
int SAVEDS ASM LIB_BN_GF2m_mod_mul(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, const BIGNUM * p), REG(a4, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_GF2m_mod_sqr(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_GF2m_mod_inv(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * b), REG(a2, const BIGNUM * p), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_GF2m_mod_div(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, const BIGNUM * p), REG(a4, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_GF2m_mod_exp(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, const BIGNUM * p), REG(a4, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_GF2m_mod_sqrt(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_GF2m_mod_solve_quad(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_generate_prime_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * ret), REG(d0, int bits), REG(d1, int safe), REG(a1, const BIGNUM * add), REG(a2, const BIGNUM * rem), REG(a3, BN_GENCB * cb));
int SAVEDS ASM LIB_BN_is_prime_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * p), REG(d0, int nchecks), REG(a1, BN_CTX * ctx), REG(a2, BN_GENCB * cb));
void SAVEDS ASM LIB_BN_set_negative(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * b), REG(d0, int n));
int SAVEDS ASM LIB_EC_GROUP_get_degree(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group));
const EC_METHOD * SAVEDS ASM LIB_EC_GF2m_simple_method(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_EC_GROUP_set_curve_GF2m(REG(a6, __IFACE_OR_BASE), REG(a0, EC_GROUP * group), REG(a1, const BIGNUM * p), REG(a2, const BIGNUM * a), REG(a3, const BIGNUM * b), REG(a4, BN_CTX * ctx));
int SAVEDS ASM LIB_EC_GROUP_get_curve_GF2m(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group), REG(a1, BIGNUM * p), REG(a2, BIGNUM * a), REG(a3, BIGNUM * b), REG(a4, BN_CTX * ctx));
int SAVEDS ASM LIB_EC_POINT_set_affine_coordinates_GF2m(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group), REG(a1, EC_POINT * point), REG(a2, const BIGNUM * x), REG(a3, const BIGNUM * y), REG(a4, BN_CTX * ctx));
int SAVEDS ASM LIB_EC_POINT_get_affine_coordinates_GF2m(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group), REG(a1, const EC_POINT * point), REG(a2, BIGNUM * x), REG(a3, BIGNUM * y), REG(a4, BN_CTX * ctx));
size_t SAVEDS ASM LIB_EC_get_builtin_curves(REG(a6, __IFACE_OR_BASE), REG(a0, EC_builtin_curve * r), REG(d0, size_t nitems));
EC_GROUP * SAVEDS ASM LIB_EC_GROUP_new_by_curve_name(REG(a6, __IFACE_OR_BASE), REG(d0, int nid));
int SAVEDS ASM LIB_EC_GROUP_check(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group), REG(a1, BN_CTX * ctx));
void SAVEDS ASM LIB_ENGINE_cleanup(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_DSA_generate_parameters_ex(REG(a6, __IFACE_OR_BASE), REG(a0, DSA * dsa), REG(d0, int bits), REG(a1, unsigned char * seed), REG(d1, int seed_len), REG(a2, int * counter_ret), REG(a3, unsigned long * h_ret), REG(a4, BN_GENCB * cb));
const EVP_MD * SAVEDS ASM LIB_EVP_ecdsa(REG(a6, __IFACE_OR_BASE));
EC_KEY * SAVEDS ASM LIB_EC_KEY_new_by_curve_name(REG(a6, __IFACE_OR_BASE), REG(d0, int nid));
int SAVEDS ASM LIB_EC_KEY_generate_key(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key));
void SAVEDS ASM LIB_EC_KEY_free(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key));
void SAVEDS ASM LIB_ECDSA_SIG_free(REG(a6, __IFACE_OR_BASE), REG(a0, ECDSA_SIG * a));
ECDSA_SIG * SAVEDS ASM LIB_ECDSA_do_sign(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * dgst), REG(d0, int dlen), REG(a1, EC_KEY * eckey));
int SAVEDS ASM LIB_ECDSA_do_verify(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * dgst), REG(d0, int dgst_len), REG(a1, const ECDSA_SIG * sig), REG(a2, EC_KEY * eckey));
EC_KEY * SAVEDS ASM LIB_EC_KEY_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_EC_KEY_set_group(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * eckey), REG(a1, const EC_GROUP * group));
const EC_GROUP * SAVEDS ASM LIB_EC_KEY_get0_group(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * key));
int SAVEDS ASM LIB_EC_KEY_check_key(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * eckey));
int SAVEDS ASM LIB_ECDSA_size(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * eckey));
int SAVEDS ASM LIB_ECDSA_sign(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, const unsigned char * dgst), REG(d1, int dgstlen), REG(a1, unsigned char * sig), REG(a2, unsigned int * siglen), REG(a3, EC_KEY * eckey));
int SAVEDS ASM LIB_ECDSA_verify(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, const unsigned char * dgst), REG(d1, int dgstlen), REG(a1, const unsigned char * sig), REG(d2, int siglen), REG(a2, EC_KEY * eckey));
ECDSA_SIG * SAVEDS ASM LIB_d2i_ECDSA_SIG(REG(a6, __IFACE_OR_BASE), REG(a0, ECDSA_SIG ** v), REG(a1, const unsigned char ** pp), REG(a2, long len));
int SAVEDS ASM LIB_i2d_ECDSA_SIG(REG(a6, __IFACE_OR_BASE), REG(a0, const ECDSA_SIG * a), REG(a1, unsigned char ** pp));
int SAVEDS ASM LIB_DH_generate_parameters_ex(REG(a6, __IFACE_OR_BASE), REG(a0, DH * ret), REG(d0, int prime_len), REG(d1, int generator), REG(a1, BN_GENCB * cb));
int SAVEDS ASM LIB_EC_METHOD_get_field_type(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_METHOD * meth));
const EC_POINT * SAVEDS ASM LIB_EC_KEY_get0_public_key(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * eckey));
int SAVEDS ASM LIB_ECDH_compute_key(REG(a6, __IFACE_OR_BASE), REG(a0, void * out), REG(d0, size_t outlen), REG(a1, const EC_POINT * pub_key), REG(a2, EC_KEY * ecdh), REG(a3, void *(*KDF)(const void *, size_t, void *, size_t *)));
const BIGNUM * SAVEDS ASM LIB_EC_KEY_get0_private_key(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * eckey));
ENGINE * SAVEDS ASM LIB_ENGINE_get_first(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_ENGINE_get_id(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
const char * SAVEDS ASM LIB_ENGINE_get_name(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
ENGINE * SAVEDS ASM LIB_ENGINE_get_next(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_ENGINE_free(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
ENGINE * SAVEDS ASM LIB_ENGINE_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_set_id(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const char * id));
int SAVEDS ASM LIB_ENGINE_set_name(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const char * name));
int SAVEDS ASM LIB_ENGINE_add(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_ENGINE_remove(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
void SAVEDS ASM LIB_ENGINE_load_builtin_engines(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ENGINE_register_all_ciphers(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_EVP_CIPHER_nid(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
int SAVEDS ASM LIB_EVP_MD_type(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md));
void SAVEDS ASM LIB_ENGINE_register_all_digests(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_BIO_test_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO * b), REG(d0, int flags));
STACK_OF(SSL_COMP) * SAVEDS ASM LIB_SSL_COMP_get_compression_methods(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_RSA_generate_key_ex(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * rsa), REG(d0, int bits), REG(a1, BIGNUM * e), REG(a2, BN_GENCB * cb));
void SAVEDS ASM LIB_X509_VERIFY_PARAM_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param));
int SAVEDS ASM LIB_X509_STORE_set1_param(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * ctx), REG(a1, X509_VERIFY_PARAM * pm));
ASN1_TYPE * SAVEDS ASM LIB_ASN1_generate_nconf(REG(a6, __IFACE_OR_BASE), REG(a0, char * str), REG(a1, CONF * nconf));
EC_GROUP * SAVEDS ASM LIB_PEM_read_bio_ECPKParameters(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EC_GROUP ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
EC_KEY * SAVEDS ASM LIB_EC_KEY_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * ec_key));
void SAVEDS ASM LIB_BIO_set_callback(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, long (*callback)(struct bio_st *, int, const char *, int, long, long)));
void SAVEDS ASM LIB_BIO_set_callback_arg(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, char * arg));
void SAVEDS ASM LIB_EVP_MD_CTX_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(d0, int flags));
void SAVEDS ASM LIB_BIO_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(d0, int flags));
void SAVEDS ASM LIB_EVP_CIPHER_CTX_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(d0, int flags));
int SAVEDS ASM LIB_EVP_CIPHER_iv_length(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
int SAVEDS ASM LIB_X509_REQ_check_private_key(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * x509), REG(a1, EVP_PKEY * pkey));
EC_KEY * SAVEDS ASM LIB_PEM_read_bio_EC_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EC_KEY ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
EC_KEY * SAVEDS ASM LIB_PEM_read_bio_ECPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EC_KEY ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_EC_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EC_KEY * x));
EC_KEY * SAVEDS ASM LIB_d2i_EC_PUBKEY_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EC_KEY ** eckey));
void SAVEDS ASM LIB_EC_KEY_set_asn1_flag(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key), REG(d0, int flag));
void SAVEDS ASM LIB_EC_KEY_set_conv_form(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key), REG(d0, point_conversion_form_t cform));
int SAVEDS ASM LIB_EC_KEY_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const EC_KEY * x), REG(d0, int off));
EC_KEY * SAVEDS ASM LIB_d2i_ECPrivateKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EC_KEY ** eckey));
int SAVEDS ASM LIB_i2d_EC_PUBKEY_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EC_KEY * eckey));
int SAVEDS ASM LIB_PEM_write_bio_ECPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EC_KEY * x), REG(a2, const EVP_CIPHER * enc), REG(a3, unsigned char * kstr), REG(d0, int klen), REG(a4, pem_password_cb * cb), REG(d1, void * u));
int SAVEDS ASM LIB_PEM_write_bio_ECPKParameters(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const EC_GROUP * x));
int SAVEDS ASM LIB_i2d_ECPrivateKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EC_KEY * eckey));
int SAVEDS ASM LIB_i2d_ECPKParameters(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a), REG(a1, unsigned char ** out));
void SAVEDS ASM LIB_EC_GROUP_set_asn1_flag(REG(a6, __IFACE_OR_BASE), REG(a0, EC_GROUP * group), REG(d0, int flag));
void SAVEDS ASM LIB_EC_GROUP_set_point_conversion_form(REG(a6, __IFACE_OR_BASE), REG(a0, EC_GROUP * group), REG(d0, point_conversion_form_t form));
point_conversion_form_t SAVEDS ASM LIB_EC_GROUP_get_point_conversion_form(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group));
int SAVEDS ASM LIB_ECPKParameters_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const EC_GROUP * x), REG(d0, int off));
size_t SAVEDS ASM LIB_EC_GROUP_set_seed(REG(a6, __IFACE_OR_BASE), REG(a0, EC_GROUP * group), REG(a1, const unsigned char * p), REG(d0, size_t len));
EC_GROUP * SAVEDS ASM LIB_d2i_ECPKParameters(REG(a6, __IFACE_OR_BASE), REG(a0, EC_GROUP ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
BIGNUM * SAVEDS ASM LIB_EC_POINT_point2bn(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group), REG(a1, const EC_POINT * point), REG(d0, point_conversion_form_t form), REG(a2, BIGNUM * ret), REG(a3, BN_CTX * ctx));
STACK_OF(OPENSSL_STRING) * SAVEDS ASM LIB_X509_get1_ocsp(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
const char * SAVEDS ASM LIB_SSL_get_servername(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s), REG(d0, const int type));
SSL_CTX * SAVEDS ASM LIB_SSL_set_SSL_CTX(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, SSL_CTX * ctx));
void SAVEDS ASM LIB_SSL_CTX_set_cookie_generate_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, int (*app_gen_cookie_cb)(SSL *ssl, unsigned char *cookie, unsigned int *cookie_len)));
void SAVEDS ASM LIB_SSL_CTX_set_cookie_verify_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, int (*app_verify_cookie_cb)(SSL *ssl, unsigned char *cookie, unsigned int cookie_len)));
void SAVEDS ASM LIB_SSL_CTX_set_info_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, void (*cb)(const SSL *ssl, int type, int val)));
const SSL_METHOD * SAVEDS ASM LIB_DTLSv1_server_method(REG(a6, __IFACE_OR_BASE));
BIO * SAVEDS ASM LIB_BIO_new_dgram(REG(a6, __IFACE_OR_BASE), REG(d0, int fd), REG(d1, int close_flag));
int SAVEDS ASM LIB_SSL_get_servername_type(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
const COMP_METHOD * SAVEDS ASM LIB_SSL_get_current_compression(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
const COMP_METHOD * SAVEDS ASM LIB_SSL_get_current_expansion(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
const char * SAVEDS ASM LIB_SSL_COMP_get_name(REG(a6, __IFACE_OR_BASE), REG(a0, const COMP_METHOD * comp));
ENGINE * SAVEDS ASM LIB_ENGINE_by_id(REG(a6, __IFACE_OR_BASE), REG(a0, const char * id));
int SAVEDS ASM LIB_SSL_CTX_set_client_cert_engine(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, ENGINE * e));
const SSL_METHOD * SAVEDS ASM LIB_DTLSv1_client_method(REG(a6, __IFACE_OR_BASE));
const SSL_METHOD * SAVEDS ASM LIB_DTLSv1_method(REG(a6, __IFACE_OR_BASE));
unsigned char * SAVEDS ASM LIB_SHA256(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * d), REG(d0, size_t n), REG(a1, unsigned char * md));
unsigned char * SAVEDS ASM LIB_SHA512(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * d), REG(d0, size_t n), REG(a1, unsigned char * md));
void SAVEDS ASM LIB_AES_ige_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, const unsigned long length), REG(a2, const AES_KEY * key), REG(a3, unsigned char * ivec), REG(d1, const int enc));
int SAVEDS ASM LIB_EC_KEY_precompute_mult(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key), REG(a1, BN_CTX * ctx));
EVP_PKEY * SAVEDS ASM LIB_ENGINE_load_private_key(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const char * key_id), REG(a2, UI_METHOD * ui_method), REG(a3, void * callback_data));
EVP_PKEY * SAVEDS ASM LIB_ENGINE_load_public_key(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const char * key_id), REG(a2, UI_METHOD * ui_method), REG(a3, void * callback_data));
int SAVEDS ASM LIB_ENGINE_ctrl_cmd(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const char * cmd_name), REG(a2, long i), REG(a3, void * p), REG(a4, void (*f)(void)), REG(d0, int cmd_optional));
int SAVEDS ASM LIB_ENGINE_set_default(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(d0, unsigned int flags));
int SAVEDS ASM LIB_ENGINE_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(d0, int cmd), REG(d1, long i), REG(a1, void * p), REG(a2, void (*f)(void)));
int SAVEDS ASM LIB_ENGINE_register_all_complete(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_ctrl_cmd_string(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const char * cmd_name), REG(a2, const char * arg), REG(d0, int cmd_optional));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_add0_policy(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param), REG(a1, ASN1_OBJECT * policy));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_set_purpose(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param), REG(d0, int purpose));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param), REG(d0, unsigned long flags));
X509_VERIFY_PARAM * SAVEDS ASM LIB_X509_VERIFY_PARAM_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_POLICY_NODE_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, X509_POLICY_NODE * node), REG(d0, int indent));
X509_POLICY_TREE * SAVEDS ASM LIB_X509_STORE_CTX_get0_policy_tree(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx));
int SAVEDS ASM LIB_X509_STORE_CTX_get_explicit_policy(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx));
STACK_OF(X509_POLICY_NODE) * SAVEDS ASM LIB_X509_policy_tree_get0_policies(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_POLICY_TREE * tree));
STACK_OF(X509_POLICY_NODE) * SAVEDS ASM LIB_X509_policy_tree_get0_user_policies(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_POLICY_TREE * tree));
char * SAVEDS ASM LIB_BIO_get_callback_arg(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO * b));
int SAVEDS ASM LIB_EVP_PKEY_add1_attr_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * key), REG(d0, int nid), REG(d1, int type), REG(a1, const unsigned char * bytes), REG(d2, int len));
const RSA_METHOD * SAVEDS ASM LIB_ENGINE_get_RSA(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
const DSA_METHOD * SAVEDS ASM LIB_ENGINE_get_DSA(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
const DH_METHOD * SAVEDS ASM LIB_ENGINE_get_DH(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
const RAND_METHOD * SAVEDS ASM LIB_ENGINE_get_RAND(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
ENGINE_CIPHERS_PTR SAVEDS ASM LIB_ENGINE_get_ciphers(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
ENGINE_DIGESTS_PTR SAVEDS ASM LIB_ENGINE_get_digests(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
int SAVEDS ASM LIB_ENGINE_init(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_ENGINE_finish(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
OCSP_REQ_CTX * SAVEDS ASM LIB_OCSP_sendreq_new(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * io), REG(a1, char * path), REG(a2, OCSP_REQUEST * req), REG(a3, int maxline));
int SAVEDS ASM LIB_OCSP_sendreq_nbio(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPONSE ** presp), REG(a1, OCSP_REQ_CTX * rctx));
void SAVEDS ASM LIB_OCSP_REQ_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQ_CTX * rctx));
int SAVEDS ASM LIB_SSL_CTX_use_psk_identity_hint(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const char * identity_hint));
void SAVEDS ASM LIB_SSL_CTX_set_psk_client_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, unsigned int (*psk_client_callback)(SSL *ssl, const char *hint, char *identity, unsigned int max_identity_len, unsigned char *psk, unsigned int max_psk_len)));
const char * SAVEDS ASM LIB_SSL_get_psk_identity_hint(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
void SAVEDS ASM LIB_SSL_set_psk_server_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, unsigned int (*psk_server_callback)(SSL *ssl, const char *identity, unsigned char *psk, unsigned int max_psk_len)));
int SAVEDS ASM LIB_SSL_use_psk_identity_hint(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, const char * identity_hint));
void SAVEDS ASM LIB_SSL_set_psk_client_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, unsigned int (*psk_client_callback)(SSL *ssl, const char *hint, char *identity, unsigned int max_identity_len, unsigned char *psk, unsigned int max_psk_len)));
void SAVEDS ASM LIB_SSL_CTX_set_psk_server_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, unsigned int (*psk_server_callback)(SSL *ssl, const char *identity, unsigned char *psk, unsigned int max_psk_len)));
const char * SAVEDS ASM LIB_SSL_get_psk_identity(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_set_session_ticket_ext(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, void * ext_data), REG(d0, int ext_len));
int SAVEDS ASM LIB_SSL_set_session_secret_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, tls_session_secret_cb_fn tls_session_secret_cb), REG(a2, void * arg));
int SAVEDS ASM LIB_SSL_set_session_ticket_ext_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, tls_session_ticket_ext_cb_fn cb), REG(a2, void * arg));
int SAVEDS ASM LIB_SSL_set1_param(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, X509_VERIFY_PARAM * vpm));
int SAVEDS ASM LIB_SSL_CTX_set1_param(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, X509_VERIFY_PARAM * vpm));
int SAVEDS ASM LIB_SSL_renegotiate_abbreviated(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
const SSL_METHOD * SAVEDS ASM LIB_TLSv1_1_method(REG(a6, __IFACE_OR_BASE));
const SSL_METHOD * SAVEDS ASM LIB_TLSv1_1_client_method(REG(a6, __IFACE_OR_BASE));
const SSL_METHOD * SAVEDS ASM LIB_TLSv1_1_server_method(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_SSL_CTX_set_srp_client_pwd_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, char * (*cb)(SSL *, void *)));
BIGNUM * SAVEDS ASM LIB_SSL_get_srp_g(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
int SAVEDS ASM LIB_SSL_CTX_set_srp_username_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, int (*cb)(SSL *, int *, void *)));
char * SAVEDS ASM LIB_SSL_get_srp_userinfo(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
int SAVEDS ASM LIB_SSL_set_srp_server_param(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, const BIGNUM * N), REG(a2, const BIGNUM * g), REG(a3, BIGNUM * sa), REG(a4, BIGNUM * v), REG(d0, char * info));
int SAVEDS ASM LIB_SSL_set_srp_server_param_pw(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, const char * user), REG(a2, const char * pass), REG(a3, const char * grp));
BIGNUM * SAVEDS ASM LIB_SSL_get_srp_N(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
char * SAVEDS ASM LIB_SSL_get_srp_username(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
int SAVEDS ASM LIB_SSL_CTX_set_srp_password(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, char * password));
int SAVEDS ASM LIB_SSL_CTX_set_srp_strength(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, int strength));
int SAVEDS ASM LIB_SSL_CTX_set_srp_verify_param_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, int (*cb)(SSL *, void *)));
int SAVEDS ASM LIB_SSL_CTX_set_srp_cb_arg(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, void * arg));
int SAVEDS ASM LIB_SSL_CTX_set_srp_username(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, char * name));
int SAVEDS ASM LIB_SSL_CTX_SRP_CTX_init(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx));
int SAVEDS ASM LIB_SRP_Calc_A_param(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
int SAVEDS ASM LIB_SRP_generate_server_master_secret(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, unsigned char * master_key));
int SAVEDS ASM LIB_SSL_CTX_SRP_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx));
int SAVEDS ASM LIB_SRP_generate_client_master_secret(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, unsigned char * master_key));
int SAVEDS ASM LIB_SSL_srp_server_param_with_username(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, int * ad));
int SAVEDS ASM LIB_SSL_SRP_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ctx));
void SAVEDS ASM LIB_SSL_set_debug(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, int debug));
X509 * SAVEDS ASM LIB_SSL_SESSION_get0_peer(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_SESSION * s));
const SSL_METHOD * SAVEDS ASM LIB_TLSv1_2_client_method(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_SSL_SESSION_set1_id_context(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_SESSION * s), REG(a1, const unsigned char * sid_ctx), REG(d0, unsigned int sid_ctx_len));
const SSL_METHOD * SAVEDS ASM LIB_TLSv1_2_server_method(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_SSL_cache_hit(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
void SAVEDS ASM LIB_SSL_set_state(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(d0, int state));
unsigned long SAVEDS ASM LIB_SSL_CIPHER_get_id(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CIPHER * c));
const SSL_METHOD * SAVEDS ASM LIB_TLSv1_2_method(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_SSL_export_keying_material(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, unsigned char * out), REG(d0, size_t olen), REG(a2, const char * label), REG(d1, size_t llen), REG(a3, const unsigned char * p), REG(d2, size_t plen), REG(d3, int use_context));
int SAVEDS ASM LIB_SSL_set_tlsext_use_srtp(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ctx), REG(a1, const char * profiles));
void SAVEDS ASM LIB_SSL_CTX_set_next_protos_advertised_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * s), REG(a1, int (*cb)(SSL *ssl, const unsigned char **out, unsigned int *outlen, void *arg)), REG(a2, void * arg));
void SAVEDS ASM LIB_SSL_get0_next_proto_negotiated(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s), REG(a1, const unsigned char ** data), REG(a2, unsigned * len));
SRTP_PROTECTION_PROFILE * SAVEDS ASM LIB_SSL_get_selected_srtp_profile(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
int SAVEDS ASM LIB_SSL_CTX_set_tlsext_use_srtp(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const char * profiles));
int SAVEDS ASM LIB_SSL_select_next_proto(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char ** out), REG(a1, unsigned char * outlen), REG(a2, const unsigned char * in), REG(d0, unsigned int inlen), REG(a3, const unsigned char * client), REG(d1, unsigned int client_len));
STACK_OF(SRTP_PROTECTION_PROFILE) * SAVEDS ASM LIB_SSL_get_srtp_profiles(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
void SAVEDS ASM LIB_SSL_CTX_set_next_proto_select_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * s), REG(a1, int (*cb)(SSL *ssl, unsigned char **out, unsigned char *outlen, const unsigned char *in, unsigned int inlen, void *arg)), REG(a2, void * arg));
unsigned int SAVEDS ASM LIB_SSL_SESSION_get_compress_id(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_SESSION * s));
void SAVEDS ASM LIB_SSL_CTX_set_tmp_ecdh_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, EC_KEY *(*ecdh)(SSL *ssl, int is_export, int keylength)));
void SAVEDS ASM LIB_SSL_set_tmp_ecdh_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, EC_KEY *(*ecdh)(SSL *ssl, int is_export, int keylength)));
int SAVEDS ASM LIB_SSL_SRP_CTX_init(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
const char * SAVEDS ASM LIB_DES_options(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ERR_load_ENGINE_strings(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_set_DSA(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const DSA_METHOD * dsa_meth));
ENGINE_GEN_INT_FUNC_PTR SAVEDS ASM LIB_ENGINE_get_finish_function(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
ENGINE * SAVEDS ASM LIB_ENGINE_get_default_RSA(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_set_DH(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const DH_METHOD * dh_meth));
ENGINE_GEN_INT_FUNC_PTR SAVEDS ASM LIB_ENGINE_get_init_function(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
int SAVEDS ASM LIB_ENGINE_set_init_function(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, ENGINE_GEN_INT_FUNC_PTR init_f));
int SAVEDS ASM LIB_ENGINE_set_default_DSA(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
ENGINE * SAVEDS ASM LIB_ENGINE_get_last(REG(a6, __IFACE_OR_BASE));
ENGINE * SAVEDS ASM LIB_ENGINE_get_prev(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
ENGINE * SAVEDS ASM LIB_ENGINE_get_default_DH(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_set_finish_function(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, ENGINE_GEN_INT_FUNC_PTR finish_f));
int SAVEDS ASM LIB_ENGINE_set_RSA(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const RSA_METHOD * rsa_meth));
int SAVEDS ASM LIB_ENGINE_set_default_RAND(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
ENGINE * SAVEDS ASM LIB_ENGINE_get_default_DSA(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_set_default_RSA(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
ENGINE * SAVEDS ASM LIB_ENGINE_get_default_RAND(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_set_RAND(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const RAND_METHOD * rand_meth));
int SAVEDS ASM LIB_ENGINE_set_default_DH(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
ENGINE_CTRL_FUNC_PTR SAVEDS ASM LIB_ENGINE_get_ctrl_function(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
int SAVEDS ASM LIB_ENGINE_set_ctrl_function(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, ENGINE_CTRL_FUNC_PTR ctrl_f));
void SAVEDS ASM LIB_ENGINE_unregister_ciphers(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
void SAVEDS ASM LIB_ENGINE_unregister_RSA(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
void SAVEDS ASM LIB_ENGINE_register_all_RAND(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ENGINE_load_dynamic(REG(a6, __IFACE_OR_BASE));
ENGINE * SAVEDS ASM LIB_ENGINE_get_digest_engine(REG(a6, __IFACE_OR_BASE), REG(d0, int nid));
int SAVEDS ASM LIB_ENGINE_register_DH(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_ENGINE_register_RAND(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
void SAVEDS ASM LIB_ENGINE_load_cryptodev(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_register_ciphers(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
void SAVEDS ASM LIB_ENGINE_load_ubsec(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ENGINE_load_openssl(REG(a6, __IFACE_OR_BASE));
const ENGINE_CMD_DEFN * SAVEDS ASM LIB_ENGINE_get_cmd_defns(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
int SAVEDS ASM LIB_ENGINE_set_load_privkey_function(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, ENGINE_LOAD_KEY_PTR loadpriv_f));
int SAVEDS ASM LIB_ENGINE_set_default_digests(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_ENGINE_register_RSA(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
void SAVEDS ASM LIB_ENGINE_unregister_DSA(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_ENGINE_set_ciphers(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, ENGINE_CIPHERS_PTR f));
int SAVEDS ASM LIB_RAND_set_rand_engine(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * engine));
const EVP_MD * SAVEDS ASM LIB_ENGINE_get_digest(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(d0, int nid));
const EVP_CIPHER * SAVEDS ASM LIB_ENGINE_get_cipher(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(d0, int nid));
int SAVEDS ASM LIB_ENGINE_cmd_is_executable(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(d0, int cmd));
int SAVEDS ASM LIB_ENGINE_register_DSA(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_ENGINE_set_load_pubkey_function(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, ENGINE_LOAD_KEY_PTR loadpub_f));
ENGINE_LOAD_KEY_PTR SAVEDS ASM LIB_ENGINE_get_load_pubkey_function(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
void SAVEDS ASM LIB_ENGINE_register_all_RSA(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ENGINE_unregister_digests(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_ENGINE_get_ex_new_index(REG(a6, __IFACE_OR_BASE), REG(d0, long argl), REG(a0, void * argp), REG(a1, CRYPTO_EX_new * new_func), REG(a2, CRYPTO_EX_dup * dep_func), REG(a3, CRYPTO_EX_free * free_func));
void * SAVEDS ASM LIB_ENGINE_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e), REG(d0, int idx));
int SAVEDS ASM LIB_ENGINE_set_cmd_defns(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const ENGINE_CMD_DEFN * defns));
int SAVEDS ASM LIB_ENGINE_register_digests(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
void SAVEDS ASM LIB_ENGINE_register_all_DH(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_get_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
void SAVEDS ASM LIB_ENGINE_unregister_DH(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
void SAVEDS ASM LIB_ENGINE_register_all_DSA(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_set_digests(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, ENGINE_DIGESTS_PTR f));
int SAVEDS ASM LIB_ENGINE_register_complete(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_ENGINE_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(d0, int idx), REG(a1, void * arg));
int SAVEDS ASM LIB_ENGINE_set_destroy_function(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, ENGINE_GEN_INT_FUNC_PTR destroy_f));
ENGINE * SAVEDS ASM LIB_ENGINE_get_cipher_engine(REG(a6, __IFACE_OR_BASE), REG(d0, int nid));
void SAVEDS ASM LIB_ENGINE_load_cswift(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_set_default_ciphers(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
void SAVEDS ASM LIB_ENGINE_unregister_RAND(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
void SAVEDS ASM LIB_ENGINE_load_nuron(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ENGINE_set_table_flags(REG(a6, __IFACE_OR_BASE), REG(d0, unsigned int flags));
void SAVEDS ASM LIB_ENGINE_load_chil(REG(a6, __IFACE_OR_BASE));
ENGINE_GEN_INT_FUNC_PTR SAVEDS ASM LIB_ENGINE_get_destroy_function(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
void SAVEDS ASM LIB_ENGINE_load_atalla(REG(a6, __IFACE_OR_BASE));
unsigned int SAVEDS ASM LIB_ENGINE_get_table_flags(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(d0, int flags));
ENGINE_LOAD_KEY_PTR SAVEDS ASM LIB_ENGINE_get_load_privkey_function(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
int SAVEDS ASM LIB_ENGINE_set_default_string(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const char * def_list));
void SAVEDS ASM LIB_ENGINE_add_conf_module(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ENGINE_load_aep(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ENGINE_load_sureware(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ENGINE_load_4758cca(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_ENGINE_set_STORE(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const STORE_METHOD * store_meth));
int SAVEDS ASM LIB_ENGINE_register_ECDSA(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
unsigned long SAVEDS ASM LIB_BN_BLINDING_get_thread_id(REG(a6, __IFACE_OR_BASE), REG(a0, const BN_BLINDING * b));
int SAVEDS ASM LIB_EC_GROUP_get_trinomial_basis(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * eg), REG(a1, unsigned int * k));
const ECDH_METHOD * SAVEDS ASM LIB_ECDH_get_default_method(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_register_ECDH(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_SHA512_Update(REG(a6, __IFACE_OR_BASE), REG(a0, SHA512_CTX * c), REG(a1, const void * data), REG(d0, size_t len));
int SAVEDS ASM LIB_i2d_ECPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key), REG(a1, unsigned char ** out));
int SAVEDS ASM LIB_BN_GF2m_mod_exp_arr(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, const int * p), REG(a4, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_GF2m_mod_mul_arr(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, const int * p), REG(a4, BN_CTX * ctx));
EC_KEY * SAVEDS ASM LIB_o2i_ECPublicKey(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY ** key), REG(a1, const unsigned char ** in), REG(d0, long len));
EC_KEY * SAVEDS ASM LIB_EC_KEY_copy(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * dst), REG(a1, const EC_KEY * src));
int SAVEDS ASM LIB_EC_GROUP_check_discriminant(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group), REG(a1, BN_CTX * ctx));
int SAVEDS ASM LIB_i2o_ECPublicKey(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key), REG(a1, unsigned char ** out));
EC_GROUP * SAVEDS ASM LIB_EC_GROUP_new_curve_GF2m(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * p), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, BN_CTX * ctx));
void SAVEDS ASM LIB_ENGINE_unregister_STORE(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
struct ec_key_st * SAVEDS ASM LIB_EVP_PKEY_get1_EC_KEY(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey));
ENGINE * SAVEDS ASM LIB_ENGINE_get_default_ECDH(REG(a6, __IFACE_OR_BASE));
point_conversion_form_t SAVEDS ASM LIB_EC_KEY_get_conv_form(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * key));
void * SAVEDS ASM LIB_ENGINE_get_static_state(REG(a6, __IFACE_OR_BASE));
ECDSA_SIG * SAVEDS ASM LIB_ECDSA_SIG_new(REG(a6, __IFACE_OR_BASE));
EC_POINT * SAVEDS ASM LIB_EC_POINT_bn2point(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * g), REG(a1, const BIGNUM * b), REG(a2, EC_POINT * p), REG(a3, BN_CTX * ctx));
void * SAVEDS ASM LIB_EC_KEY_get_key_method_data(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key), REG(a1, void *(*dup_func)(void *)), REG(a2, void (*free_func)(void *)), REG(a3, void (*clear_free_func)(void *)));
int SAVEDS ASM LIB_ECDSA_sign_ex(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, const unsigned char * dgst), REG(d1, int dgstlen), REG(a1, unsigned char * sig), REG(a2, unsigned int * siglen), REG(a3, const BIGNUM * kinv), REG(a4, const BIGNUM * rp), REG(d2, EC_KEY * eckey));
int SAVEDS ASM LIB_EC_GROUP_get_pentanomial_basis(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * ecgroup), REG(a1, unsigned int * k1), REG(a2, unsigned int * k2), REG(a3, unsigned int * k3));
int SAVEDS ASM LIB_ECDSA_sign_setup(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * eckey), REG(a1, BN_CTX * ctx), REG(a2, BIGNUM ** kinv), REG(a3, BIGNUM ** rp));
int SAVEDS ASM LIB_BN_GF2m_mod_solve_quad_arr(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const int * p), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_EC_KEY_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key));
EC_KEY * SAVEDS ASM LIB_d2i_EC_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY ** a), REG(a1, const unsigned char ** pp), REG(a2, long length));
int SAVEDS ASM LIB_EC_GROUP_have_precompute_mult(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group));
int SAVEDS ASM LIB_BN_GF2m_mod_arr(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const int * p));
void * SAVEDS ASM LIB_ECDH_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * d), REG(d0, int idx));
void SAVEDS ASM LIB_ENGINE_unregister_ECDH(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
const ECDH_METHOD * SAVEDS ASM LIB_ECDH_OpenSSL(REG(a6, __IFACE_OR_BASE));
EC_POINT * SAVEDS ASM LIB_EC_POINT_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_POINT * src), REG(a1, const EC_GROUP * group));
int SAVEDS ASM LIB_EVP_PKEY_set1_EC_KEY(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, struct ec_key_st * key));
int SAVEDS ASM LIB_BN_GF2m_mod_sqrt_arr(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const int * p), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_EC_KEY_set_private_key(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key), REG(a1, const BIGNUM * prv));
int SAVEDS ASM LIB_BN_GF2m_poly2arr(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a), REG(a1, int * p), REG(d0, int max));
int SAVEDS ASM LIB_i2d_ECParameters(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key), REG(a1, unsigned char ** out));
int SAVEDS ASM LIB_ENGINE_set_ECDH(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const ECDH_METHOD * ecdh_meth));
int SAVEDS ASM LIB_SHA256_Init(REG(a6, __IFACE_OR_BASE), REG(a0, SHA256_CTX * c));
void * SAVEDS ASM LIB_ECDSA_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * d), REG(d0, int idx));
unsigned char * SAVEDS ASM LIB_SHA224(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * d), REG(d0, size_t n), REG(a1, unsigned char * md));
size_t SAVEDS ASM LIB_EC_GROUP_get_seed_len(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * ecgroup));
int SAVEDS ASM LIB_i2d_EC_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * a), REG(a1, unsigned char ** pp));
const ECDSA_METHOD * SAVEDS ASM LIB_ECDSA_get_default_method(REG(a6, __IFACE_OR_BASE));
const EC_METHOD * SAVEDS ASM LIB_EC_GFp_nist_method(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ENGINE_load_padlock(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_EC_GROUP_set_curve_name(REG(a6, __IFACE_OR_BASE), REG(a0, EC_GROUP * group), REG(d0, int nid));
int SAVEDS ASM LIB_BN_GF2m_mod_sqr_arr(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const int * p), REG(a3, BN_CTX * ctx));
BIO_METHOD * SAVEDS ASM LIB_BIO_s_datagram(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_set_default_ECDSA(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
void SAVEDS ASM LIB_ECDH_set_default_method(REG(a6, __IFACE_OR_BASE), REG(a0, const ECDH_METHOD * method));
int SAVEDS ASM LIB_SHA384_Update(REG(a6, __IFACE_OR_BASE), REG(a0, SHA512_CTX * c), REG(a1, const void * data), REG(d0, size_t len));
void * SAVEDS ASM LIB_EC_KEY_insert_key_method_data(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key), REG(a1, void * data), REG(a2, void *(*dup_func)(void *)), REG(a3, void (*free_func)(void *)), REG(a4, void (*clear_free_func)(void *)));
int SAVEDS ASM LIB_SHA224_Final(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * md), REG(a1, SHA256_CTX * c));
int SAVEDS ASM LIB_SHA224_Update(REG(a6, __IFACE_OR_BASE), REG(a0, SHA256_CTX * c), REG(a1, const void * data), REG(d0, size_t len));
EC_KEY * SAVEDS ASM LIB_d2i_ECPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY ** key), REG(a1, const unsigned char ** in), REG(d0, long len));
void SAVEDS ASM LIB_ENGINE_register_all_STORE(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_SHA512_Final(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * md), REG(a1, SHA512_CTX * c));
int SAVEDS ASM LIB_EC_GROUP_get_asn1_flag(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group));
int SAVEDS ASM LIB_ECDH_get_ex_new_index(REG(a6, __IFACE_OR_BASE), REG(d0, long argl), REG(a0, void * argp), REG(a1, CRYPTO_EX_new * new_func), REG(a2, CRYPTO_EX_dup * dup_func), REG(a3, CRYPTO_EX_free * free_func));
unsigned char * SAVEDS ASM LIB_EC_GROUP_get0_seed(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * x));
int SAVEDS ASM LIB_BN_GF2m_mod_div_arr(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, const int * p), REG(a4, BN_CTX * ctx));
int SAVEDS ASM LIB_ENGINE_set_ECDSA(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const ECDSA_METHOD * ecdsa_meth));
int SAVEDS ASM LIB_ECDH_set_method(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key), REG(a1, const ECDH_METHOD * meth));
int SAVEDS ASM LIB_ECDH_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * d), REG(d0, int idx), REG(a1, void * arg));
const ECDSA_METHOD * SAVEDS ASM LIB_ECDSA_OpenSSL(REG(a6, __IFACE_OR_BASE));
unsigned SAVEDS ASM LIB_EC_KEY_get_enc_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * key));
void SAVEDS ASM LIB_ECDSA_set_default_method(REG(a6, __IFACE_OR_BASE), REG(a0, const ECDSA_METHOD * meth));
int SAVEDS ASM LIB_EC_POINT_set_compressed_coordinates_GF2m(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group), REG(a1, EC_POINT * p), REG(a2, const BIGNUM * x), REG(d0, int y_bit), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_EC_GROUP_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a), REG(a1, const EC_GROUP * b), REG(a2, BN_CTX * ctx));
int SAVEDS ASM LIB_SHA224_Init(REG(a6, __IFACE_OR_BASE), REG(a0, SHA256_CTX * c));
int SAVEDS ASM LIB_SHA512_Init(REG(a6, __IFACE_OR_BASE), REG(a0, SHA512_CTX * c));
void SAVEDS ASM LIB_ERR_load_ECDSA_strings(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_EC_GROUP_get_basis_type(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group));
void SAVEDS ASM LIB_ENGINE_register_all_ECDH(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ENGINE_register_all_ECDSA(REG(a6, __IFACE_OR_BASE));
EC_GROUP * SAVEDS ASM LIB_EC_GROUP_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * src));
ENGINE * SAVEDS ASM LIB_ENGINE_get_default_ECDSA(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_SHA256_Transform(REG(a6, __IFACE_OR_BASE), REG(a0, SHA256_CTX * c), REG(a1, const unsigned char * data));
void SAVEDS ASM LIB_EC_KEY_set_enc_flags(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * eckey), REG(d0, unsigned int flags));
char * SAVEDS ASM LIB_EC_POINT_point2hex(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group), REG(a1, const EC_POINT * point), REG(d0, point_conversion_form_t form), REG(a2, BN_CTX * ctx));
const STORE_METHOD * SAVEDS ASM LIB_ENGINE_get_STORE(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
ECDSA_SIG * SAVEDS ASM LIB_ECDSA_do_sign_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * dgst), REG(d0, int dgstlen), REG(a1, const BIGNUM * kinv), REG(a2, const BIGNUM * rp), REG(a3, EC_KEY * eckey));
void SAVEDS ASM LIB_SHA512_Transform(REG(a6, __IFACE_OR_BASE), REG(a0, SHA512_CTX * c), REG(a1, const unsigned char * data));
int SAVEDS ASM LIB_EC_KEY_set_public_key(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key), REG(a1, const EC_POINT * pub));
int SAVEDS ASM LIB_ENGINE_register_STORE(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_EC_GROUP_get_curve_name(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group));
int SAVEDS ASM LIB_SHA256_Final(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * md), REG(a1, SHA256_CTX * c));
const ECDH_METHOD * SAVEDS ASM LIB_ENGINE_get_ECDH(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
const ECDSA_METHOD * SAVEDS ASM LIB_ENGINE_get_ECDSA(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
void SAVEDS ASM LIB_ERR_load_ECDH_strings(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ECDSA_set_method(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * eckey), REG(a1, const ECDSA_METHOD * meth));
EC_KEY * SAVEDS ASM LIB_d2i_ECParameters(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY ** key), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_SHA384_Init(REG(a6, __IFACE_OR_BASE), REG(a0, SHA512_CTX * c));
int SAVEDS ASM LIB_ECDSA_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * d), REG(d0, int idx), REG(a1, void * arg));
int SAVEDS ASM LIB_SHA384_Final(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * md), REG(a1, SHA512_CTX * c));
int SAVEDS ASM LIB_ECDSA_get_ex_new_index(REG(a6, __IFACE_OR_BASE), REG(a0, long argl), REG(a1, void * argp), REG(a2, CRYPTO_EX_new * new_func), REG(a3, CRYPTO_EX_dup * dup_func), REG(a4, CRYPTO_EX_free * free_func));
unsigned char * SAVEDS ASM LIB_SHA384(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * d), REG(d0, size_t n), REG(a1, unsigned char * md));
int SAVEDS ASM LIB_ENGINE_set_default_ECDH(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
EC_POINT * SAVEDS ASM LIB_EC_POINT_hex2point(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group), REG(a1, const char * c), REG(a2, EC_POINT * p), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_SHA256_Update(REG(a6, __IFACE_OR_BASE), REG(a0, SHA256_CTX * c), REG(a1, const void * data), REG(d0, size_t len));
int SAVEDS ASM LIB_BN_GF2m_mod_inv_arr(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * b), REG(a2, const int * p), REG(a3, BN_CTX * ctx));
void SAVEDS ASM LIB_ENGINE_unregister_ECDSA(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
void SAVEDS ASM LIB_BN_BLINDING_set_thread_id(REG(a6, __IFACE_OR_BASE), REG(a0, BN_BLINDING * b), REG(d0, unsigned long l));
int SAVEDS ASM LIB_DH_check_pub_key(REG(a6, __IFACE_OR_BASE), REG(a0, const DH * dh), REG(a1, const BIGNUM * pub_key), REG(a2, int * codes));
void SAVEDS ASM LIB_Camellia_cbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t length), REG(a2, const CAMELLIA_KEY * key), REG(a3, unsigned char * ivec), REG(d1, const int enc));
void SAVEDS ASM LIB_Camellia_cfb128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t length), REG(a2, const CAMELLIA_KEY * key), REG(a3, unsigned char * ivec), REG(a4, int * num), REG(d1, const int enc));
void SAVEDS ASM LIB_Camellia_cfb1_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t length), REG(a2, const CAMELLIA_KEY * key), REG(a3, unsigned char * ivec), REG(a4, int * num), REG(d1, const int enc));
void SAVEDS ASM LIB_Camellia_cfb8_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t length), REG(a2, const CAMELLIA_KEY * key), REG(a3, unsigned char * ivec), REG(a4, int * num), REG(d1, const int enc));
void SAVEDS ASM LIB_Camellia_ctr128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t length), REG(a2, const CAMELLIA_KEY * key), REG(a3, unsigned char * ivec), REG(a4, unsigned char * ecount_buf), REG(d1, unsigned int * num));
void SAVEDS ASM LIB_Camellia_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(a2, const CAMELLIA_KEY * key));
void SAVEDS ASM LIB_Camellia_ecb_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(a2, const CAMELLIA_KEY * key), REG(d0, const int enc));
void SAVEDS ASM LIB_Camellia_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(a2, const CAMELLIA_KEY * key));
void SAVEDS ASM LIB_Camellia_ofb128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t length), REG(a2, const CAMELLIA_KEY * key), REG(a3, unsigned char * ivec), REG(a4, int * num));
int SAVEDS ASM LIB_Camellia_set_key(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * userKey), REG(d0, const int bits), REG(a1, CAMELLIA_KEY * key));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_128_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_128_cfb128(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_128_cfb1(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_128_cfb8(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_128_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_128_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_192_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_192_cfb128(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_192_cfb1(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_192_cfb8(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_192_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_192_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_256_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_256_cfb128(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_256_cfb1(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_256_cfb8(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_256_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_256_ofb(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_AES_bi_ige_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t length), REG(a2, const AES_KEY * key), REG(a3, const AES_KEY * key2), REG(a4, const unsigned char * ivec), REG(d1, const int enc));
void SAVEDS ASM LIB_SEED_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * s), REG(a1, unsigned char * d), REG(a2, const SEED_KEY_SCHEDULE * ks));
void SAVEDS ASM LIB_SEED_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * s), REG(a1, unsigned char * d), REG(a2, const SEED_KEY_SCHEDULE * ks));
void SAVEDS ASM LIB_SEED_cbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const SEED_KEY_SCHEDULE * ks), REG(a3, unsigned char * ivec), REG(d1, int enc));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_seed_ofb(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_SEED_cfb128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const SEED_KEY_SCHEDULE * ks), REG(a3, unsigned char * ivec), REG(a4, int * num), REG(d1, int enc));
void SAVEDS ASM LIB_SEED_ofb128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const SEED_KEY_SCHEDULE * ks), REG(a3, unsigned char * ivec), REG(a4, int * num));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_seed_cbc(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_SEED_ecb_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(a2, const SEED_KEY_SCHEDULE * ks), REG(d0, int enc));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_seed_ecb(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_SEED_set_key(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * rawkey), REG(a1, SEED_KEY_SCHEDULE * ks));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_seed_cfb128(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_AES_unwrap_key(REG(a6, __IFACE_OR_BASE), REG(a0, AES_KEY * key), REG(a1, const unsigned char * iv), REG(a2, unsigned char * out), REG(a3, const unsigned char * in), REG(d0, unsigned int inlen));
int SAVEDS ASM LIB_AES_wrap_key(REG(a6, __IFACE_OR_BASE), REG(a0, AES_KEY * key), REG(a1, const unsigned char * iv), REG(a2, unsigned char * out), REG(a3, const unsigned char * in), REG(d0, unsigned int inlen));
void SAVEDS ASM LIB_CMS_ReceiptRequest_free(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ReceiptRequest * rr));
CMS_CertificateChoices * SAVEDS ASM LIB_CMS_add0_CertificateChoices(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms));
int SAVEDS ASM LIB_CMS_unsigned_add1_attr_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, const ASN1_OBJECT * obj), REG(d0, int type), REG(a2, const void * bytes), REG(d1, int len));
void SAVEDS ASM LIB_ERR_load_CMS_strings(REG(a6, __IFACE_OR_BASE));
CMS_ContentInfo * SAVEDS ASM LIB_CMS_sign_receipt(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, X509 * signcert), REG(a2, EVP_PKEY * pkey), REG(a3, STACK_OF(X509) * certs), REG(d0, unsigned int flags));
int SAVEDS ASM LIB_i2d_CMS_ContentInfo(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * a), REG(a1, unsigned char ** out));
X509_ATTRIBUTE * SAVEDS ASM LIB_CMS_signed_delete_attr(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(d0, int loc));
CMS_ContentInfo * SAVEDS ASM LIB_d2i_CMS_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, CMS_ContentInfo ** cms));
int SAVEDS ASM LIB_CMS_unsigned_get_attr_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, const CMS_SignerInfo * si), REG(d0, int nid), REG(d1, int lastpos));
int SAVEDS ASM LIB_CMS_verify(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, STACK_OF(X509) * certs), REG(a2, X509_STORE * store), REG(a3, BIO * dcont), REG(a4, BIO * out), REG(d0, unsigned int flags));
CMS_ContentInfo * SAVEDS ASM LIB_SMIME_read_CMS(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, BIO ** biocont));
int SAVEDS ASM LIB_CMS_decrypt_set1_key(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, unsigned char * key), REG(d0, size_t keylen), REG(a2, unsigned char * id), REG(d1, size_t idlen));
void SAVEDS ASM LIB_CMS_SignerInfo_get0_algs(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, EVP_PKEY ** pk), REG(a2, X509 ** signer), REG(a3, X509_ALGOR ** pdig), REG(a4, X509_ALGOR ** psig));
int SAVEDS ASM LIB_CMS_add1_cert(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, X509 * cert));
int SAVEDS ASM LIB_CMS_set_detached(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(d0, int detached));
CMS_ContentInfo * SAVEDS ASM LIB_CMS_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509) * certs), REG(a1, BIO * in), REG(a2, const EVP_CIPHER * cipher), REG(d0, unsigned int flags));
CMS_ContentInfo * SAVEDS ASM LIB_CMS_EnvelopedData_create(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
int SAVEDS ASM LIB_CMS_uncompress(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, BIO * dcont), REG(a2, BIO * out), REG(d0, unsigned int flags));
int SAVEDS ASM LIB_CMS_add0_crl(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, X509_CRL * crl));
int SAVEDS ASM LIB_CMS_SignerInfo_verify_content(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, BIO * chain));
void * SAVEDS ASM LIB_CMS_unsigned_get0_data_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, ASN1_OBJECT * oid), REG(d0, int lastpos), REG(d1, int type));
int SAVEDS ASM LIB_PEM_write_bio_CMS(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, CMS_ContentInfo * cms));
X509_ATTRIBUTE * SAVEDS ASM LIB_CMS_unsigned_get_attr(REG(a6, __IFACE_OR_BASE), REG(a0, const CMS_SignerInfo * si), REG(d0, int loc));
int SAVEDS ASM LIB_CMS_RecipientInfo_ktri_cert_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientInfo * ri), REG(a1, X509 * cert));
int SAVEDS ASM LIB_CMS_RecipientInfo_ktri_get0_algs(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientInfo * ri), REG(a1, EVP_PKEY ** pk), REG(a2, X509 ** recip), REG(a3, X509_ALGOR ** palg));
void SAVEDS ASM LIB_CMS_ContentInfo_free(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms));
int SAVEDS ASM LIB_CMS_final(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, BIO * data), REG(a2, BIO * dcont), REG(d0, unsigned int flags));
int SAVEDS ASM LIB_CMS_add_simple_smimecap(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_ALGOR) ** algs), REG(d0, int algnid), REG(d1, int keysize));
int SAVEDS ASM LIB_CMS_SignerInfo_verify(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si));
int SAVEDS ASM LIB_CMS_data(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, BIO * out), REG(d0, unsigned int flags));
CMS_ReceiptRequest * SAVEDS ASM LIB_d2i_CMS_ReceiptRequest(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ReceiptRequest ** a), REG(a1, unsigned char const ** in), REG(a2, long len));
CMS_ContentInfo * SAVEDS ASM LIB_CMS_compress(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in), REG(d0, int comp_nid), REG(d1, unsigned int flags));
CMS_ContentInfo * SAVEDS ASM LIB_CMS_digest_create(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in), REG(a1, const EVP_MD * md), REG(d0, unsigned int flags));
int SAVEDS ASM LIB_CMS_SignerInfo_cert_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, X509 * cert));
int SAVEDS ASM LIB_CMS_SignerInfo_sign(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si));
CMS_ContentInfo * SAVEDS ASM LIB_CMS_data_create(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in), REG(d0, unsigned int flags));
int SAVEDS ASM LIB_i2d_CMS_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, CMS_ContentInfo * cms));
int SAVEDS ASM LIB_CMS_EncryptedData_set1_key(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, const EVP_CIPHER * ciph), REG(a2, const unsigned char * key), REG(d0, size_t keylen));
int SAVEDS ASM LIB_CMS_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, EVP_PKEY * pkey), REG(a2, X509 * cert), REG(a3, BIO * dcont), REG(a4, BIO * out), REG(d0, unsigned int flags));
X509_ATTRIBUTE * SAVEDS ASM LIB_CMS_unsigned_delete_attr(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(d0, int loc));
int SAVEDS ASM LIB_CMS_unsigned_get_attr_count(REG(a6, __IFACE_OR_BASE), REG(a0, const CMS_SignerInfo * si));
int SAVEDS ASM LIB_CMS_add_smimecap(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, STACK_OF(X509_ALGOR) * algs));
int SAVEDS ASM LIB_CMS_signed_get_attr_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, const CMS_SignerInfo * si), REG(a1, ASN1_OBJECT * obj), REG(d0, int lastpos));
CMS_ContentInfo * SAVEDS ASM LIB_d2i_CMS_ContentInfo(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo ** a), REG(a1, unsigned char const ** in), REG(a2, long len));
int SAVEDS ASM LIB_CMS_add_standard_smimecap(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_ALGOR) ** smcap));
CMS_ContentInfo * SAVEDS ASM LIB_CMS_ContentInfo_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_CMS_RecipientInfo_type(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientInfo * ri));
const ASN1_OBJECT * SAVEDS ASM LIB_CMS_get0_type(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms));
int SAVEDS ASM LIB_CMS_is_detached(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms));
CMS_ContentInfo * SAVEDS ASM LIB_CMS_sign(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * signcert), REG(a1, EVP_PKEY * pkey), REG(a2, STACK_OF(X509) * certs), REG(a3, BIO * data), REG(d0, unsigned int flags));
int SAVEDS ASM LIB_CMS_signed_add1_attr(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, X509_ATTRIBUTE * attr));
int SAVEDS ASM LIB_CMS_unsigned_get_attr_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, const CMS_SignerInfo * si), REG(a1, ASN1_OBJECT * obj), REG(d0, int lastpos));
int SAVEDS ASM LIB_SMIME_write_CMS(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, CMS_ContentInfo * cms), REG(a2, BIO * data), REG(d0, int flags));
int SAVEDS ASM LIB_CMS_EncryptedData_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, const unsigned char * key), REG(d0, size_t keylen), REG(a2, BIO * dcont), REG(a3, BIO * out), REG(d1, unsigned int flags));
STACK_OF(CMS_RecipientInfo) * SAVEDS ASM LIB_CMS_get0_RecipientInfos(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms));
CMS_RevocationInfoChoice * SAVEDS ASM LIB_CMS_add0_RevocationInfoChoice(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms));
int SAVEDS ASM LIB_CMS_decrypt_set1_pkey(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, EVP_PKEY * pk), REG(a2, X509 * cert));
void SAVEDS ASM LIB_CMS_SignerInfo_set1_signer_cert(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, X509 * signer));
STACK_OF(X509) * SAVEDS ASM LIB_CMS_get0_signers(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms));
void SAVEDS ASM LIB_CMS_ReceiptRequest_get0_values(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ReceiptRequest * rr), REG(a1, ASN1_STRING ** pcid), REG(a2, int * pallorfirst), REG(a3, STACK_OF(GENERAL_NAMES) ** plist), REG(a4, STACK_OF(GENERAL_NAMES) ** prto));
void * SAVEDS ASM LIB_CMS_signed_get0_data_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, ASN1_OBJECT * oid), REG(d0, int lastpos), REG(d1, int type));
STACK_OF(CMS_SignerInfo) * SAVEDS ASM LIB_CMS_get0_SignerInfos(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms));
int SAVEDS ASM LIB_CMS_add0_cert(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, X509 * cert));
CMS_ContentInfo * SAVEDS ASM LIB_CMS_EncryptedData_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in), REG(a1, const EVP_CIPHER * cipher), REG(a2, const unsigned char * key), REG(d0, size_t keylen), REG(d1, unsigned int flags));
int SAVEDS ASM LIB_CMS_digest_verify(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, BIO * dcont), REG(a2, BIO * out), REG(d0, unsigned int flags));
int SAVEDS ASM LIB_CMS_set1_signers_certs(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, STACK_OF(X509) * certs), REG(d0, unsigned int flags));
X509_ATTRIBUTE * SAVEDS ASM LIB_CMS_signed_get_attr(REG(a6, __IFACE_OR_BASE), REG(a0, const CMS_SignerInfo * si), REG(d0, int loc));
int SAVEDS ASM LIB_CMS_RecipientInfo_set0_key(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientInfo * ri), REG(a1, unsigned char * key), REG(d0, size_t keylen));
int SAVEDS ASM LIB_CMS_SignedData_init(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms));
int SAVEDS ASM LIB_CMS_RecipientInfo_kekri_get0_id(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientInfo * ri), REG(a1, X509_ALGOR ** palg), REG(a2, ASN1_OCTET_STRING ** pid), REG(a3, ASN1_GENERALIZEDTIME ** pdate), REG(a4, ASN1_OBJECT ** potherid), REG(d0, ASN1_TYPE ** pothertype));
int SAVEDS ASM LIB_CMS_verify_receipt(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * rcms), REG(a1, CMS_ContentInfo * ocms), REG(a2, STACK_OF(X509) * certs), REG(a3, X509_STORE * store), REG(d0, unsigned int flags));
CMS_ContentInfo * SAVEDS ASM LIB_PEM_read_bio_CMS(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, CMS_ContentInfo ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
STACK_OF(X509_CRL) * SAVEDS ASM LIB_CMS_get1_crls(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms));
CMS_RecipientInfo * SAVEDS ASM LIB_CMS_add0_recipient_key(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(d0, int nid), REG(a1, unsigned char * key), REG(d1, size_t keylen), REG(a2, unsigned char * id), REG(d2, size_t idlen), REG(a3, ASN1_GENERALIZEDTIME * date), REG(a4, ASN1_OBJECT * otherTypeId), REG(d3, ASN1_TYPE * otherType));
CMS_ReceiptRequest * SAVEDS ASM LIB_CMS_ReceiptRequest_new(REG(a6, __IFACE_OR_BASE));
ASN1_OCTET_STRING ** SAVEDS ASM LIB_CMS_get0_content(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms));
int SAVEDS ASM LIB_CMS_get1_ReceiptRequest(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, CMS_ReceiptRequest ** prr));
int SAVEDS ASM LIB_CMS_signed_add1_attr_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, const ASN1_OBJECT * obj), REG(d0, int type), REG(a2, const void * bytes), REG(d1, int len));
int SAVEDS ASM LIB_CMS_RecipientInfo_kekri_id_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientInfo * ri), REG(a1, const unsigned char * id), REG(d0, size_t idlen));
int SAVEDS ASM LIB_CMS_add1_ReceiptRequest(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, CMS_ReceiptRequest * rr));
int SAVEDS ASM LIB_CMS_SignerInfo_get0_signer_id(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, ASN1_OCTET_STRING ** keyid), REG(a2, X509_NAME ** issuer), REG(a3, ASN1_INTEGER ** sno));
int SAVEDS ASM LIB_CMS_unsigned_add1_attr_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(d0, int nid), REG(d1, int type), REG(a1, const void * bytes), REG(d2, int len));
int SAVEDS ASM LIB_CMS_unsigned_add1_attr(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, X509_ATTRIBUTE * attr));
int SAVEDS ASM LIB_CMS_signed_get_attr_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, const CMS_SignerInfo * si), REG(d0, int nid), REG(d1, int lastpos));
STACK_OF(X509) * SAVEDS ASM LIB_CMS_get1_certs(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms));
int SAVEDS ASM LIB_CMS_signed_add1_attr_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(d0, int nid), REG(d1, int type), REG(a1, const void * bytes), REG(d2, int len));
int SAVEDS ASM LIB_CMS_unsigned_add1_attr_by_txt(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, const char * attrname), REG(d0, int type), REG(a2, const void * bytes), REG(d1, int len));
int SAVEDS ASM LIB_CMS_dataFinal(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, BIO * bio));
int SAVEDS ASM LIB_CMS_RecipientInfo_ktri_get0_signer_id(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientInfo * ri), REG(a1, ASN1_OCTET_STRING ** keyid), REG(a2, X509_NAME ** issuer), REG(a3, ASN1_INTEGER ** sno));
int SAVEDS ASM LIB_i2d_CMS_ReceiptRequest(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ReceiptRequest * a), REG(a1, unsigned char ** out));
CMS_RecipientInfo * SAVEDS ASM LIB_CMS_add1_recipient_cert(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, X509 * recip), REG(d0, unsigned int flags));
BIO * SAVEDS ASM LIB_CMS_dataInit(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, BIO * icont));
int SAVEDS ASM LIB_CMS_signed_add1_attr_by_txt(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, const char * attrname), REG(d0, int type), REG(a2, const void * bytes), REG(d1, int len));
int SAVEDS ASM LIB_CMS_RecipientInfo_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, CMS_RecipientInfo * ri));
int SAVEDS ASM LIB_CMS_signed_get_attr_count(REG(a6, __IFACE_OR_BASE), REG(a0, const CMS_SignerInfo * si));
const ASN1_OBJECT * SAVEDS ASM LIB_CMS_get0_eContentType(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms));
int SAVEDS ASM LIB_CMS_set1_eContentType(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, const ASN1_OBJECT * oid));
CMS_ReceiptRequest * SAVEDS ASM LIB_CMS_ReceiptRequest_create0(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * id), REG(d0, int idlen), REG(d1, int allorfirst), REG(a1, STACK_OF(GENERAL_NAMES) * receiptList), REG(a2, STACK_OF(GENERAL_NAMES) * receiptsTo));
CMS_SignerInfo * SAVEDS ASM LIB_CMS_add1_signer(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, X509 * signer), REG(a2, EVP_PKEY * pk), REG(a3, const EVP_MD * md), REG(d0, unsigned int flags));
int SAVEDS ASM LIB_CMS_RecipientInfo_set0_pkey(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientInfo * ri), REG(a1, EVP_PKEY * pkey));
int SAVEDS ASM LIB_ENGINE_set_load_ssl_client_cert_function(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, ENGINE_SSL_CLIENT_CERT_PTR loadssl_f));
ENGINE_SSL_CLIENT_CERT_PTR SAVEDS ASM LIB_ENGINE_get_ssl_client_cert_function(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
int SAVEDS ASM LIB_ENGINE_load_ssl_client_cert(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, SSL * s), REG(a2, STACK_OF(X509_NAME) * ca_dn), REG(a3, X509 ** pcert), REG(a4, EVP_PKEY ** ppkey), REG(d0, STACK_OF(X509) ** pother), REG(d1, UI_METHOD * ui_method), REG(d2, void * callback_data));
void SAVEDS ASM LIB_ENGINE_load_capi(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_register_pkey_meths(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
ENGINE * SAVEDS ASM LIB_ENGINE_get_pkey_asn1_meth_engine(REG(a6, __IFACE_OR_BASE), REG(d0, int nid));
int SAVEDS ASM LIB_WHIRLPOOL_Init(REG(a6, __IFACE_OR_BASE), REG(a0, WHIRLPOOL_CTX * c));
unsigned char * SAVEDS ASM LIB_WHIRLPOOL(REG(a6, __IFACE_OR_BASE), REG(a0, const void * inp), REG(d0, size_t bytes), REG(a1, unsigned char * md));
const EVP_PKEY_ASN1_METHOD * SAVEDS ASM LIB_ENGINE_get_pkey_asn1_meth(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(d0, int nid));
const EVP_PKEY_METHOD * SAVEDS ASM LIB_ENGINE_get_pkey_meth(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(d0, int nid));
BIO * SAVEDS ASM LIB_BIO_new_CMS(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, CMS_ContentInfo * cms));
int SAVEDS ASM LIB_ENGINE_set_default_pkey_asn1_meths(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
void SAVEDS ASM LIB_WHIRLPOOL_BitUpdate(REG(a6, __IFACE_OR_BASE), REG(a0, WHIRLPOOL_CTX * ctx), REG(a1, const void * inp), REG(d0, size_t bits));
int SAVEDS ASM LIB_i2d_CMS_bio_stream(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, CMS_ContentInfo * cms), REG(a2, BIO * in), REG(d0, int flags));
int SAVEDS ASM LIB_CMS_stream(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char *** boundary), REG(a1, CMS_ContentInfo * cms));
const EVP_PKEY_ASN1_METHOD * SAVEDS ASM LIB_ENGINE_pkey_asn1_find_str(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE ** pe), REG(a1, const char * str), REG(d0, int len));
ENGINE_PKEY_METHS_PTR SAVEDS ASM LIB_ENGINE_get_pkey_meths(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
int SAVEDS ASM LIB_ENGINE_register_pkey_asn1_meths(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_ENGINE_set_default_pkey_meths(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_HMAC_CTX_copy(REG(a6, __IFACE_OR_BASE), REG(a0, HMAC_CTX * dctx), REG(a1, HMAC_CTX * sctx));
ENGINE_PKEY_ASN1_METHS_PTR SAVEDS ASM LIB_ENGINE_get_pkey_asn1_meths(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
const EVP_MD * SAVEDS ASM LIB_EVP_whirlpool(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ENGINE_register_all_pkey_meths(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_WHIRLPOOL_Final(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * md), REG(a1, WHIRLPOOL_CTX * c));
const EVP_PKEY_ASN1_METHOD * SAVEDS ASM LIB_ENGINE_get_pkey_asn1_meth_str(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const char * str), REG(d0, int len));
void SAVEDS ASM LIB_ENGINE_register_all_pkey_asn1_meths(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_CMS_ContentInfo_print_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, CMS_ContentInfo * cms), REG(d0, int a), REG(a2, void * p));
int SAVEDS ASM LIB_CMS_add1_crl(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, X509_CRL * crl));
int SAVEDS ASM LIB_ENGINE_set_pkey_asn1_meths(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, ENGINE_PKEY_ASN1_METHS_PTR f));
ENGINE * SAVEDS ASM LIB_ENGINE_get_pkey_meth_engine(REG(a6, __IFACE_OR_BASE), REG(d0, int nid));
int SAVEDS ASM LIB_WHIRLPOOL_Update(REG(a6, __IFACE_OR_BASE), REG(a0, WHIRLPOOL_CTX * c), REG(a1, const void * inp), REG(d0, size_t bytes));
int SAVEDS ASM LIB_PEM_write_bio_CMS_stream(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, CMS_ContentInfo * cms), REG(a2, BIO * in), REG(d0, int flags));
void SAVEDS ASM LIB_ENGINE_unregister_pkey_meths(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
void SAVEDS ASM LIB_ENGINE_unregister_pkey_asn1_meths(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_ENGINE_set_pkey_meths(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, ENGINE_PKEY_METHS_PTR f));
DSA * SAVEDS ASM LIB_DSAparams_dup(REG(a6, __IFACE_OR_BASE), REG(a0, DSA * x));
DH * SAVEDS ASM LIB_DHparams_dup(REG(a6, __IFACE_OR_BASE), REG(a0, DH * d));
unsigned long SAVEDS ASM LIB_X509_issuer_name_hash_old(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * a));
unsigned long SAVEDS ASM LIB_X509_subject_name_hash_old(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
SRP_user_pwd * SAVEDS ASM LIB_SRP_VBASE_get_by_user(REG(a6, __IFACE_OR_BASE), REG(a0, SRP_VBASE * vb), REG(a1, char * username));
BIGNUM * SAVEDS ASM LIB_SRP_Calc_server_key(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * A), REG(a1, BIGNUM * v), REG(a2, BIGNUM * u), REG(a3, BIGNUM * b), REG(a4, BIGNUM * N));
char * SAVEDS ASM LIB_SRP_create_verifier(REG(a6, __IFACE_OR_BASE), REG(a0, const char * user), REG(a1, const char * pass), REG(a2, char ** salt), REG(a3, char ** verifier), REG(a4, const char * N), REG(d0, const char * g));
int SAVEDS ASM LIB_SRP_create_verifier_BN(REG(a6, __IFACE_OR_BASE), REG(a0, const char * user), REG(a1, const char * pass), REG(a2, BIGNUM ** salt), REG(a3, BIGNUM ** verifier), REG(a4, BIGNUM * N), REG(d0, BIGNUM * g));
BIGNUM * SAVEDS ASM LIB_SRP_Calc_u(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * A), REG(a1, BIGNUM * B), REG(a2, BIGNUM * N));
int SAVEDS ASM LIB_SRP_VBASE_free(REG(a6, __IFACE_OR_BASE), REG(a0, SRP_VBASE * vb));
BIGNUM * SAVEDS ASM LIB_SRP_Calc_client_key(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * N), REG(a1, BIGNUM * B), REG(a2, BIGNUM * g), REG(a3, BIGNUM * x), REG(a4, BIGNUM * a), REG(d0, BIGNUM * u));
SRP_gN * SAVEDS ASM LIB_SRP_get_default_gN(REG(a6, __IFACE_OR_BASE), REG(a0, const char * id));
BIGNUM * SAVEDS ASM LIB_SRP_Calc_x(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * s), REG(a1, const char * user), REG(a2, const char * pass));
BIGNUM * SAVEDS ASM LIB_SRP_Calc_B(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * b), REG(a1, BIGNUM * N), REG(a2, BIGNUM * g), REG(a3, BIGNUM * v));
SRP_VBASE * SAVEDS ASM LIB_SRP_VBASE_new(REG(a6, __IFACE_OR_BASE), REG(a0, char * seed_key));
char * SAVEDS ASM LIB_SRP_check_known_gN_param(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * g), REG(a1, BIGNUM * N));
BIGNUM * SAVEDS ASM LIB_SRP_Calc_A(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a), REG(a1, BIGNUM * N), REG(a2, BIGNUM * g));
int SAVEDS ASM LIB_SRP_Verify_A_mod_N(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * A), REG(a1, BIGNUM * N));
int SAVEDS ASM LIB_SRP_VBASE_init(REG(a6, __IFACE_OR_BASE), REG(a0, SRP_VBASE * vb), REG(a1, char * verifier_file));
int SAVEDS ASM LIB_SRP_Verify_B_mod_N(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * B), REG(a1, BIGNUM * N));
int SAVEDS ASM LIB_EC_KEY_set_public_key_affine_coordinates(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key), REG(a1, BIGNUM * x), REG(a2, BIGNUM * y));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_192_ctr(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_128_ctr(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_256_ctr(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_EC_KEY_get_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * key));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_128_xts(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_private_AES_set_decrypt_key(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * userKey), REG(d0, const int bits), REG(a1, AES_KEY * key));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_256_xts(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_128_gcm(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_EC_KEY_clear_flags(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key), REG(d0, int flags));
void SAVEDS ASM LIB_EC_KEY_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key), REG(d0, int flags));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_256_ccm(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_private_AES_set_encrypt_key(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * userKey), REG(d0, const int bits), REG(a1, AES_KEY * key));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_128_ccm(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_192_gcm(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_256_gcm(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_192_ccm(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_rc4_hmac_md5(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_128_cbc_hmac_sha1(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ENGINE_load_rdrand(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ENGINE_load_rsax(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_256_cbc_hmac_sha1(REG(a6, __IFACE_OR_BASE));
CMS_RecipientInfo * SAVEDS ASM LIB_CMS_add0_recipient_password(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(d0, int iter), REG(d1, int wrap_nid), REG(d2, int pbe_nid), REG(a1, unsigned char * pass), REG(d3, ossl_ssize_t passlen), REG(a2, const EVP_CIPHER * kekciph));
int SAVEDS ASM LIB_CMS_decrypt_set1_password(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, unsigned char * pass), REG(d0, ossl_ssize_t passlen));
int SAVEDS ASM LIB_CMS_RecipientInfo_set0_password(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientInfo * ri), REG(a1, unsigned char * pass), REG(d0, ossl_ssize_t passlen));
int SAVEDS ASM LIB_X509_REQ_sign_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * x), REG(a1, EVP_MD_CTX * ctx));
int SAVEDS ASM LIB_X509_CRL_sign_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * x), REG(a1, EVP_MD_CTX * ctx));
int SAVEDS ASM LIB_X509_signature_dump(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const ASN1_STRING * sig), REG(d0, int indent));
int SAVEDS ASM LIB_X509_sign_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, EVP_MD_CTX * ctx));
int SAVEDS ASM LIB_ASN1_item_sign_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_ITEM * it), REG(a1, X509_ALGOR * algor1), REG(a2, X509_ALGOR * algor2), REG(a3, ASN1_BIT_STRING * signature), REG(a4, void * asn), REG(d0, EVP_MD_CTX * ctx));
void SAVEDS ASM LIB_OPENSSL_cpuid_setup(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ERR_remove_thread_state(REG(a6, __IFACE_OR_BASE), REG(a0, const CRYPTO_THREADID * id));
void SAVEDS ASM LIB_X509_STORE_CTX_set0_crls(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(a1, STACK_OF(X509_CRL) * sk));
const unsigned char * SAVEDS ASM LIB_SSL_SESSION_get_id(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_SESSION * s), REG(a1, unsigned int * len));
void SAVEDS ASM LIB_SSL_CTX_sess_set_new_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, int (*new_session_cb)(struct ssl_st *ssl, SSL_SESSION *sess)));
SSL_SESSION * SAVEDS ASM (*LIB_SSL_CTX_sess_get_get_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx)))(struct ssl_st *ssl, unsigned char *Data, int len, int *copy);
void SAVEDS ASM LIB_SSL_CTX_sess_set_get_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, SSL_SESSION *(*get_session_cb)(struct ssl_st *ssl, unsigned char *data,int len,int *copy)));
void  SAVEDS ASM (*LIB_SSL_CTX_get_info_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx)))(const SSL *ssl,int type,int val);
void SAVEDS ASM LIB_SSL_CTX_set_client_cert_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, int (*client_cert_cb)(SSL *ssl, X509 **x509, EVP_PKEY **pkey)));
void SAVEDS ASM LIB_SSL_CTX_sess_set_remove_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, void (*remove_session_cb)(struct ssl_ctx_st *ctx,SSL_SESSION *sess)));
int  SAVEDS ASM (*LIB_SSL_CTX_sess_get_new_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx)))(struct ssl_st *ssl, SSL_SESSION *sess);
int  SAVEDS ASM (*LIB_SSL_CTX_get_client_cert_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx)))(SSL *ssl, X509 **x509, EVP_PKEY **pkey);
void  SAVEDS ASM (*LIB_SSL_CTX_sess_get_remove_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx)))(struct ssl_ctx_st *ctx, SSL_SESSION *sess);
int SAVEDS ASM LIB_PEM_write_bio_SSL_SESSION(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, SSL_SESSION * x));
SSL_SESSION * SAVEDS ASM LIB_PEM_read_bio_SSL_SESSION(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, SSL_SESSION ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_FIPS_mode_set(REG(a6, __IFACE_OR_BASE), REG(d0, int r));
int SAVEDS ASM LIB_BN_X931_generate_Xpq(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * Xp), REG(a1, BIGNUM * Xq), REG(d0, int nbits), REG(a2, BN_CTX * ctx));
const BIGNUM * SAVEDS ASM LIB_BN_get0_nist_prime_384(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ERR_set_mark(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_BN_BLINDING_invert_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * n), REG(a1, const BIGNUM * r), REG(a2, BN_BLINDING * b), REG(a3, BN_CTX * ctx));
void SAVEDS ASM LIB_NAME_CONSTRAINTS_free(REG(a6, __IFACE_OR_BASE), REG(a0, NAME_CONSTRAINTS * ncons));
void SAVEDS ASM LIB_X509_STORE_CTX_set0_param(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(a1, X509_VERIFY_PARAM * param));
void SAVEDS ASM LIB_POLICY_CONSTRAINTS_free(REG(a6, __IFACE_OR_BASE), REG(a0, POLICY_CONSTRAINTS * pcons));
int SAVEDS ASM LIB_BN_nist_mod_192(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, BN_CTX * ctx));
void SAVEDS ASM LIB_GENERAL_SUBTREE_free(REG(a6, __IFACE_OR_BASE), REG(a0, GENERAL_SUBTREE * sub));
int SAVEDS ASM LIB_PKCS12_add_safe(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(PKCS7) ** psafes), REG(a1, STACK_OF(PKCS12_SAFEBAG) * bags), REG(d0, int safe_nid), REG(d1, int iter), REG(a2, char * pass));
const BIGNUM * SAVEDS ASM LIB_BN_get0_nist_prime_192(REG(a6, __IFACE_OR_BASE));
unsigned char * SAVEDS ASM LIB_X509_keyid_get0(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, int * len));
pitem * SAVEDS ASM LIB_pitem_new(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * prio64be), REG(a1, void * data));
const X509_POLICY_NODE * SAVEDS ASM LIB_X509_policy_node_get0_parent(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_POLICY_NODE * node));
ASN1_OCTET_STRING * SAVEDS ASM LIB_a2i_IPADDRESS(REG(a6, __IFACE_OR_BASE), REG(a0, const char * ipasc));
void SAVEDS ASM LIB_X509_STORE_CTX_set_depth(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(d0, int depth));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_inherit(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * to), REG(a1, const X509_VERIFY_PARAM * from));
pitem * SAVEDS ASM LIB_pqueue_iterator(REG(a6, __IFACE_OR_BASE), REG(a0, pqueue pq));
void SAVEDS ASM LIB_X509_VERIFY_PARAM_set_depth(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param), REG(d0, int depth));
int SAVEDS ASM LIB_EVP_PKEY_add1_attr_by_txt(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * key), REG(a1, const char * attrname), REG(d0, int type), REG(a2, const unsigned char * bytes), REG(d1, int len));
void SAVEDS ASM LIB_BN_BLINDING_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, BN_BLINDING * b), REG(d0, unsigned long l));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_set1_policies(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param), REG(a1, STACK_OF(ASN1_OBJECT) * policies));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_set1_name(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param), REG(a1, const char * name));
void SAVEDS ASM LIB_POLICY_MAPPING_free(REG(a6, __IFACE_OR_BASE), REG(a0, POLICY_MAPPING * pmap));
void SAVEDS ASM LIB_pqueue_print(REG(a6, __IFACE_OR_BASE), REG(a0, pqueue pq));
int SAVEDS ASM LIB_PEM_write_bio_X509_CERT_PAIR(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_CERT_PAIR * x));
int SAVEDS ASM LIB_EVP_PKEY_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * a), REG(a1, const EVP_PKEY * b));
int SAVEDS ASM LIB_X509_policy_level_node_count(REG(a6, __IFACE_OR_BASE), REG(a0, X509_POLICY_LEVEL * level));
X509_ATTRIBUTE * SAVEDS ASM LIB_EVP_PKEY_get_attr(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * key), REG(d0, int loc));
GENERAL_SUBTREE * SAVEDS ASM LIB_GENERAL_SUBTREE_new(REG(a6, __IFACE_OR_BASE));
STACK_OF(POLICYQUALINFO) * SAVEDS ASM LIB_X509_policy_node_get0_qualifiers(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_POLICY_NODE * node));
pitem * SAVEDS ASM LIB_pqueue_find(REG(a6, __IFACE_OR_BASE), REG(a0, pqueue pq), REG(a1, unsigned char * prio64be));
pitem * SAVEDS ASM LIB_pqueue_peek(REG(a6, __IFACE_OR_BASE), REG(a0, pqueue pq));
const ASN1_OBJECT * SAVEDS ASM LIB_X509_policy_node_get0_policy(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_POLICY_NODE * node));
PKCS12 * SAVEDS ASM LIB_PKCS12_add_safes(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(PKCS7) * safes), REG(d0, int p7_nid));
int SAVEDS ASM LIB_BN_BLINDING_convert_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * n), REG(a1, BIGNUM * r), REG(a2, BN_BLINDING * b), REG(a3, BN_CTX * ctx));
void SAVEDS ASM LIB_X509_policy_tree_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_POLICY_TREE * tree));
unsigned long * SAVEDS ASM LIB_OPENSSL_ia32cap_loc(REG(a6, __IFACE_OR_BASE));
const BIGNUM * SAVEDS ASM LIB_BN_get0_nist_prime_224(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_BN_GENCB_call(REG(a6, __IFACE_OR_BASE), REG(a0, BN_GENCB * cb), REG(d0, int a), REG(d1, int b));
NAME_CONSTRAINTS * SAVEDS ASM LIB_NAME_CONSTRAINTS_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ECParameters_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const EC_KEY * key));
void * SAVEDS ASM LIB_BUF_memdup(REG(a6, __IFACE_OR_BASE), REG(a0, const void * data), REG(d0, size_t siz));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_set_trust(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param), REG(d0, int trust));
int SAVEDS ASM LIB_EVP_PKEY_get_attr_count(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * key));
X509_VERIFY_PARAM * SAVEDS ASM LIB_X509_STORE_CTX_get0_param(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx));
int SAVEDS ASM LIB_X509_STORE_set_depth(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * store), REG(d0, int depth));
char * SAVEDS ASM LIB_BUF_strndup(REG(a6, __IFACE_OR_BASE), REG(a0, const char * str), REG(d0, size_t siz));
int SAVEDS ASM LIB_ASN1_put_eoc(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char ** pp));
void SAVEDS ASM LIB_X509_VERIFY_PARAM_table_cleanup(REG(a6, __IFACE_OR_BASE));
BN_BLINDING * SAVEDS ASM LIB_RSA_setup_blinding(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * rsa), REG(a1, BN_CTX * ctx));
int SAVEDS ASM LIB_sk_find_ex(REG(a6, __IFACE_OR_BASE), REG(a0, _STACK * st), REG(a1, void * data));
POLICY_CONSTRAINTS * SAVEDS ASM LIB_POLICY_CONSTRAINTS_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_get_depth(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_VERIFY_PARAM * param));
int SAVEDS ASM LIB_ASN1_item_ndef_i2d(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE * val), REG(a1, unsigned char ** out), REG(a2, const ASN1_ITEM * it));
int SAVEDS ASM LIB_ERR_pop_to_mark(REG(a6, __IFACE_OR_BASE));
X509_POLICY_NODE * SAVEDS ASM LIB_X509_policy_level_get0_node(REG(a6, __IFACE_OR_BASE), REG(a0, X509_POLICY_LEVEL * level), REG(d0, int i));
int SAVEDS ASM LIB_i2d_PKCS7_NDEF(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * a), REG(a1, unsigned char ** out));
ASN1_TYPE * SAVEDS ASM LIB_ASN1_generate_v3(REG(a6, __IFACE_OR_BASE), REG(a0, char * str), REG(a1, X509V3_CTX * cnf));
int SAVEDS ASM LIB_X509_policy_tree_level_count(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_POLICY_TREE * tree));
void SAVEDS ASM LIB_X509_CERT_PAIR_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CERT_PAIR * pair));
int SAVEDS ASM LIB_BN_nist_mod_224(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_BIO_dgram_non_fatal_error(REG(a6, __IFACE_OR_BASE), REG(d0, int error));
ASN1_BIT_STRING * SAVEDS ASM LIB_v2i_ASN1_BIT_STRING(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * method), REG(a1, X509V3_CTX * ctx), REG(a2, STACK_OF(CONF_VALUE) * nval));
int SAVEDS ASM LIB_X509_STORE_CTX_set_default(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(a1, const char * name));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_set1(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * to), REG(a1, const X509_VERIFY_PARAM * from));
GENERAL_NAME * SAVEDS ASM LIB_v2i_GENERAL_NAME_ex(REG(a6, __IFACE_OR_BASE), REG(a0, GENERAL_NAME * out), REG(a1, const X509V3_EXT_METHOD * method), REG(a2, X509V3_CTX * ctx), REG(a3, CONF_VALUE * cnf), REG(d0, int is_nc));
int SAVEDS ASM LIB_BN_nist_mod_521(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, BN_CTX * ctx));
X509_POLICY_LEVEL * SAVEDS ASM LIB_X509_policy_tree_get0_level(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_POLICY_TREE * tree), REG(d0, int i));
int SAVEDS ASM LIB_ASN1_const_check_infinite_end(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char ** p), REG(d0, long len));
X509_ATTRIBUTE * SAVEDS ASM LIB_EVP_PKEY_delete_attr(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * key), REG(d0, int loc));
const BIGNUM * SAVEDS ASM LIB_BN_get0_nist_prime_256(REG(a6, __IFACE_OR_BASE));
STACK_OF(CONF_VALUE) * SAVEDS ASM LIB_i2v_ASN1_BIT_STRING(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * method), REG(a1, ASN1_BIT_STRING * bits), REG(a2, STACK_OF(CONF_VALUE) * extlist));
int SAVEDS ASM LIB_BN_nist_mod_384(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_i2d_X509_CERT_PAIR(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CERT_PAIR * a), REG(a1, unsigned char ** out));
pitem * SAVEDS ASM LIB_pqueue_pop(REG(a6, __IFACE_OR_BASE), REG(a0, pqueue pq));
int SAVEDS ASM LIB_EVP_PKEY_get_attr_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * key), REG(a1, ASN1_OBJECT * obj), REG(d0, int lastpos));
const X509_VERIFY_PARAM * SAVEDS ASM LIB_X509_VERIFY_PARAM_lookup(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name));
X509_CERT_PAIR * SAVEDS ASM LIB_X509_CERT_PAIR_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_X509V3_NAME_from_section(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * nm), REG(a1, STACK_OF(CONF_VALUE) * dn_sk), REG(a2, unsigned long chtype));
int SAVEDS ASM LIB_EVP_PKEY_add1_attr(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * key), REG(a1, X509_ATTRIBUTE * attr));
int SAVEDS ASM LIB_BIO_dump_indent_cb(REG(a6, __IFACE_OR_BASE), REG(a0, int (*cb)(const void *data, size_t len, void *u)), REG(a1, void * u), REG(a2, const char * s), REG(d0, int len), REG(d1, int indent));
X509_CERT_PAIR * SAVEDS ASM LIB_d2i_X509_CERT_PAIR(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CERT_PAIR ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_asn1_const_Finish(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_const_CTX * c));
int SAVEDS ASM LIB_BN_nist_mod_256(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_add0_table(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param));
void SAVEDS ASM LIB_pqueue_free(REG(a6, __IFACE_OR_BASE), REG(a0, pqueue pq));
BN_BLINDING * SAVEDS ASM LIB_BN_BLINDING_create_param(REG(a6, __IFACE_OR_BASE), REG(a0, BN_BLINDING * b), REG(a1, const BIGNUM * e), REG(a2, BIGNUM * m), REG(a3, BN_CTX * ctx), REG(a4, int (*bn_mod_exp)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx)), REG(d0, BN_MONT_CTX * m_ctx));
const BIGNUM * SAVEDS ASM LIB_BN_get0_nist_prime_521(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_BN_is_prime_fasttest_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * p), REG(d0, int nchecks), REG(a1, BN_CTX * ctx), REG(d1, int do_trial_devision), REG(a2, BN_GENCB * cb));
int SAVEDS ASM LIB_X509_policy_check(REG(a6, __IFACE_OR_BASE), REG(a0, X509_POLICY_TREE ** ptree), REG(a1, int * pexplicit_policy), REG(a2, STACK_OF(X509) * certs), REG(a3, STACK_OF(ASN1_OBJECT) * policy_oids), REG(d0, unsigned int flags));
int SAVEDS ASM LIB_EVP_PKEY_get_attr_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * key), REG(d0, int nid), REG(d1, int lastpos));
unsigned long SAVEDS ASM LIB_BN_BLINDING_get_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const BN_BLINDING * b));
PKCS12_SAFEBAG * SAVEDS ASM LIB_PKCS12_add_cert(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(PKCS12_SAFEBAG) ** pbags), REG(a1, X509 * cert));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_rand_key(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, unsigned char * key));
ASN1_OCTET_STRING * SAVEDS ASM LIB_a2i_IPADDRESS_NC(REG(a6, __IFACE_OR_BASE), REG(a0, const char * ipasc));
int SAVEDS ASM LIB_PKCS7_set_digest(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, const EVP_MD * md));
POLICY_MAPPING * SAVEDS ASM LIB_POLICY_MAPPING_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_PKCS7_set0_type_other(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(d0, int type), REG(a1, ASN1_TYPE * other));
X509_CERT_PAIR * SAVEDS ASM LIB_PEM_read_bio_X509_CERT_PAIR(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_CERT_PAIR ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
pitem * SAVEDS ASM LIB_pqueue_next(REG(a6, __IFACE_OR_BASE), REG(a0, piterator * iter));
int SAVEDS ASM LIB_EVP_PKEY_add1_attr_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * key), REG(a1, const ASN1_OBJECT * obj), REG(d0, int type), REG(a2, const unsigned char * bytes), REG(d1, int len));
void SAVEDS ASM LIB_X509_VERIFY_PARAM_set_time(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param), REG(d0, time_t t));
pqueue SAVEDS ASM LIB_pqueue_new(REG(a6, __IFACE_OR_BASE));
PKCS12_SAFEBAG * SAVEDS ASM LIB_PKCS12_add_key(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(PKCS12_SAFEBAG) ** pbags), REG(a1, EVP_PKEY * key), REG(d0, int key_usage), REG(d1, int iter), REG(d2, int key_nid), REG(a2, char * pass));
char * SAVEDS ASM LIB_DSO_merge(REG(a6, __IFACE_OR_BASE), REG(a0, DSO * dso), REG(a1, const char * filespec1), REG(a2, const char * filespec2));
int SAVEDS ASM LIB_BIO_dump_cb(REG(a6, __IFACE_OR_BASE), REG(a0, int (*cb)(const void *data, size_t len, void *u)), REG(a1, void * u), REG(a2, const char * s), REG(a3, int len));
pitem * SAVEDS ASM LIB_pqueue_insert(REG(a6, __IFACE_OR_BASE), REG(a0, pqueue pq), REG(a1, pitem * item));
void SAVEDS ASM LIB_pitem_free(REG(a6, __IFACE_OR_BASE), REG(a0, pitem * item));
BIGNUM * SAVEDS ASM LIB_get_rfc3526_prime_8192(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * bn));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_clear_flags(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param), REG(d0, unsigned long flags));
BIGNUM * SAVEDS ASM LIB_get_rfc2409_prime_1024(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * bn));
BIGNUM * SAVEDS ASM LIB_get_rfc3526_prime_2048(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * bn));
BIGNUM * SAVEDS ASM LIB_get_rfc3526_prime_6144(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * bn));
BIGNUM * SAVEDS ASM LIB_get_rfc3526_prime_1536(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * bn));
BIGNUM * SAVEDS ASM LIB_get_rfc3526_prime_3072(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * bn));
BIGNUM * SAVEDS ASM LIB_get_rfc3526_prime_4096(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * bn));
BIGNUM * SAVEDS ASM LIB_get_rfc2409_prime_768(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * bn));
unsigned long SAVEDS ASM LIB_X509_VERIFY_PARAM_get_flags(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param));
EVP_CIPHER_CTX * SAVEDS ASM LIB_EVP_CIPHER_CTX_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_EVP_CIPHER_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * a));
int SAVEDS ASM LIB_a2i_ipadd(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * ipout), REG(a1, const char * ipasc));
int SAVEDS ASM LIB_EVP_CIPHER_block_size(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
void SAVEDS ASM LIB_EVP_CIPHER_CTX_set_app_data(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, void * data));
int SAVEDS ASM LIB_BIO_method_type(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO * b));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_nid(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_key_length(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx));
int SAVEDS ASM LIB_EVP_MD_size(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md));
int SAVEDS ASM LIB_EVP_MD_CTX_test_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD_CTX * ctx), REG(d0, int flags));
void SAVEDS ASM LIB_BIO_clear_flags(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(d0, int flags));
int SAVEDS ASM LIB_EVP_MD_pkey_type(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md));
void SAVEDS ASM LIB_EVP_MD_CTX_clear_flags(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(d0, int flags));
unsigned long SAVEDS ASM LIB_EVP_CIPHER_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
long  SAVEDS ASM (*LIB_BIO_get_callback(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO * b)))(struct bio_st *,int,const char *,int, long,long);
int SAVEDS ASM LIB_EVP_CIPHER_key_length(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
int SAVEDS ASM LIB_EVP_Cipher(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * c), REG(a1, unsigned char * out), REG(a2, const unsigned char * in), REG(d0, unsigned int inl));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_block_size(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_CIPHER_CTX_cipher(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx));
void * SAVEDS ASM LIB_EVP_CIPHER_CTX_get_app_data(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx));
int SAVEDS ASM LIB_EVP_MD_block_size(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md));
unsigned long SAVEDS ASM LIB_EVP_CIPHER_CTX_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx));
const EVP_MD * SAVEDS ASM LIB_EVP_MD_CTX_md(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD_CTX * ctx));
const char * SAVEDS ASM LIB_BIO_method_name(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO * b));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_iv_length(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx));
int SAVEDS ASM LIB_CRYPTO_memcmp(REG(a6, __IFACE_OR_BASE), REG(a0, const void * a), REG(a1, const void * b), REG(d0, size_t len));
void SAVEDS ASM LIB_BN_consttime_swap(REG(a6, __IFACE_OR_BASE), REG(d0, BN_ULONG swap), REG(a0, BIGNUM * a), REG(a1, BIGNUM * b), REG(d1, int nwords));
int SAVEDS ASM LIB_i2d_X509_EXTENSIONS(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSIONS * a), REG(a1, unsigned char ** out));
X509_EXTENSIONS * SAVEDS ASM LIB_d2i_X509_EXTENSIONS(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSIONS ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
void SAVEDS ASM LIB_X509_ALGOR_get0(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_OBJECT ** pobj), REG(a1, int * pptype), REG(a2, void ** ppval), REG(a3, X509_ALGOR * algor));
int SAVEDS ASM LIB_X509_ALGOR_set0(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ALGOR * alg), REG(a1, ASN1_OBJECT * aobj), REG(d0, int ptype), REG(a2, void * pval));
void * SAVEDS ASM LIB_X509at_get0_data_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_ATTRIBUTE) * x), REG(a1, ASN1_OBJECT * obj), REG(d0, int lastpos), REG(d1, int type));
int SAVEDS ASM LIB_ASN1_TYPE_set1(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TYPE * a), REG(d0, int type), REG(a1, const void * value));
void SAVEDS ASM LIB_ASN1_STRING_set0(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * str), REG(a1, void * data), REG(d0, int len));
int SAVEDS ASM LIB_i2d_X509_ALGORS(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ALGORS * a), REG(a1, unsigned char ** out));
void SAVEDS ASM LIB_COMP_zlib_cleanup(REG(a6, __IFACE_OR_BASE));
X509_ALGORS * SAVEDS ASM LIB_d2i_X509_ALGORS(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ALGORS ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
ASN1_VALUE * SAVEDS ASM LIB_SMIME_read_ASN1(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, BIO ** bcont), REG(a2, const ASN1_ITEM * it));
int SAVEDS ASM LIB_OPENSSL_isservice(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_EVP_CIPHER_CTX_clear_flags(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(d0, int flags));
int SAVEDS ASM LIB_BN_X931_generate_prime_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * p), REG(a1, BIGNUM * p1), REG(a2, BIGNUM * p2), REG(a3, BIGNUM * Xp1), REG(a4, BIGNUM * Xp2), REG(d0, const BIGNUM * Xp), REG(d1, const BIGNUM * e), REG(d2, BN_CTX * ctx), REG(d3, BN_GENCB * cb));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_test_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx), REG(d0, int flags));
void SAVEDS ASM LIB_EVP_add_alg_module(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_BN_X931_derive_prime_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * p), REG(a1, BIGNUM * p1), REG(a2, BIGNUM * p2), REG(d0, const BIGNUM * Xp), REG(a3, const BIGNUM * Xp1), REG(a4, const BIGNUM * Xp2), REG(d1, const BIGNUM * e), REG(d2, BN_CTX * ctx), REG(d3, BN_GENCB * cb));
void SAVEDS ASM LIB_OPENSSL_init(REG(a6, __IFACE_OR_BASE));
char * SAVEDS ASM LIB_CRYPTO_strdup(REG(a6, __IFACE_OR_BASE), REG(a0, const char * str), REG(a1, const char * file), REG(d0, int line));
int SAVEDS ASM LIB_pqueue_size(REG(a6, __IFACE_OR_BASE), REG(a0, pqueue pq));
int SAVEDS ASM LIB_i2d_TS_ACCURACY(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_ACCURACY * a), REG(a1, unsigned char ** pp));
int SAVEDS ASM LIB_i2d_TS_MSG_IMPRINT(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_MSG_IMPRINT * a), REG(a1, unsigned char ** pp));
int SAVEDS ASM LIB_EVP_PKEY_print_public(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, const EVP_PKEY * pkey), REG(d0, int indent), REG(a2, ASN1_PCTX * pctx));
EVP_PKEY_CTX * SAVEDS ASM LIB_EVP_PKEY_CTX_new(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, ENGINE * e));
int SAVEDS ASM LIB_i2d_TS_TST_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_TST_INFO * a), REG(a1, unsigned char ** pp));
const EVP_PKEY_ASN1_METHOD * SAVEDS ASM LIB_EVP_PKEY_asn1_find(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE ** pe), REG(a1, int type));
DSO_METHOD * SAVEDS ASM LIB_DSO_METHOD_beos(REG(a6, __IFACE_OR_BASE));
X509 * SAVEDS ASM LIB_TS_CONF_load_cert(REG(a6, __IFACE_OR_BASE), REG(a0, const char * file));
X509_EXTENSION * SAVEDS ASM LIB_TS_REQ_get_ext(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a), REG(d0, int loc));
int SAVEDS ASM LIB_EVP_PKEY_sign_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
int SAVEDS ASM LIB_ASN1_item_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, ASN1_VALUE * ifld), REG(d0, int indent), REG(a2, const ASN1_ITEM * it), REG(a3, const ASN1_PCTX * ctx));
int SAVEDS ASM LIB_TS_TST_INFO_set_nonce(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(a1, const ASN1_INTEGER * nonce));
TS_RESP * SAVEDS ASM LIB_TS_RESP_dup(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP * a));
int SAVEDS ASM LIB_EVP_PKEY_asn1_add0(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_ASN1_METHOD * ameth));
int SAVEDS ASM LIB_PKCS7_add0_attrib_signing_time(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * si), REG(a1, ASN1_TIME * t));
int SAVEDS ASM LIB_BIO_asn1_get_prefix(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, asn1_ps_func ** pprefix), REG(a2, asn1_ps_func ** pprefix_free));
int SAVEDS ASM LIB_TS_TST_INFO_set_time(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(a1, const ASN1_GENERALIZEDTIME * gtime));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*decrypt_init)(EVP_PKEY_CTX *ctx)), REG(a2, int (*decrypt)(EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen)));
int SAVEDS ASM LIB_EVP_PKEY_set_type_str(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, const char * str), REG(d0, int len));
int SAVEDS ASM LIB_EVP_PKEY_CTX_get_keygen_info(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int idx));
int SAVEDS ASM LIB_TS_REQ_set_policy_id(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a), REG(a1, ASN1_OBJECT * policy));
int SAVEDS ASM LIB_TS_RESP_set_status_info(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP * a), REG(a1, TS_STATUS_INFO * info));
int SAVEDS ASM LIB_EVP_PKEY_keygen(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, EVP_PKEY ** ppkey));
int SAVEDS ASM LIB_EVP_DigestSignInit(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, EVP_PKEY_CTX ** pctx), REG(a2, const EVP_MD * type), REG(a3, ENGINE * e), REG(a4, EVP_PKEY * pkey));
int SAVEDS ASM LIB_TS_ACCURACY_set_millis(REG(a6, __IFACE_OR_BASE), REG(a0, TS_ACCURACY * a), REG(a1, const ASN1_INTEGER * millis));
TS_REQ * SAVEDS ASM LIB_TS_REQ_dup(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a));
GENERAL_NAME * SAVEDS ASM LIB_GENERAL_NAME_dup(REG(a6, __IFACE_OR_BASE), REG(a0, GENERAL_NAME * a));
STACK_OF(X509_CRL) * SAVEDS ASM LIB_X509_STORE_get1_crls(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * st), REG(a1, X509_NAME * nm));
EVP_PKEY_ASN1_METHOD * SAVEDS ASM LIB_EVP_PKEY_asn1_new(REG(a6, __IFACE_OR_BASE), REG(d0, int id), REG(d1, int flags), REG(a0, const char * pem_str), REG(a1, const char * info));
BIO * SAVEDS ASM LIB_BIO_new_NDEF(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, ASN1_VALUE * val), REG(a2, const ASN1_ITEM * it));
int SAVEDS ASM LIB_TS_MSG_IMPRINT_set_algo(REG(a6, __IFACE_OR_BASE), REG(a0, TS_MSG_IMPRINT * a), REG(a1, X509_ALGOR * alg));
int SAVEDS ASM LIB_i2d_TS_TST_INFO_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * fp), REG(a1, TS_TST_INFO * a));
int SAVEDS ASM LIB_TS_TST_INFO_set_ordering(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(d0, int ordering));
int SAVEDS ASM LIB_TS_TST_INFO_get_ext_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(a1, ASN1_OBJECT * obj), REG(d0, int lastpos));
void SAVEDS ASM LIB_CRYPTO_THREADID_set_pointer(REG(a6, __IFACE_OR_BASE), REG(a0, CRYPTO_THREADID * id), REG(a1, void * ptr));
const char * SAVEDS ASM LIB_TS_CONF_get_tsa_section(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section));
int SAVEDS ASM LIB_SMIME_write_ASN1(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, ASN1_VALUE * val), REG(a2, BIO * data), REG(a3, int flags), REG(d0, int ctype_nid), REG(d1, int econt_nid), REG(a4, STACK_OF(X509_ALGOR) * mdalgs), REG(d2, const ASN1_ITEM * it));
int SAVEDS ASM LIB_TS_RESP_CTX_set_signer_key(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(a1, EVP_PKEY * key));
int SAVEDS ASM LIB_EVP_PKEY_encrypt_old(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * enc_key), REG(a1, const unsigned char * key), REG(d0, int key_len), REG(a2, EVP_PKEY * pub_key));
int SAVEDS ASM LIB_EVP_PKEY_encrypt_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
void SAVEDS ASM LIB_CRYPTO_THREADID_cpy(REG(a6, __IFACE_OR_BASE), REG(a0, CRYPTO_THREADID * dest), REG(a1, const CRYPTO_THREADID * src));
unsigned long SAVEDS ASM LIB_ASN1_PCTX_get_cert_flags(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_PCTX * p));
int SAVEDS ASM LIB_i2d_ESS_SIGNING_CERT(REG(a6, __IFACE_OR_BASE), REG(a0, const ESS_SIGNING_CERT * a), REG(a1, unsigned char ** pp));
EVP_PKEY * SAVEDS ASM LIB_TS_CONF_load_key(REG(a6, __IFACE_OR_BASE), REG(a0, const char * file), REG(a1, const char * pass));
int SAVEDS ASM LIB_i2d_ASN1_SEQUENCE_ANY(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_SEQUENCE_ANY * a), REG(a1, unsigned char ** pp));
TS_MSG_IMPRINT * SAVEDS ASM LIB_d2i_TS_MSG_IMPRINT_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * fp), REG(a1, TS_MSG_IMPRINT ** a));
void SAVEDS ASM LIB_EVP_PKEY_asn1_set_public(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_ASN1_METHOD * ameth), REG(a1, int (*pub_decode)(EVP_PKEY *pk, X509_PUBKEY *pub)), REG(a2, int (*pub_encode)(X509_PUBKEY *pub, const EVP_PKEY *pk)), REG(a3, int (*pub_cmp)(const EVP_PKEY *a, const EVP_PKEY *b)), REG(a4, int (*pub_print)(BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx)), REG(d0, int (*pkey_size)(const EVP_PKEY *pk)), REG(d1, int (*pkey_bits)(const EVP_PKEY *pk)));
EVP_PKEY * SAVEDS ASM LIB_b2i_PublicKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in));
int SAVEDS ASM LIB_BIO_asn1_set_prefix(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, asn1_ps_func * prefix), REG(a2, asn1_ps_func * prefix_free));
EVP_PKEY * SAVEDS ASM LIB_EVP_PKEY_new_mac_key(REG(a6, __IFACE_OR_BASE), REG(a0, int type), REG(a1, ENGINE * e), REG(a2, const unsigned char * key), REG(d0, int keylen));
int SAVEDS ASM LIB_CRYPTO_THREADID_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const CRYPTO_THREADID * a), REG(a1, const CRYPTO_THREADID * b));
void SAVEDS ASM LIB_TS_REQ_ext_free(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a));
void SAVEDS ASM LIB_EVP_PKEY_asn1_set_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_ASN1_METHOD * ameth), REG(a1, void (*pkey_free)(EVP_PKEY *pkey)));
const EVP_PKEY_ASN1_METHOD * SAVEDS ASM LIB_EVP_PKEY_get0_asn1(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey));
NETSCAPE_X509 * SAVEDS ASM LIB_d2i_NETSCAPE_X509(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_X509 ** a), REG(a1, unsigned char const ** in), REG(d0, long len));
int SAVEDS ASM LIB_EVP_PKEY_verify_recover_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
void SAVEDS ASM LIB_EVP_PKEY_CTX_set_data(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, void * data));
int SAVEDS ASM LIB_EVP_PKEY_keygen_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
int SAVEDS ASM LIB_TS_RESP_CTX_set_status_info(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(d0, int status), REG(a1, const char * text));
X509_ALGOR * SAVEDS ASM LIB_TS_MSG_IMPRINT_get_algo(REG(a6, __IFACE_OR_BASE), REG(a0, TS_MSG_IMPRINT * a));
int SAVEDS ASM LIB_TS_REQ_print_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, TS_REQ * a));
int SAVEDS ASM LIB_EVP_PKEY_CTX_ctrl_str(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const char * type), REG(a2, const char * value));
int SAVEDS ASM LIB_EVP_PKEY_get_default_digest_nid(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, int * pnid));
int SAVEDS ASM LIB_PEM_write_bio_PKCS7_stream(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, PKCS7 * p7), REG(a2, BIO * in), REG(d0, int flags));
int SAVEDS ASM LIB_TS_MSG_IMPRINT_print_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, TS_MSG_IMPRINT * msg));
int SAVEDS ASM LIB_BN_asc2bn(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM ** a), REG(a1, const char * str));
ASN1_OBJECT * SAVEDS ASM LIB_TS_REQ_get_policy_id(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a));
TS_ACCURACY * SAVEDS ASM LIB_d2i_TS_ACCURACY(REG(a6, __IFACE_OR_BASE), REG(a0, TS_ACCURACY ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
void * SAVEDS ASM LIB_DSO_global_lookup(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name));
int SAVEDS ASM LIB_TS_CONF_set_tsa_name(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section), REG(a2, TS_RESP_CTX * ctx));
int SAVEDS ASM LIB_i2d_ASN1_SET_ANY(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_SEQUENCE_ANY * a), REG(a1, unsigned char ** pp));
unsigned long SAVEDS ASM LIB_ASN1_PCTX_get_flags(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_PCTX * p));
int SAVEDS ASM LIB_TS_TST_INFO_get_ext_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(d0, int nid), REG(d1, int lastpos));
TS_RESP * SAVEDS ASM LIB_TS_RESP_new(REG(a6, __IFACE_OR_BASE));
ESS_CERT_ID * SAVEDS ASM LIB_ESS_CERT_ID_dup(REG(a6, __IFACE_OR_BASE), REG(a0, ESS_CERT_ID * a));
TS_STATUS_INFO * SAVEDS ASM LIB_TS_STATUS_INFO_dup(REG(a6, __IFACE_OR_BASE), REG(a0, TS_STATUS_INFO * a));
X509_EXTENSION * SAVEDS ASM LIB_TS_REQ_delete_ext(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a), REG(d0, int loc));
int SAVEDS ASM LIB_EVP_DigestVerifyFinal(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, unsigned char * sig), REG(d0, size_t siglen));
int SAVEDS ASM LIB_EVP_PKEY_print_params(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, const EVP_PKEY * pkey), REG(d0, int inden), REG(a2, ASN1_PCTX * pctx));
TS_MSG_IMPRINT * SAVEDS ASM LIB_TS_REQ_get_msg_imprint(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a));
int SAVEDS ASM LIB_OBJ_find_sigid_by_algs(REG(a6, __IFACE_OR_BASE), REG(a0, int * psignid), REG(d0, int dig_nid), REG(d1, int pkey_nid));
const ASN1_INTEGER * SAVEDS ASM LIB_TS_TST_INFO_get_serial(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_TST_INFO * a));
const ASN1_INTEGER * SAVEDS ASM LIB_TS_REQ_get_nonce(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_REQ * a));
int SAVEDS ASM LIB_X509_PUBKEY_set0_param(REG(a6, __IFACE_OR_BASE), REG(a0, X509_PUBKEY * pub), REG(a1, ASN1_OBJECT * aobj), REG(d0, int ptype), REG(a2, void * pval), REG(a3, unsigned char * penc), REG(a4, int penclen));
void SAVEDS ASM LIB_EVP_PKEY_CTX_set0_keygen_info(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, int * dat), REG(d0, int datlen));
int SAVEDS ASM LIB_DIST_POINT_set_dpname(REG(a6, __IFACE_OR_BASE), REG(a0, DIST_POINT_NAME * dpn), REG(a1, X509_NAME * iname));
int SAVEDS ASM LIB_i2d_ISSUING_DIST_POINT(REG(a6, __IFACE_OR_BASE), REG(a0, ISSUING_DIST_POINT * a), REG(a1, unsigned char ** pp));
void * SAVEDS ASM LIB_EVP_PKEY_CTX_get_data(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
int SAVEDS ASM LIB_TS_STATUS_INFO_print_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, TS_STATUS_INFO * a));
int SAVEDS ASM LIB_EVP_PKEY_derive_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
TS_TST_INFO * SAVEDS ASM LIB_d2i_TS_TST_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
int SAVEDS ASM LIB_EVP_PKEY_asn1_add_alias(REG(a6, __IFACE_OR_BASE), REG(d0, int to), REG(d1, int from));
TS_RESP * SAVEDS ASM LIB_d2i_TS_RESP_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * fp), REG(a1, TS_RESP ** a));
int SAVEDS ASM LIB_OTHERNAME_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, OTHERNAME * a), REG(a1, OTHERNAME * b));
void SAVEDS ASM LIB_GENERAL_NAME_set0_value(REG(a6, __IFACE_OR_BASE), REG(a0, GENERAL_NAME * a), REG(d0, int type), REG(a1, void * value));
void SAVEDS ASM LIB_PKCS7_RECIP_INFO_get0_alg(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_RECIP_INFO * ri), REG(a1, X509_ALGOR ** penc));
TS_RESP_CTX * SAVEDS ASM LIB_TS_RESP_CTX_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_TS_RESP_set_tst_info(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP * a), REG(a1, PKCS7 * p7), REG(a2, TS_TST_INFO * tst_info));
int SAVEDS ASM LIB_PKCS7_final(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, BIO * data), REG(d0, int flags));
int SAVEDS ASM LIB_EVP_PKEY_base_id(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey));
int SAVEDS ASM LIB_TS_RESP_CTX_set_signer_cert(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(a1, X509 * signer));
int SAVEDS ASM LIB_TS_REQ_set_msg_imprint(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a), REG(a1, TS_MSG_IMPRINT * msg_imprint));
int SAVEDS ASM LIB_EVP_PKEY_CTX_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int keytype), REG(d1, int optype), REG(d2, int cmd), REG(d3, int p1), REG(a1, void * p2));
int SAVEDS ASM LIB_TS_CONF_set_digests(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section), REG(a2, TS_RESP_CTX * ctx));
TS_MSG_IMPRINT * SAVEDS ASM LIB_d2i_TS_MSG_IMPRINT(REG(a6, __IFACE_OR_BASE), REG(a0, TS_MSG_IMPRINT ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*ctrl)(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)), REG(a2, int (*ctrl_str)(EVP_PKEY_CTX *ctx, const char *type, const char *value)));
int SAVEDS ASM LIB_TS_REQ_get_ext_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a), REG(d0, int nid), REG(d1, int lastpos));
int SAVEDS ASM LIB_PKCS5_pbe_set0_algor(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ALGOR * algor), REG(d0, int alg), REG(d1, int iter), REG(a1, const unsigned char * salt), REG(d2, int saltlen));
CRYPTO_THREADID * SAVEDS ASM LIB_BN_BLINDING_thread_id(REG(a6, __IFACE_OR_BASE), REG(a0, BN_BLINDING * b));
TS_ACCURACY * SAVEDS ASM LIB_TS_ACCURACY_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_CRL_METHOD_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL_METHOD * m));
unsigned long SAVEDS ASM LIB_ASN1_PCTX_get_nm_flags(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_PCTX * p));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_sign(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*sign_init)(EVP_PKEY_CTX *ctx)), REG(a2, int (*sign)(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen)));
void SAVEDS ASM LIB_CRYPTO_THREADID_current(REG(a6, __IFACE_OR_BASE), REG(a0, CRYPTO_THREADID * id));
int SAVEDS ASM LIB_EVP_PKEY_decrypt_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
void SAVEDS ASM LIB_NETSCAPE_X509_free(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_X509 * a));
int SAVEDS ASM LIB_i2b_PVK_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, EVP_PKEY * pk), REG(d0, int enclevel), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_EVP_PKEY_print_private(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, const EVP_PKEY * pkey), REG(d0, int indent), REG(a2, ASN1_PCTX * pctx));
void * SAVEDS ASM LIB_GENERAL_NAME_get0_value(REG(a6, __IFACE_OR_BASE), REG(a0, GENERAL_NAME * a), REG(a1, int * ptype));
EVP_PKEY * SAVEDS ASM LIB_b2i_PVK_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in), REG(a1, pem_password_cb * cb), REG(a2, void * u));
ASN1_UTCTIME * SAVEDS ASM LIB_ASN1_UTCTIME_adj(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_UTCTIME * s), REG(d0, time_t t), REG(d1, int offset_day), REG(d2, int offset_sec));
TS_TST_INFO * SAVEDS ASM LIB_TS_TST_INFO_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_EVP_MD_do_all_sorted(REG(a6, __IFACE_OR_BASE), REG(a0, void (*fn)(const EVP_MD *ciph, const char *from, const char *to, void *x)), REG(a1, void * arg));
int SAVEDS ASM LIB_TS_CONF_set_default_engine(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name));
int SAVEDS ASM LIB_TS_ACCURACY_set_seconds(REG(a6, __IFACE_OR_BASE), REG(a0, TS_ACCURACY * a), REG(a1, const ASN1_INTEGER * seconds));
const ASN1_GENERALIZEDTIME * SAVEDS ASM LIB_TS_TST_INFO_get_time(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_TST_INFO * a));
int SAVEDS ASM LIB_PKCS8_pkey_get0(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_OBJECT ** ppkalg), REG(a1, const unsigned char ** pk), REG(a2, int * ppklen), REG(a3, X509_ALGOR ** pa), REG(a4, PKCS8_PRIV_KEY_INFO * p8));
const EVP_PKEY_ASN1_METHOD * SAVEDS ASM LIB_EVP_PKEY_asn1_get0(REG(a6, __IFACE_OR_BASE), REG(d0, int idx));
int SAVEDS ASM LIB_OBJ_add_sigid(REG(a6, __IFACE_OR_BASE), REG(d0, int signid), REG(d1, int dig_id), REG(d2, int pkey_id));
int SAVEDS ASM LIB_PKCS7_SIGNER_INFO_sign(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * si));
int SAVEDS ASM LIB_EVP_PKEY_paramgen_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
int SAVEDS ASM LIB_EVP_PKEY_sign(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, unsigned char * sig), REG(d0, size_t * siglen), REG(a2, const unsigned char * tbs), REG(d1, size_t tbslen));
void SAVEDS ASM LIB_OBJ_sigid_free(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*init)(EVP_PKEY_CTX *ctx)));
ESS_ISSUER_SERIAL * SAVEDS ASM LIB_d2i_ESS_ISSUER_SERIAL(REG(a6, __IFACE_OR_BASE), REG(a0, ESS_ISSUER_SERIAL ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
ISSUING_DIST_POINT * SAVEDS ASM LIB_ISSUING_DIST_POINT_new(REG(a6, __IFACE_OR_BASE));
ASN1_TIME * SAVEDS ASM LIB_ASN1_TIME_adj(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TIME * s), REG(d0, time_t t), REG(d1, int offset_day), REG(d2, int offset_sec));
int SAVEDS ASM LIB_TS_OBJ_print_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, const ASN1_OBJECT * obj));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_verify_recover(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*verify_recover_init)(EVP_PKEY_CTX *ctx)), REG(a2, int (*verify_recover)(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen)));
TS_STATUS_INFO * SAVEDS ASM LIB_TS_RESP_get_status_info(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP * g));
void SAVEDS ASM LIB_EVP_PKEY_CTX_set_cb(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, EVP_PKEY_gen_cb * cb));
TS_TST_INFO * SAVEDS ASM LIB_PKCS7_to_TS_TST_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * token));
unsigned long SAVEDS ASM LIB_ASN1_PCTX_get_oid_flags(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_PCTX * p));
int SAVEDS ASM LIB_TS_TST_INFO_add_ext(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(a1, X509_EXTENSION * ex), REG(d0, int loc));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_derive(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*derive_init)(EVP_PKEY_CTX *ctx)), REG(a2, int (*derive)(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen)));
int SAVEDS ASM LIB_i2d_TS_MSG_IMPRINT_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * fp), REG(a1, TS_MSG_IMPRINT * a));
int SAVEDS ASM LIB_TS_RESP_CTX_set_accuracy(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(d0, int secs), REG(d1, int millis), REG(d2, int micros));
int SAVEDS ASM LIB_TS_REQ_set_nonce(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a), REG(a1, const ASN1_INTEGER * nonce));
ESS_CERT_ID * SAVEDS ASM LIB_ESS_CERT_ID_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_TS_REQ_get_ext_count(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a));
void SAVEDS ASM LIB_BUF_reverse(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * out), REG(a1, const unsigned char * in), REG(d0, size_t siz));
int SAVEDS ASM LIB_TS_TST_INFO_print_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, TS_TST_INFO * a));
ISSUING_DIST_POINT * SAVEDS ASM LIB_d2i_ISSUING_DIST_POINT(REG(a6, __IFACE_OR_BASE), REG(a0, ISSUING_DIST_POINT ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
int SAVEDS ASM LIB_i2b_PrivateKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, EVP_PKEY * pk));
int SAVEDS ASM LIB_i2d_TS_RESP(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_RESP * a), REG(a1, unsigned char ** pp));
EVP_PKEY * SAVEDS ASM LIB_b2i_PublicKey(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char ** in), REG(d0, long length));
void SAVEDS ASM LIB_TS_VERIFY_CTX_cleanup(REG(a6, __IFACE_OR_BASE), REG(a0, TS_VERIFY_CTX * ctx));
void SAVEDS ASM LIB_TS_STATUS_INFO_free(REG(a6, __IFACE_OR_BASE), REG(a0, TS_STATUS_INFO * a));
int SAVEDS ASM LIB_TS_RESP_verify_token(REG(a6, __IFACE_OR_BASE), REG(a0, TS_VERIFY_CTX * ctx), REG(a1, PKCS7 * token));
const void * SAVEDS ASM LIB_OBJ_bsearch_ex_(REG(a6, __IFACE_OR_BASE), REG(a0, const void * key), REG(a1, const void * base), REG(d0, int num), REG(d1, int size), REG(a2, int (*cmp)(const void *, const void *)), REG(d2, int flags));
int SAVEDS ASM LIB_ASN1_bn_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const char * number), REG(a2, const BIGNUM * num), REG(a3, unsigned char * buf), REG(d0, int off));
int SAVEDS ASM LIB_EVP_PKEY_asn1_get_count(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_PCTX_set_nm_flags(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_PCTX * p), REG(d0, unsigned long flags));
int SAVEDS ASM LIB_EVP_DigestVerifyInit(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, EVP_PKEY_CTX ** pctx), REG(a2, const EVP_MD * type), REG(a3, ENGINE * e), REG(a4, EVP_PKEY * pkey));
ASN1_OBJECT * SAVEDS ASM LIB_TS_TST_INFO_get_policy_id(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a));
int SAVEDS ASM LIB_TS_REQ_get_cert_req(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_REQ * a));
void SAVEDS ASM LIB_X509_CRL_set_meth_data(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * crl), REG(a1, void * dat));
int SAVEDS ASM LIB_PKCS8_pkey_set0(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS8_PRIV_KEY_INFO * priv), REG(a1, ASN1_OBJECT * aobj), REG(d0, int version), REG(d1, int ptype), REG(a2, void * pval), REG(a3, unsigned char * penc), REG(d2, int penclen));
int SAVEDS ASM LIB_ASN1_STRING_copy(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * dst), REG(a1, const ASN1_STRING * str));
int SAVEDS ASM LIB_X509_CRL_match(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_CRL * a), REG(a1, const X509_CRL * b));
void SAVEDS ASM LIB_EVP_PKEY_asn1_set_private(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_ASN1_METHOD * ameth), REG(a1, int (*priv_decode)(EVP_PKEY *pk, PKCS8_PRIV_KEY_INFO *p8inf)), REG(a2, int (*priv_encode)(PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pk)), REG(a3, int (*priv_print)(BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx)));
void * SAVEDS ASM LIB_TS_TST_INFO_get_ext_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(d0, int nid), REG(a1, int * crit), REG(a2, int * idx));
int SAVEDS ASM LIB_TS_RESP_CTX_add_policy(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(a1, ASN1_OBJECT * policy));
TS_RESP * SAVEDS ASM LIB_d2i_TS_RESP(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
STACK_OF(X509) * SAVEDS ASM LIB_TS_CONF_load_certs(REG(a6, __IFACE_OR_BASE), REG(a0, const char * file));
TS_MSG_IMPRINT * SAVEDS ASM LIB_TS_TST_INFO_get_msg_imprint(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a));
void SAVEDS ASM LIB_ERR_load_TS_strings(REG(a6, __IFACE_OR_BASE));
long SAVEDS ASM LIB_TS_TST_INFO_get_version(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_TST_INFO * a));
EVP_PKEY_CTX * SAVEDS ASM LIB_EVP_PKEY_CTX_dup(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_verify(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*verify_init)(EVP_PKEY_CTX *ctx)), REG(a2, int (*verify)(EVP_PKEY_CTX *ctx, const unsigned char *sig, size_t siglen, const unsigned char *tbs, size_t tbslen)));
int SAVEDS ASM LIB_i2b_PublicKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, EVP_PKEY * pk));
int SAVEDS ASM LIB_TS_CONF_set_certs(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section), REG(a2, const char * certs), REG(a3, TS_RESP_CTX * ctx));
int SAVEDS ASM LIB_EVP_PKEY_asn1_get0_info(REG(a6, __IFACE_OR_BASE), REG(a0, int * ppkey_id), REG(a1, int * ppkey_base_id), REG(a2, int * ppkey_flags), REG(a3, const char ** pinfo), REG(a4, const char ** ppem_str), REG(d0, const EVP_PKEY_ASN1_METHOD * ameth));
void SAVEDS ASM LIB_TS_VERIFY_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, TS_VERIFY_CTX * ctx));
int SAVEDS ASM LIB_TS_REQ_get_ext_by_critical(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a), REG(d0, int crit), REG(d1, int lastpos));
void SAVEDS ASM LIB_TS_RESP_CTX_set_serial_cb(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(d0, TS_serial_cb cb), REG(a1, void * data));
void * SAVEDS ASM LIB_X509_CRL_get_meth_data(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * crl));
void SAVEDS ASM LIB_TS_RESP_CTX_set_time_cb(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(d0, TS_time_cb cb), REG(a1, void * data));
ASN1_OCTET_STRING * SAVEDS ASM LIB_TS_MSG_IMPRINT_get_msg(REG(a6, __IFACE_OR_BASE), REG(a0, TS_MSG_IMPRINT * a));
void SAVEDS ASM LIB_TS_TST_INFO_ext_free(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a));
long SAVEDS ASM LIB_TS_REQ_get_version(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_REQ * a));
int SAVEDS ASM LIB_TS_REQ_add_ext(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a), REG(a1, X509_EXTENSION * ex), REG(d0, int loc));
void SAVEDS ASM LIB_EVP_PKEY_CTX_set_app_data(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, void * data));
const void * SAVEDS ASM LIB_OBJ_bsearch_(REG(a6, __IFACE_OR_BASE), REG(a0, const void * key), REG(a1, const void * base), REG(d0, int num), REG(d1, int size), REG(a2, int (*cmp)(const void *, const void *)));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_verifyctx(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*verifyctx_init)(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)), REG(a2, int (*verifyctx)(EVP_PKEY_CTX *ctx, const unsigned char *sig,int siglen, EVP_MD_CTX *mctx)));
int SAVEDS ASM LIB_i2d_PKCS7_bio_stream(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, PKCS7 * p7), REG(a2, BIO * in), REG(d0, int flags));
void SAVEDS ASM LIB_CRYPTO_THREADID_set_numeric(REG(a6, __IFACE_OR_BASE), REG(a0, CRYPTO_THREADID * id), REG(d0, unsigned long val));
PKCS7_SIGNER_INFO * SAVEDS ASM LIB_PKCS7_sign_add_signer(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, X509 * signcert), REG(a2, EVP_PKEY * pkey), REG(a3, const EVP_MD * md), REG(d0, int flags));
TS_TST_INFO * SAVEDS ASM LIB_d2i_TS_TST_INFO_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, TS_TST_INFO ** a));
int SAVEDS ASM LIB_TS_TST_INFO_get_ordering(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_TST_INFO * a));
int SAVEDS ASM LIB_TS_RESP_print_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, TS_RESP * a));
STACK_OF(X509_EXTENSION) * SAVEDS ASM LIB_TS_TST_INFO_get_exts(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a));
X509_ALGOR * SAVEDS ASM LIB_PKCS5_pbe2_set_iv(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher), REG(d0, int iter), REG(a1, unsigned char * salt), REG(d1, int saltlen), REG(a2, unsigned char * aiv), REG(d2, int prf_nid));
EVP_PKEY * SAVEDS ASM LIB_b2i_PrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char ** in), REG(d0, long length));
void * SAVEDS ASM LIB_EVP_PKEY_CTX_get_app_data(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
int SAVEDS ASM LIB_TS_REQ_set_cert_req(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a), REG(d0, int cert_req));
int SAVEDS ASM LIB_CRYPTO_THREADID_set_callback(REG(a6, __IFACE_OR_BASE), REG(a0, void (*threadid_func)(CRYPTO_THREADID *)));
int SAVEDS ASM LIB_TS_CONF_set_serial(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section), REG(a2, TS_serial_cb cb), REG(a3, TS_RESP_CTX * ctx));
void SAVEDS ASM LIB_TS_TST_INFO_free(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a));
int SAVEDS ASM LIB_TS_RESP_verify_response(REG(a6, __IFACE_OR_BASE), REG(a0, TS_VERIFY_CTX * ctx), REG(a1, TS_RESP * response));
int SAVEDS ASM LIB_i2d_ESS_ISSUER_SERIAL(REG(a6, __IFACE_OR_BASE), REG(a0, const ESS_ISSUER_SERIAL * a), REG(a1, unsigned char ** pp));
const ASN1_INTEGER * SAVEDS ASM LIB_TS_ACCURACY_get_seconds(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_ACCURACY * a));
void SAVEDS ASM LIB_EVP_CIPHER_do_all(REG(a6, __IFACE_OR_BASE), REG(a0, void (*fn)(const EVP_CIPHER *ciph, const char *from, const char *to, void *x)), REG(a1, void * arg));
EVP_PKEY * SAVEDS ASM LIB_b2i_PrivateKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in));
OCSP_CERTID * SAVEDS ASM LIB_OCSP_CERTID_dup(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_CERTID * a));
int SAVEDS ASM LIB_X509_PUBKEY_get0_param(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_OBJECT ** ppkalg), REG(a1, const unsigned char ** pk), REG(a2, int * ppklen), REG(a3, X509_ALGOR ** pa), REG(a4, X509_PUBKEY * pub));
TS_MSG_IMPRINT * SAVEDS ASM LIB_TS_MSG_IMPRINT_dup(REG(a6, __IFACE_OR_BASE), REG(a0, TS_MSG_IMPRINT * a));
void SAVEDS ASM LIB_PKCS7_print_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, PKCS7 * x), REG(d0, int indent), REG(a2, const ASN1_PCTX * pctx));
int SAVEDS ASM LIB_i2d_TS_REQ_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * fp), REG(a1, TS_REQ * a));
void SAVEDS ASM LIB_EVP_PKEY_asn1_set_param(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_ASN1_METHOD * ameth), REG(a1, int (*param_decode)(EVP_PKEY *pkey, const unsigned char **pder, int derlen)), REG(a2, int (*param_encode)(const EVP_PKEY *pkey, unsigned char **pder)), REG(a3, int (*param_missing)(const EVP_PKEY *pk)), REG(a4, int (*param_copy)(EVP_PKEY *to, const EVP_PKEY *from)), REG(d0, int (*param_cmp)(const EVP_PKEY *a, const EVP_PKEY *b)), REG(d1, int (*param_print)(BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx)));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*encrypt_init)(EVP_PKEY_CTX *ctx)), REG(a2, int (*encryptfn)(EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen)));
void SAVEDS ASM LIB_ASN1_PCTX_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_PCTX * p), REG(d0, unsigned long flags));
int SAVEDS ASM LIB_i2d_ESS_CERT_ID(REG(a6, __IFACE_OR_BASE), REG(a0, const ESS_CERT_ID * a), REG(a1, unsigned char ** pp));
TS_VERIFY_CTX * SAVEDS ASM LIB_TS_VERIFY_CTX_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_TS_RESP_CTX_set_extension_cb(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(a1, TS_extension_cb cb), REG(a2, void * data));
int SAVEDS ASM LIB_TS_RESP_CTX_set_status_info_cond(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(d0, int status), REG(a1, const char * text));
int SAVEDS ASM LIB_EVP_PKEY_verify(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const unsigned char * sig), REG(d0, size_t siglen), REG(a2, const unsigned char * tbs), REG(d1, size_t tbslen));
X509_CRL_METHOD * SAVEDS ASM LIB_X509_CRL_METHOD_new(REG(a6, __IFACE_OR_BASE), REG(a0, int (*crl_init)(X509_CRL *crl)), REG(a1, int (*crl_free)(X509_CRL *crl)), REG(a2, int (*crl_lookup)(X509_CRL *crl, X509_REVOKED **ret, ASN1_INTEGER *ser, X509_NAME *issuer)), REG(a3, int (*crl_verify)(X509_CRL *crl, EVP_PKEY *pk)));
int SAVEDS ASM LIB_EVP_DigestSignFinal(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, unsigned char * sigret), REG(a2, size_t * siglen));
int SAVEDS ASM LIB_TS_RESP_CTX_set_def_policy(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(a1, ASN1_OBJECT * def_policy));
TS_RESP * SAVEDS ASM LIB_TS_RESP_create_response(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(a1, BIO * req_bio));
void SAVEDS ASM LIB_PKCS7_SIGNER_INFO_get0_algs(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * si), REG(a1, EVP_PKEY ** pk), REG(a2, X509_ALGOR ** pdig), REG(a3, X509_ALGOR ** psig));
const ASN1_INTEGER * SAVEDS ASM LIB_TS_TST_INFO_get_nonce(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_TST_INFO * a));
int SAVEDS ASM LIB_EVP_PKEY_decrypt_old(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * dec_key), REG(a1, const unsigned char * enc_key), REG(d0, int enc_key_len), REG(a2, EVP_PKEY * private_key));
int SAVEDS ASM LIB_TS_TST_INFO_set_policy_id(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(a1, ASN1_OBJECT * policy_id));
int SAVEDS ASM LIB_TS_CONF_set_ess_cert_id_chain(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section), REG(a2, TS_RESP_CTX * ctx));
EVP_PKEY * SAVEDS ASM LIB_EVP_PKEY_CTX_get0_pkey(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
TS_REQ * SAVEDS ASM LIB_d2i_TS_REQ(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
const EVP_PKEY_ASN1_METHOD * SAVEDS ASM LIB_EVP_PKEY_asn1_find_str(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE ** pe), REG(a1, const char * str), REG(d0, int len));
BIO_METHOD * SAVEDS ASM LIB_BIO_f_asn1(REG(a6, __IFACE_OR_BASE));
ESS_SIGNING_CERT * SAVEDS ASM LIB_ESS_SIGNING_CERT_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_EVP_PBE_find(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(d1, int pbe_nid), REG(a0, int * pcnid), REG(a1, int * pmnid), REG(a2, EVP_PBE_KEYGEN ** pkeygen));
int SAVEDS ASM LIB_X509_CRL_get0_by_cert(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * crl), REG(a1, X509_REVOKED ** ret), REG(a2, X509 * x));
int SAVEDS ASM LIB_EVP_PKEY_derive(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, unsigned char * key), REG(a2, size_t * keylen));
int SAVEDS ASM LIB_i2d_TS_REQ(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_REQ * a), REG(a1, unsigned char ** pp));
X509_EXTENSION * SAVEDS ASM LIB_TS_TST_INFO_delete_ext(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(d0, int loc));
void SAVEDS ASM LIB_ESS_ISSUER_SERIAL_free(REG(a6, __IFACE_OR_BASE), REG(a0, ESS_ISSUER_SERIAL * a));
void SAVEDS ASM LIB_ASN1_PCTX_set_str_flags(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_PCTX * p), REG(d0, unsigned long flags));
int SAVEDS ASM LIB_TS_CONF_set_signer_key(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section), REG(a2, const char * key), REG(a3, const char * pass), REG(a4, TS_RESP_CTX * ctx));
const ASN1_INTEGER * SAVEDS ASM LIB_TS_ACCURACY_get_millis(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_ACCURACY * a));
PKCS7 * SAVEDS ASM LIB_TS_RESP_get_token(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP * a));
TS_ACCURACY * SAVEDS ASM LIB_TS_ACCURACY_dup(REG(a6, __IFACE_OR_BASE), REG(a0, TS_ACCURACY * a));
void SAVEDS ASM LIB_X509_CRL_set_default_method(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_CRL_METHOD * meth));
unsigned long SAVEDS ASM LIB_CRYPTO_THREADID_hash(REG(a6, __IFACE_OR_BASE), REG(a0, const CRYPTO_THREADID * id));
void SAVEDS ASM LIB_TS_RESP_free(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP * a));
void SAVEDS ASM LIB_ISSUING_DIST_POINT_free(REG(a6, __IFACE_OR_BASE), REG(a0, ISSUING_DIST_POINT * a));
ESS_ISSUER_SERIAL * SAVEDS ASM LIB_ESS_ISSUER_SERIAL_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_PKCS7_add1_attrib_digest(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * si), REG(a1, const unsigned char * md), REG(d0, int mdlen));
int SAVEDS ASM LIB_TS_RESP_CTX_add_md(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(a1, const EVP_MD * md));
TS_TST_INFO * SAVEDS ASM LIB_TS_TST_INFO_dup(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a));
int SAVEDS ASM LIB_PEM_write_bio_Parameters(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EVP_PKEY * x));
TS_ACCURACY * SAVEDS ASM LIB_TS_TST_INFO_get_accuracy(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a));
int SAVEDS ASM LIB_X509_CRL_get0_by_serial(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * crl), REG(a1, X509_REVOKED ** ret), REG(a2, ASN1_INTEGER * serial));
int SAVEDS ASM LIB_TS_TST_INFO_set_version(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(d0, long version));
TS_TST_INFO * SAVEDS ASM LIB_TS_RESP_CTX_get_tst_info(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx));
int SAVEDS ASM LIB_TS_RESP_verify_signature(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * token), REG(a1, STACK_OF(X509) * certs), REG(a2, X509_STORE * store), REG(a3, X509 ** signer_out));
void  SAVEDS ASM (*LIB_CRYPTO_THREADID_get_callback(REG(a6, __IFACE_OR_BASE)))(CRYPTO_THREADID *);
GENERAL_NAME * SAVEDS ASM LIB_TS_TST_INFO_get_tsa(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a));
TS_STATUS_INFO * SAVEDS ASM LIB_TS_STATUS_INFO_new(REG(a6, __IFACE_OR_BASE));
int  SAVEDS ASM (*LIB_EVP_PKEY_CTX_get_cb(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx)))(EVP_PKEY_CTX *ctx);
void * SAVEDS ASM LIB_TS_REQ_get_ext_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a), REG(d0, int nid), REG(a1, int * crit), REG(d1, int * idx));
int SAVEDS ASM LIB_GENERAL_NAME_set0_othername(REG(a6, __IFACE_OR_BASE), REG(a0, GENERAL_NAME * gen), REG(a1, ASN1_OBJECT * oid), REG(a2, ASN1_TYPE * value));
int SAVEDS ASM LIB_TS_TST_INFO_get_ext_count(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a));
TS_REQ * SAVEDS ASM LIB_TS_RESP_CTX_get_request(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx));
int SAVEDS ASM LIB_i2d_NETSCAPE_X509(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_X509 * a), REG(a1, unsigned char ** out));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_signctx(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*signctx_init)(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)), REG(a2, int (*signctx)(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, EVP_MD_CTX *mctx)));
void SAVEDS ASM LIB_EVP_PKEY_asn1_copy(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_ASN1_METHOD * dst), REG(a1, const EVP_PKEY_ASN1_METHOD * src));
int SAVEDS ASM LIB_ASN1_TYPE_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TYPE * a), REG(a1, ASN1_TYPE * b));
void SAVEDS ASM LIB_EVP_CIPHER_do_all_sorted(REG(a6, __IFACE_OR_BASE), REG(a0, void (*fn)(const EVP_CIPHER *ciph, const char *from, const char *to, void *x)), REG(a1, void * arg));
void SAVEDS ASM LIB_EVP_PKEY_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
STACK_OF(X509) * SAVEDS ASM LIB_X509_STORE_get1_certs(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * st), REG(a1, X509_NAME * nm));
int SAVEDS ASM LIB_EVP_PKEY_CTX_get_operation(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
ESS_SIGNING_CERT * SAVEDS ASM LIB_d2i_ESS_SIGNING_CERT(REG(a6, __IFACE_OR_BASE), REG(a0, ESS_SIGNING_CERT ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
int SAVEDS ASM LIB_TS_CONF_set_ordering(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section), REG(a2, TS_RESP_CTX * ctx));
int SAVEDS ASM LIB_EVP_PBE_alg_add_type(REG(a6, __IFACE_OR_BASE), REG(d0, int pbe_type), REG(d1, int pbe_nid), REG(d2, int cipher_nid), REG(d3, int md_nid), REG(a0, EVP_PBE_KEYGEN * keygen));
int SAVEDS ASM LIB_TS_REQ_set_version(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a), REG(d0, long version));
void * SAVEDS ASM LIB_EVP_PKEY_get0(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey));
int SAVEDS ASM LIB_BIO_asn1_set_suffix(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, asn1_ps_func * suffix), REG(a2, asn1_ps_func * suffix_free));
int SAVEDS ASM LIB_i2d_TS_STATUS_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_STATUS_INFO * a), REG(a1, unsigned char ** pp));
void SAVEDS ASM LIB_EVP_MD_do_all(REG(a6, __IFACE_OR_BASE), REG(a0, void (*fn)(const EVP_MD *ciph, const char *from, const char *to, void *x)), REG(a1, void * arg));
int SAVEDS ASM LIB_TS_TST_INFO_set_accuracy(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(a1, TS_ACCURACY * accuracy));
int SAVEDS ASM LIB_PKCS7_add_attrib_content_type(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * si), REG(a1, ASN1_OBJECT * coid));
int SAVEDS ASM LIB_EVP_PKEY_meth_add0(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_METHOD * pmeth));
int SAVEDS ASM LIB_TS_TST_INFO_set_tsa(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(a1, GENERAL_NAME * tsa));
EVP_PKEY_METHOD * SAVEDS ASM LIB_EVP_PKEY_meth_new(REG(a6, __IFACE_OR_BASE), REG(d0, int id), REG(d1, int flags));
int SAVEDS ASM LIB_TS_CONF_set_accuracy(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section), REG(a2, TS_RESP_CTX * ctx));
void SAVEDS ASM LIB_ASN1_PCTX_set_oid_flags(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_PCTX * p), REG(d0, unsigned long flags));
ESS_SIGNING_CERT * SAVEDS ASM LIB_ESS_SIGNING_CERT_dup(REG(a6, __IFACE_OR_BASE), REG(a0, ESS_SIGNING_CERT * a));
TS_REQ * SAVEDS ASM LIB_d2i_TS_REQ_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * fp), REG(a1, TS_REQ ** a));
ASN1_TIME * SAVEDS ASM LIB_X509_time_adj_ex(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TIME * s), REG(d0, int offset_day), REG(d1, long offset_sec), REG(a1, time_t * t));
void SAVEDS ASM LIB_TS_RESP_CTX_add_flags(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(d0, int flags));
TS_STATUS_INFO * SAVEDS ASM LIB_d2i_TS_STATUS_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, TS_STATUS_INFO ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
int SAVEDS ASM LIB_TS_MSG_IMPRINT_set_msg(REG(a6, __IFACE_OR_BASE), REG(a0, TS_MSG_IMPRINT * a), REG(a1, unsigned char * d), REG(d0, int len));
int SAVEDS ASM LIB_BIO_asn1_get_suffix(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, asn1_ps_func ** psuffix), REG(a2, asn1_ps_func ** psuffix_free));
void SAVEDS ASM LIB_TS_REQ_free(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a));
void SAVEDS ASM LIB_EVP_PKEY_meth_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth));
STACK_OF(X509_EXTENSION) * SAVEDS ASM LIB_TS_REQ_get_exts(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a));
int SAVEDS ASM LIB_TS_RESP_CTX_set_clock_precision_digits(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(d0, unsigned clock_precision_digits));
int SAVEDS ASM LIB_TS_RESP_CTX_add_failure_info(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(d0, int failure));
int SAVEDS ASM LIB_i2d_TS_RESP_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * fp), REG(a1, TS_RESP * a));
EVP_PKEY * SAVEDS ASM LIB_EVP_PKEY_CTX_get0_peerkey(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
TS_REQ * SAVEDS ASM LIB_TS_REQ_new(REG(a6, __IFACE_OR_BASE));
TS_MSG_IMPRINT * SAVEDS ASM LIB_TS_MSG_IMPRINT_new(REG(a6, __IFACE_OR_BASE));
const EVP_PKEY_METHOD * SAVEDS ASM LIB_EVP_PKEY_meth_find(REG(a6, __IFACE_OR_BASE), REG(a0, int type));
int SAVEDS ASM LIB_EVP_PKEY_id(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey));
int SAVEDS ASM LIB_TS_TST_INFO_set_serial(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(a1, const ASN1_INTEGER * serial));
GENERAL_NAME * SAVEDS ASM LIB_a2i_GENERAL_NAME(REG(a6, __IFACE_OR_BASE), REG(a0, GENERAL_NAME * out), REG(a1, const X509V3_EXT_METHOD * method), REG(a2, X509V3_CTX * ctx), REG(d0, int gen_type), REG(a3, char * value), REG(d1, int is_nc));
int SAVEDS ASM LIB_TS_CONF_set_crypto_device(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section), REG(a2, const char * device));
int SAVEDS ASM LIB_EVP_PKEY_verify_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
int SAVEDS ASM LIB_TS_CONF_set_policies(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section), REG(a2, TS_RESP_CTX * ctx));
ASN1_PCTX * SAVEDS ASM LIB_ASN1_PCTX_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ESS_CERT_ID_free(REG(a6, __IFACE_OR_BASE), REG(a0, ESS_CERT_ID * a));
void SAVEDS ASM LIB_TS_MSG_IMPRINT_free(REG(a6, __IFACE_OR_BASE), REG(a0, TS_MSG_IMPRINT * a));
void SAVEDS ASM LIB_TS_VERIFY_CTX_init(REG(a6, __IFACE_OR_BASE), REG(a0, TS_VERIFY_CTX * ctx));
int SAVEDS ASM LIB_PKCS7_stream(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char *** boundary), REG(a1, PKCS7 * p7));
int SAVEDS ASM LIB_TS_RESP_CTX_set_certs(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(a1, STACK_OF(X509) * certs));
int SAVEDS ASM LIB_TS_CONF_set_def_policy(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section), REG(a2, const char * policy), REG(a3, TS_RESP_CTX * ctx));
ASN1_GENERALIZEDTIME * SAVEDS ASM LIB_ASN1_GENERALIZEDTIME_adj(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_GENERALIZEDTIME * s), REG(d0, time_t t), REG(d1, int offset_day), REG(d2, long offset_sec));
NETSCAPE_X509 * SAVEDS ASM LIB_NETSCAPE_X509_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_TS_ACCURACY_free(REG(a6, __IFACE_OR_BASE), REG(a0, TS_ACCURACY * a));
TS_TST_INFO * SAVEDS ASM LIB_TS_RESP_get_tst_info(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP * a));
int SAVEDS ASM LIB_EVP_PKEY_derive_set_peer(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, EVP_PKEY * peer));
EVP_PKEY * SAVEDS ASM LIB_PEM_read_bio_Parameters(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EVP_PKEY ** x));
int SAVEDS ASM LIB_TS_CONF_set_clock_precision_digits(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section), REG(a2, TS_RESP_CTX * ctx));
ESS_ISSUER_SERIAL * SAVEDS ASM LIB_ESS_ISSUER_SERIAL_dup(REG(a6, __IFACE_OR_BASE), REG(a0, ESS_ISSUER_SERIAL * a));
const ASN1_INTEGER * SAVEDS ASM LIB_TS_ACCURACY_get_micros(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_ACCURACY * a));
unsigned long SAVEDS ASM LIB_ASN1_PCTX_get_str_flags(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_PCTX * p));
int SAVEDS ASM LIB_NAME_CONSTRAINTS_check(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, NAME_CONSTRAINTS * nc));
int SAVEDS ASM LIB_ASN1_BIT_STRING_check(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_BIT_STRING * a), REG(a1, unsigned char * flags), REG(d0, int flags_len));
int SAVEDS ASM LIB_X509_check_akid(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * issuer), REG(a1, AUTHORITY_KEYID * akid));
void SAVEDS ASM LIB_ASN1_PCTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_PCTX * p));
int SAVEDS ASM LIB_PEM_write_bio_ASN1_stream(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, ASN1_VALUE * val), REG(a2, BIO * in), REG(d0, int flags), REG(a3, const char * hdr), REG(a4, const ASN1_ITEM * it));
int SAVEDS ASM LIB_i2d_ASN1_bio_stream(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, ASN1_VALUE * val), REG(a2, BIO * in), REG(d0, int flags), REG(a3, const ASN1_ITEM * it));
int SAVEDS ASM LIB_TS_X509_ALGOR_print_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, const X509_ALGOR * alg));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_cleanup(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, void (*cleanup)(EVP_PKEY_CTX *ctx)));
void SAVEDS ASM LIB_EVP_PKEY_asn1_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_ASN1_METHOD * ameth));
void SAVEDS ASM LIB_ESS_SIGNING_CERT_free(REG(a6, __IFACE_OR_BASE), REG(a0, ESS_SIGNING_CERT * a));
int SAVEDS ASM LIB_TS_TST_INFO_set_msg_imprint(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(a1, TS_MSG_IMPRINT * msg_imprint));
int SAVEDS ASM LIB_GENERAL_NAME_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, GENERAL_NAME * a), REG(a1, GENERAL_NAME * b));
ASN1_SEQUENCE_ANY * SAVEDS ASM LIB_d2i_ASN1_SET_ANY(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_SEQUENCE_ANY ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
ASN1_SEQUENCE_ANY * SAVEDS ASM LIB_d2i_ASN1_SEQUENCE_ANY(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_SEQUENCE_ANY ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
int SAVEDS ASM LIB_GENERAL_NAME_get0_otherName(REG(a6, __IFACE_OR_BASE), REG(a0, GENERAL_NAME * gen), REG(a1, ASN1_OBJECT ** poid), REG(a2, ASN1_TYPE ** pvalue));
ESS_CERT_ID * SAVEDS ASM LIB_d2i_ESS_CERT_ID(REG(a6, __IFACE_OR_BASE), REG(a0, ESS_CERT_ID ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
int SAVEDS ASM LIB_OBJ_find_sigid_algs(REG(a6, __IFACE_OR_BASE), REG(d0, int signid), REG(a0, int * pdig_nid), REG(a1, int * ppkey_nid));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_keygen(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*keygen_init)(EVP_PKEY_CTX *ctx)), REG(a2, int (*keygen)(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)));
int SAVEDS ASM LIB_PKCS5_PBKDF2_HMAC(REG(a6, __IFACE_OR_BASE), REG(a0, const char * pass), REG(d0, int passlen), REG(a1, const unsigned char * salt), REG(d1, int saltlen), REG(d2, int iter), REG(a2, const EVP_MD * digest), REG(d3, int keylen), REG(a3, unsigned char * out));
int SAVEDS ASM LIB_EVP_PKEY_paramgen(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, EVP_PKEY ** ppkey));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_paramgen(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*paramgen_init)(EVP_PKEY_CTX *ctx)), REG(a2, int (*paramgen)(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)));
BIO * SAVEDS ASM LIB_BIO_new_PKCS7(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, PKCS7 * p7));
int SAVEDS ASM LIB_EVP_PKEY_verify_recover(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, unsigned char * rout), REG(a2, size_t * routlen), REG(a3, const unsigned char * sig), REG(d0, size_t siglen));
int SAVEDS ASM LIB_TS_ext_print_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, STACK_OF(X509_EXTENSION) * extensions));
int SAVEDS ASM LIB_TS_ASN1_INTEGER_print_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, const ASN1_INTEGER * num));
void SAVEDS ASM LIB_check_defer(REG(a6, __IFACE_OR_BASE), REG(d0, int nid));
int SAVEDS ASM LIB_DSO_pathbyaddr(REG(a6, __IFACE_OR_BASE), REG(a0, void * addr), REG(a1, char * path), REG(d0, int sz));
int SAVEDS ASM LIB_EVP_PKEY_set_type(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(d0, int type));
int SAVEDS ASM LIB_TS_ACCURACY_set_micros(REG(a6, __IFACE_OR_BASE), REG(a0, TS_ACCURACY * a), REG(a1, const ASN1_INTEGER * micros));
TS_VERIFY_CTX * SAVEDS ASM LIB_TS_REQ_to_TS_VERIFY_CTX(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * req), REG(a1, TS_VERIFY_CTX * ctx));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_copy(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*copy)(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)));
void SAVEDS ASM LIB_ASN1_PCTX_set_cert_flags(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_PCTX * p), REG(d0, unsigned long flags));
X509_EXTENSION * SAVEDS ASM LIB_TS_TST_INFO_get_ext(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(d0, int loc));
void SAVEDS ASM LIB_EVP_PKEY_asn1_set_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_ASN1_METHOD * ameth), REG(a1, int (*pkey_ctrl)(EVP_PKEY *pkey, int op, long arg1, void *arg2)));
int SAVEDS ASM LIB_TS_TST_INFO_get_ext_by_critical(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(d0, int crit), REG(d1, int lastpos));
EVP_PKEY_CTX * SAVEDS ASM LIB_EVP_PKEY_CTX_new_id(REG(a6, __IFACE_OR_BASE), REG(d0, int id), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_TS_REQ_get_ext_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a), REG(a1, ASN1_OBJECT * obj), REG(d0, int lastpos));
int SAVEDS ASM LIB_TS_CONF_set_signer_cert(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section), REG(a2, const char * cert), REG(a3, TS_RESP_CTX * ctx));
unsigned long SAVEDS ASM LIB_X509_NAME_hash_old(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * x));
int SAVEDS ASM LIB_ASN1_TIME_set_string(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TIME * s), REG(a1, const char * str));
unsigned long SAVEDS ASM LIB_EVP_MD_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md));
void SAVEDS ASM LIB_TS_RESP_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx));
int SAVEDS ASM LIB_OCSP_REQ_CTX_add1_header(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQ_CTX * rctx), REG(a1, const char * name), REG(a2, const char * value));
int SAVEDS ASM LIB_OCSP_REQ_CTX_set1_req(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQ_CTX * rctx), REG(a1, OCSP_REQUEST * req));
void SAVEDS ASM LIB_X509_STORE_set_verify_cb(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * ctx), REG(a1, int (*verify_cb)(int, X509_STORE_CTX *)));
X509_CRL * SAVEDS ASM LIB_X509_STORE_CTX_get0_current_crl(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx));
X509_STORE_CTX * SAVEDS ASM LIB_X509_STORE_CTX_get0_parent_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx));
X509 * SAVEDS ASM LIB_X509_STORE_CTX_get0_current_issuer(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_copy(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * out), REG(a1, const EVP_CIPHER_CTX * in));
char * SAVEDS ASM (*LIB_UI_method_get_prompt_constructor(REG(a6, __IFACE_OR_BASE), REG(a0, UI_METHOD * method)))(UI*, const char*, const char*);
int SAVEDS ASM LIB_UI_method_set_prompt_constructor(REG(a6, __IFACE_OR_BASE), REG(a0, UI_METHOD * method), REG(a1, char *(*prompt_constructor)(UI* ui, const char* object_desc, const char* object_name)));
int SAVEDS ASM LIB_EVP_read_pw_string_min(REG(a6, __IFACE_OR_BASE), REG(a0, char * buf), REG(d0, int minlen), REG(d1, int maxlen), REG(a1, const char * prompt), REG(d2, int verify));
size_t SAVEDS ASM LIB_CRYPTO_cts128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(a4, cbc128_f cbc));
size_t SAVEDS ASM LIB_CRYPTO_cts128_decrypt_block(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(a4, block128_f block));
void SAVEDS ASM LIB_CRYPTO_cfb128_1_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t bits), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(a4, int * num), REG(d1, int enc), REG(d2, block128_f block));
void SAVEDS ASM LIB_CRYPTO_cbc128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(a4, block128_f block));
void SAVEDS ASM LIB_CRYPTO_ctr128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(a4, unsigned char * ecount_buf), REG(d1, unsigned int * num), REG(d2, block128_f block));
void SAVEDS ASM LIB_CRYPTO_ofb128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(a4, int * num), REG(d1, block128_f block));
size_t SAVEDS ASM LIB_CRYPTO_cts128_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(a4, cbc128_f cbc));
size_t SAVEDS ASM LIB_CRYPTO_cts128_encrypt_block(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(a4, block128_f block));
void SAVEDS ASM LIB_CRYPTO_cbc128_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(a4, block128_f block));
void SAVEDS ASM LIB_CRYPTO_cfb128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(a4, int * num), REG(d1, int enc), REG(d2, block128_f block));
void SAVEDS ASM LIB_CRYPTO_cfb128_8_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t length), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(a4, int * num), REG(d1, int enc), REG(d2, block128_f block));
int SAVEDS ASM LIB_OPENSSL_strcasecmp(REG(a6, __IFACE_OR_BASE), REG(a0, const char * str1), REG(a1, const char * str2));
int SAVEDS ASM LIB_OPENSSL_memcmp(REG(a6, __IFACE_OR_BASE), REG(a0, const void * p1), REG(a1, const void * p2), REG(d0, size_t n));
int SAVEDS ASM LIB_OPENSSL_strncasecmp(REG(a6, __IFACE_OR_BASE), REG(a0, const char * str1), REG(a1, const char * str2), REG(d0, size_t n));
struct tm * SAVEDS ASM LIB_OPENSSL_gmtime(REG(a6, __IFACE_OR_BASE), REG(a0, const time_t * timer), REG(a1, struct tm * result));
int SAVEDS ASM LIB_OPENSSL_gmtime_adj(REG(a6, __IFACE_OR_BASE), REG(a0, struct tm * tm), REG(d0, int offset_day), REG(d1, long offset_sec));
void SAVEDS ASM LIB_EVP_PKEY_meth_get0_info(REG(a6, __IFACE_OR_BASE), REG(a0, int * ppkey_id), REG(a1, int * pflags), REG(a2, const EVP_PKEY_METHOD * meth));
void SAVEDS ASM LIB_EVP_PKEY_meth_copy(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * dst), REG(a1, const EVP_PKEY_METHOD * src));
int SAVEDS ASM LIB_RSA_padding_add_PKCS1_PSS_mgf1(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * rsa), REG(a1, unsigned char * EM), REG(a2, const unsigned char * mHash), REG(a3, const EVP_MD * Hash), REG(a4, const EVP_MD * mgf1Hash), REG(d0, int sLen));
int SAVEDS ASM LIB_RSA_verify_PKCS1_PSS_mgf1(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * rsa), REG(a1, const unsigned char * mHash), REG(a2, const EVP_MD * Hash), REG(a3, const EVP_MD * mgf1Hash), REG(a4, const unsigned char * EM), REG(d0, int sLen));
void SAVEDS ASM LIB_X509_ALGOR_set_md(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ALGOR * alg), REG(a1, const EVP_MD * md));
int SAVEDS ASM LIB_CMAC_CTX_copy(REG(a6, __IFACE_OR_BASE), REG(a0, CMAC_CTX * out), REG(a1, const CMAC_CTX * in));
void SAVEDS ASM LIB_CMAC_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, CMAC_CTX * ctx));
EVP_CIPHER_CTX * SAVEDS ASM LIB_CMAC_CTX_get0_cipher_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, CMAC_CTX * ctx));
void SAVEDS ASM LIB_CMAC_CTX_cleanup(REG(a6, __IFACE_OR_BASE), REG(a0, CMAC_CTX * ctx));
int SAVEDS ASM LIB_CMAC_Init(REG(a6, __IFACE_OR_BASE), REG(a0, CMAC_CTX * ctx), REG(a1, const void * key), REG(d0, size_t keylen), REG(a2, const EVP_CIPHER * cipher), REG(a3, ENGINE * impl));
int SAVEDS ASM LIB_CMAC_Update(REG(a6, __IFACE_OR_BASE), REG(a0, CMAC_CTX * ctx), REG(a1, const void * data), REG(d0, size_t dlen));
int SAVEDS ASM LIB_CMAC_resume(REG(a6, __IFACE_OR_BASE), REG(a0, CMAC_CTX * ctx));
CMAC_CTX * SAVEDS ASM LIB_CMAC_CTX_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_CMAC_Final(REG(a6, __IFACE_OR_BASE), REG(a0, CMAC_CTX * ctx), REG(a1, unsigned char * out), REG(a2, size_t * poutlen));
void SAVEDS ASM LIB_CRYPTO_ctr128_encrypt_ctr32(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(a4, unsigned char * ecount_buf), REG(d1, unsigned int * num), REG(d2, ctr128_f ctr));
void SAVEDS ASM LIB_CRYPTO_gcm128_release(REG(a6, __IFACE_OR_BASE), REG(a0, GCM128_CONTEXT * ctx));
int SAVEDS ASM LIB_CRYPTO_ccm128_decrypt_ccm64(REG(a6, __IFACE_OR_BASE), REG(a0, CCM128_CONTEXT * ctx), REG(a1, const unsigned char * inp), REG(a2, unsigned char * out), REG(d0, size_t len), REG(a3, ccm128_f stream));
int SAVEDS ASM LIB_CRYPTO_ccm128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, CCM128_CONTEXT * ctx), REG(a1, const unsigned char * inp), REG(a2, unsigned char * out), REG(d0, size_t len));
int SAVEDS ASM LIB_CRYPTO_gcm128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, GCM128_CONTEXT * ctx), REG(a1, const unsigned char * in), REG(a2, unsigned char * out), REG(d0, size_t len));
int SAVEDS ASM LIB_CRYPTO_xts128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, XTS128_CONTEXT * ctx), REG(a1, const unsigned char * iv), REG(a2, const unsigned char * inp), REG(a3, unsigned char * out), REG(d0, size_t len), REG(d1, int enc));
size_t SAVEDS ASM LIB_CRYPTO_nistcts128_decrypt_block(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(d1, unsigned char * ivec), REG(a3, block128_f block));
void SAVEDS ASM LIB_CRYPTO_gcm128_setiv(REG(a6, __IFACE_OR_BASE), REG(a0, GCM128_CONTEXT * ctx), REG(a1, const unsigned char * iv), REG(d0, size_t len));
size_t SAVEDS ASM LIB_CRYPTO_nistcts128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(a4, cbc128_f cbc));
void SAVEDS ASM LIB_CRYPTO_gcm128_tag(REG(a6, __IFACE_OR_BASE), REG(a0, GCM128_CONTEXT * ctx), REG(a1, unsigned char * tag), REG(d0, size_t len));
int SAVEDS ASM LIB_CRYPTO_ccm128_encrypt_ccm64(REG(a6, __IFACE_OR_BASE), REG(a0, CCM128_CONTEXT * ctx), REG(a1, const unsigned char * inp), REG(a2, unsigned char * out), REG(d0, size_t len), REG(a3, ccm128_f stream));
int SAVEDS ASM LIB_CRYPTO_ccm128_setiv(REG(a6, __IFACE_OR_BASE), REG(a0, CCM128_CONTEXT * ctx), REG(a1, const unsigned char * nonce), REG(d0, size_t nlen), REG(d1, size_t mlen));
size_t SAVEDS ASM LIB_CRYPTO_nistcts128_encrypt_block(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(a4, block128_f block));
int SAVEDS ASM LIB_CRYPTO_gcm128_aad(REG(a6, __IFACE_OR_BASE), REG(a0, GCM128_CONTEXT * ctx), REG(a1, const unsigned char * aad), REG(d0, size_t len));
void SAVEDS ASM LIB_CRYPTO_ccm128_init(REG(a6, __IFACE_OR_BASE), REG(a0, CCM128_CONTEXT * ctx), REG(d0, unsigned int M), REG(d1, unsigned int L), REG(a1, void * key), REG(a2, block128_f block));
size_t SAVEDS ASM LIB_CRYPTO_nistcts128_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(a4, cbc128_f cbc));
GCM128_CONTEXT * SAVEDS ASM LIB_CRYPTO_gcm128_new(REG(a6, __IFACE_OR_BASE), REG(a0, void * key), REG(a1, block128_f block));
size_t SAVEDS ASM LIB_CRYPTO_ccm128_tag(REG(a6, __IFACE_OR_BASE), REG(a0, CCM128_CONTEXT * ctx), REG(a1, unsigned char * tag), REG(d0, size_t len));
int SAVEDS ASM LIB_CRYPTO_ccm128_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, CCM128_CONTEXT * ctx), REG(a1, const unsigned char * inp), REG(a2, unsigned char * out), REG(d0, size_t len));
void SAVEDS ASM LIB_CRYPTO_ccm128_aad(REG(a6, __IFACE_OR_BASE), REG(a0, CCM128_CONTEXT * ctx), REG(a1, const unsigned char * aad), REG(d0, size_t alen));
void SAVEDS ASM LIB_CRYPTO_gcm128_init(REG(a6, __IFACE_OR_BASE), REG(a0, GCM128_CONTEXT * ctx), REG(a1, void * key), REG(a2, block128_f block));
int SAVEDS ASM LIB_CRYPTO_gcm128_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, GCM128_CONTEXT * ctx), REG(a1, const unsigned char * in), REG(a2, unsigned char * out), REG(d0, size_t len));
int SAVEDS ASM LIB_CRYPTO_gcm128_decrypt_ctr32(REG(a6, __IFACE_OR_BASE), REG(a0, GCM128_CONTEXT * ctx), REG(a1, const unsigned char * in), REG(a2, unsigned char * out), REG(d0, size_t len), REG(a3, ctr128_f stream));
int SAVEDS ASM LIB_CRYPTO_gcm128_encrypt_ctr32(REG(a6, __IFACE_OR_BASE), REG(a0, GCM128_CONTEXT * ctx), REG(a1, const unsigned char * in), REG(a2, unsigned char * out), REG(d0, size_t len), REG(a3, ctr128_f stream));
int SAVEDS ASM LIB_CRYPTO_gcm128_finish(REG(a6, __IFACE_OR_BASE), REG(a0, GCM128_CONTEXT * ctx), REG(a1, const unsigned char * tag), REG(d0, size_t len));
X509_ALGOR * SAVEDS ASM LIB_PKCS5_pbkdf2_set(REG(a6, __IFACE_OR_BASE), REG(d0, int iter), REG(a0, unsigned char * salt), REG(d1, int saltlen), REG(d2, int prf_nid), REG(d3, int keylen));
RSA_PSS_PARAMS * SAVEDS ASM LIB_RSA_PSS_PARAMS_new(REG(a6, __IFACE_OR_BASE));
RSA_PSS_PARAMS * SAVEDS ASM LIB_d2i_RSA_PSS_PARAMS(REG(a6, __IFACE_OR_BASE), REG(a0, RSA_PSS_PARAMS ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
void SAVEDS ASM LIB_RSA_PSS_PARAMS_free(REG(a6, __IFACE_OR_BASE), REG(a0, RSA_PSS_PARAMS * a));
int SAVEDS ASM LIB_i2d_RSA_PSS_PARAMS(REG(a6, __IFACE_OR_BASE), REG(a0, RSA_PSS_PARAMS * a), REG(a1, unsigned char ** out));
void * SAVEDS ASM LIB_OPENSSL_stderr(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_POLICY_MAPPING_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_NAME_CONSTRAINTS_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_OCTET_STRING_NDEF_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_X509_CERT_PAIR_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_POLICY_CONSTRAINTS_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_POLICY_MAPPINGS_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_GENERAL_SUBTREE_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_X509_EXTENSIONS_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_X509_ALGORS_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_CMS_ContentInfo_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_CMS_ReceiptRequest_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_SEQUENCE_ANY_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_SET_ANY_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_NETSCAPE_X509_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_ISSUING_DIST_POINT_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_RSA_PSS_PARAMS_it(REG(a6, __IFACE_OR_BASE));
int * SAVEDS ASM LIB__shadow_DES_rw_mode(REG(a6, __IFACE_OR_BASE));
int * SAVEDS ASM LIB__shadow_DES_check_key(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ENGINE_load_gost(REG(a6, __IFACE_OR_BASE));

#endif /* GLUE_AMISSL_H */
