--- amissl_glue.c	2023-12-08 21:21:37.771112599 +0000
+++ amissl_glue.c_patched	2023-12-08 21:22:36.683115409 +0000
@@ -4,7 +4,13 @@
 
 /***************************************************************************/
 
+#include <internal/cryptlib.h>
+#include <internal/o_dir.h>
+#include <internal/dso.h>
+#include <internal/err.h>
+
 #include "amissl_glue.h"
+#include "amisslext_glue.h"
 
 /***************************************************************************/
 
@@ -14,11 +20,25 @@
 #undef SAVEDS
 #define SAVEDS __attribute__((baserel_restore)) __attribute__ ((noinline))
 #elif defined(__amigaos3__)
-#error insert the correct offset to let the __restore_a4 function restore the correct base relative data segment below and remove this warning
+//#error insert the correct offset to let the __restore_a4 function restore the correct base relative data segment below and remove this warning
 // restore the base relative data segment from the library base address in register a6
 // this function will be called from all non-static functions in this module if it is built with -mrestore-a4
+#include <internal/amissl.h>
+#include "amissl_base.h"
 static const USED_VAR unsigned short __restore_a4[] = { 0x286e, OFFSET(LibraryHeader, dataSeg), 0x4e75 }; // "move.l a6@(dataSeg:w),a4;rts"
-#endif // __amigaos3__
+#elif defined(__MORPHOS__)
+// This function must preserve all registers except r13
+asm("                                                       \n\
+  .section  \".text\"                                       \n\
+  .align 2                                                  \n\
+  .type  __restore_r13, @function                           \n\
+__restore_r13:                                              \n\
+  lwz 13, 36(3) # r13 = MyLibBase->DataSeg                  \n\
+  blr                                                       \n\
+__end__restore_r13:                                         \n\
+  .size __restore_r13, __end__restore_r13 - __restore_r13   \n\
+");
+#endif // __MORPHOS__
 #endif // BASEREL
 
 /***************************************************************************/
@@ -30,24 +50,30 @@
 
 // ---
 
+#if 0
 void SAVEDS ASM LIB_InternalInitAmiSSL(REG(a6, UNUSED __IFACE_OR_BASE), REG(a0, void * amisslinit))
 {
 	InternalInitAmiSSL(amisslinit);
 }
+#endif
 
 // ---
 
+#if 0
 long SAVEDS ASM LIB_InitAmiSSLA(REG(a6, UNUSED __IFACE_OR_BASE), REG(a0, struct TagItem * tagList))
 {
 	return InitAmiSSLA(tagList);
 }
+#endif
 
 // ---
 
+#if 0
 long SAVEDS ASM LIB_CleanupAmiSSLA(REG(a6, UNUSED __IFACE_OR_BASE), REG(a0, struct TagItem * tagList))
 {
 	return CleanupAmiSSLA(tagList);
 }
+#endif
 
 // ---
 
@@ -15369,6 +15395,8 @@
 
 // ---
 
+int UI_read_string_lib(UI * ui, UI_STRING * uis);
+
 int SAVEDS ASM LIB_UI_read_string_lib(REG(a6, UNUSED __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, UI_STRING * uis))
 {
 	return UI_read_string_lib(ui, uis);
@@ -15376,6 +15404,8 @@
 
 // ---
 
+int UI_write_string_lib(UI * ui, UI_STRING * uis);
+
 int SAVEDS ASM LIB_UI_write_string_lib(REG(a6, UNUSED __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, UI_STRING * uis))
 {
 	return UI_write_string_lib(ui, uis);
@@ -26466,7 +26496,13 @@
 
 int SAVEDS ASM LIB_OBSOLETE_RSA_X931_derive_ex(REG(a6, UNUSED __IFACE_OR_BASE), REG(a0, RSA * rsa), REG(a1, BIGNUM * p1), REG(a2, BIGNUM * p2), REG(a3, BIGNUM * q1), REG(d0, BIGNUM * q2), REG(d1, const BIGNUM * Xp1), REG(d2, const BIGNUM * Xp2), REG(d3, const BIGNUM * Xp), REG(d4, const BIGNUM * Xq1), REG(d5, const BIGNUM * Xq2), REG(d6, const BIGNUM * Xq), REG(d7, const BIGNUM * e), REG(a4, BN_GENCB * cb))
 {
+#if defined(__amigaos4__)
 	return RSA_X931_derive_ex(rsa, p1, p2, q1, q2, Xp1, Xp2, Xp, Xq1, Xq2, Xq, e, cb);
+#else
+	// This old entry point was unreachable with GCC (LP13A4() impossible),
+	// SAS/C (too many library parameters) and VBCC (will have trashed A4)
+	return 0;
+#endif
 }
 
 // ---
